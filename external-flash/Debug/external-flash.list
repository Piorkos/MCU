
external-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000004  080072f8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b0  2000007c  08007370  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000022c  08007370  0002022c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022eb6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d65  00000000  00000000  00042f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c38  00000000  00000000  00046cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b18  00000000  00000000  00048900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000278b1  00000000  00000000  0004a418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ab0f  00000000  00000000  00071cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f1310  00000000  00000000  0008c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0017dae8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093c0  00000000  00000000  0017db3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08007098 	.word	0x08007098

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08007098 	.word	0x08007098

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000532:	f107 020f 	add.w	r2, r7, #15
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2301      	movs	r3, #1
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <W25qxx_Spi+0x28>)
 8000540:	f003 fe2f 	bl	80041a2 <HAL_SPI_TransmitReceive>
	return ret;
 8000544:	7bfb      	ldrb	r3, [r7, #15]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000d8 	.word	0x200000d8

08000554 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	2300      	movs	r3, #0
 8000568:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2110      	movs	r1, #16
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f001 fcd3 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000576:	209f      	movs	r0, #159	; 0x9f
 8000578:	f7ff ffd6 	bl	8000528 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800057c:	20a5      	movs	r0, #165	; 0xa5
 800057e:	f7ff ffd3 	bl	8000528 <W25qxx_Spi>
 8000582:	4603      	mov	r3, r0
 8000584:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000586:	20a5      	movs	r0, #165	; 0xa5
 8000588:	f7ff ffce 	bl	8000528 <W25qxx_Spi>
 800058c:	4603      	mov	r3, r0
 800058e:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000590:	20a5      	movs	r0, #165	; 0xa5
 8000592:	f7ff ffc9 	bl	8000528 <W25qxx_Spi>
 8000596:	4603      	mov	r3, r0
 8000598:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2110      	movs	r1, #16
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 fcbb 	bl	8001f1c <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	041a      	lsls	r2, r3, #16
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	4313      	orrs	r3, r2
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
  return Temp;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2110      	movs	r1, #16
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f001 fca5 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 80005d2:	204b      	movs	r0, #75	; 0x4b
 80005d4:	f7ff ffa8 	bl	8000528 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	e005      	b.n	80005ea <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80005de:	20a5      	movs	r0, #165	; 0xa5
 80005e0:	f7ff ffa2 	bl	8000528 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	3301      	adds	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d9f6      	bls.n	80005de <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	71bb      	strb	r3, [r7, #6]
 80005f4:	e00b      	b.n	800060e <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80005f6:	79bc      	ldrb	r4, [r7, #6]
 80005f8:	20a5      	movs	r0, #165	; 0xa5
 80005fa:	f7ff ff95 	bl	8000528 <W25qxx_Spi>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <W25qxx_ReadUniqID+0x68>)
 8000604:	4423      	add	r3, r4
 8000606:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	3301      	adds	r3, #1
 800060c:	71bb      	strb	r3, [r7, #6]
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	2b07      	cmp	r3, #7
 8000612:	d9f0      	bls.n	80005f6 <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f001 fc7e 	bl	8001f1c <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	200000b0 	.word	0x200000b0

0800062c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2110      	movs	r1, #16
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f001 fc70 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 800063c:	2006      	movs	r0, #6
 800063e:	f7ff ff73 	bl	8000528 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2110      	movs	r1, #16
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f001 fc67 	bl	8001f1c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f001 f902 	bl	8001858 <HAL_Delay>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2110      	movs	r1, #16
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f001 fc55 	bl	8001f1c <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10c      	bne.n	8000692 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8000678:	2005      	movs	r0, #5
 800067a:	f7ff ff55 	bl	8000528 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800067e:	20a5      	movs	r0, #165	; 0xa5
 8000680:	f7ff ff52 	bl	8000528 <W25qxx_Spi>
 8000684:	4603      	mov	r3, r0
 8000686:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000688:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <W25qxx_ReadStatusRegister+0x88>)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000690:	e01b      	b.n	80006ca <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d10c      	bne.n	80006b2 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8000698:	2035      	movs	r0, #53	; 0x35
 800069a:	f7ff ff45 	bl	8000528 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800069e:	20a5      	movs	r0, #165	; 0xa5
 80006a0:	f7ff ff42 	bl	8000528 <W25qxx_Spi>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <W25qxx_ReadStatusRegister+0x88>)
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80006b0:	e00b      	b.n	80006ca <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80006b2:	2015      	movs	r0, #21
 80006b4:	f7ff ff38 	bl	8000528 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006b8:	20a5      	movs	r0, #165	; 0xa5
 80006ba:	f7ff ff35 	bl	8000528 <W25qxx_Spi>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <W25qxx_ReadStatusRegister+0x88>)
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2110      	movs	r1, #16
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f001 fc23 	bl	8001f1c <HAL_GPIO_WritePin>
	return status;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000b0 	.word	0x200000b0

080006e4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f001 f8b5 	bl	8001858 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f6:	f001 fc11 	bl	8001f1c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80006fa:	2005      	movs	r0, #5
 80006fc:	f7ff ff14 	bl	8000528 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000700:	20a5      	movs	r0, #165	; 0xa5
 8000702:	f7ff ff11 	bl	8000528 <W25qxx_Spi>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <W25qxx_WaitForWriteEnd+0x50>)
 800070c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f001 f8a1 	bl	8001858 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <W25qxx_WaitForWriteEnd+0x50>)
 8000718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1ed      	bne.n	8000700 <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2110      	movs	r1, #16
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f001 fbf6 	bl	8001f1c <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000b0 	.word	0x200000b0

08000738 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;
 800073e:	4b60      	ldr	r3, [pc, #384]	; (80008c0 <W25qxx_Init+0x188>)
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8000746:	e002      	b.n	800074e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f001 f885 	bl	8001858 <HAL_Delay>
	while(HAL_GetTick()<100)
 800074e:	f001 f86b 	bl	8001828 <HAL_GetTick>
 8000752:	4603      	mov	r3, r0
 8000754:	2b63      	cmp	r3, #99	; 0x63
 8000756:	d9f7      	bls.n	8000748 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f001 fbdc 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f001 f877 	bl	8001858 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 800076a:	f7ff fef3 	bl	8000554 <W25qxx_ReadID>
 800076e:	6078      	str	r0, [r7, #4]

	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	b29b      	uxth	r3, r3
 8000774:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000778:	3b11      	subs	r3, #17
 800077a:	2b09      	cmp	r3, #9
 800077c:	d85f      	bhi.n	800083e <W25qxx_Init+0x106>
 800077e:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <W25qxx_Init+0x4c>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	08000831 	.word	0x08000831
 8000788:	08000823 	.word	0x08000823
 800078c:	08000815 	.word	0x08000815
 8000790:	08000807 	.word	0x08000807
 8000794:	080007f9 	.word	0x080007f9
 8000798:	080007eb 	.word	0x080007eb
 800079c:	080007dd 	.word	0x080007dd
 80007a0:	080007cd 	.word	0x080007cd
 80007a4:	080007bd 	.word	0x080007bd
 80007a8:	080007ad 	.word	0x080007ad
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 80007ac:	4b44      	ldr	r3, [pc, #272]	; (80008c0 <W25qxx_Init+0x188>)
 80007ae:	220a      	movs	r2, #10
 80007b0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <W25qxx_Init+0x188>)
 80007b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80007ba:	e046      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 80007bc:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <W25qxx_Init+0x188>)
 80007be:	2209      	movs	r2, #9
 80007c0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <W25qxx_Init+0x188>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80007ca:	e03e      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 80007cc:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <W25qxx_Init+0x188>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <W25qxx_Init+0x188>)
 80007d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 80007da:	e036      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 80007dc:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <W25qxx_Init+0x188>)
 80007de:	2207      	movs	r2, #7
 80007e0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <W25qxx_Init+0x188>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80007e8:	e02f      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <W25qxx_Init+0x188>)
 80007ec:	2206      	movs	r2, #6
 80007ee:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80007f0:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <W25qxx_Init+0x188>)
 80007f2:	2240      	movs	r2, #64	; 0x40
 80007f4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80007f6:	e028      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80007f8:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <W25qxx_Init+0x188>)
 80007fa:	2205      	movs	r2, #5
 80007fc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <W25qxx_Init+0x188>)
 8000800:	2220      	movs	r2, #32
 8000802:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8000804:	e021      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <W25qxx_Init+0x188>)
 8000808:	2204      	movs	r2, #4
 800080a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <W25qxx_Init+0x188>)
 800080e:	2210      	movs	r2, #16
 8000810:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8000812:	e01a      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <W25qxx_Init+0x188>)
 8000816:	2203      	movs	r2, #3
 8000818:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <W25qxx_Init+0x188>)
 800081c:	2208      	movs	r2, #8
 800081e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8000820:	e013      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <W25qxx_Init+0x188>)
 8000824:	2202      	movs	r2, #2
 8000826:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <W25qxx_Init+0x188>)
 800082a:	2204      	movs	r2, #4
 800082c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800082e:	e00c      	b.n	800084a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <W25qxx_Init+0x188>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <W25qxx_Init+0x188>)
 8000838:	2202      	movs	r2, #2
 800083a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 800083c:	e005      	b.n	800084a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <W25qxx_Init+0x188>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8000846:	2300      	movs	r3, #0
 8000848:	e036      	b.n	80008b8 <W25qxx_Init+0x180>

	}
	w25qxx.PageSize=256;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <W25qxx_Init+0x188>)
 800084c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000850:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <W25qxx_Init+0x188>)
 8000854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000858:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <W25qxx_Init+0x188>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <W25qxx_Init+0x188>)
 8000862:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <W25qxx_Init+0x188>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <W25qxx_Init+0x188>)
 800086a:	6912      	ldr	r2, [r2, #16]
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <W25qxx_Init+0x188>)
 8000872:	8952      	ldrh	r2, [r2, #10]
 8000874:	fbb3 f3f2 	udiv	r3, r3, r2
 8000878:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <W25qxx_Init+0x188>)
 800087a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <W25qxx_Init+0x188>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <W25qxx_Init+0x188>)
 8000884:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <W25qxx_Init+0x188>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <W25qxx_Init+0x188>)
 800088c:	6912      	ldr	r2, [r2, #16]
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	0a9b      	lsrs	r3, r3, #10
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <W25qxx_Init+0x188>)
 8000896:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8000898:	f7ff fe92 	bl	80005c0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fedb 	bl	8000658 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fed8 	bl	8000658 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f7ff fed5 	bl	8000658 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <W25qxx_Init+0x188>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000b0 	.word	0x200000b0

080008c4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 80008cc:	e002      	b.n	80008d4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 ffc2 	bl	8001858 <HAL_Delay>
	while(w25qxx.Lock==1)
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <W25qxx_EraseSector+0xa4>)
 80008d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d0f7      	beq.n	80008ce <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <W25qxx_EraseSector+0xa4>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 80008e6:	f7ff fefd 	bl	80006e4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <W25qxx_EraseSector+0xa4>)
 80008ec:	691a      	ldr	r2, [r3, #16]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	fb02 f303 	mul.w	r3, r2, r3
 80008f4:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 80008f6:	f7ff fe99 	bl	800062c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f001 fb0b 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 8000906:	2020      	movs	r0, #32
 8000908:	f7ff fe0e 	bl	8000528 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <W25qxx_EraseSector+0xa4>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d905      	bls.n	8000920 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	0e1b      	lsrs	r3, r3, #24
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe04 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fdfe 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fdf8 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fdf3 	bl	8000528 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2110      	movs	r1, #16
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f001 fae7 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800094e:	f7ff fec9 	bl	80006e4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 ff80 	bl	8001858 <HAL_Delay>
	w25qxx.Lock=0;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <W25qxx_EraseSector+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000b0 	.word	0x200000b0

0800096c <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <W25qxx_SectorToPage+0x28>)
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	fb02 f303 	mul.w	r3, r2, r3
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <W25qxx_SectorToPage+0x28>)
 8000980:	8952      	ldrh	r2, [r2, #10]
 8000982:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200000b0 	.word	0x200000b0

08000998 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80009a6:	e002      	b.n	80009ae <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 ff55 	bl	8001858 <HAL_Delay>
	while(w25qxx.Lock==1)
 80009ae:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <W25qxx_WritePage+0xf8>)
 80009b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d0f7      	beq.n	80009a8 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 80009b8:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <W25qxx_WritePage+0xf8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <W25qxx_WritePage+0xf8>)
 80009c8:	8952      	ldrh	r2, [r2, #10]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d802      	bhi.n	80009d4 <W25qxx_WritePage+0x3c>
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d105      	bne.n	80009e0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 80009d4:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <W25qxx_WritePage+0xf8>)
 80009d6:	895b      	ldrh	r3, [r3, #10]
 80009d8:	461a      	mov	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <W25qxx_WritePage+0xf8>)
 80009e8:	8952      	ldrh	r2, [r2, #10]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d905      	bls.n	80009fa <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <W25qxx_WritePage+0xf8>)
 80009f0:	895b      	ldrh	r3, [r3, #10]
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	W25qxx_WaitForWriteEnd();
 80009fa:	f7ff fe73 	bl	80006e4 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80009fe:	f7ff fe15 	bl	800062c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2110      	movs	r1, #16
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f001 fa87 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fd8a 	bl	8000528 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <W25qxx_WritePage+0xf8>)
 8000a16:	895b      	ldrh	r3, [r3, #10]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	fb03 f302 	mul.w	r3, r3, r2
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <W25qxx_WritePage+0xf8>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b08      	cmp	r3, #8
 8000a2c:	d905      	bls.n	8000a3a <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	0e1b      	lsrs	r3, r3, #24
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fd77 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	0c1b      	lsrs	r3, r3, #16
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fd71 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd6b 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd66 	bl	8000528 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <W25qxx_WritePage+0xfc>)
 8000a66:	f003 f8fe 	bl	8003c66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f001 fa53 	bl	8001f1c <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000a76:	f7ff fe35 	bl	80006e4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 feec 	bl	8001858 <HAL_Delay>
	w25qxx.Lock=0;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <W25qxx_WritePage+0xf8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	200000d8 	.word	0x200000d8

08000a98 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d802      	bhi.n	8000ab6 <W25qxx_WriteSector+0x1e>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d243      	bcs.n	8000b4e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	441a      	add	r2, r3
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d905      	bls.n	8000ae0 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000ad6:	691a      	ldr	r2, [r3, #16]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	e001      	b.n	8000ae4 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	f7ff ff41 	bl	800096c <W25qxx_SectorToPage>
 8000aea:	4602      	mov	r2, r0
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000aee:	895b      	ldrh	r3, [r3, #10]
 8000af0:	4619      	mov	r1, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af8:	4413      	add	r3, r2
 8000afa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000afe:	895b      	ldrh	r3, [r3, #10]
 8000b00:	461a      	mov	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b08:	fb02 f201 	mul.w	r2, r2, r1
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	69f9      	ldr	r1, [r7, #28]
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff ff3e 	bl	8000998 <W25qxx_WritePage>
		StartPage++;
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000b24:	895b      	ldrh	r3, [r3, #10]
 8000b26:	461a      	mov	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	1a9a      	subs	r2, r3, r2
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	4413      	add	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <W25qxx_WriteSector+0xc0>)
 8000b34:	895b      	ldrh	r3, [r3, #10]
 8000b36:	461a      	mov	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dce1      	bgt.n	8000b10 <W25qxx_WriteSector+0x78>
 8000b4c:	e000      	b.n	8000b50 <W25qxx_WriteSector+0xb8>
		return;
 8000b4e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000b0 	.word	0x200000b0

08000b5c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000b6a:	e002      	b.n	8000b72 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 fe73 	bl	8001858 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000b72:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000b74:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d0f7      	beq.n	8000b6c <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 8000b84:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000b86:	895b      	ldrh	r3, [r3, #10]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d802      	bhi.n	8000b96 <W25qxx_ReadPage+0x3a>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000b98:	895b      	ldrh	r3, [r3, #10]
 8000b9a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a29      	ldr	r2, [pc, #164]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000ba4:	8952      	ldrh	r2, [r2, #10]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d905      	bls.n	8000bb6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000bac:	895b      	ldrh	r3, [r3, #10]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000bb8:	895b      	ldrh	r3, [r3, #10]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	fb03 f302 	mul.w	r3, r3, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2110      	movs	r1, #16
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd0:	f001 f9a4 	bl	8001f1c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f7ff fca7 	bl	8000528 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d905      	bls.n	8000bee <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0e1b      	lsrs	r3, r3, #24
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fc9d 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	0c1b      	lsrs	r3, r3, #16
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fc97 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fc91 	bl	8000528 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc8c 	bl	8000528 <W25qxx_Spi>
	W25qxx_Spi(0);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fc89 	bl	8000528 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <W25qxx_ReadPage+0xf0>)
 8000c20:	f003 f98f 	bl	8003f42 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2110      	movs	r1, #16
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f001 f976 	bl	8001f1c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f000 fe11 	bl	8001858 <HAL_Delay>
	w25qxx.Lock=0;
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <W25qxx_ReadPage+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000b0 	.word	0x200000b0
 8000c4c:	200000d8 	.word	0x200000d8

08000c50 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d802      	bhi.n	8000c6e <W25qxx_ReadSector+0x1e>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d243      	bcs.n	8000d06 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	441a      	add	r2, r3
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d905      	bls.n	8000c98 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	e001      	b.n	8000c9c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8000c9c:	68b8      	ldr	r0, [r7, #8]
 8000c9e:	f7ff fe65 	bl	800096c <W25qxx_SectorToPage>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000ca6:	895b      	ldrh	r3, [r3, #10]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000cb6:	895b      	ldrh	r3, [r3, #10]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cc0:	fb02 f201 	mul.w	r2, r2, r1
 8000cc4:	1a9b      	subs	r3, r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	69f9      	ldr	r1, [r7, #28]
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff ff44 	bl	8000b5c <W25qxx_ReadPage>
		StartPage++;
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000cdc:	895b      	ldrh	r3, [r3, #10]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	1a9a      	subs	r2, r3, r2
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <W25qxx_ReadSector+0xc0>)
 8000cec:	895b      	ldrh	r3, [r3, #10]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	dce1      	bgt.n	8000cc8 <W25qxx_ReadSector+0x78>
 8000d04:	e000      	b.n	8000d08 <W25qxx_ReadSector+0xb8>
		return;
 8000d06:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000b0 	.word	0x200000b0

08000d14 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d38:	68fb      	ldr	r3, [r7, #12]
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	2004      	movs	r0, #4
 8000d5e:	f7ff ffd9 	bl	8000d14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2080      	movs	r0, #128	; 0x80
 8000d64:	f7ff ffd6 	bl	8000d14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff ffd3 	bl	8000d14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff ffd0 	bl	8000d14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d74:	2010      	movs	r0, #16
 8000d76:	f7ff ffcd 	bl	8000d14 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2008      	movs	r0, #8
 8000d7c:	f7ff ffca 	bl	8000d14 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2110      	movs	r1, #16
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f001 f8c8 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000d8c:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000d90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d92:	2303      	movs	r3, #3
 8000d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4827      	ldr	r0, [pc, #156]	; (8000e3c <MX_GPIO_Init+0xf4>)
 8000da0:	f000 ff4c 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da4:	2308      	movs	r3, #8
 8000da6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	2303      	movs	r3, #3
 8000daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <MX_GPIO_Init+0xf8>)
 8000db6:	f000 ff41 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10
                           PB11 PB0 PB1 PB12
                           PB13 PB14 PB15 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10
 8000dba:	f64f 7337 	movw	r3, #65335	; 0xff37
 8000dbe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481d      	ldr	r0, [pc, #116]	; (8000e44 <MX_GPIO_Init+0xfc>)
 8000dce:	f000 ff35 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dd2:	f649 730f 	movw	r3, #40719	; 0x9f0f
 8000dd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f000 ff28 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000dec:	2310      	movs	r3, #16
 8000dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f000 ff1a 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <MX_GPIO_Init+0x100>)
 8000e1a:	f000 ff0f 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_GPIO_Init+0x104>)
 8000e30:	f000 ff04 	bl	8001c3c <HAL_GPIO_Init>

}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	48001c00 	.word	0x48001c00
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48001000 	.word	0x48001000
 8000e4c:	48000c00 	.word	0x48000c00

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e56:	f000 fc79 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5a:	f000 f83f 	bl	8000edc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f7ff ff73 	bl	8000d48 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000e62:	f000 fb41 	bl	80014e8 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000e66:	f000 fbb5 	bl	80015d4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000e6a:	f000 f957 	bl	800111c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <main+0x78>)
 8000e70:	f003 fdb6 	bl	80049e0 <HAL_TIM_Base_Start_IT>
  printf("Timer16 Start \n");
 8000e74:	4815      	ldr	r0, [pc, #84]	; (8000ecc <main+0x7c>)
 8000e76:	f005 fa2f 	bl	80062d8 <puts>

  W25qxx_Init();
 8000e7a:	f7ff fc5d 	bl	8000738 <W25qxx_Init>
  W25qxx_EraseSector(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fd20 	bl	80008c4 <W25qxx_EraseSector>
  W25qxx_WriteSector(write_buffer, 1, 0, 8);
 8000e84:	2308      	movs	r3, #8
 8000e86:	2200      	movs	r2, #0
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <main+0x80>)
 8000e8c:	f7ff fe04 	bl	8000a98 <W25qxx_WriteSector>
  W25qxx_ReadSector(read_buffer, 1, 0, 8);
 8000e90:	2308      	movs	r3, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <main+0x84>)
 8000e98:	f7ff feda 	bl	8000c50 <W25qxx_ReadSector>

  std::string name = "test";
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 f805 	bl	8005eb0 <_ZNSaIcEC1Ev>
 8000ea6:	f107 021c 	add.w	r2, r7, #28
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <main+0x88>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 f85a 	bl	8005f68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 fffa 	bl	8005eb2 <_ZNSaIcED1Ev>

  name.length();
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 f82b 	bl	8005f1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <main+0x76>
 8000ec8:	2000013c 	.word	0x2000013c
 8000ecc:	080070b0 	.word	0x080070b0
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	20000098 	.word	0x20000098
 8000ed8:	080070c0 	.word	0x080070c0

08000edc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ae      	sub	sp, #184	; 0xb8
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ee6:	2248      	movs	r2, #72	; 0x48
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 f8bc 	bl	8006068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2250      	movs	r2, #80	; 0x50
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 f8ac 	bl	8006068 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <_Z18SystemClock_Configv+0x134>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f18:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <_Z18SystemClock_Configv+0x134>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <_Z18SystemClock_Configv+0x134>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000f2c:	2322      	movs	r3, #34	; 0x22
 8000f2e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f48:	2360      	movs	r3, #96	; 0x60
 8000f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f60:	2320      	movs	r3, #32
 8000f62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fb76 	bl	8002674 <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000f98:	f000 f874 	bl	8001084 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f9c:	236f      	movs	r3, #111	; 0x6f
 8000f9e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fee4 	bl	8002d8c <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000fd4:	f000 f856 	bl	8001084 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 8000fd8:	f242 0301 	movw	r3, #8193	; 0x2001
 8000fdc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fb10 	bl	8003612 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <_Z18SystemClock_Configv+0x12a>
  {
    Error_Handler();
 8001002:	f000 f83f 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001006:	bf00      	nop
 8001008:	37b8      	adds	r7, #184	; 0xb8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58000400 	.word	0x58000400

08001014 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d11a      	bne.n	800105c <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		printf("read[0] = %d \n", read_buffer[0]);
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800102e:	f005 f8cd 	bl	80061cc <iprintf>
		printf("read[4] = %d \n", read_buffer[4]);
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001034:	791b      	ldrb	r3, [r3, #4]
 8001036:	4619      	mov	r1, r3
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800103a:	f005 f8c7 	bl	80061cc <iprintf>
		printf("write[0] = %d \n", write_buffer[0]);
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001046:	f005 f8c1 	bl	80061cc <iprintf>
		printf("write[4] = %d \n", write_buffer[4]);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	4619      	mov	r1, r3
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001052:	f005 f8bb 	bl	80061cc <iprintf>
		printf("timer event 4 \n");
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001058:	f005 f93e 	bl	80062d8 <puts>
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40014400 	.word	0x40014400
 8001068:	20000098 	.word	0x20000098
 800106c:	080070c8 	.word	0x080070c8
 8001070:	080070d8 	.word	0x080070d8
 8001074:	20000004 	.word	0x20000004
 8001078:	080070e8 	.word	0x080070e8
 800107c:	080070f8 	.word	0x080070f8
 8001080:	08007108 	.word	0x08007108

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <__io_putchar>:
#define __PRINTF_TO_UART_H__

#include "usart.h"

int __io_putchar(char ch)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 800109a:	1df9      	adds	r1, r7, #7
 800109c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a0:	2201      	movs	r2, #1
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <__io_putchar+0x24>)
 80010a4:	f003 ff24 	bl	8004ef0 <HAL_UART_Transmit>
	return ch;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000188 	.word	0x20000188

080010b8 <LL_AHB2_GRP1_EnableClock>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010dc:	68fb      	ldr	r3, [r7, #12]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_SPI1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_SPI1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_SPI1_Init+0x74>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_SPI1_Init+0x74>)
 8001136:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800113a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_SPI1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_SPI1_Init+0x74>)
 800114a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_SPI1_Init+0x74>)
 8001152:	2228      	movs	r2, #40	; 0x28
 8001154:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_SPI1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_SPI1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SPI1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_SPI1_Init+0x74>)
 800116a:	2207      	movs	r2, #7
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_SPI1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_SPI1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_SPI1_Init+0x74>)
 800117c:	f002 fcd0 	bl	8003b20 <HAL_SPI_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001186:	f7ff ff7d 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000d8 	.word	0x200000d8
 8001194:	40013000 	.word	0x40013000

08001198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_SPI_MspInit+0x5c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d117      	bne.n	80011ea <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011be:	f7ff ff94 	bl	80010ea <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff ff78 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011c8:	23e0      	movs	r3, #224	; 0xe0
 80011ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d8:	2305      	movs	r3, #5
 80011da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f000 fd29 	bl	8001c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013000 	.word	0x40013000

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120a:	e7fe      	b.n	800120a <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <HardFault_Handler+0x4>

08001212 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <BusFault_Handler+0x4>

0800121e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <UsageFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 fad5 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001262:	f003 fc0b 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000013c 	.word	0x2000013c

08001270 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <USART1_IRQHandler+0x10>)
 8001276:	f003 fed1 	bl	800501c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000188 	.word	0x20000188

08001284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	return 1;
 8001288:	2301      	movs	r3, #1
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_kill>:

int _kill(int pid, int sig)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800129e:	f004 fea3 	bl	8005fe8 <__errno>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2216      	movs	r2, #22
 80012a6:	601a      	str	r2, [r3, #0]
	return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_exit>:

void _exit (int status)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffe7 	bl	8001294 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012c6:	e7fe      	b.n	80012c6 <_exit+0x12>

080012c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e00a      	b.n	80012f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012da:	f3af 8000 	nop.w
 80012de:	4601      	mov	r1, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf0      	blt.n	80012da <_read+0x12>
	}

return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e009      	b.n	8001328 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff feb7 	bl	8001090 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf1      	blt.n	8001314 <_write+0x12>
	}
	return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	605a      	str	r2, [r3, #4]
	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_isatty>:

int _isatty(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f004 fe08 	bl	8005fe8 <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20030000 	.word	0x20030000
 8001404:	00000400 	.word	0x00000400
 8001408:	200000a0 	.word	0x200000a0
 800140c:	20000230 	.word	0x20000230

08001410 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <SystemInit+0x98>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <SystemInit+0x98>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001438:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800143c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <SystemInit+0x9c>)
 800144a:	4013      	ands	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800144e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145a:	f023 0305 	bic.w	r3, r3, #5
 800145e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800146a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <SystemInit+0xa0>)
 800147c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <SystemInit+0xa0>)
 8001484:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00
 80014ac:	faf6fefb 	.word	0xfaf6fefb
 80014b0:	22041000 	.word	0x22041000

080014b4 <LL_APB2_GRP1_EnableClock>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d8:	68fb      	ldr	r3, [r7, #12]
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_TIM16_Init+0x48>)
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <MX_TIM16_Init+0x4c>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3199;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_TIM16_Init+0x48>)
 80014f4:	f640 427f 	movw	r2, #3199	; 0xc7f
 80014f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_TIM16_Init+0x48>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_TIM16_Init+0x48>)
 8001502:	f242 720f 	movw	r2, #9999	; 0x270f
 8001506:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_TIM16_Init+0x48>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_TIM16_Init+0x48>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_TIM16_Init+0x48>)
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM16_Init+0x48>)
 800151c:	f003 fa08 	bl	8004930 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001526:	f7ff fdad 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000013c 	.word	0x2000013c
 8001534:	40014400 	.word	0x40014400

08001538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_TIM_Base_MspInit+0x34>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10b      	bne.n	8001562 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800154a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800154e:	f7ff ffb1 	bl	80014b4 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2019      	movs	r0, #25
 8001558:	f000 fa7d 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800155c:	2019      	movs	r0, #25
 800155e:	f000 fa94 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40014400 	.word	0x40014400

08001570 <LL_AHB2_GRP1_EnableClock>:
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800157e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001594:	68fb      	ldr	r3, [r7, #12]
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_APB2_GRP1_EnableClock>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <MX_USART1_UART_Init+0x94>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <MX_USART1_UART_Init+0x90>)
 800161e:	f003 fc17 	bl	8004e50 <HAL_UART_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001628:	f7ff fd2c 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001630:	f004 fb74 	bl	8005d1c <HAL_UARTEx_SetTxFifoThreshold>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800163a:	f7ff fd23 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001642:	f004 fba9 	bl	8005d98 <HAL_UARTEx_SetRxFifoThreshold>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800164c:	f7ff fd1a 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001652:	f004 fb2a 	bl	8005caa <HAL_UARTEx_DisableFifoMode>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800165c:	f7ff fd12 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000188 	.word	0x20000188
 8001668:	40013800 	.word	0x40013800

0800166c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <HAL_UART_MspInit+0x68>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d11e      	bne.n	80016cc <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001692:	f7ff ff86 	bl	80015a2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff ff6a 	bl	8001570 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800169c:	23c0      	movs	r3, #192	; 0xc0
 800169e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ac:	2307      	movs	r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <HAL_UART_MspInit+0x6c>)
 80016b8:	f000 fac0 	bl	8001c3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2024      	movs	r0, #36	; 0x24
 80016c2:	f000 f9c8 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c6:	2024      	movs	r0, #36	; 0x24
 80016c8:	f000 f9df 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40013800 	.word	0x40013800
 80016d8:	48000400 	.word	0x48000400

080016dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80016dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e0:	3304      	adds	r3, #4

080016e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80016e6:	d3f9      	bcc.n	80016dc <CopyDataInit>
  bx lr
 80016e8:	4770      	bx	lr

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80016ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80016ec:	3004      	adds	r0, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80016ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>
  bx lr
 80016f2:	4770      	bx	lr

080016f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80016f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016f8:	f7ff fe8a 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016fc:	480b      	ldr	r0, [pc, #44]	; (800172c <LoopForever+0x8>)
 80016fe:	490c      	ldr	r1, [pc, #48]	; (8001730 <LoopForever+0xc>)
 8001700:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <LoopForever+0x10>)
 8001702:	2300      	movs	r3, #0
 8001704:	f7ff ffed 	bl	80016e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <LoopForever+0x14>)
 800170a:	490c      	ldr	r1, [pc, #48]	; (800173c <LoopForever+0x18>)
 800170c:	2300      	movs	r3, #0
 800170e:	f7ff ffee 	bl	80016ee <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <LoopForever+0x1c>)
 8001714:	490b      	ldr	r1, [pc, #44]	; (8001744 <LoopForever+0x20>)
 8001716:	2300      	movs	r3, #0
 8001718:	f7ff ffe9 	bl	80016ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800171c:	f004 fc6a 	bl	8005ff4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001720:	f7ff fb96 	bl	8000e50 <main>

08001724 <LoopForever>:

LoopForever:
  b LoopForever
 8001724:	e7fe      	b.n	8001724 <LoopForever>
 8001726:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001728:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800172c:	20000004 	.word	0x20000004
 8001730:	2000007c 	.word	0x2000007c
 8001734:	080072f8 	.word	0x080072f8
  INIT_BSS _sbss, _ebss
 8001738:	2000007c 	.word	0x2000007c
 800173c:	2000022c 	.word	0x2000022c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001740:	20030000 	.word	0x20030000
 8001744:	20030000 	.word	0x20030000

08001748 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_Init+0x3c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_Init+0x3c>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001762:	2003      	movs	r0, #3
 8001764:	f000 f96c 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001768:	2000      	movs	r0, #0
 800176a:	f000 f80f 	bl	800178c <HAL_InitTick>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	e001      	b.n	800177e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800177a:	f7ff fd3d 	bl	80011f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800177e:	79fb      	ldrb	r3, [r7, #7]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58004000 	.word	0x58004000

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_InitTick+0x6c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d024      	beq.n	80017ea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017a0:	f001 fca2 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_InitTick+0x6c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f974 	bl	8001aa6 <HAL_SYSTICK_Config>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10f      	bne.n	80017e4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d809      	bhi.n	80017de <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ca:	2200      	movs	r2, #0
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d2:	f000 f940 	bl	8001a56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_InitTick+0x70>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e007      	b.n	80017ee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e004      	b.n	80017ee <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e001      	b.n	80017ee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000014 	.word	0x20000014
 80017fc:	20000010 	.word	0x20000010

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000014 	.word	0x20000014
 8001824:	20000218 	.word	0x20000218

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000218 	.word	0x20000218

08001840 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTickPrio+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000010 	.word	0x20000010

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffe2 	bl	8001828 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffd2 	bl	8001828 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
    {
    }
  }
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000014 	.word	0x20000014

080018a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db0b      	blt.n	800192e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <__NVIC_EnableIRQ+0x38>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2001      	movs	r0, #1
 8001926:	fa00 f202 	lsl.w	r2, r0, r2
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff29 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff40 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff33 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa4 	bl	80019fc <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e04f      	b.n	8001b70 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d008      	beq.n	8001aee <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e040      	b.n	8001b70 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 020e 	bic.w	r2, r2, #14
 8001afc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f003 021c 	and.w	r2, r3, #28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b3a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b5c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d005      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e047      	b.n	8001c30 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 020e 	bic.w	r2, r2, #14
 8001bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f003 021c 	and.w	r2, r3, #28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00c      	beq.n	8001c10 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
    }
  }
  return status;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	e14c      	b.n	8001ee6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 813e 	beq.w	8001ee0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d00b      	beq.n	8001c84 <HAL_GPIO_Init+0x48>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d007      	beq.n	8001c84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c78:	2b11      	cmp	r3, #17
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	d130      	bne.n	8001ce6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 0201 	and.w	r2, r3, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0xea>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d123      	bne.n	8001d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	6939      	ldr	r1, [r7, #16]
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8098 	beq.w	8001ee0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001db0:	4a54      	ldr	r2, [pc, #336]	; (8001f04 <HAL_GPIO_Init+0x2c8>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dda:	d019      	beq.n	8001e10 <HAL_GPIO_Init+0x1d4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <HAL_GPIO_Init+0x2cc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d013      	beq.n	8001e0c <HAL_GPIO_Init+0x1d0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a49      	ldr	r2, [pc, #292]	; (8001f0c <HAL_GPIO_Init+0x2d0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00d      	beq.n	8001e08 <HAL_GPIO_Init+0x1cc>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_GPIO_Init+0x2d4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d007      	beq.n	8001e04 <HAL_GPIO_Init+0x1c8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_GPIO_Init+0x2d8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d101      	bne.n	8001e00 <HAL_GPIO_Init+0x1c4>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e008      	b.n	8001e12 <HAL_GPIO_Init+0x1d6>
 8001e00:	2307      	movs	r3, #7
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x1d6>
 8001e04:	2303      	movs	r3, #3
 8001e06:	e004      	b.n	8001e12 <HAL_GPIO_Init+0x1d6>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x1d6>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_GPIO_Init+0x1d6>
 8001e10:	2300      	movs	r3, #0
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e22:	4938      	ldr	r1, [pc, #224]	; (8001f04 <HAL_GPIO_Init+0x2c8>)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e56:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e84:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_GPIO_Init+0x2dc>)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f47f aeab 	bne.w	8001c4c <HAL_GPIO_Init+0x10>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	40010000 	.word	0x40010000
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	48000c00 	.word	0x48000c00
 8001f14:	48001000 	.word	0x48001000
 8001f18:	58000800 	.word	0x58000800

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	58000400 	.word	0x58000400

08001f6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	58000400 	.word	0x58000400

08001f88 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9a:	d101      	bne.n	8001fa0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ffa:	d101      	bne.n	8002000 <LL_RCC_HSE_IsReady+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_RCC_HSE_IsReady+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d101      	bne.n	8002060 <LL_RCC_HSI_IsReady+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_RCC_HSI_IsReady+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d101      	bne.n	80020f2 <LL_RCC_HSI48_IsReady+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_RCC_HSI48_IsReady+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d101      	bne.n	800219e <LL_RCC_LSE_IsReady+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_RCC_LSE_IsReady+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d101      	bne.n	8002206 <LL_RCC_LSI1_IsReady+0x18>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_RCC_LSI1_IsReady+0x1a>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b08      	cmp	r3, #8
 8002268:	d101      	bne.n	800226e <LL_RCC_LSI2_IsReady+0x18>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <LL_RCC_LSI2_IsReady+0x1a>
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6013      	str	r3, [r2, #0]
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d101      	bne.n	80022fa <LL_RCC_MSI_IsReady+0x16>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_RCC_MSI_IsReady+0x18>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800233e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2bb0      	cmp	r3, #176	; 0xb0
 8002344:	d901      	bls.n	800234a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002346:	23b0      	movs	r3, #176	; 0xb0
 8002348:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800234a:	687b      	ldr	r3, [r7, #4]
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002546:	d101      	bne.n	800254c <LL_RCC_PLL_IsReady+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_RCC_PLL_IsReady+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0303 	and.w	r3, r3, #3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d101      	bne.n	80025d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f2:	d101      	bne.n	80025f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002618:	d101      	bne.n	800261e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800263c:	d101      	bne.n	8002642 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002660:	d101      	bne.n	8002666 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b08d      	sub	sp, #52	; 0x34
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e37e      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8092 	beq.w	80027b8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002694:	f7ff fe89 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002698:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269a:	f7ff ff82 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 800269e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3e>
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d14c      	bne.n	8002746 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d149      	bne.n	8002746 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b2:	f7ff fe17 	bl	80022e4 <LL_RCC_MSI_IsReady>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x54>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e35d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026cc:	f7ff fe2f 	bl	800232e <LL_RCC_MSI_GetRange>
 80026d0:	4603      	mov	r3, r0
 80026d2:	429c      	cmp	r4, r3
 80026d4:	d914      	bls.n	8002700 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fd44 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e34c      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe09 	bl	8002306 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fe2d 	bl	8002358 <LL_RCC_MSI_SetCalibTrimming>
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fdfe 	bl	8002306 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fe22 	bl	8002358 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fd25 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e32d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002728:	f000 fcde 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 800272c:	4603      	mov	r3, r0
 800272e:	4ab3      	ldr	r2, [pc, #716]	; (80029fc <HAL_RCC_OscConfig+0x388>)
 8002730:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002732:	4bb3      	ldr	r3, [pc, #716]	; (8002a00 <HAL_RCC_OscConfig+0x38c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f828 	bl	800178c <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d039      	beq.n	80027b6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e31e      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01e      	beq.n	800278c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274e:	f7ff fdab 	bl	80022a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002752:	f7ff f869 	bl	8001828 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275a:	f7ff f865 	bl	8001828 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e30b      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800276c:	f7ff fdba 	bl	80022e4 <LL_RCC_MSI_IsReady>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f1      	beq.n	800275a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fdc3 	bl	8002306 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fde7 	bl	8002358 <LL_RCC_MSI_SetCalibTrimming>
 800278a:	e015      	b.n	80027b8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800278c:	f7ff fd9b 	bl	80022c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002790:	f7ff f84a 	bl	8001828 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002798:	f7ff f846 	bl	8001828 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e2ec      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027aa:	f7ff fd9b 	bl	80022e4 <LL_RCC_MSI_IsReady>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f1      	bne.n	8002798 <HAL_RCC_OscConfig+0x124>
 80027b4:	e000      	b.n	80027b8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d04e      	beq.n	8002862 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c4:	f7ff fdf1 	bl	80023aa <LL_RCC_GetSysClkSource>
 80027c8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ca:	f7ff feea 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 80027ce:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x16e>
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d10d      	bne.n	80027f8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d10a      	bne.n	80027f8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	f7ff fc01 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d039      	beq.n	8002860 <HAL_RCC_OscConfig+0x1ec>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d135      	bne.n	8002860 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e2c5      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d102      	bne.n	8002808 <HAL_RCC_OscConfig+0x194>
 8002802:	f7ff fbd3 	bl	8001fac <LL_RCC_HSE_Enable>
 8002806:	e001      	b.n	800280c <HAL_RCC_OscConfig+0x198>
 8002808:	f7ff fbdf 	bl	8001fca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d012      	beq.n	800283a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff f808 	bl	8001828 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff f804 	bl	8001828 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e2aa      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800282e:	f7ff fbdb 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f1      	beq.n	800281c <HAL_RCC_OscConfig+0x1a8>
 8002838:	e013      	b.n	8002862 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fff5 	bl	8001828 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002842:	f7fe fff1 	bl	8001828 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e297      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002854:	f7ff fbc8 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f1      	bne.n	8002842 <HAL_RCC_OscConfig+0x1ce>
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d051      	beq.n	8002912 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	f7ff fd9c 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002872:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	f7ff fe95 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 8002878:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x218>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d113      	bne.n	80028ae <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d110      	bne.n	80028ae <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	f7ff fbdc 	bl	8002048 <LL_RCC_HSI_IsReady>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_RCC_OscConfig+0x22e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e270      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fbe0 	bl	800206c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ac:	e031      	b.n	8002912 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b6:	f7ff fba9 	bl	800200c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe ffb5 	bl	8001828 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe ffb1 	bl	8001828 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e257      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028d4:	f7ff fbb8 	bl	8002048 <LL_RCC_HSI_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f1      	beq.n	80028c2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fbc2 	bl	800206c <LL_RCC_HSI_SetCalibTrimming>
 80028e8:	e013      	b.n	8002912 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	f7ff fb9e 	bl	800202a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe ff9b 	bl	8001828 <HAL_GetTick>
 80028f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe ff97 	bl	8001828 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e23d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002908:	f7ff fb9e 	bl	8002048 <LL_RCC_HSI_IsReady>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f1      	bne.n	80028f6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a3 	beq.w	8002a72 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d076      	beq.n	8002a22 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d046      	beq.n	80029ce <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002940:	f7ff fc55 	bl	80021ee <LL_RCC_LSI1_IsReady>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d113      	bne.n	8002972 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800294a:	f7ff fc2e 	bl	80021aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294e:	f7fe ff6b 	bl	8001828 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002956:	f7fe ff67 	bl	8001828 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e20d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002968:	f7ff fc41 	bl	80021ee <LL_RCC_LSI1_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f1      	beq.n	8002956 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002972:	f7ff fc4e 	bl	8002212 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe ff57 	bl	8001828 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800297e:	f7fe ff53 	bl	8001828 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1f9      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002990:	f7ff fc61 	bl	8002256 <LL_RCC_LSI2_IsReady>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f1      	beq.n	800297e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fc6b 	bl	800227a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80029a4:	f7ff fc12 	bl	80021cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe ff3e 	bl	8001828 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029b0:	f7fe ff3a 	bl	8001828 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1e0      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029c2:	f7ff fc14 	bl	80021ee <LL_RCC_LSI1_IsReady>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f1      	bne.n	80029b0 <HAL_RCC_OscConfig+0x33c>
 80029cc:	e051      	b.n	8002a72 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80029ce:	f7ff fbec 	bl	80021aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe ff29 	bl	8001828 <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029da:	f7fe ff25 	bl	8001828 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1cb      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029ec:	f7ff fbff 	bl	80021ee <LL_RCC_LSI1_IsReady>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f1      	beq.n	80029da <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80029f6:	f7ff fc1d 	bl	8002234 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029fa:	e00c      	b.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a04:	f7fe ff10 	bl	8001828 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1b6      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a16:	f7ff fc1e 	bl	8002256 <LL_RCC_LSI2_IsReady>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f1      	bne.n	8002a04 <HAL_RCC_OscConfig+0x390>
 8002a20:	e027      	b.n	8002a72 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a22:	f7ff fc07 	bl	8002234 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe feff 	bl	8001828 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a2e:	f7fe fefb 	bl	8001828 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1a1      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a40:	f7ff fc09 	bl	8002256 <LL_RCC_LSI2_IsReady>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f1      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a4a:	f7ff fbbf 	bl	80021cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe feeb 	bl	8001828 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a56:	f7fe fee7 	bl	8001828 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e18d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a68:	f7ff fbc1 	bl	80021ee <LL_RCC_LSI1_IsReady>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f1      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d05b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7e:	4bb5      	ldr	r3, [pc, #724]	; (8002d54 <HAL_RCC_OscConfig+0x6e0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d114      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a8a:	f7ff fa5f 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fecb 	bl	8001828 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7fe fec7 	bl	8001828 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e16d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	4baa      	ldr	r3, [pc, #680]	; (8002d54 <HAL_RCC_OscConfig+0x6e0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x44e>
 8002abc:	f7ff fb1f 	bl	80020fe <LL_RCC_LSE_Enable>
 8002ac0:	e00c      	b.n	8002adc <HAL_RCC_OscConfig+0x468>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d104      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x460>
 8002aca:	f7ff fb3a 	bl	8002142 <LL_RCC_LSE_EnableBypass>
 8002ace:	f7ff fb16 	bl	80020fe <LL_RCC_LSE_Enable>
 8002ad2:	e003      	b.n	8002adc <HAL_RCC_OscConfig+0x468>
 8002ad4:	f7ff fb24 	bl	8002120 <LL_RCC_LSE_Disable>
 8002ad8:	f7ff fb44 	bl	8002164 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d014      	beq.n	8002b0e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fea0 	bl	8001828 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fe9c 	bl	8001828 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e140      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b02:	f7ff fb40 	bl	8002186 <LL_RCC_LSE_IsReady>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <HAL_RCC_OscConfig+0x478>
 8002b0c:	e013      	b.n	8002b36 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fe8b 	bl	8001828 <HAL_GetTick>
 8002b12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fe87 	bl	8001828 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e12b      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b2c:	f7ff fb2b 	bl	8002186 <LL_RCC_LSE_IsReady>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ef      	bne.n	8002b16 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d02c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d014      	beq.n	8002b74 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b4a:	f7ff faa4 	bl	8002096 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fe6b 	bl	8001828 <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b56:	f7fe fe67 	bl	8001828 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e10d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b68:	f7ff fab7 	bl	80020da <LL_RCC_HSI48_IsReady>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f1      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 8002b72:	e013      	b.n	8002b9c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b74:	f7ff faa0 	bl	80020b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fe56 	bl	8001828 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b80:	f7fe fe52 	bl	8001828 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0f8      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b92:	f7ff faa2 	bl	80020da <LL_RCC_HSI48_IsReady>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f1      	bne.n	8002b80 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80ee 	beq.w	8002d82 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	f7ff fc00 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002baa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	f040 80af 	bne.w	8002d1c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d123      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d114      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d05d      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d058      	beq.n	8002ccc <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0ab      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c2c:	f7ff fc73 	bl	8002516 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c30:	f7fe fdfa 	bl	8001828 <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fdf6 	bl	8001828 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e09c      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ef      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_OscConfig+0x6e4>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c6a:	4311      	orrs	r1, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c70:	0212      	lsls	r2, r2, #8
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c78:	4311      	orrs	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c84:	430a      	orrs	r2, r1
 8002c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c8e:	f7ff fc33 	bl	80024f8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca2:	f7fe fdc1 	bl	8001828 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe fdbd 	bl	8001828 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e063      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ef      	beq.n	8002caa <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cca:	e05a      	b.n	8002d82 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e059      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d151      	bne.n	8002d82 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cde:	f7ff fc0b 	bl	80024f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf2:	f7fe fd99 	bl	8001828 <HAL_GetTick>
 8002cf6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe fd95 	bl	8001828 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e03b      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ef      	beq.n	8002cfa <HAL_RCC_OscConfig+0x686>
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d02d      	beq.n	8002d7e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	f7ff fbf8 	bl	8002516 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d30:	f023 0303 	bic.w	r3, r3, #3
 8002d34:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d40:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fd6d 	bl	8001828 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d50:	e00d      	b.n	8002d6e <HAL_RCC_OscConfig+0x6fa>
 8002d52:	bf00      	nop
 8002d54:	58000400 	.word	0x58000400
 8002d58:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fd64 	bl	8001828 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ef      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6e8>
 8002d7c:	e001      	b.n	8002d82 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3734      	adds	r7, #52	; 0x34
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}

08002d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e12d      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b98      	ldr	r3, [pc, #608]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d91b      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b95      	ldr	r3, [pc, #596]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4993      	ldr	r1, [pc, #588]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbe:	f7fe fd33 	bl	8001828 <HAL_GetTick>
 8002dc2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dc6:	f7fe fd2f 	bl	8001828 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e111      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd8:	4b8a      	ldr	r3, [pc, #552]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fae3 	bl	80023c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fd14 	bl	8001828 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e04:	f7fe fd10 	bl	8001828 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0f2      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e16:	f7ff fbd0 	bl	80025ba <LL_RCC_IsActiveFlag_HPRE>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f1      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d016      	beq.n	8002e5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fada 	bl	80023ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e36:	f7fe fcf7 	bl	8001828 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e3e:	f7fe fcf3 	bl	8001828 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0d5      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e50:	f7ff fbc5 	bl	80025de <LL_RCC_IsActiveFlag_C2HPRE>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f1      	beq.n	8002e3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fad3 	bl	8002416 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e70:	f7fe fcda 	bl	8001828 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e78:	f7fe fcd6 	bl	8001828 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0b8      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e8a:	f7ff fbbb 	bl	8002604 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f1      	beq.n	8002e78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff facd 	bl	8002444 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe fcbd 	bl	8001828 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eb2:	f7fe fcb9 	bl	8001828 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e09b      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ec4:	f7ff fbb1 	bl	800262a <LL_RCC_IsActiveFlag_PPRE1>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f1      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fac3 	bl	800246c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fc9f 	bl	8001828 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eee:	f7fe fc9b 	bl	8001828 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e07d      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f00:	f7ff fba5 	bl	800264e <LL_RCC_IsActiveFlag_PPRE2>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f1      	beq.n	8002eee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d043      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f1e:	f7ff f863 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11e      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e067      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f34:	f7ff fafe 	bl	8002534 <LL_RCC_PLL_IsReady>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d113      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e05c      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f4a:	f7ff f9cb 	bl	80022e4 <LL_RCC_MSI_IsReady>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d108      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e051      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f58:	f7ff f876 	bl	8002048 <LL_RCC_HSI_IsReady>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e04a      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fa09 	bl	8002382 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe fc5a 	bl	8001828 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fc56 	bl	8001828 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e036      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	f7ff fa0c 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d1ec      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d21b      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 0207 	bic.w	r2, r3, #7
 8002fb4:	4913      	ldr	r1, [pc, #76]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fc34 	bl	8001828 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fc4:	f7fe fc30 	bl	8001828 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e012      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1ef      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fe4:	f000 f880 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_RCC_ClockConfig+0x27c>)
 8002fec:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002fee:	f7fe fc27 	bl	8001840 <HAL_GetTickPrio>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fbc9 	bl	800178c <HAL_InitTick>
 8002ffa:	4603      	mov	r3, r0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	58004000 	.word	0x58004000
 8003008:	2000000c 	.word	0x2000000c

0800300c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003012:	f7ff f9ca 	bl	80023aa <LL_RCC_GetSysClkSource>
 8003016:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800301e:	f7ff f986 	bl	800232e <LL_RCC_MSI_GetRange>
 8003022:	4603      	mov	r3, r0
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e04b      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d102      	bne.n	8003040 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e045      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d10a      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003046:	f7fe ff9f 	bl	8001f88 <LL_RCC_HSE_IsEnabledDiv2>
 800304a:	4603      	mov	r3, r0
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e03a      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003056:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e037      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800305c:	f7ff faa1 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 8003060:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d003      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x64>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d003      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0x6a>
 800306e:	e00d      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003072:	60bb      	str	r3, [r7, #8]
        break;
 8003074:	e015      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003076:	f7fe ff87 	bl	8001f88 <LL_RCC_HSE_IsEnabledDiv2>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d102      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003082:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003084:	e00d      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003088:	60bb      	str	r3, [r7, #8]
        break;
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800308c:	f7ff f94f 	bl	800232e <LL_RCC_MSI_GetRange>
 8003090:	4603      	mov	r3, r0
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	60bb      	str	r3, [r7, #8]
        break;
 80030a0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80030a2:	f7ff fa59 	bl	8002558 <LL_RCC_PLL_GetN>
 80030a6:	4602      	mov	r2, r0
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	fb03 f402 	mul.w	r4, r3, r2
 80030ae:	f7ff fa6c 	bl	800258a <LL_RCC_PLL_GetDivider>
 80030b2:	4603      	mov	r3, r0
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	3301      	adds	r3, #1
 80030b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80030bc:	f7ff fa59 	bl	8002572 <LL_RCC_PLL_GetR>
 80030c0:	4603      	mov	r3, r0
 80030c2:	0f5b      	lsrs	r3, r3, #29
 80030c4:	3301      	adds	r3, #1
 80030c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80030cc:	68fb      	ldr	r3, [r7, #12]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	080071a4 	.word	0x080071a4
 80030dc:	00f42400 	.word	0x00f42400
 80030e0:	003d0900 	.word	0x003d0900
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b598      	push	{r3, r4, r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030ec:	f7ff ff8e 	bl	800300c <HAL_RCC_GetSysClockFreq>
 80030f0:	4604      	mov	r4, r0
 80030f2:	f7ff f9cf 	bl	8002494 <LL_RCC_GetAHBPrescaler>
 80030f6:	4603      	mov	r3, r0
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	4a03      	ldr	r2, [pc, #12]	; (800310c <HAL_RCC_GetHCLKFreq+0x24>)
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd98      	pop	{r3, r4, r7, pc}
 800310c:	08007144 	.word	0x08007144

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b598      	push	{r3, r4, r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003114:	f7ff ffe8 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003118:	4604      	mov	r4, r0
 800311a:	f7ff f9d5 	bl	80024c8 <LL_RCC_GetAPB1Prescaler>
 800311e:	4603      	mov	r3, r0
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd98      	pop	{r3, r4, r7, pc}
 8003138:	08007184 	.word	0x08007184

0800313c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313c:	b598      	push	{r3, r4, r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003140:	f7ff ffd2 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003144:	4604      	mov	r4, r0
 8003146:	f7ff f9cb 	bl	80024e0 <LL_RCC_GetAPB2Prescaler>
 800314a:	4603      	mov	r3, r0
 800314c:	0adb      	lsrs	r3, r3, #11
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	4a04      	ldr	r2, [pc, #16]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd98      	pop	{r3, r4, r7, pc}
 8003164:	08007184 	.word	0x08007184

08003168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2bb0      	cmp	r3, #176	; 0xb0
 8003174:	d903      	bls.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e007      	b.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800318e:	f7ff f98d 	bl	80024ac <LL_RCC_GetAHB4Prescaler>
 8003192:	4603      	mov	r3, r0
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	0c9c      	lsrs	r4, r3, #18
 80031b2:	f7fe fedb 	bl	8001f6c <HAL_PWREx_GetVoltageRange>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4619      	mov	r1, r3
 80031ba:	4620      	mov	r0, r4
 80031bc:	f000 f80c 	bl	80031d8 <RCC_SetFlashLatency>
 80031c0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	080071a4 	.word	0x080071a4
 80031d0:	08007144 	.word	0x08007144
 80031d4:	431bde83 	.word	0x431bde83

080031d8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b093      	sub	sp, #76	; 0x4c
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <RCC_SetFlashLatency+0xf0>)
 80031e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80031e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80031ee:	4a37      	ldr	r2, [pc, #220]	; (80032cc <RCC_SetFlashLatency+0xf4>)
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80031f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031fa:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <RCC_SetFlashLatency+0xf8>)
 80031fc:	f107 040c 	add.w	r4, r7, #12
 8003200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003206:	2300      	movs	r3, #0
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003210:	d11c      	bne.n	800324c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003212:	2300      	movs	r3, #0
 8003214:	643b      	str	r3, [r7, #64]	; 0x40
 8003216:	e015      	b.n	8003244 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003220:	4413      	add	r3, r2
 8003222:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d808      	bhi.n	800323e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800322c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003234:	4413      	add	r3, r2
 8003236:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800323a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800323c:	e022      	b.n	8003284 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800323e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003240:	3301      	adds	r3, #1
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
 8003244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003246:	2b03      	cmp	r3, #3
 8003248:	d9e6      	bls.n	8003218 <RCC_SetFlashLatency+0x40>
 800324a:	e01b      	b.n	8003284 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800324c:	2300      	movs	r3, #0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	e015      	b.n	800327e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800325a:	4413      	add	r3, r2
 800325c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	d808      	bhi.n	8003278 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800326e:	4413      	add	r3, r2
 8003270:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003276:	e005      	b.n	8003284 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	3301      	adds	r3, #1
 800327c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003280:	2b02      	cmp	r3, #2
 8003282:	d9e6      	bls.n	8003252 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <RCC_SetFlashLatency+0xfc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 0207 	bic.w	r2, r3, #7
 800328c:	4911      	ldr	r1, [pc, #68]	; (80032d4 <RCC_SetFlashLatency+0xfc>)
 800328e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003294:	f7fe fac8 	bl	8001828 <HAL_GetTick>
 8003298:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800329a:	e008      	b.n	80032ae <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800329c:	f7fe fac4 	bl	8001828 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e007      	b.n	80032be <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <RCC_SetFlashLatency+0xfc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1ef      	bne.n	800329c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	374c      	adds	r7, #76	; 0x4c
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08007118 	.word	0x08007118
 80032cc:	08007128 	.word	0x08007128
 80032d0:	08007134 	.word	0x08007134
 80032d4:	58004000 	.word	0x58004000

080032d8 <LL_RCC_LSE_IsEnabled>:
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <LL_RCC_LSE_IsEnabled+0x18>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <LL_RCC_LSE_IsEnabled+0x1a>
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_LSE_IsReady>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b02      	cmp	r3, #2
 800330e:	d101      	bne.n	8003314 <LL_RCC_LSE_IsReady+0x18>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <LL_RCC_LSE_IsReady+0x1a>
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_RCC_SetRFWKPClockSource>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003330:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_RCC_SetSMPSClockSource>:
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4313      	orrs	r3, r2
 8003366:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_RCC_SetSMPSPrescaler>:
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4313      	orrs	r3, r2
 800338e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_RCC_SetUSARTClockSource>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80033a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f023 0203 	bic.w	r2, r3, #3
 80033b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_RCC_SetLPUARTClockSource>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_RCC_SetI2CClockSource>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003400:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_RCC_SetLPTIMClockSource>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_RCC_SetSAIClockSource>:
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800346a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <LL_RCC_SetRNGClockSource>:
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80034a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <LL_RCC_SetCLK48ClockSource>:
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_RCC_SetUSBClockSource>:
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ffe3 	bl	80034ba <LL_RCC_SetCLK48ClockSource>
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <LL_RCC_SetADCClockSource>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_RCC_SetRTCClockSource>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800353c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_RCC_GetRTCClockSource>:
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_RCC_ForceBackupDomainReset>:
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <LL_RCC_PLLSAI1_Enable>:
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035c4:	6013      	str	r3, [r2, #0]
}
 80035c6:	bf00      	nop
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_RCC_PLLSAI1_Disable>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_RCC_PLLSAI1_IsReady>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003600:	d101      	bne.n	8003606 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800361a:	2300      	movs	r3, #0
 800361c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800361e:	2300      	movs	r3, #0
 8003620:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d034      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003636:	d021      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003638:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800363c:	d81b      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800363e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003642:	d01d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003648:	d815      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800364e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003652:	d110      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003664:	e00d      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f947 	bl	80038fe <RCCEx_PLLSAI1_ConfigNP>
 8003670:	4603      	mov	r3, r0
 8003672:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003674:	e005      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77fb      	strb	r3, [r7, #31]
        break;
 800367a:	e002      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fee8 	bl	8003462 <LL_RCC_SetSAIClockSource>
 8003692:	e001      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003694:	7ffb      	ldrb	r3, [r7, #31]
 8003696:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d046      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80036a4:	f7ff ff56 	bl	8003554 <LL_RCC_GetRTCClockSource>
 80036a8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d03c      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80036b4:	f7fe fc4a 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff30 	bl	8003528 <LL_RCC_SetRTCClockSource>
 80036c8:	e02e      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80036d4:	f7ff ff4b 	bl	800356e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80036d8:	f7ff ff5a 	bl	8003590 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80036ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80036f4:	f7ff fdf0 	bl	80032d8 <LL_RCC_LSE_IsEnabled>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d114      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036fe:	f7fe f893 	bl	8001828 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003704:	e00b      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe f88f 	bl	8001828 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d902      	bls.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	77fb      	strb	r3, [r7, #31]
              break;
 800371c:	e004      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800371e:	f7ff fded 	bl	80032fc <LL_RCC_LSE_IsReady>
 8003722:	4603      	mov	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d1ee      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003728:	7ffb      	ldrb	r3, [r7, #31]
 800372a:	77bb      	strb	r3, [r7, #30]
 800372c:	e001      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	7ffb      	ldrb	r3, [r7, #31]
 8003730:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fe2a 	bl	800339c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fe35 	bl	80033c8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fe5d 	bl	800342e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fe52 	bl	800342e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fe2a 	bl	80033f4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fe1f 	bl	80033f4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d022      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fe8d 	bl	80034e6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d4:	d107      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ee:	d10b      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f8dd 	bl	80039b4 <RCCEx_PLLSAI1_ConfigNQ>
 80037fa:	4603      	mov	r3, r0
 80037fc:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80037fe:	7ffb      	ldrb	r3, [r7, #31]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003804:	7ffb      	ldrb	r3, [r7, #31]
 8003806:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d008      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fe2a 	bl	800348e <LL_RCC_SetRNGClockSource>
 800383a:	e00a      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	2000      	movs	r0, #0
 8003848:	f7ff fe21 	bl	800348e <LL_RCC_SetRNGClockSource>
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff fe34 	bl	80034ba <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800385a:	d107      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fe3d 	bl	80034fc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388a:	d107      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038a4:	d10b      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f8dd 	bl	8003a6a <RCCEx_PLLSAI1_ConfigNR>
 80038b0:	4603      	mov	r3, r0
 80038b2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80038b4:	7ffb      	ldrb	r3, [r7, #31]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fd26 	bl	8003320 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fd45 	bl	8003374 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fd2c 	bl	800334c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80038f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800390a:	f7ff fe61 	bl	80035d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800390e:	f7fd ff8b 	bl	8001828 <HAL_GetTick>
 8003912:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003914:	e009      	b.n	800392a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003916:	f7fd ff87 	bl	8001828 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d902      	bls.n	800392a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	73fb      	strb	r3, [r7, #15]
      break;
 8003928:	e004      	b.n	8003934 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800392a:	f7ff fe60 	bl	80035ee <LL_RCC_PLLSAI1_IsReady>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f0      	bne.n	8003916 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d137      	bne.n	80039aa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003968:	f7ff fe23 	bl	80035b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fd ff5c 	bl	8001828 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003974:	f7fd ff58 	bl	8001828 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
        break;
 8003986:	e004      	b.n	8003992 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003988:	f7ff fe31 	bl	80035ee <LL_RCC_PLLSAI1_IsReady>
 800398c:	4603      	mov	r3, r0
 800398e:	2b01      	cmp	r3, #1
 8003990:	d1f0      	bne.n	8003974 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d108      	bne.n	80039aa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a6:	4313      	orrs	r3, r2
 80039a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039c0:	f7ff fe06 	bl	80035d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039c4:	f7fd ff30 	bl	8001828 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039cc:	f7fd ff2c 	bl	8001828 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
      break;
 80039de:	e004      	b.n	80039ea <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039e0:	f7ff fe05 	bl	80035ee <LL_RCC_PLLSAI1_IsReady>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d137      	bne.n	8003a60 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a1e:	f7ff fdc8 	bl	80035b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a22:	f7fd ff01 	bl	8001828 <HAL_GetTick>
 8003a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a28:	e009      	b.n	8003a3e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2a:	f7fd fefd 	bl	8001828 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d902      	bls.n	8003a3e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3c:	e004      	b.n	8003a48 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a3e:	f7ff fdd6 	bl	80035ee <LL_RCC_PLLSAI1_IsReady>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d1f0      	bne.n	8003a2a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a76:	f7ff fdab 	bl	80035d0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a7a:	f7fd fed5 	bl	8001828 <HAL_GetTick>
 8003a7e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a80:	e009      	b.n	8003a96 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a82:	f7fd fed1 	bl	8001828 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d902      	bls.n	8003a96 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	73fb      	strb	r3, [r7, #15]
      break;
 8003a94:	e004      	b.n	8003aa0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a96:	f7ff fdaa 	bl	80035ee <LL_RCC_PLLSAI1_IsReady>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d137      	bne.n	8003b16 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ad4:	f7ff fd6d 	bl	80035b2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fea6 	bl	8001828 <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ade:	e009      	b.n	8003af4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae0:	f7fd fea2 	bl	8001828 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d902      	bls.n	8003af4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	73fb      	strb	r3, [r7, #15]
        break;
 8003af2:	e004      	b.n	8003afe <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003af4:	f7ff fd7b 	bl	80035ee <LL_RCC_PLLSAI1_IsReady>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d1f0      	bne.n	8003ae0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e095      	b.n	8003c5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b42:	d009      	beq.n	8003b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
 8003b4a:	e005      	b.n	8003b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fb10 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b98:	d902      	bls.n	8003ba0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bae:	d007      	beq.n	8003bc0 <HAL_SPI_Init+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	f003 0204 	and.w	r2, r3, #4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b088      	sub	sp, #32
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_SPI_Transmit+0x22>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e158      	b.n	8003f3a <HAL_SPI_Transmit+0x2d4>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c90:	f7fd fdca 	bl	8001828 <HAL_GetTick>
 8003c94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003caa:	e13d      	b.n	8003f28 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Transmit+0x52>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cbc:	e134      	b.n	8003f28 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d08:	d10f      	bne.n	8003d2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	d007      	beq.n	8003d48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d50:	d94b      	bls.n	8003dea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_SPI_Transmit+0xfa>
 8003d5a:	8afb      	ldrh	r3, [r7, #22]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d13e      	bne.n	8003dde <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d84:	e02b      	b.n	8003dde <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d112      	bne.n	8003dba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db8:	e011      	b.n	8003dde <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dba:	f7fd fd35 	bl	8001828 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d803      	bhi.n	8003dd2 <HAL_SPI_Transmit+0x16c>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd0:	d102      	bne.n	8003dd8 <HAL_SPI_Transmit+0x172>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ddc:	e0a4      	b.n	8003f28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ce      	bne.n	8003d86 <HAL_SPI_Transmit+0x120>
 8003de8:	e07c      	b.n	8003ee4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_SPI_Transmit+0x192>
 8003df2:	8afb      	ldrh	r3, [r7, #22]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d170      	bne.n	8003eda <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d912      	bls.n	8003e28 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	881a      	ldrh	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	1c9a      	adds	r2, r3, #2
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b02      	subs	r3, #2
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e26:	e058      	b.n	8003eda <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e4e:	e044      	b.n	8003eda <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d12b      	bne.n	8003eb6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d912      	bls.n	8003e8e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b02      	subs	r3, #2
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e8c:	e025      	b.n	8003eda <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb4:	e011      	b.n	8003eda <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb6:	f7fd fcb7 	bl	8001828 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d803      	bhi.n	8003ece <HAL_SPI_Transmit+0x268>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x26e>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ed8:	e026      	b.n	8003f28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1b5      	bne.n	8003e50 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fcdb 	bl	80048a4 <SPI_EndRxTxTransaction>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e000      	b.n	8003f28 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b088      	sub	sp, #32
 8003f46:	af02      	add	r7, sp, #8
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5e:	d112      	bne.n	8003f86 <HAL_SPI_Receive+0x44>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10e      	bne.n	8003f86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f70:	88fa      	ldrh	r2, [r7, #6]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f910 	bl	80041a2 <HAL_SPI_TransmitReceive>
 8003f82:	4603      	mov	r3, r0
 8003f84:	e109      	b.n	800419a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_SPI_Receive+0x52>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e102      	b.n	800419a <HAL_SPI_Receive+0x258>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f9c:	f7fd fc44 	bl	8001828 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fb2:	e0e9      	b.n	8004188 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_SPI_Receive+0x7e>
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fc4:	e0e0      	b.n	8004188 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004010:	d908      	bls.n	8004024 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	e007      	b.n	8004034 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	d10f      	bne.n	800405e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d007      	beq.n	800407c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004084:	d867      	bhi.n	8004156 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004086:	e030      	b.n	80040ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d117      	bne.n	80040c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f103 020c 	add.w	r2, r3, #12
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	7812      	ldrb	r2, [r2, #0]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040c4:	e011      	b.n	80040ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c6:	f7fd fbaf 	bl	8001828 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d803      	bhi.n	80040de <HAL_SPI_Receive+0x19c>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040dc:	d102      	bne.n	80040e4 <HAL_SPI_Receive+0x1a2>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040e8:	e04e      	b.n	8004188 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1c8      	bne.n	8004088 <HAL_SPI_Receive+0x146>
 80040f6:	e034      	b.n	8004162 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d115      	bne.n	8004132 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	b292      	uxth	r2, r2
 8004112:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	1c9a      	adds	r2, r3, #2
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004130:	e011      	b.n	8004156 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004132:	f7fd fb79 	bl	8001828 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d803      	bhi.n	800414a <HAL_SPI_Receive+0x208>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004148:	d102      	bne.n	8004150 <HAL_SPI_Receive+0x20e>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004154:	e018      	b.n	8004188 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ca      	bne.n	80040f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fb44 	bl	80047f4 <SPI_EndRxTransaction>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
 8004184:	e000      	b.n	8004188 <HAL_SPI_Receive+0x246>
  }

error :
 8004186:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004198:	7dfb      	ldrb	r3, [r7, #23]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b08a      	sub	sp, #40	; 0x28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041b0:	2301      	movs	r3, #1
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x26>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e1fb      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x41e>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041d0:	f7fd fb2a 	bl	8001828 <HAL_GetTick>
 80041d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041e4:	887b      	ldrh	r3, [r7, #2]
 80041e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041ec:	7efb      	ldrb	r3, [r7, #27]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d00e      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x6e>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f8:	d106      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x66>
 8004202:	7efb      	ldrb	r3, [r7, #27]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d003      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004208:	2302      	movs	r3, #2
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800420e:	e1cd      	b.n	80045ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_SPI_TransmitReceive+0x80>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_SPI_TransmitReceive+0x80>
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004228:	e1c0      	b.n	80045ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b04      	cmp	r3, #4
 8004234:	d003      	beq.n	800423e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	887a      	ldrh	r2, [r7, #2]
 800424e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	887a      	ldrh	r2, [r7, #2]
 8004256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004280:	d802      	bhi.n	8004288 <HAL_SPI_TransmitReceive+0xe6>
 8004282:	8a3b      	ldrh	r3, [r7, #16]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d908      	bls.n	800429a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	e007      	b.n	80042aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d007      	beq.n	80042c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042d0:	d97c      	bls.n	80043cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x13e>
 80042da:	8a7b      	ldrh	r3, [r7, #18]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d169      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004304:	e056      	b.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d11b      	bne.n	800434c <HAL_SPI_TransmitReceive+0x1aa>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <HAL_SPI_TransmitReceive+0x1aa>
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	2b01      	cmp	r3, #1
 8004322:	d113      	bne.n	800434c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	d11c      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x1f2>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	b292      	uxth	r2, r2
 8004372:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004390:	2301      	movs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004394:	f7fd fa48 	bl	8001828 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d807      	bhi.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043aa:	d003      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043b2:	e0fb      	b.n	80045ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1a3      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x164>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d19d      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x164>
 80043ca:	e0df      	b.n	800458c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x23a>
 80043d4:	8a7b      	ldrh	r3, [r7, #18]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	f040 80cb 	bne.w	8004572 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d912      	bls.n	800440c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b02      	subs	r3, #2
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	87da      	strh	r2, [r3, #62]	; 0x3e
 800440a:	e0b2      	b.n	8004572 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004432:	e09e      	b.n	8004572 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d134      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x30a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02f      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x30a>
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	2b01      	cmp	r3, #1
 8004450:	d12c      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d912      	bls.n	8004482 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b02      	subs	r3, #2
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004480:	e012      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d148      	bne.n	800454c <HAL_SPI_TransmitReceive+0x3aa>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d042      	beq.n	800454c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d923      	bls.n	800451a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b02      	subs	r3, #2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d81f      	bhi.n	8004548 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	e016      	b.n	8004548 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f103 020c 	add.w	r2, r3, #12
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004548:	2301      	movs	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800454c:	f7fd f96c 	bl	8001828 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004558:	429a      	cmp	r2, r3
 800455a:	d803      	bhi.n	8004564 <HAL_SPI_TransmitReceive+0x3c2>
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004562:	d102      	bne.n	800456a <HAL_SPI_TransmitReceive+0x3c8>
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004570:	e01c      	b.n	80045ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f af5b 	bne.w	8004434 <HAL_SPI_TransmitReceive+0x292>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	f47f af54 	bne.w	8004434 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f987 	bl	80048a4 <SPI_EndRxTxTransaction>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60
 80045a8:	e000      	b.n	80045ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045d8:	f7fd f926 	bl	8001828 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	4413      	add	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045e8:	f7fd f91e 	bl	8001828 <HAL_GetTick>
 80045ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045ee:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	015b      	lsls	r3, r3, #5
 80045f4:	0d1b      	lsrs	r3, r3, #20
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045fe:	e054      	b.n	80046aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004606:	d050      	beq.n	80046aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004608:	f7fd f90e 	bl	8001828 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	429a      	cmp	r2, r3
 8004616:	d902      	bls.n	800461e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d13d      	bne.n	800469a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800462c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004636:	d111      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004640:	d004      	beq.n	800464c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d107      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004664:	d10f      	bne.n	8004686 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e017      	b.n	80046ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4013      	ands	r3, r2
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	bf0c      	ite	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	2300      	movne	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d19b      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000000c 	.word	0x2000000c

080046d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046e6:	f7fd f89f 	bl	8001828 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	4413      	add	r3, r2
 80046f4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046f6:	f7fd f897 	bl	8001828 <HAL_GetTick>
 80046fa:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046fc:	4b3c      	ldr	r3, [pc, #240]	; (80047f0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	00da      	lsls	r2, r3, #3
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	0d1b      	lsrs	r3, r3, #20
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004714:	e05f      	b.n	80047d6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800471c:	d106      	bne.n	800472c <SPI_WaitFifoStateUntilTimeout+0x54>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004732:	d050      	beq.n	80047d6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fd f878 	bl	8001828 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	429a      	cmp	r2, r3
 8004742:	d902      	bls.n	800474a <SPI_WaitFifoStateUntilTimeout+0x72>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d111      	bne.n	8004788 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476c:	d004      	beq.n	8004778 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d107      	bne.n	8004788 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004790:	d10f      	bne.n	80047b2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e010      	b.n	80047e8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d197      	bne.n	8004716 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3720      	adds	r7, #32
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	2000000c 	.word	0x2000000c

080047f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004808:	d111      	bne.n	800482e <SPI_EndRxTransaction+0x3a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004812:	d004      	beq.n	800481e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481c:	d107      	bne.n	800482e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff fec5 	bl	80045c8 <SPI_WaitFlagStateUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e023      	b.n	800489c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485c:	d11d      	bne.n	800489a <SPI_EndRxTransaction+0xa6>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004866:	d004      	beq.n	8004872 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	d113      	bne.n	800489a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2200      	movs	r2, #0
 800487a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff ff2a 	bl	80046d8 <SPI_WaitFifoStateUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e000      	b.n	800489c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff ff0b 	bl	80046d8 <SPI_WaitFifoStateUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e027      	b.n	8004928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2200      	movs	r2, #0
 80048e0:	2180      	movs	r1, #128	; 0x80
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff fe70 	bl	80045c8 <SPI_WaitFlagStateUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e014      	b.n	8004928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff fee4 	bl	80046d8 <SPI_WaitFifoStateUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e000      	b.n	8004928 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e049      	b.n	80049d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fc fdee 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 f9cc 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d001      	beq.n	80049f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e036      	b.n	8004a66 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_TIM_Base_Start_IT+0x94>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x44>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a22:	d115      	bne.n	8004a50 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_TIM_Base_Start_IT+0x98>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d015      	beq.n	8004a62 <HAL_TIM_Base_Start_IT+0x82>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d011      	beq.n	8004a62 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4e:	e008      	b.n	8004a62 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e000      	b.n	8004a64 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	00010007 	.word	0x00010007

08004a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0202 	mvn.w	r2, #2
 8004aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f905 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8f7 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f908 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0204 	mvn.w	r2, #4
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8db 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8cd 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8de 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0208 	mvn.w	r2, #8
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8b1 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8a3 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8b4 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d122      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f887 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f879 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f88a 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0201 	mvn.w	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc fa0a 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d10e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8de 	bl	8004de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3a:	d10e      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d107      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f8d1 	bl	8004dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d10e      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d107      	bne.n	8004c86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f838 	bl	8004cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d10e      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d107      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f06f 0220 	mvn.w	r2, #32
 8004caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f891 	bl	8004dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <TIM_Base_SetConfig+0xbc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x20>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <TIM_Base_SetConfig+0xbc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_Base_SetConfig+0x52>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d007      	beq.n	8004d5e <TIM_Base_SetConfig+0x52>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <TIM_Base_SetConfig+0xc0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_Base_SetConfig+0x52>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1d      	ldr	r2, [pc, #116]	; (8004dd0 <TIM_Base_SetConfig+0xc4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <TIM_Base_SetConfig+0xbc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <TIM_Base_SetConfig+0xa0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a0b      	ldr	r2, [pc, #44]	; (8004dcc <TIM_Base_SetConfig+0xc0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0xa0>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <TIM_Base_SetConfig+0xc4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d103      	bne.n	8004db4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	615a      	str	r2, [r3, #20]
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40014400 	.word	0x40014400
 8004dd0:	40014800 	.word	0x40014800

08004dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_RCC_GetUSARTClockSource>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4013      	ands	r3, r2
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_RCC_GetLPUARTClockSource>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4013      	ands	r3, r2
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e042      	b.n	8004ee8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fc fbf9 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2224      	movs	r2, #36	; 0x24
 8004e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fb16 	bl	80054c4 <UART_SetConfig>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e022      	b.n	8004ee8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fd10 	bl	80058d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fd97 	bl	8005a14 <UART_CheckIdleState>
 8004ee6:	4603      	mov	r3, r0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	f040 8083 	bne.w	8005012 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_UART_Transmit+0x28>
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e07b      	b.n	8005014 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Transmit+0x3a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e074      	b.n	8005014 <HAL_UART_Transmit+0x124>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2221      	movs	r2, #33	; 0x21
 8004f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f42:	f7fc fc71 	bl	8001828 <HAL_GetTick>
 8004f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f60:	d108      	bne.n	8004f74 <HAL_UART_Transmit+0x84>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	e003      	b.n	8004f7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004f84:	e02c      	b.n	8004fe0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2180      	movs	r1, #128	; 0x80
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fd8a 	bl	8005aaa <UART_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e039      	b.n	8005014 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	3302      	adds	r3, #2
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	e007      	b.n	8004fce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1cc      	bne.n	8004f86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2140      	movs	r1, #64	; 0x40
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fd57 	bl	8005aaa <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e006      	b.n	8005014 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	e000      	b.n	8005014 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005012:	2302      	movs	r3, #2
  }
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005042:	4013      	ands	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d118      	bne.n	800507e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d013      	beq.n	800507e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 81fb 	beq.w	800546a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	4798      	blx	r3
      }
      return;
 800507c:	e1f5      	b.n	800546a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80ef 	beq.w	8005264 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4b73      	ldr	r3, [pc, #460]	; (8005258 <HAL_UART_IRQHandler+0x23c>)
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4b72      	ldr	r3, [pc, #456]	; (800525c <HAL_UART_IRQHandler+0x240>)
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80e4 	beq.w	8005264 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <HAL_UART_IRQHandler+0xac>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2201      	movs	r2, #1
 80050b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050be:	f043 0201 	orr.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d010      	beq.n	80050f4 <HAL_UART_IRQHandler+0xd8>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2202      	movs	r2, #2
 80050e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ea:	f043 0204 	orr.w	r2, r3, #4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d010      	beq.n	8005120 <HAL_UART_IRQHandler+0x104>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2204      	movs	r2, #4
 800510e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005116:	f043 0202 	orr.w	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d015      	beq.n	8005156 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4b48      	ldr	r3, [pc, #288]	; (8005258 <HAL_UART_IRQHandler+0x23c>)
 8005138:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2208      	movs	r2, #8
 8005144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	f043 0208 	orr.w	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515c:	2b00      	cmp	r3, #0
 800515e:	d011      	beq.n	8005184 <HAL_UART_IRQHandler+0x168>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 816f 	beq.w	800546e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d004      	beq.n	80051de <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d031      	beq.n	8005242 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fce3 	bl	8005baa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d123      	bne.n	800523a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005200:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d013      	beq.n	8005232 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520e:	4a14      	ldr	r2, [pc, #80]	; (8005260 <HAL_UART_IRQHandler+0x244>)
 8005210:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005216:	4618      	mov	r0, r3
 8005218:	f7fc fcb0 	bl	8001b7c <HAL_DMA_Abort_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d017      	beq.n	8005252 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	e00f      	b.n	8005252 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f930 	bl	8005498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00b      	b.n	8005252 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f92c 	bl	8005498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e007      	b.n	8005252 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f928 	bl	8005498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005250:	e10d      	b.n	800546e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005252:	bf00      	nop
    return;
 8005254:	e10b      	b.n	800546e <HAL_UART_IRQHandler+0x452>
 8005256:	bf00      	nop
 8005258:	10000001 	.word	0x10000001
 800525c:	04000120 	.word	0x04000120
 8005260:	08005c0f 	.word	0x08005c0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005268:	2b01      	cmp	r3, #1
 800526a:	f040 80ab 	bne.w	80053c4 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80a5 	beq.w	80053c4 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 809f 	beq.w	80053c4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2210      	movs	r2, #16
 800528c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d155      	bne.n	8005348 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80052a6:	893b      	ldrh	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80e2 	beq.w	8005472 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052b4:	893a      	ldrh	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f080 80db 	bcs.w	8005472 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	893a      	ldrh	r2, [r7, #8]
 80052c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d12b      	bne.n	800532c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005302:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0210 	bic.w	r2, r2, #16
 8005320:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	4618      	mov	r0, r3
 8005328:	f7fc fbc9 	bl	8001abe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005338:	b29b      	uxth	r3, r3
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	b29b      	uxth	r3, r3
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8b3 	bl	80054ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005346:	e094      	b.n	8005472 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005354:	b29b      	uxth	r3, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8087 	beq.w	8005476 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005368:	897b      	ldrh	r3, [r7, #10]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8083 	beq.w	8005476 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800537e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0210 	bic.w	r2, r2, #16
 80053b6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053b8:	897b      	ldrh	r3, [r7, #10]
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f875 	bl	80054ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053c2:	e058      	b.n	8005476 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <HAL_UART_IRQHandler+0x3ce>
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fc43 	bl	8005c6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053e8:	e048      	b.n	800547c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d012      	beq.n	800541a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540c:	2b00      	cmp	r3, #0
 800540e:	d034      	beq.n	800547a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
    }
    return;
 8005418:	e02f      	b.n	800547a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_UART_IRQHandler+0x41a>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fc03 	bl	8005c3a <UART_EndTransmit_IT>
    return;
 8005434:	e022      	b.n	800547c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_UART_IRQHandler+0x436>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fc23 	bl	8005c96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005450:	e014      	b.n	800547c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00f      	beq.n	800547c <HAL_UART_IRQHandler+0x460>
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	da0c      	bge.n	800547c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fc0d 	bl	8005c82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005468:	e008      	b.n	800547c <HAL_UART_IRQHandler+0x460>
      return;
 800546a:	bf00      	nop
 800546c:	e006      	b.n	800547c <HAL_UART_IRQHandler+0x460>
    return;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <HAL_UART_IRQHandler+0x460>
      return;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <HAL_UART_IRQHandler+0x460>
      return;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <HAL_UART_IRQHandler+0x460>
    return;
 800547a:	bf00      	nop
  }
}
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop

08005484 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4ba3      	ldr	r3, [pc, #652]	; (800577c <UART_SetConfig+0x2b8>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	69f9      	ldr	r1, [r7, #28]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a98      	ldr	r2, [pc, #608]	; (8005780 <UART_SetConfig+0x2bc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	4313      	orrs	r3, r2
 800552a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005536:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	69f9      	ldr	r1, [r7, #28]
 8005540:	430b      	orrs	r3, r1
 8005542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	f023 010f 	bic.w	r1, r3, #15
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a89      	ldr	r2, [pc, #548]	; (8005784 <UART_SetConfig+0x2c0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d120      	bne.n	80055a6 <UART_SetConfig+0xe2>
 8005564:	2003      	movs	r0, #3
 8005566:	f7ff fc53 	bl	8004e10 <LL_RCC_GetUSARTClockSource>
 800556a:	4603      	mov	r3, r0
 800556c:	2b03      	cmp	r3, #3
 800556e:	d817      	bhi.n	80055a0 <UART_SetConfig+0xdc>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0xb4>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	08005589 	.word	0x08005589
 800557c:	08005595 	.word	0x08005595
 8005580:	0800558f 	.word	0x0800558f
 8005584:	0800559b 	.word	0x0800559b
 8005588:	2301      	movs	r3, #1
 800558a:	76fb      	strb	r3, [r7, #27]
 800558c:	e038      	b.n	8005600 <UART_SetConfig+0x13c>
 800558e:	2302      	movs	r3, #2
 8005590:	76fb      	strb	r3, [r7, #27]
 8005592:	e035      	b.n	8005600 <UART_SetConfig+0x13c>
 8005594:	2304      	movs	r3, #4
 8005596:	76fb      	strb	r3, [r7, #27]
 8005598:	e032      	b.n	8005600 <UART_SetConfig+0x13c>
 800559a:	2308      	movs	r3, #8
 800559c:	76fb      	strb	r3, [r7, #27]
 800559e:	e02f      	b.n	8005600 <UART_SetConfig+0x13c>
 80055a0:	2310      	movs	r3, #16
 80055a2:	76fb      	strb	r3, [r7, #27]
 80055a4:	e02c      	b.n	8005600 <UART_SetConfig+0x13c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a75      	ldr	r2, [pc, #468]	; (8005780 <UART_SetConfig+0x2bc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d125      	bne.n	80055fc <UART_SetConfig+0x138>
 80055b0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80055b4:	f7ff fc3c 	bl	8004e30 <LL_RCC_GetLPUARTClockSource>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055be:	d017      	beq.n	80055f0 <UART_SetConfig+0x12c>
 80055c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055c4:	d817      	bhi.n	80055f6 <UART_SetConfig+0x132>
 80055c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ca:	d00b      	beq.n	80055e4 <UART_SetConfig+0x120>
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d811      	bhi.n	80055f6 <UART_SetConfig+0x132>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <UART_SetConfig+0x11a>
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055da:	d006      	beq.n	80055ea <UART_SetConfig+0x126>
 80055dc:	e00b      	b.n	80055f6 <UART_SetConfig+0x132>
 80055de:	2300      	movs	r3, #0
 80055e0:	76fb      	strb	r3, [r7, #27]
 80055e2:	e00d      	b.n	8005600 <UART_SetConfig+0x13c>
 80055e4:	2302      	movs	r3, #2
 80055e6:	76fb      	strb	r3, [r7, #27]
 80055e8:	e00a      	b.n	8005600 <UART_SetConfig+0x13c>
 80055ea:	2304      	movs	r3, #4
 80055ec:	76fb      	strb	r3, [r7, #27]
 80055ee:	e007      	b.n	8005600 <UART_SetConfig+0x13c>
 80055f0:	2308      	movs	r3, #8
 80055f2:	76fb      	strb	r3, [r7, #27]
 80055f4:	e004      	b.n	8005600 <UART_SetConfig+0x13c>
 80055f6:	2310      	movs	r3, #16
 80055f8:	76fb      	strb	r3, [r7, #27]
 80055fa:	e001      	b.n	8005600 <UART_SetConfig+0x13c>
 80055fc:	2310      	movs	r3, #16
 80055fe:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5e      	ldr	r2, [pc, #376]	; (8005780 <UART_SetConfig+0x2bc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	f040 808b 	bne.w	8005722 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800560c:	7efb      	ldrb	r3, [r7, #27]
 800560e:	2b08      	cmp	r3, #8
 8005610:	d823      	bhi.n	800565a <UART_SetConfig+0x196>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <UART_SetConfig+0x154>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	0800563d 	.word	0x0800563d
 800561c:	0800565b 	.word	0x0800565b
 8005620:	08005645 	.word	0x08005645
 8005624:	0800565b 	.word	0x0800565b
 8005628:	0800564b 	.word	0x0800564b
 800562c:	0800565b 	.word	0x0800565b
 8005630:	0800565b 	.word	0x0800565b
 8005634:	0800565b 	.word	0x0800565b
 8005638:	08005653 	.word	0x08005653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800563c:	f7fd fd68 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8005640:	6178      	str	r0, [r7, #20]
        break;
 8005642:	e00f      	b.n	8005664 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005644:	4b50      	ldr	r3, [pc, #320]	; (8005788 <UART_SetConfig+0x2c4>)
 8005646:	617b      	str	r3, [r7, #20]
        break;
 8005648:	e00c      	b.n	8005664 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564a:	f7fd fcdf 	bl	800300c <HAL_RCC_GetSysClockFreq>
 800564e:	6178      	str	r0, [r7, #20]
        break;
 8005650:	e008      	b.n	8005664 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005656:	617b      	str	r3, [r7, #20]
        break;
 8005658:	e004      	b.n	8005664 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	76bb      	strb	r3, [r7, #26]
        break;
 8005662:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 811a 	beq.w	80058a0 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	4a46      	ldr	r2, [pc, #280]	; (800578c <UART_SetConfig+0x2c8>)
 8005672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005676:	461a      	mov	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	fbb3 f3f2 	udiv	r3, r3, r2
 800567e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4413      	add	r3, r2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d305      	bcc.n	800569c <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	429a      	cmp	r2, r3
 800569a:	d902      	bls.n	80056a2 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	76bb      	strb	r3, [r7, #26]
 80056a0:	e0fe      	b.n	80058a0 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	4a37      	ldr	r2, [pc, #220]	; (800578c <UART_SetConfig+0x2c8>)
 80056b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	f7fa fdb9 	bl	8000230 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	020b      	lsls	r3, r1, #8
 80056d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056d4:	0202      	lsls	r2, r0, #8
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	6849      	ldr	r1, [r1, #4]
 80056da:	0849      	lsrs	r1, r1, #1
 80056dc:	4608      	mov	r0, r1
 80056de:	f04f 0100 	mov.w	r1, #0
 80056e2:	1814      	adds	r4, r2, r0
 80056e4:	eb43 0501 	adc.w	r5, r3, r1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7fa fd9b 	bl	8000230 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4613      	mov	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005708:	d308      	bcc.n	800571c <UART_SetConfig+0x258>
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005710:	d204      	bcs.n	800571c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	e0c1      	b.n	80058a0 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	76bb      	strb	r3, [r7, #26]
 8005720:	e0be      	b.n	80058a0 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572a:	d16a      	bne.n	8005802 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800572c:	7efb      	ldrb	r3, [r7, #27]
 800572e:	3b01      	subs	r3, #1
 8005730:	2b07      	cmp	r3, #7
 8005732:	d82d      	bhi.n	8005790 <UART_SetConfig+0x2cc>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x278>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	0800575d 	.word	0x0800575d
 8005740:	08005765 	.word	0x08005765
 8005744:	08005791 	.word	0x08005791
 8005748:	0800576b 	.word	0x0800576b
 800574c:	08005791 	.word	0x08005791
 8005750:	08005791 	.word	0x08005791
 8005754:	08005791 	.word	0x08005791
 8005758:	08005773 	.word	0x08005773
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800575c:	f7fd fcee 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8005760:	6178      	str	r0, [r7, #20]
        break;
 8005762:	e01a      	b.n	800579a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005764:	4b08      	ldr	r3, [pc, #32]	; (8005788 <UART_SetConfig+0x2c4>)
 8005766:	617b      	str	r3, [r7, #20]
        break;
 8005768:	e017      	b.n	800579a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576a:	f7fd fc4f 	bl	800300c <HAL_RCC_GetSysClockFreq>
 800576e:	6178      	str	r0, [r7, #20]
        break;
 8005770:	e013      	b.n	800579a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005776:	617b      	str	r3, [r7, #20]
        break;
 8005778:	e00f      	b.n	800579a <UART_SetConfig+0x2d6>
 800577a:	bf00      	nop
 800577c:	cfff69f3 	.word	0xcfff69f3
 8005780:	40008000 	.word	0x40008000
 8005784:	40013800 	.word	0x40013800
 8005788:	00f42400 	.word	0x00f42400
 800578c:	080071e4 	.word	0x080071e4
      default:
        pclk = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	76bb      	strb	r3, [r7, #26]
        break;
 8005798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d07f      	beq.n	80058a0 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	4a48      	ldr	r2, [pc, #288]	; (80058c8 <UART_SetConfig+0x404>)
 80057a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057aa:	461a      	mov	r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b2:	005a      	lsls	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	441a      	add	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	d916      	bls.n	80057fc <UART_SetConfig+0x338>
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d4:	d212      	bcs.n	80057fc <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f023 030f 	bic.w	r3, r3, #15
 80057de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	89fb      	ldrh	r3, [r7, #14]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	89fa      	ldrh	r2, [r7, #14]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	e051      	b.n	80058a0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	76bb      	strb	r3, [r7, #26]
 8005800:	e04e      	b.n	80058a0 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005802:	7efb      	ldrb	r3, [r7, #27]
 8005804:	3b01      	subs	r3, #1
 8005806:	2b07      	cmp	r3, #7
 8005808:	d821      	bhi.n	800584e <UART_SetConfig+0x38a>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <UART_SetConfig+0x34c>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005831 	.word	0x08005831
 8005814:	08005839 	.word	0x08005839
 8005818:	0800584f 	.word	0x0800584f
 800581c:	0800583f 	.word	0x0800583f
 8005820:	0800584f 	.word	0x0800584f
 8005824:	0800584f 	.word	0x0800584f
 8005828:	0800584f 	.word	0x0800584f
 800582c:	08005847 	.word	0x08005847
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005830:	f7fd fc84 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8005834:	6178      	str	r0, [r7, #20]
        break;
 8005836:	e00f      	b.n	8005858 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005838:	4b24      	ldr	r3, [pc, #144]	; (80058cc <UART_SetConfig+0x408>)
 800583a:	617b      	str	r3, [r7, #20]
        break;
 800583c:	e00c      	b.n	8005858 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583e:	f7fd fbe5 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8005842:	6178      	str	r0, [r7, #20]
        break;
 8005844:	e008      	b.n	8005858 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584a:	617b      	str	r3, [r7, #20]
        break;
 800584c:	e004      	b.n	8005858 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	76bb      	strb	r3, [r7, #26]
        break;
 8005856:	bf00      	nop
    }

    if (pclk != 0U)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <UART_SetConfig+0x404>)
 8005864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005868:	461a      	mov	r2, r3
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	441a      	add	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005880:	b29b      	uxth	r3, r3
 8005882:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b0f      	cmp	r3, #15
 8005888:	d908      	bls.n	800589c <UART_SetConfig+0x3d8>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005890:	d204      	bcs.n	800589c <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	e001      	b.n	80058a0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80058bc:	7ebb      	ldrb	r3, [r7, #26]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bdb0      	pop	{r4, r5, r7, pc}
 80058c6:	bf00      	nop
 80058c8:	080071e4 	.word	0x080071e4
 80058cc:	00f42400 	.word	0x00f42400

080058d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ce:	d10a      	bne.n	80059e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a24:	f7fb ff00 	bl	8001828 <HAL_GetTick>
 8005a28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d10e      	bne.n	8005a56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f82f 	bl	8005aaa <UART_WaitOnFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e025      	b.n	8005aa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d10e      	bne.n	8005a82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f819 	bl	8005aaa <UART_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aba:	e062      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac2:	d05e      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac4:	f7fb feb0 	bl	8001828 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11d      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ae8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e045      	b.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02e      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b32:	d126      	bne.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e00f      	b.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d08d      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bc0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d107      	bne.n	8005bee <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0210 	bic.w	r2, r2, #16
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fc33 	bl	8005498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c50:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fc0f 	bl	8005484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e027      	b.n	8005d10 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	; 0x24
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e02d      	b.n	8005d90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2224      	movs	r2, #36	; 0x24
 8005d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f84f 	bl	8005e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e02d      	b.n	8005e0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2224      	movs	r2, #36	; 0x24
 8005dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f811 	bl	8005e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d108      	bne.n	8005e36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e34:	e031      	b.n	8005e9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e36:	2308      	movs	r3, #8
 8005e38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	0e5b      	lsrs	r3, r3, #25
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	0f5b      	lsrs	r3, r3, #29
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	7b3a      	ldrb	r2, [r7, #12]
 8005e62:	4911      	ldr	r1, [pc, #68]	; (8005ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8005e64:	5c8a      	ldrb	r2, [r1, r2]
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e6a:	7b3a      	ldrb	r2, [r7, #12]
 8005e6c:	490f      	ldr	r1, [pc, #60]	; (8005eac <UARTEx_SetNbDataToProcess+0x98>)
 8005e6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	7b7a      	ldrb	r2, [r7, #13]
 8005e80:	4909      	ldr	r1, [pc, #36]	; (8005ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8005e82:	5c8a      	ldrb	r2, [r1, r2]
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e88:	7b7a      	ldrb	r2, [r7, #13]
 8005e8a:	4908      	ldr	r1, [pc, #32]	; (8005eac <UARTEx_SetNbDataToProcess+0x98>)
 8005e8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	080071fc 	.word	0x080071fc
 8005eac:	08007204 	.word	0x08007204

08005eb0 <_ZNSaIcEC1Ev>:
 8005eb0:	4770      	bx	lr

08005eb2 <_ZNSaIcED1Ev>:
 8005eb2:	4770      	bx	lr

08005eb4 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005eb4:	b10a      	cbz	r2, 8005eba <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005eb6:	f000 b8c9 	b.w	800604c <memcpy>
 8005eba:	4770      	bx	lr

08005ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005ebc:	b508      	push	{r3, lr}
 8005ebe:	680b      	ldr	r3, [r1, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d302      	bcc.n	8005ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8005ec6:	480d      	ldr	r0, [pc, #52]	; (8005efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8005ec8:	f000 f87b 	bl	8005fc2 <_ZSt20__throw_length_errorPKc>
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d90b      	bls.n	8005ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005ed0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005ed4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005ed8:	d206      	bcs.n	8005ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005eda:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005ede:	bf2a      	itet	cs
 8005ee0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8005ee4:	6008      	strcc	r0, [r1, #0]
 8005ee6:	600b      	strcs	r3, [r1, #0]
 8005ee8:	6808      	ldr	r0, [r1, #0]
 8005eea:	3001      	adds	r0, #1
 8005eec:	d501      	bpl.n	8005ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8005eee:	f000 f862 	bl	8005fb6 <_ZSt17__throw_bad_allocv>
 8005ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005ef6:	f000 b84d 	b.w	8005f94 <_Znwj>
 8005efa:	bf00      	nop
 8005efc:	0800720c 	.word	0x0800720c

08005f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005f00:	2a01      	cmp	r2, #1
 8005f02:	b510      	push	{r4, lr}
 8005f04:	d102      	bne.n	8005f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005f06:	780a      	ldrb	r2, [r1, #0]
 8005f08:	7002      	strb	r2, [r0, #0]
 8005f0a:	bd10      	pop	{r4, pc}
 8005f0c:	f7ff ffd2 	bl	8005eb4 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005f10:	e7fb      	b.n	8005f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005f12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005f12:	b508      	push	{r3, lr}
 8005f14:	1a52      	subs	r2, r2, r1
 8005f16:	f7ff fff3 	bl	8005f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005f1a:	bd08      	pop	{r3, pc}

08005f1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8005f1c:	6840      	ldr	r0, [r0, #4]
 8005f1e:	4770      	bx	lr

08005f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f22:	4604      	mov	r4, r0
 8005f24:	4616      	mov	r6, r2
 8005f26:	460d      	mov	r5, r1
 8005f28:	b919      	cbnz	r1, 8005f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005f2a:	b112      	cbz	r2, 8005f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005f2c:	480d      	ldr	r0, [pc, #52]	; (8005f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8005f2e:	f000 f845 	bl	8005fbc <_ZSt19__throw_logic_errorPKc>
 8005f32:	1b73      	subs	r3, r6, r5
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	d907      	bls.n	8005f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	a901      	add	r1, sp, #4
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ffbc 	bl	8005ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	6020      	str	r0, [r4, #0]
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	f7ff ffdf 	bl	8005f12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8005f54:	9b01      	ldr	r3, [sp, #4]
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	54d1      	strb	r1, [r2, r3]
 8005f5e:	b002      	add	sp, #8
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	bf00      	nop
 8005f64:	08007224 	.word	0x08007224

08005f68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	f100 0308 	add.w	r3, r0, #8
 8005f6e:	4604      	mov	r4, r0
 8005f70:	6003      	str	r3, [r0, #0]
 8005f72:	460d      	mov	r5, r1
 8005f74:	b159      	cbz	r1, 8005f8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8005f76:	4608      	mov	r0, r1
 8005f78:	f7fa f952 	bl	8000220 <strlen>
 8005f7c:	182a      	adds	r2, r5, r0
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	4629      	mov	r1, r5
 8005f86:	f7ff ffcb 	bl	8005f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	bd38      	pop	{r3, r4, r5, pc}
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f92:	e7f4      	b.n	8005f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08005f94 <_Znwj>:
 8005f94:	2801      	cmp	r0, #1
 8005f96:	bf38      	it	cc
 8005f98:	2001      	movcc	r0, #1
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f84c 	bl	800603c <malloc>
 8005fa4:	b930      	cbnz	r0, 8005fb4 <_Znwj+0x20>
 8005fa6:	f000 f80f 	bl	8005fc8 <_ZSt15get_new_handlerv>
 8005faa:	b908      	cbnz	r0, 8005fb0 <_Znwj+0x1c>
 8005fac:	f000 f814 	bl	8005fd8 <abort>
 8005fb0:	4780      	blx	r0
 8005fb2:	e7f4      	b.n	8005f9e <_Znwj+0xa>
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <_ZSt17__throw_bad_allocv>:
 8005fb6:	b508      	push	{r3, lr}
 8005fb8:	f000 f80e 	bl	8005fd8 <abort>

08005fbc <_ZSt19__throw_logic_errorPKc>:
 8005fbc:	b508      	push	{r3, lr}
 8005fbe:	f000 f80b 	bl	8005fd8 <abort>

08005fc2 <_ZSt20__throw_length_errorPKc>:
 8005fc2:	b508      	push	{r3, lr}
 8005fc4:	f000 f808 	bl	8005fd8 <abort>

08005fc8 <_ZSt15get_new_handlerv>:
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <_ZSt15get_new_handlerv+0xc>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	f3bf 8f5b 	dmb	ish
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	200000a4 	.word	0x200000a4

08005fd8 <abort>:
 8005fd8:	b508      	push	{r3, lr}
 8005fda:	2006      	movs	r0, #6
 8005fdc:	f000 f9bc 	bl	8006358 <raise>
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	f7fb f967 	bl	80012b4 <_exit>
	...

08005fe8 <__errno>:
 8005fe8:	4b01      	ldr	r3, [pc, #4]	; (8005ff0 <__errno+0x8>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000018 	.word	0x20000018

08005ff4 <__libc_init_array>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4d0d      	ldr	r5, [pc, #52]	; (800602c <__libc_init_array+0x38>)
 8005ff8:	4c0d      	ldr	r4, [pc, #52]	; (8006030 <__libc_init_array+0x3c>)
 8005ffa:	1b64      	subs	r4, r4, r5
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	2600      	movs	r6, #0
 8006000:	42a6      	cmp	r6, r4
 8006002:	d109      	bne.n	8006018 <__libc_init_array+0x24>
 8006004:	4d0b      	ldr	r5, [pc, #44]	; (8006034 <__libc_init_array+0x40>)
 8006006:	4c0c      	ldr	r4, [pc, #48]	; (8006038 <__libc_init_array+0x44>)
 8006008:	f001 f846 	bl	8007098 <_init>
 800600c:	1b64      	subs	r4, r4, r5
 800600e:	10a4      	asrs	r4, r4, #2
 8006010:	2600      	movs	r6, #0
 8006012:	42a6      	cmp	r6, r4
 8006014:	d105      	bne.n	8006022 <__libc_init_array+0x2e>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	f855 3b04 	ldr.w	r3, [r5], #4
 800601c:	4798      	blx	r3
 800601e:	3601      	adds	r6, #1
 8006020:	e7ee      	b.n	8006000 <__libc_init_array+0xc>
 8006022:	f855 3b04 	ldr.w	r3, [r5], #4
 8006026:	4798      	blx	r3
 8006028:	3601      	adds	r6, #1
 800602a:	e7f2      	b.n	8006012 <__libc_init_array+0x1e>
 800602c:	080072f0 	.word	0x080072f0
 8006030:	080072f0 	.word	0x080072f0
 8006034:	080072f0 	.word	0x080072f0
 8006038:	080072f4 	.word	0x080072f4

0800603c <malloc>:
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <malloc+0xc>)
 800603e:	4601      	mov	r1, r0
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f000 b869 	b.w	8006118 <_malloc_r>
 8006046:	bf00      	nop
 8006048:	20000018 	.word	0x20000018

0800604c <memcpy>:
 800604c:	440a      	add	r2, r1
 800604e:	4291      	cmp	r1, r2
 8006050:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006054:	d100      	bne.n	8006058 <memcpy+0xc>
 8006056:	4770      	bx	lr
 8006058:	b510      	push	{r4, lr}
 800605a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006062:	4291      	cmp	r1, r2
 8006064:	d1f9      	bne.n	800605a <memcpy+0xe>
 8006066:	bd10      	pop	{r4, pc}

08006068 <memset>:
 8006068:	4402      	add	r2, r0
 800606a:	4603      	mov	r3, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	d100      	bne.n	8006072 <memset+0xa>
 8006070:	4770      	bx	lr
 8006072:	f803 1b01 	strb.w	r1, [r3], #1
 8006076:	e7f9      	b.n	800606c <memset+0x4>

08006078 <_free_r>:
 8006078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800607a:	2900      	cmp	r1, #0
 800607c:	d048      	beq.n	8006110 <_free_r+0x98>
 800607e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006082:	9001      	str	r0, [sp, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f1a1 0404 	sub.w	r4, r1, #4
 800608a:	bfb8      	it	lt
 800608c:	18e4      	addlt	r4, r4, r3
 800608e:	f000 fc5d 	bl	800694c <__malloc_lock>
 8006092:	4a20      	ldr	r2, [pc, #128]	; (8006114 <_free_r+0x9c>)
 8006094:	9801      	ldr	r0, [sp, #4]
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	4615      	mov	r5, r2
 800609a:	b933      	cbnz	r3, 80060aa <_free_r+0x32>
 800609c:	6063      	str	r3, [r4, #4]
 800609e:	6014      	str	r4, [r2, #0]
 80060a0:	b003      	add	sp, #12
 80060a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060a6:	f000 bc57 	b.w	8006958 <__malloc_unlock>
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	d90b      	bls.n	80060c6 <_free_r+0x4e>
 80060ae:	6821      	ldr	r1, [r4, #0]
 80060b0:	1862      	adds	r2, r4, r1
 80060b2:	4293      	cmp	r3, r2
 80060b4:	bf04      	itt	eq
 80060b6:	681a      	ldreq	r2, [r3, #0]
 80060b8:	685b      	ldreq	r3, [r3, #4]
 80060ba:	6063      	str	r3, [r4, #4]
 80060bc:	bf04      	itt	eq
 80060be:	1852      	addeq	r2, r2, r1
 80060c0:	6022      	streq	r2, [r4, #0]
 80060c2:	602c      	str	r4, [r5, #0]
 80060c4:	e7ec      	b.n	80060a0 <_free_r+0x28>
 80060c6:	461a      	mov	r2, r3
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	b10b      	cbz	r3, 80060d0 <_free_r+0x58>
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	d9fa      	bls.n	80060c6 <_free_r+0x4e>
 80060d0:	6811      	ldr	r1, [r2, #0]
 80060d2:	1855      	adds	r5, r2, r1
 80060d4:	42a5      	cmp	r5, r4
 80060d6:	d10b      	bne.n	80060f0 <_free_r+0x78>
 80060d8:	6824      	ldr	r4, [r4, #0]
 80060da:	4421      	add	r1, r4
 80060dc:	1854      	adds	r4, r2, r1
 80060de:	42a3      	cmp	r3, r4
 80060e0:	6011      	str	r1, [r2, #0]
 80060e2:	d1dd      	bne.n	80060a0 <_free_r+0x28>
 80060e4:	681c      	ldr	r4, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	6053      	str	r3, [r2, #4]
 80060ea:	4421      	add	r1, r4
 80060ec:	6011      	str	r1, [r2, #0]
 80060ee:	e7d7      	b.n	80060a0 <_free_r+0x28>
 80060f0:	d902      	bls.n	80060f8 <_free_r+0x80>
 80060f2:	230c      	movs	r3, #12
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	e7d3      	b.n	80060a0 <_free_r+0x28>
 80060f8:	6825      	ldr	r5, [r4, #0]
 80060fa:	1961      	adds	r1, r4, r5
 80060fc:	428b      	cmp	r3, r1
 80060fe:	bf04      	itt	eq
 8006100:	6819      	ldreq	r1, [r3, #0]
 8006102:	685b      	ldreq	r3, [r3, #4]
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	bf04      	itt	eq
 8006108:	1949      	addeq	r1, r1, r5
 800610a:	6021      	streq	r1, [r4, #0]
 800610c:	6054      	str	r4, [r2, #4]
 800610e:	e7c7      	b.n	80060a0 <_free_r+0x28>
 8006110:	b003      	add	sp, #12
 8006112:	bd30      	pop	{r4, r5, pc}
 8006114:	200000a8 	.word	0x200000a8

08006118 <_malloc_r>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	1ccd      	adds	r5, r1, #3
 800611c:	f025 0503 	bic.w	r5, r5, #3
 8006120:	3508      	adds	r5, #8
 8006122:	2d0c      	cmp	r5, #12
 8006124:	bf38      	it	cc
 8006126:	250c      	movcc	r5, #12
 8006128:	2d00      	cmp	r5, #0
 800612a:	4606      	mov	r6, r0
 800612c:	db01      	blt.n	8006132 <_malloc_r+0x1a>
 800612e:	42a9      	cmp	r1, r5
 8006130:	d903      	bls.n	800613a <_malloc_r+0x22>
 8006132:	230c      	movs	r3, #12
 8006134:	6033      	str	r3, [r6, #0]
 8006136:	2000      	movs	r0, #0
 8006138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800613a:	f000 fc07 	bl	800694c <__malloc_lock>
 800613e:	4921      	ldr	r1, [pc, #132]	; (80061c4 <_malloc_r+0xac>)
 8006140:	680a      	ldr	r2, [r1, #0]
 8006142:	4614      	mov	r4, r2
 8006144:	b99c      	cbnz	r4, 800616e <_malloc_r+0x56>
 8006146:	4f20      	ldr	r7, [pc, #128]	; (80061c8 <_malloc_r+0xb0>)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	b923      	cbnz	r3, 8006156 <_malloc_r+0x3e>
 800614c:	4621      	mov	r1, r4
 800614e:	4630      	mov	r0, r6
 8006150:	f000 f8ca 	bl	80062e8 <_sbrk_r>
 8006154:	6038      	str	r0, [r7, #0]
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	f000 f8c5 	bl	80062e8 <_sbrk_r>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	d123      	bne.n	80061aa <_malloc_r+0x92>
 8006162:	230c      	movs	r3, #12
 8006164:	6033      	str	r3, [r6, #0]
 8006166:	4630      	mov	r0, r6
 8006168:	f000 fbf6 	bl	8006958 <__malloc_unlock>
 800616c:	e7e3      	b.n	8006136 <_malloc_r+0x1e>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	1b5b      	subs	r3, r3, r5
 8006172:	d417      	bmi.n	80061a4 <_malloc_r+0x8c>
 8006174:	2b0b      	cmp	r3, #11
 8006176:	d903      	bls.n	8006180 <_malloc_r+0x68>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	441c      	add	r4, r3
 800617c:	6025      	str	r5, [r4, #0]
 800617e:	e004      	b.n	800618a <_malloc_r+0x72>
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	42a2      	cmp	r2, r4
 8006184:	bf0c      	ite	eq
 8006186:	600b      	streq	r3, [r1, #0]
 8006188:	6053      	strne	r3, [r2, #4]
 800618a:	4630      	mov	r0, r6
 800618c:	f000 fbe4 	bl	8006958 <__malloc_unlock>
 8006190:	f104 000b 	add.w	r0, r4, #11
 8006194:	1d23      	adds	r3, r4, #4
 8006196:	f020 0007 	bic.w	r0, r0, #7
 800619a:	1ac2      	subs	r2, r0, r3
 800619c:	d0cc      	beq.n	8006138 <_malloc_r+0x20>
 800619e:	1a1b      	subs	r3, r3, r0
 80061a0:	50a3      	str	r3, [r4, r2]
 80061a2:	e7c9      	b.n	8006138 <_malloc_r+0x20>
 80061a4:	4622      	mov	r2, r4
 80061a6:	6864      	ldr	r4, [r4, #4]
 80061a8:	e7cc      	b.n	8006144 <_malloc_r+0x2c>
 80061aa:	1cc4      	adds	r4, r0, #3
 80061ac:	f024 0403 	bic.w	r4, r4, #3
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d0e3      	beq.n	800617c <_malloc_r+0x64>
 80061b4:	1a21      	subs	r1, r4, r0
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 f896 	bl	80062e8 <_sbrk_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	d1dd      	bne.n	800617c <_malloc_r+0x64>
 80061c0:	e7cf      	b.n	8006162 <_malloc_r+0x4a>
 80061c2:	bf00      	nop
 80061c4:	200000a8 	.word	0x200000a8
 80061c8:	200000ac 	.word	0x200000ac

080061cc <iprintf>:
 80061cc:	b40f      	push	{r0, r1, r2, r3}
 80061ce:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <iprintf+0x2c>)
 80061d0:	b513      	push	{r0, r1, r4, lr}
 80061d2:	681c      	ldr	r4, [r3, #0]
 80061d4:	b124      	cbz	r4, 80061e0 <iprintf+0x14>
 80061d6:	69a3      	ldr	r3, [r4, #24]
 80061d8:	b913      	cbnz	r3, 80061e0 <iprintf+0x14>
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 fab2 	bl	8006744 <__sinit>
 80061e0:	ab05      	add	r3, sp, #20
 80061e2:	9a04      	ldr	r2, [sp, #16]
 80061e4:	68a1      	ldr	r1, [r4, #8]
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fbe5 	bl	80069b8 <_vfiprintf_r>
 80061ee:	b002      	add	sp, #8
 80061f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f4:	b004      	add	sp, #16
 80061f6:	4770      	bx	lr
 80061f8:	20000018 	.word	0x20000018

080061fc <_puts_r>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	460e      	mov	r6, r1
 8006200:	4605      	mov	r5, r0
 8006202:	b118      	cbz	r0, 800620c <_puts_r+0x10>
 8006204:	6983      	ldr	r3, [r0, #24]
 8006206:	b90b      	cbnz	r3, 800620c <_puts_r+0x10>
 8006208:	f000 fa9c 	bl	8006744 <__sinit>
 800620c:	69ab      	ldr	r3, [r5, #24]
 800620e:	68ac      	ldr	r4, [r5, #8]
 8006210:	b913      	cbnz	r3, 8006218 <_puts_r+0x1c>
 8006212:	4628      	mov	r0, r5
 8006214:	f000 fa96 	bl	8006744 <__sinit>
 8006218:	4b2c      	ldr	r3, [pc, #176]	; (80062cc <_puts_r+0xd0>)
 800621a:	429c      	cmp	r4, r3
 800621c:	d120      	bne.n	8006260 <_puts_r+0x64>
 800621e:	686c      	ldr	r4, [r5, #4]
 8006220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006222:	07db      	lsls	r3, r3, #31
 8006224:	d405      	bmi.n	8006232 <_puts_r+0x36>
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	0598      	lsls	r0, r3, #22
 800622a:	d402      	bmi.n	8006232 <_puts_r+0x36>
 800622c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800622e:	f000 fb27 	bl	8006880 <__retarget_lock_acquire_recursive>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	0719      	lsls	r1, r3, #28
 8006236:	d51d      	bpl.n	8006274 <_puts_r+0x78>
 8006238:	6923      	ldr	r3, [r4, #16]
 800623a:	b1db      	cbz	r3, 8006274 <_puts_r+0x78>
 800623c:	3e01      	subs	r6, #1
 800623e:	68a3      	ldr	r3, [r4, #8]
 8006240:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006244:	3b01      	subs	r3, #1
 8006246:	60a3      	str	r3, [r4, #8]
 8006248:	bb39      	cbnz	r1, 800629a <_puts_r+0x9e>
 800624a:	2b00      	cmp	r3, #0
 800624c:	da38      	bge.n	80062c0 <_puts_r+0xc4>
 800624e:	4622      	mov	r2, r4
 8006250:	210a      	movs	r1, #10
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f89c 	bl	8006390 <__swbuf_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d011      	beq.n	8006280 <_puts_r+0x84>
 800625c:	250a      	movs	r5, #10
 800625e:	e011      	b.n	8006284 <_puts_r+0x88>
 8006260:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <_puts_r+0xd4>)
 8006262:	429c      	cmp	r4, r3
 8006264:	d101      	bne.n	800626a <_puts_r+0x6e>
 8006266:	68ac      	ldr	r4, [r5, #8]
 8006268:	e7da      	b.n	8006220 <_puts_r+0x24>
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <_puts_r+0xd8>)
 800626c:	429c      	cmp	r4, r3
 800626e:	bf08      	it	eq
 8006270:	68ec      	ldreq	r4, [r5, #12]
 8006272:	e7d5      	b.n	8006220 <_puts_r+0x24>
 8006274:	4621      	mov	r1, r4
 8006276:	4628      	mov	r0, r5
 8006278:	f000 f8dc 	bl	8006434 <__swsetup_r>
 800627c:	2800      	cmp	r0, #0
 800627e:	d0dd      	beq.n	800623c <_puts_r+0x40>
 8006280:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006286:	07da      	lsls	r2, r3, #31
 8006288:	d405      	bmi.n	8006296 <_puts_r+0x9a>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	059b      	lsls	r3, r3, #22
 800628e:	d402      	bmi.n	8006296 <_puts_r+0x9a>
 8006290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006292:	f000 faf6 	bl	8006882 <__retarget_lock_release_recursive>
 8006296:	4628      	mov	r0, r5
 8006298:	bd70      	pop	{r4, r5, r6, pc}
 800629a:	2b00      	cmp	r3, #0
 800629c:	da04      	bge.n	80062a8 <_puts_r+0xac>
 800629e:	69a2      	ldr	r2, [r4, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	dc06      	bgt.n	80062b2 <_puts_r+0xb6>
 80062a4:	290a      	cmp	r1, #10
 80062a6:	d004      	beq.n	80062b2 <_puts_r+0xb6>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	6022      	str	r2, [r4, #0]
 80062ae:	7019      	strb	r1, [r3, #0]
 80062b0:	e7c5      	b.n	800623e <_puts_r+0x42>
 80062b2:	4622      	mov	r2, r4
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 f86b 	bl	8006390 <__swbuf_r>
 80062ba:	3001      	adds	r0, #1
 80062bc:	d1bf      	bne.n	800623e <_puts_r+0x42>
 80062be:	e7df      	b.n	8006280 <_puts_r+0x84>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	250a      	movs	r5, #10
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	6022      	str	r2, [r4, #0]
 80062c8:	701d      	strb	r5, [r3, #0]
 80062ca:	e7db      	b.n	8006284 <_puts_r+0x88>
 80062cc:	08007274 	.word	0x08007274
 80062d0:	08007294 	.word	0x08007294
 80062d4:	08007254 	.word	0x08007254

080062d8 <puts>:
 80062d8:	4b02      	ldr	r3, [pc, #8]	; (80062e4 <puts+0xc>)
 80062da:	4601      	mov	r1, r0
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	f7ff bf8d 	b.w	80061fc <_puts_r>
 80062e2:	bf00      	nop
 80062e4:	20000018 	.word	0x20000018

080062e8 <_sbrk_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d06      	ldr	r5, [pc, #24]	; (8006304 <_sbrk_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fb f856 	bl	80013a4 <_sbrk>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_sbrk_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_sbrk_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20000228 	.word	0x20000228

08006308 <_raise_r>:
 8006308:	291f      	cmp	r1, #31
 800630a:	b538      	push	{r3, r4, r5, lr}
 800630c:	4604      	mov	r4, r0
 800630e:	460d      	mov	r5, r1
 8006310:	d904      	bls.n	800631c <_raise_r+0x14>
 8006312:	2316      	movs	r3, #22
 8006314:	6003      	str	r3, [r0, #0]
 8006316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800631e:	b112      	cbz	r2, 8006326 <_raise_r+0x1e>
 8006320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006324:	b94b      	cbnz	r3, 800633a <_raise_r+0x32>
 8006326:	4620      	mov	r0, r4
 8006328:	f000 f830 	bl	800638c <_getpid_r>
 800632c:	462a      	mov	r2, r5
 800632e:	4601      	mov	r1, r0
 8006330:	4620      	mov	r0, r4
 8006332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006336:	f000 b817 	b.w	8006368 <_kill_r>
 800633a:	2b01      	cmp	r3, #1
 800633c:	d00a      	beq.n	8006354 <_raise_r+0x4c>
 800633e:	1c59      	adds	r1, r3, #1
 8006340:	d103      	bne.n	800634a <_raise_r+0x42>
 8006342:	2316      	movs	r3, #22
 8006344:	6003      	str	r3, [r0, #0]
 8006346:	2001      	movs	r0, #1
 8006348:	e7e7      	b.n	800631a <_raise_r+0x12>
 800634a:	2400      	movs	r4, #0
 800634c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006350:	4628      	mov	r0, r5
 8006352:	4798      	blx	r3
 8006354:	2000      	movs	r0, #0
 8006356:	e7e0      	b.n	800631a <_raise_r+0x12>

08006358 <raise>:
 8006358:	4b02      	ldr	r3, [pc, #8]	; (8006364 <raise+0xc>)
 800635a:	4601      	mov	r1, r0
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f7ff bfd3 	b.w	8006308 <_raise_r>
 8006362:	bf00      	nop
 8006364:	20000018 	.word	0x20000018

08006368 <_kill_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d07      	ldr	r5, [pc, #28]	; (8006388 <_kill_r+0x20>)
 800636c:	2300      	movs	r3, #0
 800636e:	4604      	mov	r4, r0
 8006370:	4608      	mov	r0, r1
 8006372:	4611      	mov	r1, r2
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	f7fa ff8d 	bl	8001294 <_kill>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d102      	bne.n	8006384 <_kill_r+0x1c>
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	b103      	cbz	r3, 8006384 <_kill_r+0x1c>
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	bd38      	pop	{r3, r4, r5, pc}
 8006386:	bf00      	nop
 8006388:	20000228 	.word	0x20000228

0800638c <_getpid_r>:
 800638c:	f7fa bf7a 	b.w	8001284 <_getpid>

08006390 <__swbuf_r>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	460e      	mov	r6, r1
 8006394:	4614      	mov	r4, r2
 8006396:	4605      	mov	r5, r0
 8006398:	b118      	cbz	r0, 80063a2 <__swbuf_r+0x12>
 800639a:	6983      	ldr	r3, [r0, #24]
 800639c:	b90b      	cbnz	r3, 80063a2 <__swbuf_r+0x12>
 800639e:	f000 f9d1 	bl	8006744 <__sinit>
 80063a2:	4b21      	ldr	r3, [pc, #132]	; (8006428 <__swbuf_r+0x98>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	d12b      	bne.n	8006400 <__swbuf_r+0x70>
 80063a8:	686c      	ldr	r4, [r5, #4]
 80063aa:	69a3      	ldr	r3, [r4, #24]
 80063ac:	60a3      	str	r3, [r4, #8]
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	071a      	lsls	r2, r3, #28
 80063b2:	d52f      	bpl.n	8006414 <__swbuf_r+0x84>
 80063b4:	6923      	ldr	r3, [r4, #16]
 80063b6:	b36b      	cbz	r3, 8006414 <__swbuf_r+0x84>
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	6820      	ldr	r0, [r4, #0]
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	6963      	ldr	r3, [r4, #20]
 80063c0:	b2f6      	uxtb	r6, r6
 80063c2:	4283      	cmp	r3, r0
 80063c4:	4637      	mov	r7, r6
 80063c6:	dc04      	bgt.n	80063d2 <__swbuf_r+0x42>
 80063c8:	4621      	mov	r1, r4
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f926 	bl	800661c <_fflush_r>
 80063d0:	bb30      	cbnz	r0, 8006420 <__swbuf_r+0x90>
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	60a3      	str	r3, [r4, #8]
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	6022      	str	r2, [r4, #0]
 80063de:	701e      	strb	r6, [r3, #0]
 80063e0:	6963      	ldr	r3, [r4, #20]
 80063e2:	3001      	adds	r0, #1
 80063e4:	4283      	cmp	r3, r0
 80063e6:	d004      	beq.n	80063f2 <__swbuf_r+0x62>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	07db      	lsls	r3, r3, #31
 80063ec:	d506      	bpl.n	80063fc <__swbuf_r+0x6c>
 80063ee:	2e0a      	cmp	r6, #10
 80063f0:	d104      	bne.n	80063fc <__swbuf_r+0x6c>
 80063f2:	4621      	mov	r1, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f911 	bl	800661c <_fflush_r>
 80063fa:	b988      	cbnz	r0, 8006420 <__swbuf_r+0x90>
 80063fc:	4638      	mov	r0, r7
 80063fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <__swbuf_r+0x9c>)
 8006402:	429c      	cmp	r4, r3
 8006404:	d101      	bne.n	800640a <__swbuf_r+0x7a>
 8006406:	68ac      	ldr	r4, [r5, #8]
 8006408:	e7cf      	b.n	80063aa <__swbuf_r+0x1a>
 800640a:	4b09      	ldr	r3, [pc, #36]	; (8006430 <__swbuf_r+0xa0>)
 800640c:	429c      	cmp	r4, r3
 800640e:	bf08      	it	eq
 8006410:	68ec      	ldreq	r4, [r5, #12]
 8006412:	e7ca      	b.n	80063aa <__swbuf_r+0x1a>
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f80c 	bl	8006434 <__swsetup_r>
 800641c:	2800      	cmp	r0, #0
 800641e:	d0cb      	beq.n	80063b8 <__swbuf_r+0x28>
 8006420:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006424:	e7ea      	b.n	80063fc <__swbuf_r+0x6c>
 8006426:	bf00      	nop
 8006428:	08007274 	.word	0x08007274
 800642c:	08007294 	.word	0x08007294
 8006430:	08007254 	.word	0x08007254

08006434 <__swsetup_r>:
 8006434:	4b32      	ldr	r3, [pc, #200]	; (8006500 <__swsetup_r+0xcc>)
 8006436:	b570      	push	{r4, r5, r6, lr}
 8006438:	681d      	ldr	r5, [r3, #0]
 800643a:	4606      	mov	r6, r0
 800643c:	460c      	mov	r4, r1
 800643e:	b125      	cbz	r5, 800644a <__swsetup_r+0x16>
 8006440:	69ab      	ldr	r3, [r5, #24]
 8006442:	b913      	cbnz	r3, 800644a <__swsetup_r+0x16>
 8006444:	4628      	mov	r0, r5
 8006446:	f000 f97d 	bl	8006744 <__sinit>
 800644a:	4b2e      	ldr	r3, [pc, #184]	; (8006504 <__swsetup_r+0xd0>)
 800644c:	429c      	cmp	r4, r3
 800644e:	d10f      	bne.n	8006470 <__swsetup_r+0x3c>
 8006450:	686c      	ldr	r4, [r5, #4]
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006458:	0719      	lsls	r1, r3, #28
 800645a:	d42c      	bmi.n	80064b6 <__swsetup_r+0x82>
 800645c:	06dd      	lsls	r5, r3, #27
 800645e:	d411      	bmi.n	8006484 <__swsetup_r+0x50>
 8006460:	2309      	movs	r3, #9
 8006462:	6033      	str	r3, [r6, #0]
 8006464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800646e:	e03e      	b.n	80064ee <__swsetup_r+0xba>
 8006470:	4b25      	ldr	r3, [pc, #148]	; (8006508 <__swsetup_r+0xd4>)
 8006472:	429c      	cmp	r4, r3
 8006474:	d101      	bne.n	800647a <__swsetup_r+0x46>
 8006476:	68ac      	ldr	r4, [r5, #8]
 8006478:	e7eb      	b.n	8006452 <__swsetup_r+0x1e>
 800647a:	4b24      	ldr	r3, [pc, #144]	; (800650c <__swsetup_r+0xd8>)
 800647c:	429c      	cmp	r4, r3
 800647e:	bf08      	it	eq
 8006480:	68ec      	ldreq	r4, [r5, #12]
 8006482:	e7e6      	b.n	8006452 <__swsetup_r+0x1e>
 8006484:	0758      	lsls	r0, r3, #29
 8006486:	d512      	bpl.n	80064ae <__swsetup_r+0x7a>
 8006488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648a:	b141      	cbz	r1, 800649e <__swsetup_r+0x6a>
 800648c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006490:	4299      	cmp	r1, r3
 8006492:	d002      	beq.n	800649a <__swsetup_r+0x66>
 8006494:	4630      	mov	r0, r6
 8006496:	f7ff fdef 	bl	8006078 <_free_r>
 800649a:	2300      	movs	r3, #0
 800649c:	6363      	str	r3, [r4, #52]	; 0x34
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	2300      	movs	r3, #0
 80064a8:	6063      	str	r3, [r4, #4]
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f043 0308 	orr.w	r3, r3, #8
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	b94b      	cbnz	r3, 80064ce <__swsetup_r+0x9a>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c4:	d003      	beq.n	80064ce <__swsetup_r+0x9a>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f9ff 	bl	80068cc <__smakebuf_r>
 80064ce:	89a0      	ldrh	r0, [r4, #12]
 80064d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064d4:	f010 0301 	ands.w	r3, r0, #1
 80064d8:	d00a      	beq.n	80064f0 <__swsetup_r+0xbc>
 80064da:	2300      	movs	r3, #0
 80064dc:	60a3      	str	r3, [r4, #8]
 80064de:	6963      	ldr	r3, [r4, #20]
 80064e0:	425b      	negs	r3, r3
 80064e2:	61a3      	str	r3, [r4, #24]
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	b943      	cbnz	r3, 80064fa <__swsetup_r+0xc6>
 80064e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064ec:	d1ba      	bne.n	8006464 <__swsetup_r+0x30>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	0781      	lsls	r1, r0, #30
 80064f2:	bf58      	it	pl
 80064f4:	6963      	ldrpl	r3, [r4, #20]
 80064f6:	60a3      	str	r3, [r4, #8]
 80064f8:	e7f4      	b.n	80064e4 <__swsetup_r+0xb0>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7f7      	b.n	80064ee <__swsetup_r+0xba>
 80064fe:	bf00      	nop
 8006500:	20000018 	.word	0x20000018
 8006504:	08007274 	.word	0x08007274
 8006508:	08007294 	.word	0x08007294
 800650c:	08007254 	.word	0x08007254

08006510 <__sflush_r>:
 8006510:	898a      	ldrh	r2, [r1, #12]
 8006512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006516:	4605      	mov	r5, r0
 8006518:	0710      	lsls	r0, r2, #28
 800651a:	460c      	mov	r4, r1
 800651c:	d458      	bmi.n	80065d0 <__sflush_r+0xc0>
 800651e:	684b      	ldr	r3, [r1, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	dc05      	bgt.n	8006530 <__sflush_r+0x20>
 8006524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	dc02      	bgt.n	8006530 <__sflush_r+0x20>
 800652a:	2000      	movs	r0, #0
 800652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006532:	2e00      	cmp	r6, #0
 8006534:	d0f9      	beq.n	800652a <__sflush_r+0x1a>
 8006536:	2300      	movs	r3, #0
 8006538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800653c:	682f      	ldr	r7, [r5, #0]
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	d032      	beq.n	80065a8 <__sflush_r+0x98>
 8006542:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	075a      	lsls	r2, r3, #29
 8006548:	d505      	bpl.n	8006556 <__sflush_r+0x46>
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	1ac0      	subs	r0, r0, r3
 800654e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006550:	b10b      	cbz	r3, 8006556 <__sflush_r+0x46>
 8006552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006554:	1ac0      	subs	r0, r0, r3
 8006556:	2300      	movs	r3, #0
 8006558:	4602      	mov	r2, r0
 800655a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800655c:	6a21      	ldr	r1, [r4, #32]
 800655e:	4628      	mov	r0, r5
 8006560:	47b0      	blx	r6
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	d106      	bne.n	8006576 <__sflush_r+0x66>
 8006568:	6829      	ldr	r1, [r5, #0]
 800656a:	291d      	cmp	r1, #29
 800656c:	d82c      	bhi.n	80065c8 <__sflush_r+0xb8>
 800656e:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <__sflush_r+0x108>)
 8006570:	40ca      	lsrs	r2, r1
 8006572:	07d6      	lsls	r6, r2, #31
 8006574:	d528      	bpl.n	80065c8 <__sflush_r+0xb8>
 8006576:	2200      	movs	r2, #0
 8006578:	6062      	str	r2, [r4, #4]
 800657a:	04d9      	lsls	r1, r3, #19
 800657c:	6922      	ldr	r2, [r4, #16]
 800657e:	6022      	str	r2, [r4, #0]
 8006580:	d504      	bpl.n	800658c <__sflush_r+0x7c>
 8006582:	1c42      	adds	r2, r0, #1
 8006584:	d101      	bne.n	800658a <__sflush_r+0x7a>
 8006586:	682b      	ldr	r3, [r5, #0]
 8006588:	b903      	cbnz	r3, 800658c <__sflush_r+0x7c>
 800658a:	6560      	str	r0, [r4, #84]	; 0x54
 800658c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800658e:	602f      	str	r7, [r5, #0]
 8006590:	2900      	cmp	r1, #0
 8006592:	d0ca      	beq.n	800652a <__sflush_r+0x1a>
 8006594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006598:	4299      	cmp	r1, r3
 800659a:	d002      	beq.n	80065a2 <__sflush_r+0x92>
 800659c:	4628      	mov	r0, r5
 800659e:	f7ff fd6b 	bl	8006078 <_free_r>
 80065a2:	2000      	movs	r0, #0
 80065a4:	6360      	str	r0, [r4, #52]	; 0x34
 80065a6:	e7c1      	b.n	800652c <__sflush_r+0x1c>
 80065a8:	6a21      	ldr	r1, [r4, #32]
 80065aa:	2301      	movs	r3, #1
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b0      	blx	r6
 80065b0:	1c41      	adds	r1, r0, #1
 80065b2:	d1c7      	bne.n	8006544 <__sflush_r+0x34>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0c4      	beq.n	8006544 <__sflush_r+0x34>
 80065ba:	2b1d      	cmp	r3, #29
 80065bc:	d001      	beq.n	80065c2 <__sflush_r+0xb2>
 80065be:	2b16      	cmp	r3, #22
 80065c0:	d101      	bne.n	80065c6 <__sflush_r+0xb6>
 80065c2:	602f      	str	r7, [r5, #0]
 80065c4:	e7b1      	b.n	800652a <__sflush_r+0x1a>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	e7ad      	b.n	800652c <__sflush_r+0x1c>
 80065d0:	690f      	ldr	r7, [r1, #16]
 80065d2:	2f00      	cmp	r7, #0
 80065d4:	d0a9      	beq.n	800652a <__sflush_r+0x1a>
 80065d6:	0793      	lsls	r3, r2, #30
 80065d8:	680e      	ldr	r6, [r1, #0]
 80065da:	bf08      	it	eq
 80065dc:	694b      	ldreq	r3, [r1, #20]
 80065de:	600f      	str	r7, [r1, #0]
 80065e0:	bf18      	it	ne
 80065e2:	2300      	movne	r3, #0
 80065e4:	eba6 0807 	sub.w	r8, r6, r7
 80065e8:	608b      	str	r3, [r1, #8]
 80065ea:	f1b8 0f00 	cmp.w	r8, #0
 80065ee:	dd9c      	ble.n	800652a <__sflush_r+0x1a>
 80065f0:	6a21      	ldr	r1, [r4, #32]
 80065f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065f4:	4643      	mov	r3, r8
 80065f6:	463a      	mov	r2, r7
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b0      	blx	r6
 80065fc:	2800      	cmp	r0, #0
 80065fe:	dc06      	bgt.n	800660e <__sflush_r+0xfe>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800660c:	e78e      	b.n	800652c <__sflush_r+0x1c>
 800660e:	4407      	add	r7, r0
 8006610:	eba8 0800 	sub.w	r8, r8, r0
 8006614:	e7e9      	b.n	80065ea <__sflush_r+0xda>
 8006616:	bf00      	nop
 8006618:	20400001 	.word	0x20400001

0800661c <_fflush_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	690b      	ldr	r3, [r1, #16]
 8006620:	4605      	mov	r5, r0
 8006622:	460c      	mov	r4, r1
 8006624:	b913      	cbnz	r3, 800662c <_fflush_r+0x10>
 8006626:	2500      	movs	r5, #0
 8006628:	4628      	mov	r0, r5
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	b118      	cbz	r0, 8006636 <_fflush_r+0x1a>
 800662e:	6983      	ldr	r3, [r0, #24]
 8006630:	b90b      	cbnz	r3, 8006636 <_fflush_r+0x1a>
 8006632:	f000 f887 	bl	8006744 <__sinit>
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <_fflush_r+0x6c>)
 8006638:	429c      	cmp	r4, r3
 800663a:	d11b      	bne.n	8006674 <_fflush_r+0x58>
 800663c:	686c      	ldr	r4, [r5, #4]
 800663e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0ef      	beq.n	8006626 <_fflush_r+0xa>
 8006646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006648:	07d0      	lsls	r0, r2, #31
 800664a:	d404      	bmi.n	8006656 <_fflush_r+0x3a>
 800664c:	0599      	lsls	r1, r3, #22
 800664e:	d402      	bmi.n	8006656 <_fflush_r+0x3a>
 8006650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006652:	f000 f915 	bl	8006880 <__retarget_lock_acquire_recursive>
 8006656:	4628      	mov	r0, r5
 8006658:	4621      	mov	r1, r4
 800665a:	f7ff ff59 	bl	8006510 <__sflush_r>
 800665e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006660:	07da      	lsls	r2, r3, #31
 8006662:	4605      	mov	r5, r0
 8006664:	d4e0      	bmi.n	8006628 <_fflush_r+0xc>
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	059b      	lsls	r3, r3, #22
 800666a:	d4dd      	bmi.n	8006628 <_fflush_r+0xc>
 800666c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800666e:	f000 f908 	bl	8006882 <__retarget_lock_release_recursive>
 8006672:	e7d9      	b.n	8006628 <_fflush_r+0xc>
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <_fflush_r+0x70>)
 8006676:	429c      	cmp	r4, r3
 8006678:	d101      	bne.n	800667e <_fflush_r+0x62>
 800667a:	68ac      	ldr	r4, [r5, #8]
 800667c:	e7df      	b.n	800663e <_fflush_r+0x22>
 800667e:	4b04      	ldr	r3, [pc, #16]	; (8006690 <_fflush_r+0x74>)
 8006680:	429c      	cmp	r4, r3
 8006682:	bf08      	it	eq
 8006684:	68ec      	ldreq	r4, [r5, #12]
 8006686:	e7da      	b.n	800663e <_fflush_r+0x22>
 8006688:	08007274 	.word	0x08007274
 800668c:	08007294 	.word	0x08007294
 8006690:	08007254 	.word	0x08007254

08006694 <std>:
 8006694:	2300      	movs	r3, #0
 8006696:	b510      	push	{r4, lr}
 8006698:	4604      	mov	r4, r0
 800669a:	e9c0 3300 	strd	r3, r3, [r0]
 800669e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066a2:	6083      	str	r3, [r0, #8]
 80066a4:	8181      	strh	r1, [r0, #12]
 80066a6:	6643      	str	r3, [r0, #100]	; 0x64
 80066a8:	81c2      	strh	r2, [r0, #14]
 80066aa:	6183      	str	r3, [r0, #24]
 80066ac:	4619      	mov	r1, r3
 80066ae:	2208      	movs	r2, #8
 80066b0:	305c      	adds	r0, #92	; 0x5c
 80066b2:	f7ff fcd9 	bl	8006068 <memset>
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <std+0x38>)
 80066b8:	6263      	str	r3, [r4, #36]	; 0x24
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <std+0x3c>)
 80066bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <std+0x40>)
 80066c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <std+0x44>)
 80066c4:	6224      	str	r4, [r4, #32]
 80066c6:	6323      	str	r3, [r4, #48]	; 0x30
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	bf00      	nop
 80066cc:	08006f41 	.word	0x08006f41
 80066d0:	08006f63 	.word	0x08006f63
 80066d4:	08006f9b 	.word	0x08006f9b
 80066d8:	08006fbf 	.word	0x08006fbf

080066dc <_cleanup_r>:
 80066dc:	4901      	ldr	r1, [pc, #4]	; (80066e4 <_cleanup_r+0x8>)
 80066de:	f000 b8af 	b.w	8006840 <_fwalk_reent>
 80066e2:	bf00      	nop
 80066e4:	0800661d 	.word	0x0800661d

080066e8 <__sfmoreglue>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	1e4a      	subs	r2, r1, #1
 80066ec:	2568      	movs	r5, #104	; 0x68
 80066ee:	4355      	muls	r5, r2
 80066f0:	460e      	mov	r6, r1
 80066f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066f6:	f7ff fd0f 	bl	8006118 <_malloc_r>
 80066fa:	4604      	mov	r4, r0
 80066fc:	b140      	cbz	r0, 8006710 <__sfmoreglue+0x28>
 80066fe:	2100      	movs	r1, #0
 8006700:	e9c0 1600 	strd	r1, r6, [r0]
 8006704:	300c      	adds	r0, #12
 8006706:	60a0      	str	r0, [r4, #8]
 8006708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800670c:	f7ff fcac 	bl	8006068 <memset>
 8006710:	4620      	mov	r0, r4
 8006712:	bd70      	pop	{r4, r5, r6, pc}

08006714 <__sfp_lock_acquire>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sfp_lock_acquire+0x8>)
 8006716:	f000 b8b3 	b.w	8006880 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	20000224 	.word	0x20000224

08006720 <__sfp_lock_release>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sfp_lock_release+0x8>)
 8006722:	f000 b8ae 	b.w	8006882 <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	20000224 	.word	0x20000224

0800672c <__sinit_lock_acquire>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__sinit_lock_acquire+0x8>)
 800672e:	f000 b8a7 	b.w	8006880 <__retarget_lock_acquire_recursive>
 8006732:	bf00      	nop
 8006734:	2000021f 	.word	0x2000021f

08006738 <__sinit_lock_release>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__sinit_lock_release+0x8>)
 800673a:	f000 b8a2 	b.w	8006882 <__retarget_lock_release_recursive>
 800673e:	bf00      	nop
 8006740:	2000021f 	.word	0x2000021f

08006744 <__sinit>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4604      	mov	r4, r0
 8006748:	f7ff fff0 	bl	800672c <__sinit_lock_acquire>
 800674c:	69a3      	ldr	r3, [r4, #24]
 800674e:	b11b      	cbz	r3, 8006758 <__sinit+0x14>
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	f7ff bff0 	b.w	8006738 <__sinit_lock_release>
 8006758:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800675c:	6523      	str	r3, [r4, #80]	; 0x50
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <__sinit+0x68>)
 8006760:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <__sinit+0x6c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	62a2      	str	r2, [r4, #40]	; 0x28
 8006766:	42a3      	cmp	r3, r4
 8006768:	bf04      	itt	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	61a3      	streq	r3, [r4, #24]
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f820 	bl	80067b4 <__sfp>
 8006774:	6060      	str	r0, [r4, #4]
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f81c 	bl	80067b4 <__sfp>
 800677c:	60a0      	str	r0, [r4, #8]
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f818 	bl	80067b4 <__sfp>
 8006784:	2200      	movs	r2, #0
 8006786:	60e0      	str	r0, [r4, #12]
 8006788:	2104      	movs	r1, #4
 800678a:	6860      	ldr	r0, [r4, #4]
 800678c:	f7ff ff82 	bl	8006694 <std>
 8006790:	68a0      	ldr	r0, [r4, #8]
 8006792:	2201      	movs	r2, #1
 8006794:	2109      	movs	r1, #9
 8006796:	f7ff ff7d 	bl	8006694 <std>
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	2202      	movs	r2, #2
 800679e:	2112      	movs	r1, #18
 80067a0:	f7ff ff78 	bl	8006694 <std>
 80067a4:	2301      	movs	r3, #1
 80067a6:	61a3      	str	r3, [r4, #24]
 80067a8:	e7d2      	b.n	8006750 <__sinit+0xc>
 80067aa:	bf00      	nop
 80067ac:	08007250 	.word	0x08007250
 80067b0:	080066dd 	.word	0x080066dd

080067b4 <__sfp>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	4607      	mov	r7, r0
 80067b8:	f7ff ffac 	bl	8006714 <__sfp_lock_acquire>
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <__sfp+0x84>)
 80067be:	681e      	ldr	r6, [r3, #0]
 80067c0:	69b3      	ldr	r3, [r6, #24]
 80067c2:	b913      	cbnz	r3, 80067ca <__sfp+0x16>
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7ff ffbd 	bl	8006744 <__sinit>
 80067ca:	3648      	adds	r6, #72	; 0x48
 80067cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	d503      	bpl.n	80067dc <__sfp+0x28>
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	b30b      	cbz	r3, 800681c <__sfp+0x68>
 80067d8:	6836      	ldr	r6, [r6, #0]
 80067da:	e7f7      	b.n	80067cc <__sfp+0x18>
 80067dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067e0:	b9d5      	cbnz	r5, 8006818 <__sfp+0x64>
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <__sfp+0x88>)
 80067e4:	60e3      	str	r3, [r4, #12]
 80067e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067ea:	6665      	str	r5, [r4, #100]	; 0x64
 80067ec:	f000 f847 	bl	800687e <__retarget_lock_init_recursive>
 80067f0:	f7ff ff96 	bl	8006720 <__sfp_lock_release>
 80067f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	61a5      	str	r5, [r4, #24]
 8006800:	2208      	movs	r2, #8
 8006802:	4629      	mov	r1, r5
 8006804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006808:	f7ff fc2e 	bl	8006068 <memset>
 800680c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006814:	4620      	mov	r0, r4
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	3468      	adds	r4, #104	; 0x68
 800681a:	e7d9      	b.n	80067d0 <__sfp+0x1c>
 800681c:	2104      	movs	r1, #4
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ff62 	bl	80066e8 <__sfmoreglue>
 8006824:	4604      	mov	r4, r0
 8006826:	6030      	str	r0, [r6, #0]
 8006828:	2800      	cmp	r0, #0
 800682a:	d1d5      	bne.n	80067d8 <__sfp+0x24>
 800682c:	f7ff ff78 	bl	8006720 <__sfp_lock_release>
 8006830:	230c      	movs	r3, #12
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	e7ee      	b.n	8006814 <__sfp+0x60>
 8006836:	bf00      	nop
 8006838:	08007250 	.word	0x08007250
 800683c:	ffff0001 	.word	0xffff0001

08006840 <_fwalk_reent>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4606      	mov	r6, r0
 8006846:	4688      	mov	r8, r1
 8006848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800684c:	2700      	movs	r7, #0
 800684e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006852:	f1b9 0901 	subs.w	r9, r9, #1
 8006856:	d505      	bpl.n	8006864 <_fwalk_reent+0x24>
 8006858:	6824      	ldr	r4, [r4, #0]
 800685a:	2c00      	cmp	r4, #0
 800685c:	d1f7      	bne.n	800684e <_fwalk_reent+0xe>
 800685e:	4638      	mov	r0, r7
 8006860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006864:	89ab      	ldrh	r3, [r5, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d907      	bls.n	800687a <_fwalk_reent+0x3a>
 800686a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686e:	3301      	adds	r3, #1
 8006870:	d003      	beq.n	800687a <_fwalk_reent+0x3a>
 8006872:	4629      	mov	r1, r5
 8006874:	4630      	mov	r0, r6
 8006876:	47c0      	blx	r8
 8006878:	4307      	orrs	r7, r0
 800687a:	3568      	adds	r5, #104	; 0x68
 800687c:	e7e9      	b.n	8006852 <_fwalk_reent+0x12>

0800687e <__retarget_lock_init_recursive>:
 800687e:	4770      	bx	lr

08006880 <__retarget_lock_acquire_recursive>:
 8006880:	4770      	bx	lr

08006882 <__retarget_lock_release_recursive>:
 8006882:	4770      	bx	lr

08006884 <__swhatbuf_r>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	460e      	mov	r6, r1
 8006888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688c:	2900      	cmp	r1, #0
 800688e:	b096      	sub	sp, #88	; 0x58
 8006890:	4614      	mov	r4, r2
 8006892:	461d      	mov	r5, r3
 8006894:	da07      	bge.n	80068a6 <__swhatbuf_r+0x22>
 8006896:	2300      	movs	r3, #0
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	89b3      	ldrh	r3, [r6, #12]
 800689c:	061a      	lsls	r2, r3, #24
 800689e:	d410      	bmi.n	80068c2 <__swhatbuf_r+0x3e>
 80068a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a4:	e00e      	b.n	80068c4 <__swhatbuf_r+0x40>
 80068a6:	466a      	mov	r2, sp
 80068a8:	f000 fbb0 	bl	800700c <_fstat_r>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	dbf2      	blt.n	8006896 <__swhatbuf_r+0x12>
 80068b0:	9a01      	ldr	r2, [sp, #4]
 80068b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068ba:	425a      	negs	r2, r3
 80068bc:	415a      	adcs	r2, r3
 80068be:	602a      	str	r2, [r5, #0]
 80068c0:	e7ee      	b.n	80068a0 <__swhatbuf_r+0x1c>
 80068c2:	2340      	movs	r3, #64	; 0x40
 80068c4:	2000      	movs	r0, #0
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	b016      	add	sp, #88	; 0x58
 80068ca:	bd70      	pop	{r4, r5, r6, pc}

080068cc <__smakebuf_r>:
 80068cc:	898b      	ldrh	r3, [r1, #12]
 80068ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068d0:	079d      	lsls	r5, r3, #30
 80068d2:	4606      	mov	r6, r0
 80068d4:	460c      	mov	r4, r1
 80068d6:	d507      	bpl.n	80068e8 <__smakebuf_r+0x1c>
 80068d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	6123      	str	r3, [r4, #16]
 80068e0:	2301      	movs	r3, #1
 80068e2:	6163      	str	r3, [r4, #20]
 80068e4:	b002      	add	sp, #8
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	ab01      	add	r3, sp, #4
 80068ea:	466a      	mov	r2, sp
 80068ec:	f7ff ffca 	bl	8006884 <__swhatbuf_r>
 80068f0:	9900      	ldr	r1, [sp, #0]
 80068f2:	4605      	mov	r5, r0
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff fc0f 	bl	8006118 <_malloc_r>
 80068fa:	b948      	cbnz	r0, 8006910 <__smakebuf_r+0x44>
 80068fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006900:	059a      	lsls	r2, r3, #22
 8006902:	d4ef      	bmi.n	80068e4 <__smakebuf_r+0x18>
 8006904:	f023 0303 	bic.w	r3, r3, #3
 8006908:	f043 0302 	orr.w	r3, r3, #2
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	e7e3      	b.n	80068d8 <__smakebuf_r+0xc>
 8006910:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <__smakebuf_r+0x7c>)
 8006912:	62b3      	str	r3, [r6, #40]	; 0x28
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	6020      	str	r0, [r4, #0]
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	9b00      	ldr	r3, [sp, #0]
 8006920:	6163      	str	r3, [r4, #20]
 8006922:	9b01      	ldr	r3, [sp, #4]
 8006924:	6120      	str	r0, [r4, #16]
 8006926:	b15b      	cbz	r3, 8006940 <__smakebuf_r+0x74>
 8006928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800692c:	4630      	mov	r0, r6
 800692e:	f000 fb7f 	bl	8007030 <_isatty_r>
 8006932:	b128      	cbz	r0, 8006940 <__smakebuf_r+0x74>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	89a0      	ldrh	r0, [r4, #12]
 8006942:	4305      	orrs	r5, r0
 8006944:	81a5      	strh	r5, [r4, #12]
 8006946:	e7cd      	b.n	80068e4 <__smakebuf_r+0x18>
 8006948:	080066dd 	.word	0x080066dd

0800694c <__malloc_lock>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__malloc_lock+0x8>)
 800694e:	f7ff bf97 	b.w	8006880 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	20000220 	.word	0x20000220

08006958 <__malloc_unlock>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__malloc_unlock+0x8>)
 800695a:	f7ff bf92 	b.w	8006882 <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	20000220 	.word	0x20000220

08006964 <__sfputc_r>:
 8006964:	6893      	ldr	r3, [r2, #8]
 8006966:	3b01      	subs	r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	b410      	push	{r4}
 800696c:	6093      	str	r3, [r2, #8]
 800696e:	da08      	bge.n	8006982 <__sfputc_r+0x1e>
 8006970:	6994      	ldr	r4, [r2, #24]
 8006972:	42a3      	cmp	r3, r4
 8006974:	db01      	blt.n	800697a <__sfputc_r+0x16>
 8006976:	290a      	cmp	r1, #10
 8006978:	d103      	bne.n	8006982 <__sfputc_r+0x1e>
 800697a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800697e:	f7ff bd07 	b.w	8006390 <__swbuf_r>
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	1c58      	adds	r0, r3, #1
 8006986:	6010      	str	r0, [r2, #0]
 8006988:	7019      	strb	r1, [r3, #0]
 800698a:	4608      	mov	r0, r1
 800698c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006990:	4770      	bx	lr

08006992 <__sfputs_r>:
 8006992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006994:	4606      	mov	r6, r0
 8006996:	460f      	mov	r7, r1
 8006998:	4614      	mov	r4, r2
 800699a:	18d5      	adds	r5, r2, r3
 800699c:	42ac      	cmp	r4, r5
 800699e:	d101      	bne.n	80069a4 <__sfputs_r+0x12>
 80069a0:	2000      	movs	r0, #0
 80069a2:	e007      	b.n	80069b4 <__sfputs_r+0x22>
 80069a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a8:	463a      	mov	r2, r7
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7ff ffda 	bl	8006964 <__sfputc_r>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d1f3      	bne.n	800699c <__sfputs_r+0xa>
 80069b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069b8 <_vfiprintf_r>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	460d      	mov	r5, r1
 80069be:	b09d      	sub	sp, #116	; 0x74
 80069c0:	4614      	mov	r4, r2
 80069c2:	4698      	mov	r8, r3
 80069c4:	4606      	mov	r6, r0
 80069c6:	b118      	cbz	r0, 80069d0 <_vfiprintf_r+0x18>
 80069c8:	6983      	ldr	r3, [r0, #24]
 80069ca:	b90b      	cbnz	r3, 80069d0 <_vfiprintf_r+0x18>
 80069cc:	f7ff feba 	bl	8006744 <__sinit>
 80069d0:	4b89      	ldr	r3, [pc, #548]	; (8006bf8 <_vfiprintf_r+0x240>)
 80069d2:	429d      	cmp	r5, r3
 80069d4:	d11b      	bne.n	8006a0e <_vfiprintf_r+0x56>
 80069d6:	6875      	ldr	r5, [r6, #4]
 80069d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069da:	07d9      	lsls	r1, r3, #31
 80069dc:	d405      	bmi.n	80069ea <_vfiprintf_r+0x32>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	059a      	lsls	r2, r3, #22
 80069e2:	d402      	bmi.n	80069ea <_vfiprintf_r+0x32>
 80069e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e6:	f7ff ff4b 	bl	8006880 <__retarget_lock_acquire_recursive>
 80069ea:	89ab      	ldrh	r3, [r5, #12]
 80069ec:	071b      	lsls	r3, r3, #28
 80069ee:	d501      	bpl.n	80069f4 <_vfiprintf_r+0x3c>
 80069f0:	692b      	ldr	r3, [r5, #16]
 80069f2:	b9eb      	cbnz	r3, 8006a30 <_vfiprintf_r+0x78>
 80069f4:	4629      	mov	r1, r5
 80069f6:	4630      	mov	r0, r6
 80069f8:	f7ff fd1c 	bl	8006434 <__swsetup_r>
 80069fc:	b1c0      	cbz	r0, 8006a30 <_vfiprintf_r+0x78>
 80069fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a00:	07dc      	lsls	r4, r3, #31
 8006a02:	d50e      	bpl.n	8006a22 <_vfiprintf_r+0x6a>
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a08:	b01d      	add	sp, #116	; 0x74
 8006a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0e:	4b7b      	ldr	r3, [pc, #492]	; (8006bfc <_vfiprintf_r+0x244>)
 8006a10:	429d      	cmp	r5, r3
 8006a12:	d101      	bne.n	8006a18 <_vfiprintf_r+0x60>
 8006a14:	68b5      	ldr	r5, [r6, #8]
 8006a16:	e7df      	b.n	80069d8 <_vfiprintf_r+0x20>
 8006a18:	4b79      	ldr	r3, [pc, #484]	; (8006c00 <_vfiprintf_r+0x248>)
 8006a1a:	429d      	cmp	r5, r3
 8006a1c:	bf08      	it	eq
 8006a1e:	68f5      	ldreq	r5, [r6, #12]
 8006a20:	e7da      	b.n	80069d8 <_vfiprintf_r+0x20>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	0598      	lsls	r0, r3, #22
 8006a26:	d4ed      	bmi.n	8006a04 <_vfiprintf_r+0x4c>
 8006a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a2a:	f7ff ff2a 	bl	8006882 <__retarget_lock_release_recursive>
 8006a2e:	e7e9      	b.n	8006a04 <_vfiprintf_r+0x4c>
 8006a30:	2300      	movs	r3, #0
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	2320      	movs	r3, #32
 8006a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a3e:	2330      	movs	r3, #48	; 0x30
 8006a40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c04 <_vfiprintf_r+0x24c>
 8006a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a48:	f04f 0901 	mov.w	r9, #1
 8006a4c:	4623      	mov	r3, r4
 8006a4e:	469a      	mov	sl, r3
 8006a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a54:	b10a      	cbz	r2, 8006a5a <_vfiprintf_r+0xa2>
 8006a56:	2a25      	cmp	r2, #37	; 0x25
 8006a58:	d1f9      	bne.n	8006a4e <_vfiprintf_r+0x96>
 8006a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a5e:	d00b      	beq.n	8006a78 <_vfiprintf_r+0xc0>
 8006a60:	465b      	mov	r3, fp
 8006a62:	4622      	mov	r2, r4
 8006a64:	4629      	mov	r1, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ff93 	bl	8006992 <__sfputs_r>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f000 80aa 	beq.w	8006bc6 <_vfiprintf_r+0x20e>
 8006a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a74:	445a      	add	r2, fp
 8006a76:	9209      	str	r2, [sp, #36]	; 0x24
 8006a78:	f89a 3000 	ldrb.w	r3, [sl]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80a2 	beq.w	8006bc6 <_vfiprintf_r+0x20e>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a8c:	f10a 0a01 	add.w	sl, sl, #1
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	9307      	str	r3, [sp, #28]
 8006a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a98:	931a      	str	r3, [sp, #104]	; 0x68
 8006a9a:	4654      	mov	r4, sl
 8006a9c:	2205      	movs	r2, #5
 8006a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa2:	4858      	ldr	r0, [pc, #352]	; (8006c04 <_vfiprintf_r+0x24c>)
 8006aa4:	f7f9 fb6c 	bl	8000180 <memchr>
 8006aa8:	9a04      	ldr	r2, [sp, #16]
 8006aaa:	b9d8      	cbnz	r0, 8006ae4 <_vfiprintf_r+0x12c>
 8006aac:	06d1      	lsls	r1, r2, #27
 8006aae:	bf44      	itt	mi
 8006ab0:	2320      	movmi	r3, #32
 8006ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab6:	0713      	lsls	r3, r2, #28
 8006ab8:	bf44      	itt	mi
 8006aba:	232b      	movmi	r3, #43	; 0x2b
 8006abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac6:	d015      	beq.n	8006af4 <_vfiprintf_r+0x13c>
 8006ac8:	9a07      	ldr	r2, [sp, #28]
 8006aca:	4654      	mov	r4, sl
 8006acc:	2000      	movs	r0, #0
 8006ace:	f04f 0c0a 	mov.w	ip, #10
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ad8:	3b30      	subs	r3, #48	; 0x30
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d94e      	bls.n	8006b7c <_vfiprintf_r+0x1c4>
 8006ade:	b1b0      	cbz	r0, 8006b0e <_vfiprintf_r+0x156>
 8006ae0:	9207      	str	r2, [sp, #28]
 8006ae2:	e014      	b.n	8006b0e <_vfiprintf_r+0x156>
 8006ae4:	eba0 0308 	sub.w	r3, r0, r8
 8006ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8006aec:	4313      	orrs	r3, r2
 8006aee:	9304      	str	r3, [sp, #16]
 8006af0:	46a2      	mov	sl, r4
 8006af2:	e7d2      	b.n	8006a9a <_vfiprintf_r+0xe2>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	1d19      	adds	r1, r3, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	9103      	str	r1, [sp, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bfbb      	ittet	lt
 8006b00:	425b      	neglt	r3, r3
 8006b02:	f042 0202 	orrlt.w	r2, r2, #2
 8006b06:	9307      	strge	r3, [sp, #28]
 8006b08:	9307      	strlt	r3, [sp, #28]
 8006b0a:	bfb8      	it	lt
 8006b0c:	9204      	strlt	r2, [sp, #16]
 8006b0e:	7823      	ldrb	r3, [r4, #0]
 8006b10:	2b2e      	cmp	r3, #46	; 0x2e
 8006b12:	d10c      	bne.n	8006b2e <_vfiprintf_r+0x176>
 8006b14:	7863      	ldrb	r3, [r4, #1]
 8006b16:	2b2a      	cmp	r3, #42	; 0x2a
 8006b18:	d135      	bne.n	8006b86 <_vfiprintf_r+0x1ce>
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	1d1a      	adds	r2, r3, #4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	9203      	str	r2, [sp, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bfb8      	it	lt
 8006b26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b2a:	3402      	adds	r4, #2
 8006b2c:	9305      	str	r3, [sp, #20]
 8006b2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c14 <_vfiprintf_r+0x25c>
 8006b32:	7821      	ldrb	r1, [r4, #0]
 8006b34:	2203      	movs	r2, #3
 8006b36:	4650      	mov	r0, sl
 8006b38:	f7f9 fb22 	bl	8000180 <memchr>
 8006b3c:	b140      	cbz	r0, 8006b50 <_vfiprintf_r+0x198>
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	eba0 000a 	sub.w	r0, r0, sl
 8006b44:	fa03 f000 	lsl.w	r0, r3, r0
 8006b48:	9b04      	ldr	r3, [sp, #16]
 8006b4a:	4303      	orrs	r3, r0
 8006b4c:	3401      	adds	r4, #1
 8006b4e:	9304      	str	r3, [sp, #16]
 8006b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b54:	482c      	ldr	r0, [pc, #176]	; (8006c08 <_vfiprintf_r+0x250>)
 8006b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b5a:	2206      	movs	r2, #6
 8006b5c:	f7f9 fb10 	bl	8000180 <memchr>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d03f      	beq.n	8006be4 <_vfiprintf_r+0x22c>
 8006b64:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <_vfiprintf_r+0x254>)
 8006b66:	bb1b      	cbnz	r3, 8006bb0 <_vfiprintf_r+0x1f8>
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	3307      	adds	r3, #7
 8006b6c:	f023 0307 	bic.w	r3, r3, #7
 8006b70:	3308      	adds	r3, #8
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b76:	443b      	add	r3, r7
 8006b78:	9309      	str	r3, [sp, #36]	; 0x24
 8006b7a:	e767      	b.n	8006a4c <_vfiprintf_r+0x94>
 8006b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b80:	460c      	mov	r4, r1
 8006b82:	2001      	movs	r0, #1
 8006b84:	e7a5      	b.n	8006ad2 <_vfiprintf_r+0x11a>
 8006b86:	2300      	movs	r3, #0
 8006b88:	3401      	adds	r4, #1
 8006b8a:	9305      	str	r3, [sp, #20]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	f04f 0c0a 	mov.w	ip, #10
 8006b92:	4620      	mov	r0, r4
 8006b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b98:	3a30      	subs	r2, #48	; 0x30
 8006b9a:	2a09      	cmp	r2, #9
 8006b9c:	d903      	bls.n	8006ba6 <_vfiprintf_r+0x1ee>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0c5      	beq.n	8006b2e <_vfiprintf_r+0x176>
 8006ba2:	9105      	str	r1, [sp, #20]
 8006ba4:	e7c3      	b.n	8006b2e <_vfiprintf_r+0x176>
 8006ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006baa:	4604      	mov	r4, r0
 8006bac:	2301      	movs	r3, #1
 8006bae:	e7f0      	b.n	8006b92 <_vfiprintf_r+0x1da>
 8006bb0:	ab03      	add	r3, sp, #12
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	4b16      	ldr	r3, [pc, #88]	; (8006c10 <_vfiprintf_r+0x258>)
 8006bb8:	a904      	add	r1, sp, #16
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f3af 8000 	nop.w
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	1c78      	adds	r0, r7, #1
 8006bc4:	d1d6      	bne.n	8006b74 <_vfiprintf_r+0x1bc>
 8006bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc8:	07d9      	lsls	r1, r3, #31
 8006bca:	d405      	bmi.n	8006bd8 <_vfiprintf_r+0x220>
 8006bcc:	89ab      	ldrh	r3, [r5, #12]
 8006bce:	059a      	lsls	r2, r3, #22
 8006bd0:	d402      	bmi.n	8006bd8 <_vfiprintf_r+0x220>
 8006bd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd4:	f7ff fe55 	bl	8006882 <__retarget_lock_release_recursive>
 8006bd8:	89ab      	ldrh	r3, [r5, #12]
 8006bda:	065b      	lsls	r3, r3, #25
 8006bdc:	f53f af12 	bmi.w	8006a04 <_vfiprintf_r+0x4c>
 8006be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006be2:	e711      	b.n	8006a08 <_vfiprintf_r+0x50>
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <_vfiprintf_r+0x258>)
 8006bec:	a904      	add	r1, sp, #16
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f000 f880 	bl	8006cf4 <_printf_i>
 8006bf4:	e7e4      	b.n	8006bc0 <_vfiprintf_r+0x208>
 8006bf6:	bf00      	nop
 8006bf8:	08007274 	.word	0x08007274
 8006bfc:	08007294 	.word	0x08007294
 8006c00:	08007254 	.word	0x08007254
 8006c04:	080072b4 	.word	0x080072b4
 8006c08:	080072be 	.word	0x080072be
 8006c0c:	00000000 	.word	0x00000000
 8006c10:	08006993 	.word	0x08006993
 8006c14:	080072ba 	.word	0x080072ba

08006c18 <_printf_common>:
 8006c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	4699      	mov	r9, r3
 8006c20:	688a      	ldr	r2, [r1, #8]
 8006c22:	690b      	ldr	r3, [r1, #16]
 8006c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	bfb8      	it	lt
 8006c2c:	4613      	movlt	r3, r2
 8006c2e:	6033      	str	r3, [r6, #0]
 8006c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c34:	4607      	mov	r7, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	b10a      	cbz	r2, 8006c3e <_printf_common+0x26>
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	6033      	str	r3, [r6, #0]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	0699      	lsls	r1, r3, #26
 8006c42:	bf42      	ittt	mi
 8006c44:	6833      	ldrmi	r3, [r6, #0]
 8006c46:	3302      	addmi	r3, #2
 8006c48:	6033      	strmi	r3, [r6, #0]
 8006c4a:	6825      	ldr	r5, [r4, #0]
 8006c4c:	f015 0506 	ands.w	r5, r5, #6
 8006c50:	d106      	bne.n	8006c60 <_printf_common+0x48>
 8006c52:	f104 0a19 	add.w	sl, r4, #25
 8006c56:	68e3      	ldr	r3, [r4, #12]
 8006c58:	6832      	ldr	r2, [r6, #0]
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	42ab      	cmp	r3, r5
 8006c5e:	dc26      	bgt.n	8006cae <_printf_common+0x96>
 8006c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c64:	1e13      	subs	r3, r2, #0
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	bf18      	it	ne
 8006c6a:	2301      	movne	r3, #1
 8006c6c:	0692      	lsls	r2, r2, #26
 8006c6e:	d42b      	bmi.n	8006cc8 <_printf_common+0xb0>
 8006c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c74:	4649      	mov	r1, r9
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c0      	blx	r8
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d01e      	beq.n	8006cbc <_printf_common+0xa4>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	68e5      	ldr	r5, [r4, #12]
 8006c82:	6832      	ldr	r2, [r6, #0]
 8006c84:	f003 0306 	and.w	r3, r3, #6
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	bf08      	it	eq
 8006c8c:	1aad      	subeq	r5, r5, r2
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	6922      	ldr	r2, [r4, #16]
 8006c92:	bf0c      	ite	eq
 8006c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c98:	2500      	movne	r5, #0
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	bfc4      	itt	gt
 8006c9e:	1a9b      	subgt	r3, r3, r2
 8006ca0:	18ed      	addgt	r5, r5, r3
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	341a      	adds	r4, #26
 8006ca6:	42b5      	cmp	r5, r6
 8006ca8:	d11a      	bne.n	8006ce0 <_printf_common+0xc8>
 8006caa:	2000      	movs	r0, #0
 8006cac:	e008      	b.n	8006cc0 <_printf_common+0xa8>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	47c0      	blx	r8
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d103      	bne.n	8006cc4 <_printf_common+0xac>
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	e7c6      	b.n	8006c56 <_printf_common+0x3e>
 8006cc8:	18e1      	adds	r1, r4, r3
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	2030      	movs	r0, #48	; 0x30
 8006cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cd2:	4422      	add	r2, r4
 8006cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cdc:	3302      	adds	r3, #2
 8006cde:	e7c7      	b.n	8006c70 <_printf_common+0x58>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	47c0      	blx	r8
 8006cea:	3001      	adds	r0, #1
 8006cec:	d0e6      	beq.n	8006cbc <_printf_common+0xa4>
 8006cee:	3601      	adds	r6, #1
 8006cf0:	e7d9      	b.n	8006ca6 <_printf_common+0x8e>
	...

08006cf4 <_printf_i>:
 8006cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	4691      	mov	r9, r2
 8006cfc:	7e27      	ldrb	r7, [r4, #24]
 8006cfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d00:	2f78      	cmp	r7, #120	; 0x78
 8006d02:	4680      	mov	r8, r0
 8006d04:	469a      	mov	sl, r3
 8006d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d0a:	d807      	bhi.n	8006d1c <_printf_i+0x28>
 8006d0c:	2f62      	cmp	r7, #98	; 0x62
 8006d0e:	d80a      	bhi.n	8006d26 <_printf_i+0x32>
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	f000 80d8 	beq.w	8006ec6 <_printf_i+0x1d2>
 8006d16:	2f58      	cmp	r7, #88	; 0x58
 8006d18:	f000 80a3 	beq.w	8006e62 <_printf_i+0x16e>
 8006d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d24:	e03a      	b.n	8006d9c <_printf_i+0xa8>
 8006d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d2a:	2b15      	cmp	r3, #21
 8006d2c:	d8f6      	bhi.n	8006d1c <_printf_i+0x28>
 8006d2e:	a001      	add	r0, pc, #4	; (adr r0, 8006d34 <_printf_i+0x40>)
 8006d30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d34:	08006d8d 	.word	0x08006d8d
 8006d38:	08006da1 	.word	0x08006da1
 8006d3c:	08006d1d 	.word	0x08006d1d
 8006d40:	08006d1d 	.word	0x08006d1d
 8006d44:	08006d1d 	.word	0x08006d1d
 8006d48:	08006d1d 	.word	0x08006d1d
 8006d4c:	08006da1 	.word	0x08006da1
 8006d50:	08006d1d 	.word	0x08006d1d
 8006d54:	08006d1d 	.word	0x08006d1d
 8006d58:	08006d1d 	.word	0x08006d1d
 8006d5c:	08006d1d 	.word	0x08006d1d
 8006d60:	08006ead 	.word	0x08006ead
 8006d64:	08006dd1 	.word	0x08006dd1
 8006d68:	08006e8f 	.word	0x08006e8f
 8006d6c:	08006d1d 	.word	0x08006d1d
 8006d70:	08006d1d 	.word	0x08006d1d
 8006d74:	08006ecf 	.word	0x08006ecf
 8006d78:	08006d1d 	.word	0x08006d1d
 8006d7c:	08006dd1 	.word	0x08006dd1
 8006d80:	08006d1d 	.word	0x08006d1d
 8006d84:	08006d1d 	.word	0x08006d1d
 8006d88:	08006e97 	.word	0x08006e97
 8006d8c:	680b      	ldr	r3, [r1, #0]
 8006d8e:	1d1a      	adds	r2, r3, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	600a      	str	r2, [r1, #0]
 8006d94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0a3      	b.n	8006ee8 <_printf_i+0x1f4>
 8006da0:	6825      	ldr	r5, [r4, #0]
 8006da2:	6808      	ldr	r0, [r1, #0]
 8006da4:	062e      	lsls	r6, r5, #24
 8006da6:	f100 0304 	add.w	r3, r0, #4
 8006daa:	d50a      	bpl.n	8006dc2 <_printf_i+0xce>
 8006dac:	6805      	ldr	r5, [r0, #0]
 8006dae:	600b      	str	r3, [r1, #0]
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	da03      	bge.n	8006dbc <_printf_i+0xc8>
 8006db4:	232d      	movs	r3, #45	; 0x2d
 8006db6:	426d      	negs	r5, r5
 8006db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dbc:	485e      	ldr	r0, [pc, #376]	; (8006f38 <_printf_i+0x244>)
 8006dbe:	230a      	movs	r3, #10
 8006dc0:	e019      	b.n	8006df6 <_printf_i+0x102>
 8006dc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dc6:	6805      	ldr	r5, [r0, #0]
 8006dc8:	600b      	str	r3, [r1, #0]
 8006dca:	bf18      	it	ne
 8006dcc:	b22d      	sxthne	r5, r5
 8006dce:	e7ef      	b.n	8006db0 <_printf_i+0xbc>
 8006dd0:	680b      	ldr	r3, [r1, #0]
 8006dd2:	6825      	ldr	r5, [r4, #0]
 8006dd4:	1d18      	adds	r0, r3, #4
 8006dd6:	6008      	str	r0, [r1, #0]
 8006dd8:	0628      	lsls	r0, r5, #24
 8006dda:	d501      	bpl.n	8006de0 <_printf_i+0xec>
 8006ddc:	681d      	ldr	r5, [r3, #0]
 8006dde:	e002      	b.n	8006de6 <_printf_i+0xf2>
 8006de0:	0669      	lsls	r1, r5, #25
 8006de2:	d5fb      	bpl.n	8006ddc <_printf_i+0xe8>
 8006de4:	881d      	ldrh	r5, [r3, #0]
 8006de6:	4854      	ldr	r0, [pc, #336]	; (8006f38 <_printf_i+0x244>)
 8006de8:	2f6f      	cmp	r7, #111	; 0x6f
 8006dea:	bf0c      	ite	eq
 8006dec:	2308      	moveq	r3, #8
 8006dee:	230a      	movne	r3, #10
 8006df0:	2100      	movs	r1, #0
 8006df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006df6:	6866      	ldr	r6, [r4, #4]
 8006df8:	60a6      	str	r6, [r4, #8]
 8006dfa:	2e00      	cmp	r6, #0
 8006dfc:	bfa2      	ittt	ge
 8006dfe:	6821      	ldrge	r1, [r4, #0]
 8006e00:	f021 0104 	bicge.w	r1, r1, #4
 8006e04:	6021      	strge	r1, [r4, #0]
 8006e06:	b90d      	cbnz	r5, 8006e0c <_printf_i+0x118>
 8006e08:	2e00      	cmp	r6, #0
 8006e0a:	d04d      	beq.n	8006ea8 <_printf_i+0x1b4>
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e12:	fb03 5711 	mls	r7, r3, r1, r5
 8006e16:	5dc7      	ldrb	r7, [r0, r7]
 8006e18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e1c:	462f      	mov	r7, r5
 8006e1e:	42bb      	cmp	r3, r7
 8006e20:	460d      	mov	r5, r1
 8006e22:	d9f4      	bls.n	8006e0e <_printf_i+0x11a>
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d10b      	bne.n	8006e40 <_printf_i+0x14c>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	07df      	lsls	r7, r3, #31
 8006e2c:	d508      	bpl.n	8006e40 <_printf_i+0x14c>
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	6861      	ldr	r1, [r4, #4]
 8006e32:	4299      	cmp	r1, r3
 8006e34:	bfde      	ittt	le
 8006e36:	2330      	movle	r3, #48	; 0x30
 8006e38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006e40:	1b92      	subs	r2, r2, r6
 8006e42:	6122      	str	r2, [r4, #16]
 8006e44:	f8cd a000 	str.w	sl, [sp]
 8006e48:	464b      	mov	r3, r9
 8006e4a:	aa03      	add	r2, sp, #12
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4640      	mov	r0, r8
 8006e50:	f7ff fee2 	bl	8006c18 <_printf_common>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d14c      	bne.n	8006ef2 <_printf_i+0x1fe>
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e5c:	b004      	add	sp, #16
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	4835      	ldr	r0, [pc, #212]	; (8006f38 <_printf_i+0x244>)
 8006e64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	680e      	ldr	r6, [r1, #0]
 8006e6c:	061f      	lsls	r7, r3, #24
 8006e6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e72:	600e      	str	r6, [r1, #0]
 8006e74:	d514      	bpl.n	8006ea0 <_printf_i+0x1ac>
 8006e76:	07d9      	lsls	r1, r3, #31
 8006e78:	bf44      	itt	mi
 8006e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e7e:	6023      	strmi	r3, [r4, #0]
 8006e80:	b91d      	cbnz	r5, 8006e8a <_printf_i+0x196>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	f023 0320 	bic.w	r3, r3, #32
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	e7b0      	b.n	8006df0 <_printf_i+0xfc>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	f043 0320 	orr.w	r3, r3, #32
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	2378      	movs	r3, #120	; 0x78
 8006e98:	4828      	ldr	r0, [pc, #160]	; (8006f3c <_printf_i+0x248>)
 8006e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e9e:	e7e3      	b.n	8006e68 <_printf_i+0x174>
 8006ea0:	065e      	lsls	r6, r3, #25
 8006ea2:	bf48      	it	mi
 8006ea4:	b2ad      	uxthmi	r5, r5
 8006ea6:	e7e6      	b.n	8006e76 <_printf_i+0x182>
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	e7bb      	b.n	8006e24 <_printf_i+0x130>
 8006eac:	680b      	ldr	r3, [r1, #0]
 8006eae:	6826      	ldr	r6, [r4, #0]
 8006eb0:	6960      	ldr	r0, [r4, #20]
 8006eb2:	1d1d      	adds	r5, r3, #4
 8006eb4:	600d      	str	r5, [r1, #0]
 8006eb6:	0635      	lsls	r5, r6, #24
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	d501      	bpl.n	8006ec0 <_printf_i+0x1cc>
 8006ebc:	6018      	str	r0, [r3, #0]
 8006ebe:	e002      	b.n	8006ec6 <_printf_i+0x1d2>
 8006ec0:	0671      	lsls	r1, r6, #25
 8006ec2:	d5fb      	bpl.n	8006ebc <_printf_i+0x1c8>
 8006ec4:	8018      	strh	r0, [r3, #0]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	4616      	mov	r6, r2
 8006ecc:	e7ba      	b.n	8006e44 <_printf_i+0x150>
 8006ece:	680b      	ldr	r3, [r1, #0]
 8006ed0:	1d1a      	adds	r2, r3, #4
 8006ed2:	600a      	str	r2, [r1, #0]
 8006ed4:	681e      	ldr	r6, [r3, #0]
 8006ed6:	6862      	ldr	r2, [r4, #4]
 8006ed8:	2100      	movs	r1, #0
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7f9 f950 	bl	8000180 <memchr>
 8006ee0:	b108      	cbz	r0, 8006ee6 <_printf_i+0x1f2>
 8006ee2:	1b80      	subs	r0, r0, r6
 8006ee4:	6060      	str	r0, [r4, #4]
 8006ee6:	6863      	ldr	r3, [r4, #4]
 8006ee8:	6123      	str	r3, [r4, #16]
 8006eea:	2300      	movs	r3, #0
 8006eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ef0:	e7a8      	b.n	8006e44 <_printf_i+0x150>
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	4632      	mov	r2, r6
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	4640      	mov	r0, r8
 8006efa:	47d0      	blx	sl
 8006efc:	3001      	adds	r0, #1
 8006efe:	d0ab      	beq.n	8006e58 <_printf_i+0x164>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	079b      	lsls	r3, r3, #30
 8006f04:	d413      	bmi.n	8006f2e <_printf_i+0x23a>
 8006f06:	68e0      	ldr	r0, [r4, #12]
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	4298      	cmp	r0, r3
 8006f0c:	bfb8      	it	lt
 8006f0e:	4618      	movlt	r0, r3
 8006f10:	e7a4      	b.n	8006e5c <_printf_i+0x168>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4632      	mov	r2, r6
 8006f16:	4649      	mov	r1, r9
 8006f18:	4640      	mov	r0, r8
 8006f1a:	47d0      	blx	sl
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d09b      	beq.n	8006e58 <_printf_i+0x164>
 8006f20:	3501      	adds	r5, #1
 8006f22:	68e3      	ldr	r3, [r4, #12]
 8006f24:	9903      	ldr	r1, [sp, #12]
 8006f26:	1a5b      	subs	r3, r3, r1
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	dcf2      	bgt.n	8006f12 <_printf_i+0x21e>
 8006f2c:	e7eb      	b.n	8006f06 <_printf_i+0x212>
 8006f2e:	2500      	movs	r5, #0
 8006f30:	f104 0619 	add.w	r6, r4, #25
 8006f34:	e7f5      	b.n	8006f22 <_printf_i+0x22e>
 8006f36:	bf00      	nop
 8006f38:	080072c5 	.word	0x080072c5
 8006f3c:	080072d6 	.word	0x080072d6

08006f40 <__sread>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	460c      	mov	r4, r1
 8006f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f48:	f000 f894 	bl	8007074 <_read_r>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	bfab      	itete	ge
 8006f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f52:	89a3      	ldrhlt	r3, [r4, #12]
 8006f54:	181b      	addge	r3, r3, r0
 8006f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f5a:	bfac      	ite	ge
 8006f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f5e:	81a3      	strhlt	r3, [r4, #12]
 8006f60:	bd10      	pop	{r4, pc}

08006f62 <__swrite>:
 8006f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	461f      	mov	r7, r3
 8006f68:	898b      	ldrh	r3, [r1, #12]
 8006f6a:	05db      	lsls	r3, r3, #23
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4616      	mov	r6, r2
 8006f72:	d505      	bpl.n	8006f80 <__swrite+0x1e>
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	2302      	movs	r3, #2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f000 f868 	bl	8007050 <_lseek_r>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	463b      	mov	r3, r7
 8006f90:	4628      	mov	r0, r5
 8006f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	f000 b817 	b.w	8006fc8 <_write_r>

08006f9a <__sseek>:
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa2:	f000 f855 	bl	8007050 <_lseek_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	bf15      	itete	ne
 8006fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fb6:	81a3      	strheq	r3, [r4, #12]
 8006fb8:	bf18      	it	ne
 8006fba:	81a3      	strhne	r3, [r4, #12]
 8006fbc:	bd10      	pop	{r4, pc}

08006fbe <__sclose>:
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 b813 	b.w	8006fec <_close_r>
	...

08006fc8 <_write_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	; (8006fe8 <_write_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7fa f993 	bl	8001302 <_write>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_write_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_write_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000228 	.word	0x20000228

08006fec <_close_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d06      	ldr	r5, [pc, #24]	; (8007008 <_close_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7fa f99f 	bl	800133a <_close>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_close_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_close_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20000228 	.word	0x20000228

0800700c <_fstat_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d07      	ldr	r5, [pc, #28]	; (800702c <_fstat_r+0x20>)
 8007010:	2300      	movs	r3, #0
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	4611      	mov	r1, r2
 8007018:	602b      	str	r3, [r5, #0]
 800701a:	f7fa f99a 	bl	8001352 <_fstat>
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	d102      	bne.n	8007028 <_fstat_r+0x1c>
 8007022:	682b      	ldr	r3, [r5, #0]
 8007024:	b103      	cbz	r3, 8007028 <_fstat_r+0x1c>
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	bd38      	pop	{r3, r4, r5, pc}
 800702a:	bf00      	nop
 800702c:	20000228 	.word	0x20000228

08007030 <_isatty_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d06      	ldr	r5, [pc, #24]	; (800704c <_isatty_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa f999 	bl	8001372 <_isatty>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_isatty_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_isatty_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000228 	.word	0x20000228

08007050 <_lseek_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d07      	ldr	r5, [pc, #28]	; (8007070 <_lseek_r+0x20>)
 8007054:	4604      	mov	r4, r0
 8007056:	4608      	mov	r0, r1
 8007058:	4611      	mov	r1, r2
 800705a:	2200      	movs	r2, #0
 800705c:	602a      	str	r2, [r5, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f7fa f992 	bl	8001388 <_lseek>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_lseek_r+0x1e>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_lseek_r+0x1e>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20000228 	.word	0x20000228

08007074 <_read_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d07      	ldr	r5, [pc, #28]	; (8007094 <_read_r+0x20>)
 8007078:	4604      	mov	r4, r0
 800707a:	4608      	mov	r0, r1
 800707c:	4611      	mov	r1, r2
 800707e:	2200      	movs	r2, #0
 8007080:	602a      	str	r2, [r5, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	f7fa f920 	bl	80012c8 <_read>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_read_r+0x1e>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_read_r+0x1e>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20000228 	.word	0x20000228

08007098 <_init>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr

080070a4 <_fini>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr
