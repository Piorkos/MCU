
external-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000004  08007014  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001ac  2000007c  0800708c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000228  0800708c  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001be22  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003765  00000000  00000000  0003bece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c30  00000000  00000000  0003f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b10  00000000  00000000  00041268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026783  00000000  00000000  00042d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a196  00000000  00000000  000694fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e421b  00000000  00000000  00083691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001678ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e48  00000000  00000000  00167900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08006e20 	.word	0x08006e20

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08006e20 	.word	0x08006e20

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af02      	add	r7, sp, #8
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000522:	f107 020f 	add.w	r2, r7, #15
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <W25qxx_Spi+0x28>)
 8000530:	f003 fdf1 	bl	8004116 <HAL_SPI_TransmitReceive>
	return ret;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000d4 	.word	0x200000d4

08000544 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2110      	movs	r1, #16
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f001 fc95 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000566:	209f      	movs	r0, #159	; 0x9f
 8000568:	f7ff ffd6 	bl	8000518 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800056c:	20a5      	movs	r0, #165	; 0xa5
 800056e:	f7ff ffd3 	bl	8000518 <W25qxx_Spi>
 8000572:	4603      	mov	r3, r0
 8000574:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000576:	20a5      	movs	r0, #165	; 0xa5
 8000578:	f7ff ffce 	bl	8000518 <W25qxx_Spi>
 800057c:	4603      	mov	r3, r0
 800057e:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000580:	20a5      	movs	r0, #165	; 0xa5
 8000582:	f7ff ffc9 	bl	8000518 <W25qxx_Spi>
 8000586:	4603      	mov	r3, r0
 8000588:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2110      	movs	r1, #16
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f001 fc7d 	bl	8001e90 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	041a      	lsls	r2, r3, #16
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	4313      	orrs	r3, r2
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  return Temp;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2110      	movs	r1, #16
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f001 fc67 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 80005c2:	204b      	movs	r0, #75	; 0x4b
 80005c4:	f7ff ffa8 	bl	8000518 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	e005      	b.n	80005da <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80005ce:	20a5      	movs	r0, #165	; 0xa5
 80005d0:	f7ff ffa2 	bl	8000518 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	3301      	adds	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d9f6      	bls.n	80005ce <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	71bb      	strb	r3, [r7, #6]
 80005e4:	e00b      	b.n	80005fe <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80005e6:	79bc      	ldrb	r4, [r7, #6]
 80005e8:	20a5      	movs	r0, #165	; 0xa5
 80005ea:	f7ff ff95 	bl	8000518 <W25qxx_Spi>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <W25qxx_ReadUniqID+0x68>)
 80005f4:	4423      	add	r3, r4
 80005f6:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	3301      	adds	r3, #1
 80005fc:	71bb      	strb	r3, [r7, #6]
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	2b07      	cmp	r3, #7
 8000602:	d9f0      	bls.n	80005e6 <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f001 fc40 	bl	8001e90 <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	200000ac 	.word	0x200000ac

0800061c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f001 fc32 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 800062c:	2006      	movs	r0, #6
 800062e:	f7ff ff73 	bl	8000518 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f001 fc29 	bl	8001e90 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f001 f8c4 	bl	80017cc <HAL_Delay>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2110      	movs	r1, #16
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 fc17 	bl	8001e90 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10c      	bne.n	8000682 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8000668:	2005      	movs	r0, #5
 800066a:	f7ff ff55 	bl	8000518 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800066e:	20a5      	movs	r0, #165	; 0xa5
 8000670:	f7ff ff52 	bl	8000518 <W25qxx_Spi>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000678:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <W25qxx_ReadStatusRegister+0x88>)
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000680:	e01b      	b.n	80006ba <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d10c      	bne.n	80006a2 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8000688:	2035      	movs	r0, #53	; 0x35
 800068a:	f7ff ff45 	bl	8000518 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800068e:	20a5      	movs	r0, #165	; 0xa5
 8000690:	f7ff ff42 	bl	8000518 <W25qxx_Spi>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <W25qxx_ReadStatusRegister+0x88>)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80006a0:	e00b      	b.n	80006ba <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80006a2:	2015      	movs	r0, #21
 80006a4:	f7ff ff38 	bl	8000518 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006a8:	20a5      	movs	r0, #165	; 0xa5
 80006aa:	f7ff ff35 	bl	8000518 <W25qxx_Spi>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <W25qxx_ReadStatusRegister+0x88>)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2110      	movs	r1, #16
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f001 fbe5 	bl	8001e90 <HAL_GPIO_WritePin>
	return status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000ac 	.word	0x200000ac

080006d4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f001 f877 	bl	80017cc <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f001 fbd3 	bl	8001e90 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80006ea:	2005      	movs	r0, #5
 80006ec:	f7ff ff14 	bl	8000518 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006f0:	20a5      	movs	r0, #165	; 0xa5
 80006f2:	f7ff ff11 	bl	8000518 <W25qxx_Spi>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <W25qxx_WaitForWriteEnd+0x50>)
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f001 f863 	bl	80017cc <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <W25qxx_WaitForWriteEnd+0x50>)
 8000708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1ed      	bne.n	80006f0 <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2110      	movs	r1, #16
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f001 fbb8 	bl	8001e90 <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000ac 	.word	0x200000ac

08000728 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;
 800072e:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <W25qxx_Init+0x188>)
 8000730:	2201      	movs	r2, #1
 8000732:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8000736:	e002      	b.n	800073e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f001 f847 	bl	80017cc <HAL_Delay>
	while(HAL_GetTick()<100)
 800073e:	f001 f82d 	bl	800179c <HAL_GetTick>
 8000742:	4603      	mov	r3, r0
 8000744:	2b63      	cmp	r3, #99	; 0x63
 8000746:	d9f7      	bls.n	8000738 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 fb9e 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f001 f839 	bl	80017cc <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 800075a:	f7ff fef3 	bl	8000544 <W25qxx_ReadID>
 800075e:	6078      	str	r0, [r7, #4]

	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29b      	uxth	r3, r3
 8000764:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000768:	3b11      	subs	r3, #17
 800076a:	2b09      	cmp	r3, #9
 800076c:	d85f      	bhi.n	800082e <W25qxx_Init+0x106>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <W25qxx_Init+0x4c>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	08000821 	.word	0x08000821
 8000778:	08000813 	.word	0x08000813
 800077c:	08000805 	.word	0x08000805
 8000780:	080007f7 	.word	0x080007f7
 8000784:	080007e9 	.word	0x080007e9
 8000788:	080007db 	.word	0x080007db
 800078c:	080007cd 	.word	0x080007cd
 8000790:	080007bd 	.word	0x080007bd
 8000794:	080007ad 	.word	0x080007ad
 8000798:	0800079d 	.word	0x0800079d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800079c:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <W25qxx_Init+0x188>)
 800079e:	220a      	movs	r2, #10
 80007a0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80007a2:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <W25qxx_Init+0x188>)
 80007a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80007aa:	e046      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <W25qxx_Init+0x188>)
 80007ae:	2209      	movs	r2, #9
 80007b0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <W25qxx_Init+0x188>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80007ba:	e03e      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 80007bc:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <W25qxx_Init+0x188>)
 80007be:	2208      	movs	r2, #8
 80007c0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <W25qxx_Init+0x188>)
 80007c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 80007ca:	e036      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <W25qxx_Init+0x188>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80007d2:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <W25qxx_Init+0x188>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80007d8:	e02f      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <W25qxx_Init+0x188>)
 80007dc:	2206      	movs	r2, #6
 80007de:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <W25qxx_Init+0x188>)
 80007e2:	2240      	movs	r2, #64	; 0x40
 80007e4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80007e6:	e028      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <W25qxx_Init+0x188>)
 80007ea:	2205      	movs	r2, #5
 80007ec:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <W25qxx_Init+0x188>)
 80007f0:	2220      	movs	r2, #32
 80007f2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 80007f4:	e021      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <W25qxx_Init+0x188>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <W25qxx_Init+0x188>)
 80007fe:	2210      	movs	r2, #16
 8000800:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8000802:	e01a      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <W25qxx_Init+0x188>)
 8000806:	2203      	movs	r2, #3
 8000808:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <W25qxx_Init+0x188>)
 800080c:	2208      	movs	r2, #8
 800080e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8000810:	e013      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <W25qxx_Init+0x188>)
 8000814:	2202      	movs	r2, #2
 8000816:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <W25qxx_Init+0x188>)
 800081a:	2204      	movs	r2, #4
 800081c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800081e:	e00c      	b.n	800083a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <W25qxx_Init+0x188>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <W25qxx_Init+0x188>)
 8000828:	2202      	movs	r2, #2
 800082a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 800082c:	e005      	b.n	800083a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <W25qxx_Init+0x188>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8000836:	2300      	movs	r3, #0
 8000838:	e036      	b.n	80008a8 <W25qxx_Init+0x180>

	}
	w25qxx.PageSize=256;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <W25qxx_Init+0x188>)
 800083c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000840:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <W25qxx_Init+0x188>)
 8000844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000848:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <W25qxx_Init+0x188>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <W25qxx_Init+0x188>)
 8000852:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <W25qxx_Init+0x188>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <W25qxx_Init+0x188>)
 800085a:	6912      	ldr	r2, [r2, #16]
 800085c:	fb02 f303 	mul.w	r3, r2, r3
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <W25qxx_Init+0x188>)
 8000862:	8952      	ldrh	r2, [r2, #10]
 8000864:	fbb3 f3f2 	udiv	r3, r3, r2
 8000868:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <W25qxx_Init+0x188>)
 800086a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <W25qxx_Init+0x188>)
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <W25qxx_Init+0x188>)
 8000874:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <W25qxx_Init+0x188>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <W25qxx_Init+0x188>)
 800087c:	6912      	ldr	r2, [r2, #16]
 800087e:	fb02 f303 	mul.w	r3, r2, r3
 8000882:	0a9b      	lsrs	r3, r3, #10
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <W25qxx_Init+0x188>)
 8000886:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8000888:	f7ff fe92 	bl	80005b0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fedb 	bl	8000648 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8000892:	2002      	movs	r0, #2
 8000894:	f7ff fed8 	bl	8000648 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000898:	2003      	movs	r0, #3
 800089a:	f7ff fed5 	bl	8000648 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <W25qxx_Init+0x188>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000ac 	.word	0x200000ac

080008b4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 80008bc:	e002      	b.n	80008c4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 ff84 	bl	80017cc <HAL_Delay>
	while(w25qxx.Lock==1)
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <W25qxx_EraseSector+0xa4>)
 80008c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d0f7      	beq.n	80008be <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <W25qxx_EraseSector+0xa4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 80008d6:	f7ff fefd 	bl	80006d4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <W25qxx_EraseSector+0xa4>)
 80008dc:	691a      	ldr	r2, [r3, #16]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	fb02 f303 	mul.w	r3, r2, r3
 80008e4:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 80008e6:	f7ff fe99 	bl	800061c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2110      	movs	r1, #16
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f001 facd 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 80008f6:	2020      	movs	r0, #32
 80008f8:	f7ff fe0e 	bl	8000518 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <W25qxx_EraseSector+0xa4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b08      	cmp	r3, #8
 8000902:	d905      	bls.n	8000910 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0e1b      	lsrs	r3, r3, #24
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe04 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fdfe 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	0a1b      	lsrs	r3, r3, #8
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fdf8 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fdf3 	bl	8000518 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2110      	movs	r1, #16
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f001 faa9 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800093e:	f7ff fec9 	bl	80006d4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f000 ff42 	bl	80017cc <HAL_Delay>
	w25qxx.Lock=0;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <W25qxx_EraseSector+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000ac 	.word	0x200000ac

0800095c <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <W25qxx_SectorToPage+0x28>)
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	fb02 f303 	mul.w	r3, r2, r3
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <W25qxx_SectorToPage+0x28>)
 8000970:	8952      	ldrh	r2, [r2, #10]
 8000972:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200000ac 	.word	0x200000ac

08000988 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000996:	e002      	b.n	800099e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f000 ff17 	bl	80017cc <HAL_Delay>
	while(w25qxx.Lock==1)
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <W25qxx_WritePage+0xf8>)
 80009a0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d0f7      	beq.n	8000998 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 80009a8:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <W25qxx_WritePage+0xf8>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <W25qxx_WritePage+0xf8>)
 80009b8:	8952      	ldrh	r2, [r2, #10]
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d802      	bhi.n	80009c4 <W25qxx_WritePage+0x3c>
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d105      	bne.n	80009d0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <W25qxx_WritePage+0xf8>)
 80009c6:	895b      	ldrh	r3, [r3, #10]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <W25qxx_WritePage+0xf8>)
 80009d8:	8952      	ldrh	r2, [r2, #10]
 80009da:	4293      	cmp	r3, r2
 80009dc:	d905      	bls.n	80009ea <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <W25qxx_WritePage+0xf8>)
 80009e0:	895b      	ldrh	r3, [r3, #10]
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	W25qxx_WaitForWriteEnd();
 80009ea:	f7ff fe73 	bl	80006d4 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80009ee:	f7ff fe15 	bl	800061c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2110      	movs	r1, #16
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f001 fa49 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80009fe:	2002      	movs	r0, #2
 8000a00:	f7ff fd8a 	bl	8000518 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <W25qxx_WritePage+0xf8>)
 8000a06:	895b      	ldrh	r3, [r3, #10]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	fb03 f302 	mul.w	r3, r3, r2
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <W25qxx_WritePage+0xf8>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d905      	bls.n	8000a2a <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	0e1b      	lsrs	r3, r3, #24
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fd77 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	0c1b      	lsrs	r3, r3, #16
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fd71 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd6b 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd66 	bl	8000518 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	68f9      	ldr	r1, [r7, #12]
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <W25qxx_WritePage+0xfc>)
 8000a56:	f003 f8c0 	bl	8003bda <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f001 fa15 	bl	8001e90 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000a66:	f7ff fe35 	bl	80006d4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 feae 	bl	80017cc <HAL_Delay>
	w25qxx.Lock=0;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <W25qxx_WritePage+0xf8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000ac 	.word	0x200000ac
 8000a84:	200000d4 	.word	0x200000d4

08000a88 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d802      	bhi.n	8000aa6 <W25qxx_WriteSector+0x1e>
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d243      	bcs.n	8000b3e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	441a      	add	r2, r3
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d905      	bls.n	8000ad0 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000ac6:	691a      	ldr	r2, [r3, #16]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	e001      	b.n	8000ad4 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8000ad4:	68b8      	ldr	r0, [r7, #8]
 8000ad6:	f7ff ff41 	bl	800095c <W25qxx_SectorToPage>
 8000ada:	4602      	mov	r2, r0
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000ade:	895b      	ldrh	r3, [r3, #10]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae8:	4413      	add	r3, r2
 8000aea:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000aee:	895b      	ldrh	r3, [r3, #10]
 8000af0:	461a      	mov	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000af8:	fb02 f201 	mul.w	r2, r2, r1
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	69f9      	ldr	r1, [r7, #28]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff ff3e 	bl	8000988 <W25qxx_WritePage>
		StartPage++;
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000b14:	895b      	ldrh	r3, [r3, #10]
 8000b16:	461a      	mov	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	1a9a      	subs	r2, r3, r2
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <W25qxx_WriteSector+0xc0>)
 8000b24:	895b      	ldrh	r3, [r3, #10]
 8000b26:	461a      	mov	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dce1      	bgt.n	8000b00 <W25qxx_WriteSector+0x78>
 8000b3c:	e000      	b.n	8000b40 <W25qxx_WriteSector+0xb8>
		return;
 8000b3e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8000b40:	3720      	adds	r7, #32
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000ac 	.word	0x200000ac

08000b4c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000b5a:	e002      	b.n	8000b62 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 fe35 	bl	80017cc <HAL_Delay>
	while(w25qxx.Lock==1)
 8000b62:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000b64:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d0f7      	beq.n	8000b5c <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000b76:	895b      	ldrh	r3, [r3, #10]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d802      	bhi.n	8000b86 <W25qxx_ReadPage+0x3a>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000b88:	895b      	ldrh	r3, [r3, #10]
 8000b8a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000b94:	8952      	ldrh	r2, [r2, #10]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d905      	bls.n	8000ba6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000b9c:	895b      	ldrh	r3, [r3, #10]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000ba8:	895b      	ldrh	r3, [r3, #10]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	fb03 f302 	mul.w	r3, r3, r2
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2110      	movs	r1, #16
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f001 f966 	bl	8001e90 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8000bc4:	200b      	movs	r0, #11
 8000bc6:	f7ff fca7 	bl	8000518 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d905      	bls.n	8000bde <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	0e1b      	lsrs	r3, r3, #24
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fc9d 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	0c1b      	lsrs	r3, r3, #16
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fc97 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fc91 	bl	8000518 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fc8c 	bl	8000518 <W25qxx_Spi>
	W25qxx_Spi(0);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fc89 	bl	8000518 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	2364      	movs	r3, #100	; 0x64
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <W25qxx_ReadPage+0xf0>)
 8000c10:	f003 f951 	bl	8003eb6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 f938 	bl	8001e90 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 fdd3 	bl	80017cc <HAL_Delay>
	w25qxx.Lock=0;
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <W25qxx_ReadPage+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000ac 	.word	0x200000ac
 8000c3c:	200000d4 	.word	0x200000d4

08000c40 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d802      	bhi.n	8000c5e <W25qxx_ReadSector+0x1e>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d243      	bcs.n	8000cf6 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	441a      	add	r2, r3
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d905      	bls.n	8000c88 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	e001      	b.n	8000c8c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8000c8c:	68b8      	ldr	r0, [r7, #8]
 8000c8e:	f7ff fe65 	bl	800095c <W25qxx_SectorToPage>
 8000c92:	4602      	mov	r2, r0
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000c96:	895b      	ldrh	r3, [r3, #10]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000ca6:	895b      	ldrh	r3, [r3, #10]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cb0:	fb02 f201 	mul.w	r2, r2, r1
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	69f9      	ldr	r1, [r7, #28]
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff ff44 	bl	8000b4c <W25qxx_ReadPage>
		StartPage++;
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000ccc:	895b      	ldrh	r3, [r3, #10]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	1a9a      	subs	r2, r3, r2
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <W25qxx_ReadSector+0xc0>)
 8000cdc:	895b      	ldrh	r3, [r3, #10]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dce1      	bgt.n	8000cb8 <W25qxx_ReadSector+0x78>
 8000cf4:	e000      	b.n	8000cf8 <W25qxx_ReadSector+0xb8>
		return;
 8000cf6:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000ac 	.word	0x200000ac

08000d04 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d28:	68fb      	ldr	r3, [r7, #12]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	2004      	movs	r0, #4
 8000d4e:	f7ff ffd9 	bl	8000d04 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	f7ff ffd6 	bl	8000d04 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff ffd3 	bl	8000d04 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ffd0 	bl	8000d04 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d64:	2010      	movs	r0, #16
 8000d66:	f7ff ffcd 	bl	8000d04 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	f7ff ffca 	bl	8000d04 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2110      	movs	r1, #16
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f001 f88a 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000d7c:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000d80:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	2303      	movs	r3, #3
 8000d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_GPIO_Init+0xf4>)
 8000d90:	f000 ff0e 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d94:	2308      	movs	r3, #8
 8000d96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4822      	ldr	r0, [pc, #136]	; (8000e30 <MX_GPIO_Init+0xf8>)
 8000da6:	f000 ff03 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10
                           PB11 PB0 PB1 PB12
                           PB13 PB14 PB15 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10
 8000daa:	f64f 7337 	movw	r3, #65335	; 0xff37
 8000dae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481d      	ldr	r0, [pc, #116]	; (8000e34 <MX_GPIO_Init+0xfc>)
 8000dbe:	f000 fef7 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dc2:	f649 730f 	movw	r3, #40719	; 0x9f0f
 8000dc6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 feea 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f000 fedc 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_GPIO_Init+0x100>)
 8000e0a:	f000 fed1 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	2303      	movs	r3, #3
 8000e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_GPIO_Init+0x104>)
 8000e20:	f000 fec6 	bl	8001bb0 <HAL_GPIO_Init>

}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	48001c00 	.word	0x48001c00
 8000e34:	48000400 	.word	0x48000400
 8000e38:	48001000 	.word	0x48001000
 8000e3c:	48000c00 	.word	0x48000c00

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fc3c 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f828 	bl	8000e9c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f7ff ff74 	bl	8000d38 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000e50:	f000 fb04 	bl	800145c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000e54:	f000 fb78 	bl	8001548 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000e58:	f000 f93c 	bl	80010d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <main+0x4c>)
 8000e5e:	f003 fd79 	bl	8004954 <HAL_TIM_Base_Start_IT>
  printf("Timer16 Start \n");
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0x50>)
 8000e64:	f005 f896 	bl	8005f94 <puts>

  W25qxx_Init();
 8000e68:	f7ff fc5e 	bl	8000728 <W25qxx_Init>
  W25qxx_EraseSector(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f7ff fd21 	bl	80008b4 <W25qxx_EraseSector>
  W25qxx_WriteSector(write_buffer, 1, 0, 8);
 8000e72:	2308      	movs	r3, #8
 8000e74:	2200      	movs	r2, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <main+0x54>)
 8000e7a:	f7ff fe05 	bl	8000a88 <W25qxx_WriteSector>
  W25qxx_ReadSector(read_buffer, 1, 0, 8);
 8000e7e:	2308      	movs	r3, #8
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <main+0x58>)
 8000e86:	f7ff fedb 	bl	8000c40 <W25qxx_ReadSector>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <main+0x4a>
 8000e8c:	20000138 	.word	0x20000138
 8000e90:	08006e38 	.word	0x08006e38
 8000e94:	20000004 	.word	0x20000004
 8000e98:	20000098 	.word	0x20000098

08000e9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ae      	sub	sp, #184	; 0xb8
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ea6:	2248      	movs	r2, #72	; 0x48
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 ffe4 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2250      	movs	r2, #80	; 0x50
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 ffd4 	bl	8005e78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed0:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <_Z18SystemClock_Configv+0x134>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ed8:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <_Z18SystemClock_Configv+0x134>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <_Z18SystemClock_Configv+0x134>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000eec:	2322      	movs	r3, #34	; 0x22
 8000eee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f08:	2360      	movs	r3, #96	; 0x60
 8000f0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f20:	2320      	movs	r3, #32
 8000f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f2e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fb50 	bl	80025e8 <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000f58:	f000 f870 	bl	800103c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f5c:	236f      	movs	r3, #111	; 0x6f
 8000f5e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2303      	movs	r3, #3
 8000f62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 febe 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000f94:	f000 f852 	bl	800103c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 8000f98:	f242 0301 	movw	r3, #8193	; 0x2001
 8000f9c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 faea 	bl	8003586 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_Z18SystemClock_Configv+0x12a>
  {
    Error_Handler();
 8000fc2:	f000 f83b 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000fc6:	bf00      	nop
 8000fc8:	37b8      	adds	r7, #184	; 0xb8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	58000400 	.word	0x58000400

08000fd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d11a      	bne.n	800101c <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		printf("read[0] = %d \n", read_buffer[0]);
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fee:	f004 ff4b 	bl	8005e88 <iprintf>
		printf("read[4] = %d \n", read_buffer[4]);
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ffa:	f004 ff45 	bl	8005e88 <iprintf>
		printf("read[0] = %d \n", write_buffer[0]);
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001006:	f004 ff3f 	bl	8005e88 <iprintf>
		printf("read[4] = %d \n", write_buffer[4]);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001012:	f004 ff39 	bl	8005e88 <iprintf>
		printf("timer event 4 \n");
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001018:	f004 ffbc 	bl	8005f94 <puts>
	}
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40014400 	.word	0x40014400
 8001028:	20000098 	.word	0x20000098
 800102c:	08006e48 	.word	0x08006e48
 8001030:	08006e58 	.word	0x08006e58
 8001034:	20000004 	.word	0x20000004
 8001038:	08006e68 	.word	0x08006e68

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <__io_putchar>:
#define __PRINTF_TO_UART_H__

#include "usart.h"

int __io_putchar(char ch)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 8001052:	1df9      	adds	r1, r7, #7
 8001054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001058:	2201      	movs	r2, #1
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <__io_putchar+0x24>)
 800105c:	f003 ff02 	bl	8004e64 <HAL_UART_Transmit>
	return ch;
 8001060:	79fb      	ldrb	r3, [r7, #7]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000184 	.word	0x20000184

08001070 <LL_AHB2_GRP1_EnableClock>:
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800107e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4313      	orrs	r3, r2
 8001086:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4013      	ands	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_SPI1_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <MX_SPI1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_SPI1_Init+0x74>)
 80010e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_SPI1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_SPI1_Init+0x74>)
 80010ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_SPI1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_SPI1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_SPI1_Init+0x74>)
 8001102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001106:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_SPI1_Init+0x74>)
 800110a:	2228      	movs	r2, #40	; 0x28
 800110c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_SPI1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_SPI1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_SPI1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_SPI1_Init+0x74>)
 8001122:	2207      	movs	r2, #7
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_SPI1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_SPI1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_SPI1_Init+0x74>)
 8001134:	f002 fcae 	bl	8003a94 <HAL_SPI_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800113e:	f7ff ff7d 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000d4 	.word	0x200000d4
 800114c:	40013000 	.word	0x40013000

08001150 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_SPI_MspInit+0x5c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d117      	bne.n	80011a2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001172:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001176:	f7ff ff94 	bl	80010a2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff ff78 	bl	8001070 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001180:	23e0      	movs	r3, #224	; 0xe0
 8001182:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001190:	2305      	movs	r3, #5
 8001192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f000 fd07 	bl	8001bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40013000 	.word	0x40013000

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <HardFault_Handler+0x4>

080011ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <MemManage_Handler+0x4>

080011d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <BusFault_Handler+0x4>

080011d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <UsageFault_Handler+0x4>

080011dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120a:	f000 fab3 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800121a:	f003 fbe9 	bl	80049f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000138 	.word	0x20000138

08001228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <USART1_IRQHandler+0x10>)
 800122e:	f003 feaf 	bl	8004f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000184 	.word	0x20000184

0800123c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
	}

return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e009      	b.n	800129c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fed9 	bl	8001048 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <_write+0x12>
	}
	return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
	return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f004 fd6c 	bl	8005e24 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20030000 	.word	0x20030000
 8001378:	00000400 	.word	0x00000400
 800137c:	200000a0 	.word	0x200000a0
 8001380:	20000228 	.word	0x20000228

08001384 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <SystemInit+0x98>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <SystemInit+0x98>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80013b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <SystemInit+0x9c>)
 80013be:	4013      	ands	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ce:	f023 0305 	bic.w	r3, r3, #5
 80013d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <SystemInit+0xa0>)
 80013f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <SystemInit+0xa0>)
 80013f8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800140a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	faf6fefb 	.word	0xfaf6fefb
 8001424:	22041000 	.word	0x22041000

08001428 <LL_APB2_GRP1_EnableClock>:
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4313      	orrs	r3, r2
 800143e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001444:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_TIM16_Init+0x48>)
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <MX_TIM16_Init+0x4c>)
 8001464:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3199;
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_TIM16_Init+0x48>)
 8001468:	f640 427f 	movw	r2, #3199	; 0xc7f
 800146c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <MX_TIM16_Init+0x48>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_TIM16_Init+0x48>)
 8001476:	f242 720f 	movw	r2, #9999	; 0x270f
 800147a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_TIM16_Init+0x48>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_TIM16_Init+0x48>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_TIM16_Init+0x48>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM16_Init+0x48>)
 8001490:	f003 fa08 	bl	80048a4 <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800149a:	f7ff fdcf 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000138 	.word	0x20000138
 80014a8:	40014400 	.word	0x40014400

080014ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_TIM_Base_MspInit+0x34>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10b      	bne.n	80014d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014c2:	f7ff ffb1 	bl	8001428 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2019      	movs	r0, #25
 80014cc:	f000 fa7d 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014d0:	2019      	movs	r0, #25
 80014d2:	f000 fa94 	bl	80019fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40014400 	.word	0x40014400

080014e4 <LL_AHB2_GRP1_EnableClock>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_APB2_GRP1_EnableClock>:
{
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <MX_USART1_UART_Init+0x94>)
 8001550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 8001592:	f003 fc17 	bl	8004dc4 <HAL_UART_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800159c:	f7ff fd4e 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 80015a4:	f004 fb74 	bl	8005c90 <HAL_UARTEx_SetTxFifoThreshold>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ae:	f7ff fd45 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 80015b6:	f004 fba9 	bl	8005d0c <HAL_UARTEx_SetRxFifoThreshold>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015c0:	f7ff fd3c 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_USART1_UART_Init+0x90>)
 80015c6:	f004 fb2a 	bl	8005c1e <HAL_UARTEx_DisableFifoMode>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015d0:	f7ff fd34 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000184 	.word	0x20000184
 80015dc:	40013800 	.word	0x40013800

080015e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_UART_MspInit+0x68>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d11e      	bne.n	8001640 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001602:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001606:	f7ff ff86 	bl	8001516 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff ff6a 	bl	80014e4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001610:	23c0      	movs	r3, #192	; 0xc0
 8001612:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001620:	2307      	movs	r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_UART_MspInit+0x6c>)
 800162c:	f000 fac0 	bl	8001bb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	2024      	movs	r0, #36	; 0x24
 8001636:	f000 f9c8 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800163a:	2024      	movs	r0, #36	; 0x24
 800163c:	f000 f9df 	bl	80019fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013800 	.word	0x40013800
 800164c:	48000400 	.word	0x48000400

08001650 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001650:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001652:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001654:	3304      	adds	r3, #4

08001656 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001656:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001658:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800165a:	d3f9      	bcc.n	8001650 <CopyDataInit>
  bx lr
 800165c:	4770      	bx	lr

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800165e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001660:	3004      	adds	r0, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001662:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>
  bx lr
 8001666:	4770      	bx	lr

08001668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800166a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800166c:	f7ff fe8a 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <LoopForever+0x8>)
 8001672:	490c      	ldr	r1, [pc, #48]	; (80016a4 <LoopForever+0xc>)
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <LoopForever+0x10>)
 8001676:	2300      	movs	r3, #0
 8001678:	f7ff ffed 	bl	8001656 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <LoopForever+0x14>)
 800167e:	490c      	ldr	r1, [pc, #48]	; (80016b0 <LoopForever+0x18>)
 8001680:	2300      	movs	r3, #0
 8001682:	f7ff ffee 	bl	8001662 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <LoopForever+0x1c>)
 8001688:	490b      	ldr	r1, [pc, #44]	; (80016b8 <LoopForever+0x20>)
 800168a:	2300      	movs	r3, #0
 800168c:	f7ff ffe9 	bl	8001662 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001690:	f004 fbce 	bl	8005e30 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001694:	f7ff fbd4 	bl	8000e40 <main>

08001698 <LoopForever>:

LoopForever:
  b LoopForever
 8001698:	e7fe      	b.n	8001698 <LoopForever>
 800169a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800169c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80016a0:	20000004 	.word	0x20000004
 80016a4:	2000007c 	.word	0x2000007c
 80016a8:	08007014 	.word	0x08007014
  INIT_BSS _sbss, _ebss
 80016ac:	2000007c 	.word	0x2000007c
 80016b0:	20000228 	.word	0x20000228
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016b4:	20030000 	.word	0x20030000
 80016b8:	20030000 	.word	0x20030000

080016bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_Init+0x3c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_Init+0x3c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f96c 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 f80f 	bl	8001700 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	e001      	b.n	80016f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ee:	f7ff fd5f 	bl	80011b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58004000 	.word	0x58004000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_InitTick+0x6c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d024      	beq.n	800175e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001714:	f001 fca2 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_InitTick+0x6c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001724:	fbb3 f3f1 	udiv	r3, r3, r1
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f000 f974 	bl	8001a1a <HAL_SYSTICK_Config>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10f      	bne.n	8001758 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b0f      	cmp	r3, #15
 800173c:	d809      	bhi.n	8001752 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173e:	2200      	movs	r2, #0
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001746:	f000 f940 	bl	80019ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_InitTick+0x70>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e007      	b.n	8001762 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e004      	b.n	8001762 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000014 	.word	0x20000014
 8001770:	20000010 	.word	0x20000010

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000014 	.word	0x20000014
 8001798:	20000214 	.word	0x20000214

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000214 	.word	0x20000214

080017b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTickPrio+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000010 	.word	0x20000010

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffe2 	bl	800179c <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffd2 	bl	800179c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
    {
    }
  }
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000014 	.word	0x20000014

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff40 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff90 	bl	8001908 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5f 	bl	80018b4 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff33 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa4 	bl	8001970 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e04f      	b.n	8001ae4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d008      	beq.n	8001a62 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2204      	movs	r2, #4
 8001a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e040      	b.n	8001ae4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 020e 	bic.w	r2, r2, #14
 8001a70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f003 021c 	and.w	r2, r3, #28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ad0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d005      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	e047      	b.n	8001ba4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 020e 	bic.w	r2, r2, #14
 8001b22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	f003 021c 	and.w	r2, r3, #28
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f202 	lsl.w	r2, r1, r2
 8001b56:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00c      	beq.n	8001b84 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
    }
  }
  return status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e14c      	b.n	8001e5a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 813e 	beq.w	8001e54 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d00b      	beq.n	8001bf8 <HAL_GPIO_Init+0x48>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d007      	beq.n	8001bf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bec:	2b11      	cmp	r3, #17
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 0201 	and.w	r2, r3, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0xea>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b12      	cmp	r3, #18
 8001c98:	d123      	bne.n	8001ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	6939      	ldr	r1, [r7, #16]
 8001cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0203 	and.w	r2, r3, #3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8098 	beq.w	8001e54 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_GPIO_Init+0x2c8>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4e:	d019      	beq.n	8001d84 <HAL_GPIO_Init+0x1d4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4a      	ldr	r2, [pc, #296]	; (8001e7c <HAL_GPIO_Init+0x2cc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1d0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a49      	ldr	r2, [pc, #292]	; (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1cc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2d4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1c8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_GPIO_Init+0x2d8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1c4>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e008      	b.n	8001d86 <HAL_GPIO_Init+0x1d6>
 8001d74:	2307      	movs	r3, #7
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x1d6>
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e004      	b.n	8001d86 <HAL_GPIO_Init+0x1d6>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x1d6>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_GPIO_Init+0x1d6>
 8001d84:	2300      	movs	r3, #0
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	f002 0203 	and.w	r2, r2, #3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d96:	4938      	ldr	r1, [pc, #224]	; (8001e78 <HAL_GPIO_Init+0x2c8>)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dca:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f aeab 	bne.w	8001bc0 <HAL_GPIO_Init+0x10>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	48000800 	.word	0x48000800
 8001e84:	48000c00 	.word	0x48000c00
 8001e88:	48001000 	.word	0x48001000
 8001e8c:	58000800 	.word	0x58000800

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	58000400 	.word	0x58000400

08001ee0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	58000400 	.word	0x58000400

08001efc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f0e:	d101      	bne.n	8001f14 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f6e:	d101      	bne.n	8001f74 <LL_RCC_HSE_IsReady+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_RCC_HSE_IsReady+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fce:	d101      	bne.n	8001fd4 <LL_RCC_HSI_IsReady+0x18>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <LL_RCC_HSI_IsReady+0x1a>
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d101      	bne.n	8002066 <LL_RCC_HSI48_IsReady+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_RCC_HSI48_IsReady+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d101      	bne.n	8002112 <LL_RCC_LSE_IsReady+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_RCC_LSE_IsReady+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b02      	cmp	r3, #2
 8002174:	d101      	bne.n	800217a <LL_RCC_LSI1_IsReady+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_RCC_LSI1_IsReady+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d101      	bne.n	80021e2 <LL_RCC_LSI2_IsReady+0x18>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_RCC_LSI2_IsReady+0x1a>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b02      	cmp	r3, #2
 8002268:	d101      	bne.n	800226e <LL_RCC_MSI_IsReady+0x16>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <LL_RCC_MSI_IsReady+0x18>
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2bb0      	cmp	r3, #176	; 0xb0
 80022b8:	d901      	bls.n	80022be <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80022ba:	23b0      	movs	r3, #176	; 0xb0
 80022bc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80022be:	687b      	ldr	r3, [r7, #4]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 0203 	bic.w	r2, r3, #3
 8002308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800236e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002396:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800239a:	f023 020f 	bic.w	r2, r3, #15
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249c:	6013      	str	r3, [r2, #0]
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ba:	d101      	bne.n	80024c0 <LL_RCC_PLL_IsReady+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_RCC_PLL_IsReady+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0303 	and.w	r3, r3, #3
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d101      	bne.n	8002546 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002566:	d101      	bne.n	800256c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d101      	bne.n	8002592 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b0:	d101      	bne.n	80025b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025d4:	d101      	bne.n	80025da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b08d      	sub	sp, #52	; 0x34
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e37e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8092 	beq.w	800272c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002608:	f7ff fe89 	bl	800231e <LL_RCC_GetSysClkSource>
 800260c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260e:	f7ff ff82 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 8002612:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x3e>
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d14c      	bne.n	80026ba <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	2b01      	cmp	r3, #1
 8002624:	d149      	bne.n	80026ba <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002626:	f7ff fe17 	bl	8002258 <LL_RCC_MSI_IsReady>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_OscConfig+0x54>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e35d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002640:	f7ff fe2f 	bl	80022a2 <LL_RCC_MSI_GetRange>
 8002644:	4603      	mov	r3, r0
 8002646:	429c      	cmp	r4, r3
 8002648:	d914      	bls.n	8002674 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fd44 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e34c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fe09 	bl	800227a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe2d 	bl	80022cc <LL_RCC_MSI_SetCalibTrimming>
 8002672:	e013      	b.n	800269c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fdfe 	bl	800227a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe22 	bl	80022cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fd25 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e32d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800269c:	f000 fcde 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4ab3      	ldr	r2, [pc, #716]	; (8002970 <HAL_RCC_OscConfig+0x388>)
 80026a4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026a6:	4bb3      	ldr	r3, [pc, #716]	; (8002974 <HAL_RCC_OscConfig+0x38c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f828 	bl	8001700 <HAL_InitTick>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d039      	beq.n	800272a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e31e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01e      	beq.n	8002700 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026c2:	f7ff fdab 	bl	800221c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c6:	f7ff f869 	bl	800179c <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ce:	f7ff f865 	bl	800179c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e30b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80026e0:	f7ff fdba 	bl	8002258 <LL_RCC_MSI_IsReady>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f1      	beq.n	80026ce <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fdc3 	bl	800227a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fde7 	bl	80022cc <LL_RCC_MSI_SetCalibTrimming>
 80026fe:	e015      	b.n	800272c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002700:	f7ff fd9b 	bl	800223a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002704:	f7ff f84a 	bl	800179c <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270c:	f7ff f846 	bl	800179c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e2ec      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800271e:	f7ff fd9b 	bl	8002258 <LL_RCC_MSI_IsReady>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f1      	bne.n	800270c <HAL_RCC_OscConfig+0x124>
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800272a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d04e      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002738:	f7ff fdf1 	bl	800231e <LL_RCC_GetSysClkSource>
 800273c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273e:	f7ff feea 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 8002742:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x16e>
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d10d      	bne.n	800276c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d10a      	bne.n	800276c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002756:	f7ff fc01 	bl	8001f5c <LL_RCC_HSE_IsReady>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d039      	beq.n	80027d4 <HAL_RCC_OscConfig+0x1ec>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d135      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e2c5      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d102      	bne.n	800277c <HAL_RCC_OscConfig+0x194>
 8002776:	f7ff fbd3 	bl	8001f20 <LL_RCC_HSE_Enable>
 800277a:	e001      	b.n	8002780 <HAL_RCC_OscConfig+0x198>
 800277c:	f7ff fbdf 	bl	8001f3e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff f808 	bl	800179c <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff f804 	bl	800179c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e2aa      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027a2:	f7ff fbdb 	bl	8001f5c <LL_RCC_HSE_IsReady>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f1      	beq.n	8002790 <HAL_RCC_OscConfig+0x1a8>
 80027ac:	e013      	b.n	80027d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fff5 	bl	800179c <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b6:	f7fe fff1 	bl	800179c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e297      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80027c8:	f7ff fbc8 	bl	8001f5c <LL_RCC_HSE_IsReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f1      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1ce>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d051      	beq.n	8002886 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	f7ff fd9c 	bl	800231e <LL_RCC_GetSysClkSource>
 80027e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e8:	f7ff fe95 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 80027ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x218>
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d113      	bne.n	8002822 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d110      	bne.n	8002822 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002800:	f7ff fbdc 	bl	8001fbc <LL_RCC_HSI_IsReady>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x22e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e270      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fbe0 	bl	8001fe0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	e031      	b.n	8002886 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d019      	beq.n	800285e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282a:	f7ff fba9 	bl	8001f80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe ffb5 	bl	800179c <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe ffb1 	bl	800179c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e257      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002848:	f7ff fbb8 	bl	8001fbc <LL_RCC_HSI_IsReady>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f1      	beq.n	8002836 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fbc2 	bl	8001fe0 <LL_RCC_HSI_SetCalibTrimming>
 800285c:	e013      	b.n	8002886 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	f7ff fb9e 	bl	8001f9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe ff9b 	bl	800179c <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe ff97 	bl	800179c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e23d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800287c:	f7ff fb9e 	bl	8001fbc <LL_RCC_HSI_IsReady>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f1      	bne.n	800286a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80a3 	beq.w	80029e6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d076      	beq.n	8002996 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d046      	beq.n	8002942 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80028b4:	f7ff fc55 	bl	8002162 <LL_RCC_LSI1_IsReady>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d113      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80028be:	f7ff fc2e 	bl	800211e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028c2:	f7fe ff6b 	bl	800179c <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028ca:	f7fe ff67 	bl	800179c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e20d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80028dc:	f7ff fc41 	bl	8002162 <LL_RCC_LSI1_IsReady>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f1      	beq.n	80028ca <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80028e6:	f7ff fc4e 	bl	8002186 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe ff57 	bl	800179c <HAL_GetTick>
 80028ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028f2:	f7fe ff53 	bl	800179c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1f9      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002904:	f7ff fc61 	bl	80021ca <LL_RCC_LSI2_IsReady>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f1      	beq.n	80028f2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fc6b 	bl	80021ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002918:	f7ff fc12 	bl	8002140 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe ff3e 	bl	800179c <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002924:	f7fe ff3a 	bl	800179c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1e0      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002936:	f7ff fc14 	bl	8002162 <LL_RCC_LSI1_IsReady>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f1      	bne.n	8002924 <HAL_RCC_OscConfig+0x33c>
 8002940:	e051      	b.n	80029e6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002942:	f7ff fbec 	bl	800211e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe ff29 	bl	800179c <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800294e:	f7fe ff25 	bl	800179c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1cb      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002960:	f7ff fbff 	bl	8002162 <LL_RCC_LSI1_IsReady>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f1      	beq.n	800294e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800296a:	f7ff fc1d 	bl	80021a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800296e:	e00c      	b.n	800298a <HAL_RCC_OscConfig+0x3a2>
 8002970:	2000000c 	.word	0x2000000c
 8002974:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002978:	f7fe ff10 	bl	800179c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b03      	cmp	r3, #3
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1b6      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800298a:	f7ff fc1e 	bl	80021ca <LL_RCC_LSI2_IsReady>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f1      	bne.n	8002978 <HAL_RCC_OscConfig+0x390>
 8002994:	e027      	b.n	80029e6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002996:	f7ff fc07 	bl	80021a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe feff 	bl	800179c <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029a2:	f7fe fefb 	bl	800179c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1a1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029b4:	f7ff fc09 	bl	80021ca <LL_RCC_LSI2_IsReady>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f1      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80029be:	f7ff fbbf 	bl	8002140 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe feeb 	bl	800179c <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029ca:	f7fe fee7 	bl	800179c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e18d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029dc:	f7ff fbc1 	bl	8002162 <LL_RCC_LSI1_IsReady>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f1      	bne.n	80029ca <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d05b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f2:	4bb5      	ldr	r3, [pc, #724]	; (8002cc8 <HAL_RCC_OscConfig+0x6e0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d114      	bne.n	8002a28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80029fe:	f7ff fa5f 	bl	8001ec0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a02:	f7fe fecb 	bl	800179c <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0a:	f7fe fec7 	bl	800179c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e16d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1c:	4baa      	ldr	r3, [pc, #680]	; (8002cc8 <HAL_RCC_OscConfig+0x6e0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCC_OscConfig+0x44e>
 8002a30:	f7ff fb1f 	bl	8002072 <LL_RCC_LSE_Enable>
 8002a34:	e00c      	b.n	8002a50 <HAL_RCC_OscConfig+0x468>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d104      	bne.n	8002a48 <HAL_RCC_OscConfig+0x460>
 8002a3e:	f7ff fb3a 	bl	80020b6 <LL_RCC_LSE_EnableBypass>
 8002a42:	f7ff fb16 	bl	8002072 <LL_RCC_LSE_Enable>
 8002a46:	e003      	b.n	8002a50 <HAL_RCC_OscConfig+0x468>
 8002a48:	f7ff fb24 	bl	8002094 <LL_RCC_LSE_Disable>
 8002a4c:	f7ff fb44 	bl	80020d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fea0 	bl	800179c <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fe9c 	bl	800179c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e140      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a76:	f7ff fb40 	bl	80020fa <LL_RCC_LSE_IsReady>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ef      	beq.n	8002a60 <HAL_RCC_OscConfig+0x478>
 8002a80:	e013      	b.n	8002aaa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fe fe8b 	bl	800179c <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fe87 	bl	800179c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e12b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002aa0:	f7ff fb2b 	bl	80020fa <LL_RCC_LSE_IsReady>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ef      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d014      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002abe:	f7ff faa4 	bl	800200a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fe6b 	bl	800179c <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aca:	f7fe fe67 	bl	800179c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e10d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002adc:	f7ff fab7 	bl	800204e <LL_RCC_HSI48_IsReady>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f1      	beq.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ae8:	f7ff faa0 	bl	800202c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fe56 	bl	800179c <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af4:	f7fe fe52 	bl	800179c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0f8      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b06:	f7ff faa2 	bl	800204e <LL_RCC_HSI48_IsReady>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f1      	bne.n	8002af4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80ee 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1a:	f7ff fc00 	bl	800231e <LL_RCC_GetSysClkSource>
 8002b1e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	f040 80af 	bne.w	8002c90 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d123      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d11c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d114      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d05d      	beq.n	8002c44 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d058      	beq.n	8002c40 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0ab      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba0:	f7ff fc73 	bl	800248a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba4:	f7fe fdfa 	bl	800179c <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fdf6 	bl	800179c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e09c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ef      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <HAL_RCC_OscConfig+0x6e4>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be4:	0212      	lsls	r2, r2, #8
 8002be6:	4311      	orrs	r1, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c02:	f7ff fc33 	bl	800246c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c16:	f7fe fdc1 	bl	800179c <HAL_GetTick>
 8002c1a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe fdbd 	bl	800179c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e063      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ef      	beq.n	8002c1e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3e:	e05a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e059      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d151      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c52:	f7ff fc0b 	bl	800246c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c66:	f7fe fd99 	bl	800179c <HAL_GetTick>
 8002c6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fe fd95 	bl	800179c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e03b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ef      	beq.n	8002c6e <HAL_RCC_OscConfig+0x686>
 8002c8e:	e032      	b.n	8002cf6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d02d      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	f7ff fbf8 	bl	800248a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca4:	f023 0303 	bic.w	r3, r3, #3
 8002ca8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fd6d 	bl	800179c <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	e00d      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6fa>
 8002cc6:	bf00      	nop
 8002cc8:	58000400 	.word	0x58000400
 8002ccc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fd64 	bl	800179c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ef      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x6e8>
 8002cf0:	e001      	b.n	8002cf6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3734      	adds	r7, #52	; 0x34
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e12d      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b98      	ldr	r3, [pc, #608]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d91b      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b95      	ldr	r3, [pc, #596]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4993      	ldr	r1, [pc, #588]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d32:	f7fe fd33 	bl	800179c <HAL_GetTick>
 8002d36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d3a:	f7fe fd2f 	bl	800179c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e111      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4c:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d1ef      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fae3 	bl	8002336 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d70:	f7fe fd14 	bl	800179c <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d78:	f7fe fd10 	bl	800179c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0f2      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d8a:	f7ff fbd0 	bl	800252e <LL_RCC_IsActiveFlag_HPRE>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f1      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fada 	bl	800235e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002daa:	f7fe fcf7 	bl	800179c <HAL_GetTick>
 8002dae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002db2:	f7fe fcf3 	bl	800179c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0d5      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002dc4:	f7ff fbc5 	bl	8002552 <LL_RCC_IsActiveFlag_C2HPRE>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f1      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fad3 	bl	800238a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fcda 	bl	800179c <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dec:	f7fe fcd6 	bl	800179c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0b8      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dfe:	f7ff fbbb 	bl	8002578 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f1      	beq.n	8002dec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d016      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff facd 	bl	80023b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fcbd 	bl	800179c <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e26:	f7fe fcb9 	bl	800179c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e09b      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e38:	f7ff fbb1 	bl	800259e <LL_RCC_IsActiveFlag_PPRE1>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f1      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fac3 	bl	80023e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe fc9f 	bl	800179c <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e62:	f7fe fc9b 	bl	800179c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e07d      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e74:	f7ff fba5 	bl	80025c2 <LL_RCC_IsActiveFlag_PPRE2>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f1      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d043      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e92:	f7ff f863 	bl	8001f5c <LL_RCC_HSE_IsReady>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11e      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e067      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ea8:	f7ff fafe 	bl	80024a8 <LL_RCC_PLL_IsReady>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d113      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e05c      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ebe:	f7ff f9cb 	bl	8002258 <LL_RCC_MSI_IsReady>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e051      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ecc:	f7ff f876 	bl	8001fbc <LL_RCC_HSI_IsReady>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e04a      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fa09 	bl	80022f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fc5a 	bl	800179c <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eec:	f7fe fc56 	bl	800179c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e036      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	f7ff fa0c 	bl	800231e <LL_RCC_GetSysClkSource>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d1ec      	bne.n	8002eec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d21b      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 0207 	bic.w	r2, r3, #7
 8002f28:	4913      	ldr	r1, [pc, #76]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe fc34 	bl	800179c <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f38:	f7fe fc30 	bl	800179c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e012      	b.n	8002f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x278>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1ef      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f58:	f000 f880 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_RCC_ClockConfig+0x27c>)
 8002f60:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002f62:	f7fe fc27 	bl	80017b4 <HAL_GetTickPrio>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fbc9 	bl	8001700 <HAL_InitTick>
 8002f6e:	4603      	mov	r3, r0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	58004000 	.word	0x58004000
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f86:	f7ff f9ca 	bl	800231e <LL_RCC_GetSysClkSource>
 8002f8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f92:	f7ff f986 	bl	80022a2 <LL_RCC_MSI_GetRange>
 8002f96:	4603      	mov	r3, r0
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e04b      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d102      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e045      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fba:	f7fe ff9f 	bl	8001efc <LL_RCC_HSE_IsEnabledDiv2>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e03a      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e037      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002fd0:	f7ff faa1 	bl	8002516 <LL_RCC_PLL_GetMainSource>
 8002fd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d003      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x64>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x6a>
 8002fe2:	e00d      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fe6:	60bb      	str	r3, [r7, #8]
        break;
 8002fe8:	e015      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fea:	f7fe ff87 	bl	8001efc <LL_RCC_HSE_IsEnabledDiv2>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ff6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002ff8:	e00d      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002ffc:	60bb      	str	r3, [r7, #8]
        break;
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003000:	f7ff f94f 	bl	80022a2 <LL_RCC_MSI_GetRange>
 8003004:	4603      	mov	r3, r0
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_RCC_GetSysClockFreq+0xcc>)
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	60bb      	str	r3, [r7, #8]
        break;
 8003014:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003016:	f7ff fa59 	bl	80024cc <LL_RCC_PLL_GetN>
 800301a:	4602      	mov	r2, r0
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	fb03 f402 	mul.w	r4, r3, r2
 8003022:	f7ff fa6c 	bl	80024fe <LL_RCC_PLL_GetDivider>
 8003026:	4603      	mov	r3, r0
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	3301      	adds	r3, #1
 800302c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003030:	f7ff fa59 	bl	80024e6 <LL_RCC_PLL_GetR>
 8003034:	4603      	mov	r3, r0
 8003036:	0f5b      	lsrs	r3, r3, #29
 8003038:	3301      	adds	r3, #1
 800303a:	fbb4 f3f3 	udiv	r3, r4, r3
 800303e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003040:	68fb      	ldr	r3, [r7, #12]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	08006f04 	.word	0x08006f04
 8003050:	00f42400 	.word	0x00f42400
 8003054:	003d0900 	.word	0x003d0900
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b598      	push	{r3, r4, r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003060:	f7ff ff8e 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8003064:	4604      	mov	r4, r0
 8003066:	f7ff f9cf 	bl	8002408 <LL_RCC_GetAHBPrescaler>
 800306a:	4603      	mov	r3, r0
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	4a03      	ldr	r2, [pc, #12]	; (8003080 <HAL_RCC_GetHCLKFreq+0x24>)
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd98      	pop	{r3, r4, r7, pc}
 8003080:	08006ea4 	.word	0x08006ea4

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b598      	push	{r3, r4, r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003088:	f7ff ffe8 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800308c:	4604      	mov	r4, r0
 800308e:	f7ff f9d5 	bl	800243c <LL_RCC_GetAPB1Prescaler>
 8003092:	4603      	mov	r3, r0
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd98      	pop	{r3, r4, r7, pc}
 80030ac:	08006ee4 	.word	0x08006ee4

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b598      	push	{r3, r4, r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80030b4:	f7ff ffd2 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030b8:	4604      	mov	r4, r0
 80030ba:	f7ff f9cb 	bl	8002454 <LL_RCC_GetAPB2Prescaler>
 80030be:	4603      	mov	r3, r0
 80030c0:	0adb      	lsrs	r3, r3, #11
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd98      	pop	{r3, r4, r7, pc}
 80030d8:	08006ee4 	.word	0x08006ee4

080030dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2bb0      	cmp	r3, #176	; 0xb0
 80030e8:	d903      	bls.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e007      	b.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003102:	f7ff f98d 	bl	8002420 <LL_RCC_GetAHB4Prescaler>
 8003106:	4603      	mov	r3, r0
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	0c9c      	lsrs	r4, r3, #18
 8003126:	f7fe fedb 	bl	8001ee0 <HAL_PWREx_GetVoltageRange>
 800312a:	4603      	mov	r3, r0
 800312c:	4619      	mov	r1, r3
 800312e:	4620      	mov	r0, r4
 8003130:	f000 f80c 	bl	800314c <RCC_SetFlashLatency>
 8003134:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop
 8003140:	08006f04 	.word	0x08006f04
 8003144:	08006ea4 	.word	0x08006ea4
 8003148:	431bde83 	.word	0x431bde83

0800314c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b093      	sub	sp, #76	; 0x4c
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003156:	4b39      	ldr	r3, [pc, #228]	; (800323c <RCC_SetFlashLatency+0xf0>)
 8003158:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800315c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800315e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003162:	4a37      	ldr	r2, [pc, #220]	; (8003240 <RCC_SetFlashLatency+0xf4>)
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	ca07      	ldmia	r2, {r0, r1, r2}
 800316a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <RCC_SetFlashLatency+0xf8>)
 8003170:	f107 040c 	add.w	r4, r7, #12
 8003174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800317a:	2300      	movs	r3, #0
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003184:	d11c      	bne.n	80031c0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003186:	2300      	movs	r3, #0
 8003188:	643b      	str	r3, [r7, #64]	; 0x40
 800318a:	e015      	b.n	80031b8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003194:	4413      	add	r3, r2
 8003196:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d808      	bhi.n	80031b2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031a8:	4413      	add	r3, r2
 80031aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031ae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80031b0:	e022      	b.n	80031f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b4:	3301      	adds	r3, #1
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d9e6      	bls.n	800318c <RCC_SetFlashLatency+0x40>
 80031be:	e01b      	b.n	80031f8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c4:	e015      	b.n	80031f2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80031c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031ce:	4413      	add	r3, r2
 80031d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d808      	bhi.n	80031ec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031e2:	4413      	add	r3, r2
 80031e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80031ea:	e005      	b.n	80031f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	3301      	adds	r3, #1
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d9e6      	bls.n	80031c6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <RCC_SetFlashLatency+0xfc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 0207 	bic.w	r2, r3, #7
 8003200:	4911      	ldr	r1, [pc, #68]	; (8003248 <RCC_SetFlashLatency+0xfc>)
 8003202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003208:	f7fe fac8 	bl	800179c <HAL_GetTick>
 800320c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800320e:	e008      	b.n	8003222 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003210:	f7fe fac4 	bl	800179c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e007      	b.n	8003232 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <RCC_SetFlashLatency+0xfc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800322c:	429a      	cmp	r2, r3
 800322e:	d1ef      	bne.n	8003210 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	374c      	adds	r7, #76	; 0x4c
 8003236:	46bd      	mov	sp, r7
 8003238:	bd90      	pop	{r4, r7, pc}
 800323a:	bf00      	nop
 800323c:	08006e78 	.word	0x08006e78
 8003240:	08006e88 	.word	0x08006e88
 8003244:	08006e94 	.word	0x08006e94
 8003248:	58004000 	.word	0x58004000

0800324c <LL_RCC_LSE_IsEnabled>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <LL_RCC_LSE_IsEnabled+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_RCC_LSE_IsEnabled+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_RCC_LSE_IsReady>:
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d101      	bne.n	8003288 <LL_RCC_LSE_IsReady+0x18>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <LL_RCC_LSE_IsReady+0x1a>
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_RCC_SetRFWKPClockSource>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800329c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_RCC_SetSMPSClockSource>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4313      	orrs	r3, r2
 80032da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_RCC_SetSMPSPrescaler>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4313      	orrs	r3, r2
 8003302:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_RCC_SetUSARTClockSource>:
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f023 0203 	bic.w	r2, r3, #3
 8003324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_RCC_SetLPUARTClockSource>:
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_RCC_SetI2CClockSource>:
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800338c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_RCC_SetLPTIMClockSource>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	43db      	mvns	r3, r3
 80033ba:	401a      	ands	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_SetSAIClockSource>:
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_RCC_SetRNGClockSource>:
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_RCC_SetCLK48ClockSource>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_RCC_SetUSBClockSource>:
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffe3 	bl	800342e <LL_RCC_SetCLK48ClockSource>
}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <LL_RCC_SetADCClockSource>:
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_RCC_SetRTCClockSource>:
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_RCC_GetRTCClockSource>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_RCC_ForceBackupDomainReset>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_RCC_PLLSAI1_Enable>:
{
 8003526:	b480      	push	{r7}
 8003528:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003538:	6013      	str	r3, [r2, #0]
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_RCC_PLLSAI1_Disable>:
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_RCC_PLLSAI1_IsReady>:
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003574:	d101      	bne.n	800357a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800358e:	2300      	movs	r3, #0
 8003590:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003592:	2300      	movs	r3, #0
 8003594:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d034      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035aa:	d021      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80035ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035b0:	d81b      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b6:	d01d      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80035b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035bc:	d815      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x54>
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d110      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80035d8:	e00d      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f947 	bl	8003872 <RCCEx_PLLSAI1_ConfigNP>
 80035e4:	4603      	mov	r3, r0
 80035e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80035e8:	e005      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	77fb      	strb	r3, [r7, #31]
        break;
 80035ee:	e002      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f6:	7ffb      	ldrb	r3, [r7, #31]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fee8 	bl	80033d6 <LL_RCC_SetSAIClockSource>
 8003606:	e001      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	7ffb      	ldrb	r3, [r7, #31]
 800360a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003614:	2b00      	cmp	r3, #0
 8003616:	d046      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003618:	f7ff ff56 	bl	80034c8 <LL_RCC_GetRTCClockSource>
 800361c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	429a      	cmp	r2, r3
 8003626:	d03c      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003628:	f7fe fc4a 	bl	8001ec0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff30 	bl	800349c <LL_RCC_SetRTCClockSource>
 800363c:	e02e      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003648:	f7ff ff4b 	bl	80034e2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800364c:	f7ff ff5a 	bl	8003504 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800365e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003668:	f7ff fdf0 	bl	800324c <LL_RCC_LSE_IsEnabled>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d114      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003672:	f7fe f893 	bl	800179c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003678:	e00b      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe f88f 	bl	800179c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d902      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	77fb      	strb	r3, [r7, #31]
              break;
 8003690:	e004      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003692:	f7ff fded 	bl	8003270 <LL_RCC_LSE_IsReady>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d1ee      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800369c:	7ffb      	ldrb	r3, [r7, #31]
 800369e:	77bb      	strb	r3, [r7, #30]
 80036a0:	e001      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fe2a 	bl	8003310 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fe35 	bl	800333c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fe5d 	bl	80033a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fe52 	bl	80033a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fe2a 	bl	8003368 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fe1f 	bl	8003368 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d022      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fe8d 	bl	800345a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003748:	d107      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003758:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003762:	d10b      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f8dd 	bl	8003928 <RCCEx_PLLSAI1_ConfigNQ>
 800376e:	4603      	mov	r3, r0
 8003770:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003772:	7ffb      	ldrb	r3, [r7, #31]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003778:	7ffb      	ldrb	r3, [r7, #31]
 800377a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003784:	2b00      	cmp	r3, #0
 8003786:	d02b      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d105      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fe2a 	bl	8003402 <LL_RCC_SetRNGClockSource>
 80037ae:	e00a      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7ff fe21 	bl	8003402 <LL_RCC_SetRNGClockSource>
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff fe34 	bl	800342e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80037ce:	d107      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d022      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fe3d 	bl	8003470 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fe:	d107      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003818:	d10b      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f8dd 	bl	80039de <RCCEx_PLLSAI1_ConfigNR>
 8003824:	4603      	mov	r3, r0
 8003826:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800382e:	7ffb      	ldrb	r3, [r7, #31]
 8003830:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fd26 	bl	8003294 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fd45 	bl	80032e8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fd2c 	bl	80032c0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003868:	7fbb      	ldrb	r3, [r7, #30]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800387e:	f7ff fe61 	bl	8003544 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003882:	f7fd ff8b 	bl	800179c <HAL_GetTick>
 8003886:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003888:	e009      	b.n	800389e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800388a:	f7fd ff87 	bl	800179c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d902      	bls.n	800389e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	e004      	b.n	80038a8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800389e:	f7ff fe60 	bl	8003562 <LL_RCC_PLLSAI1_IsReady>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d137      	bne.n	800391e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038dc:	f7ff fe23 	bl	8003526 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e0:	f7fd ff5c 	bl	800179c <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038e6:	e009      	b.n	80038fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e8:	f7fd ff58 	bl	800179c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d902      	bls.n	80038fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	73fb      	strb	r3, [r7, #15]
        break;
 80038fa:	e004      	b.n	8003906 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038fc:	f7ff fe31 	bl	8003562 <LL_RCC_PLLSAI1_IsReady>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d1f0      	bne.n	80038e8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391a:	4313      	orrs	r3, r2
 800391c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003934:	f7ff fe06 	bl	8003544 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003938:	f7fd ff30 	bl	800179c <HAL_GetTick>
 800393c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800393e:	e009      	b.n	8003954 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003940:	f7fd ff2c 	bl	800179c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	73fb      	strb	r3, [r7, #15]
      break;
 8003952:	e004      	b.n	800395e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003954:	f7ff fe05 	bl	8003562 <LL_RCC_PLLSAI1_IsReady>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d137      	bne.n	80039d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003978:	4313      	orrs	r3, r2
 800397a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003992:	f7ff fdc8 	bl	8003526 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003996:	f7fd ff01 	bl	800179c <HAL_GetTick>
 800399a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800399c:	e009      	b.n	80039b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800399e:	f7fd fefd 	bl	800179c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d902      	bls.n	80039b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	73fb      	strb	r3, [r7, #15]
        break;
 80039b0:	e004      	b.n	80039bc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039b2:	f7ff fdd6 	bl	8003562 <LL_RCC_PLLSAI1_IsReady>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d1f0      	bne.n	800399e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d0:	4313      	orrs	r3, r2
 80039d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039ea:	f7ff fdab 	bl	8003544 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039ee:	f7fd fed5 	bl	800179c <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039f4:	e009      	b.n	8003a0a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f6:	f7fd fed1 	bl	800179c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d902      	bls.n	8003a0a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e004      	b.n	8003a14 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a0a:	f7ff fdaa 	bl	8003562 <LL_RCC_PLLSAI1_IsReady>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d137      	bne.n	8003a8a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a44:	4313      	orrs	r3, r2
 8003a46:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a48:	f7ff fd6d 	bl	8003526 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fea6 	bl	800179c <HAL_GetTick>
 8003a50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a52:	e009      	b.n	8003a68 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a54:	f7fd fea2 	bl	800179c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d902      	bls.n	8003a68 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	73fb      	strb	r3, [r7, #15]
        break;
 8003a66:	e004      	b.n	8003a72 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a68:	f7ff fd7b 	bl	8003562 <LL_RCC_PLLSAI1_IsReady>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d1f0      	bne.n	8003a54 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d108      	bne.n	8003a8a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e095      	b.n	8003bd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d108      	bne.n	8003ac0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab6:	d009      	beq.n	8003acc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	61da      	str	r2, [r3, #28]
 8003abe:	e005      	b.n	8003acc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd fb32 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b0c:	d902      	bls.n	8003b14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e002      	b.n	8003b1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b22:	d007      	beq.n	8003b34 <HAL_SPI_Init+0xa0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b2c:	d002      	beq.n	8003b34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	ea42 0103 	orr.w	r1, r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	f003 0204 	and.w	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b088      	sub	sp, #32
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_SPI_Transmit+0x22>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e158      	b.n	8003eae <HAL_SPI_Transmit+0x2d4>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c04:	f7fd fdca 	bl	800179c <HAL_GetTick>
 8003c08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c1e:	e13d      	b.n	8003e9c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x52>
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c30:	e134      	b.n	8003e9c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d10f      	bne.n	8003c9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d007      	beq.n	8003cbc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cc4:	d94b      	bls.n	8003d5e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_SPI_Transmit+0xfa>
 8003cce:	8afb      	ldrh	r3, [r7, #22]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d13e      	bne.n	8003d52 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cf8:	e02b      	b.n	8003d52 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d112      	bne.n	8003d2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d2c:	e011      	b.n	8003d52 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2e:	f7fd fd35 	bl	800179c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d803      	bhi.n	8003d46 <HAL_SPI_Transmit+0x16c>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d44:	d102      	bne.n	8003d4c <HAL_SPI_Transmit+0x172>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d50:	e0a4      	b.n	8003e9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ce      	bne.n	8003cfa <HAL_SPI_Transmit+0x120>
 8003d5c:	e07c      	b.n	8003e58 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0x192>
 8003d66:	8afb      	ldrh	r3, [r7, #22]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d170      	bne.n	8003e4e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d912      	bls.n	8003d9c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	1c9a      	adds	r2, r3, #2
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b02      	subs	r3, #2
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d9a:	e058      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dc2:	e044      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d12b      	bne.n	8003e2a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d912      	bls.n	8003e02 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	1c9a      	adds	r2, r3, #2
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b02      	subs	r3, #2
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e00:	e025      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	7812      	ldrb	r2, [r2, #0]
 8003e0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e28:	e011      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2a:	f7fd fcb7 	bl	800179c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d803      	bhi.n	8003e42 <HAL_SPI_Transmit+0x268>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e40:	d102      	bne.n	8003e48 <HAL_SPI_Transmit+0x26e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e4c:	e026      	b.n	8003e9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1b5      	bne.n	8003dc4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	6839      	ldr	r1, [r7, #0]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fcdb 	bl	8004818 <SPI_EndRxTxTransaction>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e000      	b.n	8003e9c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b088      	sub	sp, #32
 8003eba:	af02      	add	r7, sp, #8
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed2:	d112      	bne.n	8003efa <HAL_SPI_Receive+0x44>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10e      	bne.n	8003efa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f910 	bl	8004116 <HAL_SPI_TransmitReceive>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	e109      	b.n	800410e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_SPI_Receive+0x52>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e102      	b.n	800410e <HAL_SPI_Receive+0x258>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f10:	f7fd fc44 	bl	800179c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d002      	beq.n	8003f28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
 8003f24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f26:	e0e9      	b.n	80040fc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Receive+0x7e>
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f38:	e0e0      	b.n	80040fc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f84:	d908      	bls.n	8003f98 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	e007      	b.n	8003fa8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d007      	beq.n	8003ff0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ff8:	d867      	bhi.n	80040ca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ffa:	e030      	b.n	800405e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d117      	bne.n	800403a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f103 020c 	add.w	r2, r3, #12
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004038:	e011      	b.n	800405e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403a:	f7fd fbaf 	bl	800179c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d803      	bhi.n	8004052 <HAL_SPI_Receive+0x19c>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004050:	d102      	bne.n	8004058 <HAL_SPI_Receive+0x1a2>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800405c:	e04e      	b.n	80040fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1c8      	bne.n	8003ffc <HAL_SPI_Receive+0x146>
 800406a:	e034      	b.n	80040d6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d115      	bne.n	80040a6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	b292      	uxth	r2, r2
 8004086:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040a4:	e011      	b.n	80040ca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a6:	f7fd fb79 	bl	800179c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d803      	bhi.n	80040be <HAL_SPI_Receive+0x208>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040bc:	d102      	bne.n	80040c4 <HAL_SPI_Receive+0x20e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040c8:	e018      	b.n	80040fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ca      	bne.n	800406c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fb44 	bl	8004768 <SPI_EndRxTransaction>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
 80040f8:	e000      	b.n	80040fc <HAL_SPI_Receive+0x246>
  }

error :
 80040fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b08a      	sub	sp, #40	; 0x28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004124:	2301      	movs	r3, #1
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_SPI_TransmitReceive+0x26>
 8004138:	2302      	movs	r3, #2
 800413a:	e1fb      	b.n	8004534 <HAL_SPI_TransmitReceive+0x41e>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004144:	f7fd fb2a 	bl	800179c <HAL_GetTick>
 8004148:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004150:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004160:	7efb      	ldrb	r3, [r7, #27]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d00e      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x6e>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416c:	d106      	bne.n	800417c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <HAL_SPI_TransmitReceive+0x66>
 8004176:	7efb      	ldrb	r3, [r7, #27]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d003      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800417c:	2302      	movs	r3, #2
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004182:	e1cd      	b.n	8004520 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x80>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x80>
 8004190:	887b      	ldrh	r3, [r7, #2]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800419c:	e1c0      	b.n	8004520 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d003      	beq.n	80041b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2205      	movs	r2, #5
 80041ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	887a      	ldrh	r2, [r7, #2]
 80041de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f4:	d802      	bhi.n	80041fc <HAL_SPI_TransmitReceive+0xe6>
 80041f6:	8a3b      	ldrh	r3, [r7, #16]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d908      	bls.n	800420e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	e007      	b.n	800421e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d007      	beq.n	800423c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004244:	d97c      	bls.n	8004340 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x13e>
 800424e:	8a7b      	ldrh	r3, [r7, #18]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d169      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	881a      	ldrh	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	1c9a      	adds	r2, r3, #2
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004278:	e056      	b.n	8004328 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b02      	cmp	r3, #2
 8004286:	d11b      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x1aa>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x1aa>
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	2b01      	cmp	r3, #1
 8004296:	d113      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	881a      	ldrh	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	1c9a      	adds	r2, r3, #2
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d11c      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x1f2>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	b292      	uxth	r2, r2
 80042e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	1c9a      	adds	r2, r3, #2
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004308:	f7fd fa48 	bl	800179c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	429a      	cmp	r2, r3
 8004316:	d807      	bhi.n	8004328 <HAL_SPI_TransmitReceive+0x212>
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431e:	d003      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004326:	e0fb      	b.n	8004520 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1a3      	bne.n	800427a <HAL_SPI_TransmitReceive+0x164>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d19d      	bne.n	800427a <HAL_SPI_TransmitReceive+0x164>
 800433e:	e0df      	b.n	8004500 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x23a>
 8004348:	8a7b      	ldrh	r3, [r7, #18]
 800434a:	2b01      	cmp	r3, #1
 800434c:	f040 80cb 	bne.w	80044e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d912      	bls.n	8004380 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	1c9a      	adds	r2, r3, #2
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b02      	subs	r3, #2
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800437e:	e0b2      	b.n	80044e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a6:	e09e      	b.n	80044e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d134      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x30a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02f      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x30a>
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d12c      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d912      	bls.n	80043f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	881a      	ldrh	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	1c9a      	adds	r2, r3, #2
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b02      	subs	r3, #2
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043f4:	e012      	b.n	800441c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	7812      	ldrb	r2, [r2, #0]
 8004402:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d148      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x3aa>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d042      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d923      	bls.n	800448e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	b292      	uxth	r2, r2
 8004452:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b02      	subs	r3, #2
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d81f      	bhi.n	80044bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	e016      	b.n	80044bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f103 020c 	add.w	r2, r3, #12
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044bc:	2301      	movs	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044c0:	f7fd f96c 	bl	800179c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d803      	bhi.n	80044d8 <HAL_SPI_TransmitReceive+0x3c2>
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d6:	d102      	bne.n	80044de <HAL_SPI_TransmitReceive+0x3c8>
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044e4:	e01c      	b.n	8004520 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f47f af5b 	bne.w	80043a8 <HAL_SPI_TransmitReceive+0x292>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f47f af54 	bne.w	80043a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f987 	bl	8004818 <SPI_EndRxTxTransaction>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d006      	beq.n	800451e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	661a      	str	r2, [r3, #96]	; 0x60
 800451c:	e000      	b.n	8004520 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800451e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	; 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800454c:	f7fd f926 	bl	800179c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	4413      	add	r3, r2
 800455a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800455c:	f7fd f91e 	bl	800179c <HAL_GetTick>
 8004560:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	015b      	lsls	r3, r3, #5
 8004568:	0d1b      	lsrs	r3, r3, #20
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004572:	e054      	b.n	800461e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457a:	d050      	beq.n	800461e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800457c:	f7fd f90e 	bl	800179c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	429a      	cmp	r2, r3
 800458a:	d902      	bls.n	8004592 <SPI_WaitFlagStateUntilTimeout+0x56>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d13d      	bne.n	800460e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045aa:	d111      	bne.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b4:	d004      	beq.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045be:	d107      	bne.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d8:	d10f      	bne.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e017      	b.n	800463e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	3b01      	subs	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4013      	ands	r3, r2
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	bf0c      	ite	eq
 800462e:	2301      	moveq	r3, #1
 8004630:	2300      	movne	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	429a      	cmp	r2, r3
 800463a:	d19b      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000000c 	.word	0x2000000c

0800464c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800465a:	f7fd f89f 	bl	800179c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	4413      	add	r3, r2
 8004668:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800466a:	f7fd f897 	bl	800179c <HAL_GetTick>
 800466e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004670:	4b3c      	ldr	r3, [pc, #240]	; (8004764 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	0d1b      	lsrs	r3, r3, #20
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004688:	e05f      	b.n	800474a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004690:	d106      	bne.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a6:	d050      	beq.n	800474a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046a8:	f7fd f878 	bl	800179c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d902      	bls.n	80046be <SPI_WaitFifoStateUntilTimeout+0x72>
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d13d      	bne.n	800473a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d6:	d111      	bne.n	80046fc <SPI_WaitFifoStateUntilTimeout+0xb0>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e0:	d004      	beq.n	80046ec <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d107      	bne.n	80046fc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004704:	d10f      	bne.n	8004726 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e010      	b.n	800475c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	3b01      	subs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d197      	bne.n	800468a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	2000000c 	.word	0x2000000c

08004768 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477c:	d111      	bne.n	80047a2 <SPI_EndRxTransaction+0x3a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004786:	d004      	beq.n	8004792 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004790:	d107      	bne.n	80047a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fec5 	bl	800453c <SPI_WaitFlagStateUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e023      	b.n	8004810 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d0:	d11d      	bne.n	800480e <SPI_EndRxTransaction+0xa6>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047da:	d004      	beq.n	80047e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e4:	d113      	bne.n	800480e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff ff2a 	bl	800464c <SPI_WaitFifoStateUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e000      	b.n	8004810 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ff0b 	bl	800464c <SPI_WaitFifoStateUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e027      	b.n	800489c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fe70 	bl	800453c <SPI_WaitFlagStateUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e014      	b.n	800489c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2200      	movs	r2, #0
 800487a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fee4 	bl	800464c <SPI_WaitFifoStateUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e000      	b.n	800489c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e049      	b.n	800494a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc fdee 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 f9cc 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e036      	b.n	80049da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_TIM_Base_Start_IT+0x94>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0x44>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d115      	bne.n	80049c4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_TIM_Base_Start_IT+0x98>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d015      	beq.n	80049d6 <HAL_TIM_Base_Start_IT+0x82>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d011      	beq.n	80049d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	e008      	b.n	80049d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	00010007 	.word	0x00010007

080049f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0202 	mvn.w	r2, #2
 8004a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f905 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8f7 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f908 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0204 	mvn.w	r2, #4
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8db 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8cd 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8de 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0208 	mvn.w	r2, #8
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8b1 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f8a3 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8b4 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f887 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f879 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f88a 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10e      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fa30 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8de 	bl	8004d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8d1 	bl	8004d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f838 	bl	8004c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d10e      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0220 	mvn.w	r2, #32
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f891 	bl	8004d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <TIM_Base_SetConfig+0xbc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x20>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a21      	ldr	r2, [pc, #132]	; (8004d3c <TIM_Base_SetConfig+0xbc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0x52>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0x52>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <TIM_Base_SetConfig+0xc0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0x52>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <TIM_Base_SetConfig+0xc4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <TIM_Base_SetConfig+0xbc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_Base_SetConfig+0xa0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0b      	ldr	r2, [pc, #44]	; (8004d40 <TIM_Base_SetConfig+0xc0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0xa0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <TIM_Base_SetConfig+0xc4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800

08004d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <LL_RCC_GetUSARTClockSource>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4013      	ands	r3, r2
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_RCC_GetLPUARTClockSource>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4013      	ands	r3, r2
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e042      	b.n	8004e5c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fc fbf9 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2224      	movs	r2, #36	; 0x24
 8004df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb16 	bl	8005438 <UART_SetConfig>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e022      	b.n	8004e5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fd10 	bl	8005844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fd97 	bl	8005988 <UART_CheckIdleState>
 8004e5a:	4603      	mov	r3, r0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	f040 8083 	bne.w	8004f86 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_UART_Transmit+0x28>
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e07b      	b.n	8004f88 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_Transmit+0x3a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e074      	b.n	8004f88 <HAL_UART_Transmit+0x124>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2221      	movs	r2, #33	; 0x21
 8004eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb6:	f7fc fc71 	bl	800179c <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_UART_Transmit+0x84>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e003      	b.n	8004ef0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ef8:	e02c      	b.n	8004f54 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fd8a 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e039      	b.n	8004f88 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e007      	b.n	8004f42 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1cc      	bne.n	8004efa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fd57 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e006      	b.n	8004f88 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d118      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d013      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 81fb 	beq.w	80053de <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
      }
      return;
 8004ff0:	e1f5      	b.n	80053de <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80ef 	beq.w	80051d8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4b73      	ldr	r3, [pc, #460]	; (80051cc <HAL_UART_IRQHandler+0x23c>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4b72      	ldr	r3, [pc, #456]	; (80051d0 <HAL_UART_IRQHandler+0x240>)
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80e4 	beq.w	80051d8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d010      	beq.n	800503c <HAL_UART_IRQHandler+0xac>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d010      	beq.n	8005068 <HAL_UART_IRQHandler+0xd8>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2202      	movs	r2, #2
 8005056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	f043 0204 	orr.w	r2, r3, #4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d010      	beq.n	8005094 <HAL_UART_IRQHandler+0x104>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2204      	movs	r2, #4
 8005082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508a:	f043 0202 	orr.w	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4b48      	ldr	r3, [pc, #288]	; (80051cc <HAL_UART_IRQHandler+0x23c>)
 80050ac:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2208      	movs	r2, #8
 80050b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c0:	f043 0208 	orr.w	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <HAL_UART_IRQHandler+0x168>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 816f 	beq.w	80053e2 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d011      	beq.n	8005132 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005138:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d004      	beq.n	8005152 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514e:	2b00      	cmp	r3, #0
 8005150:	d031      	beq.n	80051b6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fce3 	bl	8005b1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d123      	bne.n	80051ae <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005174:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d013      	beq.n	80051a6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005182:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_UART_IRQHandler+0x244>)
 8005184:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518a:	4618      	mov	r0, r3
 800518c:	f7fc fcb0 	bl	8001af0 <HAL_DMA_Abort_IT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d017      	beq.n	80051c6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e00f      	b.n	80051c6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f930 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	e00b      	b.n	80051c6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f92c 	bl	800540c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e007      	b.n	80051c6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f928 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80051c4:	e10d      	b.n	80053e2 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c6:	bf00      	nop
    return;
 80051c8:	e10b      	b.n	80053e2 <HAL_UART_IRQHandler+0x452>
 80051ca:	bf00      	nop
 80051cc:	10000001 	.word	0x10000001
 80051d0:	04000120 	.word	0x04000120
 80051d4:	08005b83 	.word	0x08005b83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 80ab 	bne.w	8005338 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a5 	beq.w	8005338 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 809f 	beq.w	8005338 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2210      	movs	r2, #16
 8005200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d155      	bne.n	80052bc <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800521a:	893b      	ldrh	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80e2 	beq.w	80053e6 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005228:	893a      	ldrh	r2, [r7, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	f080 80db 	bcs.w	80053e6 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	893a      	ldrh	r2, [r7, #8]
 8005234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d12b      	bne.n	80052a0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005256:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005276:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0210 	bic.w	r2, r2, #16
 8005294:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800529a:	4618      	mov	r0, r3
 800529c:	f7fc fbc9 	bl	8001a32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8b3 	bl	8005420 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80052ba:	e094      	b.n	80053e6 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8087 	beq.w	80053ea <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80052dc:	897b      	ldrh	r3, [r7, #10]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8083 	beq.w	80053ea <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052f2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0210 	bic.w	r2, r2, #16
 800532a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800532c:	897b      	ldrh	r3, [r7, #10]
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f875 	bl	8005420 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005336:	e058      	b.n	80053ea <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00d      	beq.n	800535e <HAL_UART_IRQHandler+0x3ce>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fc43 	bl	8005be2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800535c:	e048      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005380:	2b00      	cmp	r3, #0
 8005382:	d034      	beq.n	80053ee <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
    }
    return;
 800538c:	e02f      	b.n	80053ee <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_UART_IRQHandler+0x41a>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fc03 	bl	8005bae <UART_EndTransmit_IT>
    return;
 80053a8:	e022      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_UART_IRQHandler+0x436>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fc23 	bl	8005c0a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053c4:	e014      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00f      	beq.n	80053f0 <HAL_UART_IRQHandler+0x460>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	da0c      	bge.n	80053f0 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fc0d 	bl	8005bf6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053dc:	e008      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
      return;
 80053de:	bf00      	nop
 80053e0:	e006      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
    return;
 80053e2:	bf00      	nop
 80053e4:	e004      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
      return;
 80053e6:	bf00      	nop
 80053e8:	e002      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
      return;
 80053ea:	bf00      	nop
 80053ec:	e000      	b.n	80053f0 <HAL_UART_IRQHandler+0x460>
    return;
 80053ee:	bf00      	nop
  }
}
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop

080053f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005438:	b5b0      	push	{r4, r5, r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	4313      	orrs	r3, r2
 800545a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4ba3      	ldr	r3, [pc, #652]	; (80056f0 <UART_SetConfig+0x2b8>)
 8005464:	4013      	ands	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	430b      	orrs	r3, r1
 800546e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a98      	ldr	r2, [pc, #608]	; (80056f4 <UART_SetConfig+0x2bc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	4313      	orrs	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80054aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	69f9      	ldr	r1, [r7, #28]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	f023 010f 	bic.w	r1, r3, #15
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a89      	ldr	r2, [pc, #548]	; (80056f8 <UART_SetConfig+0x2c0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d120      	bne.n	800551a <UART_SetConfig+0xe2>
 80054d8:	2003      	movs	r0, #3
 80054da:	f7ff fc53 	bl	8004d84 <LL_RCC_GetUSARTClockSource>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d817      	bhi.n	8005514 <UART_SetConfig+0xdc>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0xb4>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	08005509 	.word	0x08005509
 80054f4:	08005503 	.word	0x08005503
 80054f8:	0800550f 	.word	0x0800550f
 80054fc:	2301      	movs	r3, #1
 80054fe:	76fb      	strb	r3, [r7, #27]
 8005500:	e038      	b.n	8005574 <UART_SetConfig+0x13c>
 8005502:	2302      	movs	r3, #2
 8005504:	76fb      	strb	r3, [r7, #27]
 8005506:	e035      	b.n	8005574 <UART_SetConfig+0x13c>
 8005508:	2304      	movs	r3, #4
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e032      	b.n	8005574 <UART_SetConfig+0x13c>
 800550e:	2308      	movs	r3, #8
 8005510:	76fb      	strb	r3, [r7, #27]
 8005512:	e02f      	b.n	8005574 <UART_SetConfig+0x13c>
 8005514:	2310      	movs	r3, #16
 8005516:	76fb      	strb	r3, [r7, #27]
 8005518:	e02c      	b.n	8005574 <UART_SetConfig+0x13c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a75      	ldr	r2, [pc, #468]	; (80056f4 <UART_SetConfig+0x2bc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d125      	bne.n	8005570 <UART_SetConfig+0x138>
 8005524:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005528:	f7ff fc3c 	bl	8004da4 <LL_RCC_GetLPUARTClockSource>
 800552c:	4603      	mov	r3, r0
 800552e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005532:	d017      	beq.n	8005564 <UART_SetConfig+0x12c>
 8005534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005538:	d817      	bhi.n	800556a <UART_SetConfig+0x132>
 800553a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553e:	d00b      	beq.n	8005558 <UART_SetConfig+0x120>
 8005540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005544:	d811      	bhi.n	800556a <UART_SetConfig+0x132>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <UART_SetConfig+0x11a>
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554e:	d006      	beq.n	800555e <UART_SetConfig+0x126>
 8005550:	e00b      	b.n	800556a <UART_SetConfig+0x132>
 8005552:	2300      	movs	r3, #0
 8005554:	76fb      	strb	r3, [r7, #27]
 8005556:	e00d      	b.n	8005574 <UART_SetConfig+0x13c>
 8005558:	2302      	movs	r3, #2
 800555a:	76fb      	strb	r3, [r7, #27]
 800555c:	e00a      	b.n	8005574 <UART_SetConfig+0x13c>
 800555e:	2304      	movs	r3, #4
 8005560:	76fb      	strb	r3, [r7, #27]
 8005562:	e007      	b.n	8005574 <UART_SetConfig+0x13c>
 8005564:	2308      	movs	r3, #8
 8005566:	76fb      	strb	r3, [r7, #27]
 8005568:	e004      	b.n	8005574 <UART_SetConfig+0x13c>
 800556a:	2310      	movs	r3, #16
 800556c:	76fb      	strb	r3, [r7, #27]
 800556e:	e001      	b.n	8005574 <UART_SetConfig+0x13c>
 8005570:	2310      	movs	r3, #16
 8005572:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a5e      	ldr	r2, [pc, #376]	; (80056f4 <UART_SetConfig+0x2bc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	f040 808b 	bne.w	8005696 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005580:	7efb      	ldrb	r3, [r7, #27]
 8005582:	2b08      	cmp	r3, #8
 8005584:	d823      	bhi.n	80055ce <UART_SetConfig+0x196>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x154>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055cf 	.word	0x080055cf
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055cf 	.word	0x080055cf
 800559c:	080055bf 	.word	0x080055bf
 80055a0:	080055cf 	.word	0x080055cf
 80055a4:	080055cf 	.word	0x080055cf
 80055a8:	080055cf 	.word	0x080055cf
 80055ac:	080055c7 	.word	0x080055c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b0:	f7fd fd68 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 80055b4:	6178      	str	r0, [r7, #20]
        break;
 80055b6:	e00f      	b.n	80055d8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b8:	4b50      	ldr	r3, [pc, #320]	; (80056fc <UART_SetConfig+0x2c4>)
 80055ba:	617b      	str	r3, [r7, #20]
        break;
 80055bc:	e00c      	b.n	80055d8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055be:	f7fd fcdf 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 80055c2:	6178      	str	r0, [r7, #20]
        break;
 80055c4:	e008      	b.n	80055d8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ca:	617b      	str	r3, [r7, #20]
        break;
 80055cc:	e004      	b.n	80055d8 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	76bb      	strb	r3, [r7, #26]
        break;
 80055d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 811a 	beq.w	8005814 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	4a46      	ldr	r2, [pc, #280]	; (8005700 <UART_SetConfig+0x2c8>)
 80055e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ea:	461a      	mov	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d305      	bcc.n	8005610 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d902      	bls.n	8005616 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	76bb      	strb	r3, [r7, #26]
 8005614:	e0fe      	b.n	8005814 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4618      	mov	r0, r3
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	4a37      	ldr	r2, [pc, #220]	; (8005700 <UART_SetConfig+0x2c8>)
 8005624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005628:	b29a      	uxth	r2, r3
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	f7fa fdf7 	bl	8000220 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	020b      	lsls	r3, r1, #8
 8005644:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005648:	0202      	lsls	r2, r0, #8
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	6849      	ldr	r1, [r1, #4]
 800564e:	0849      	lsrs	r1, r1, #1
 8005650:	4608      	mov	r0, r1
 8005652:	f04f 0100 	mov.w	r1, #0
 8005656:	1814      	adds	r4, r2, r0
 8005658:	eb43 0501 	adc.w	r5, r3, r1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	461a      	mov	r2, r3
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	f7fa fdd9 	bl	8000220 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4613      	mov	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567c:	d308      	bcc.n	8005690 <UART_SetConfig+0x258>
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005684:	d204      	bcs.n	8005690 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	60da      	str	r2, [r3, #12]
 800568e:	e0c1      	b.n	8005814 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	76bb      	strb	r3, [r7, #26]
 8005694:	e0be      	b.n	8005814 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569e:	d16a      	bne.n	8005776 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80056a0:	7efb      	ldrb	r3, [r7, #27]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	2b07      	cmp	r3, #7
 80056a6:	d82d      	bhi.n	8005704 <UART_SetConfig+0x2cc>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x278>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d1 	.word	0x080056d1
 80056b4:	080056d9 	.word	0x080056d9
 80056b8:	08005705 	.word	0x08005705
 80056bc:	080056df 	.word	0x080056df
 80056c0:	08005705 	.word	0x08005705
 80056c4:	08005705 	.word	0x08005705
 80056c8:	08005705 	.word	0x08005705
 80056cc:	080056e7 	.word	0x080056e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d0:	f7fd fcee 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 80056d4:	6178      	str	r0, [r7, #20]
        break;
 80056d6:	e01a      	b.n	800570e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d8:	4b08      	ldr	r3, [pc, #32]	; (80056fc <UART_SetConfig+0x2c4>)
 80056da:	617b      	str	r3, [r7, #20]
        break;
 80056dc:	e017      	b.n	800570e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056de:	f7fd fc4f 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 80056e2:	6178      	str	r0, [r7, #20]
        break;
 80056e4:	e013      	b.n	800570e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ea:	617b      	str	r3, [r7, #20]
        break;
 80056ec:	e00f      	b.n	800570e <UART_SetConfig+0x2d6>
 80056ee:	bf00      	nop
 80056f0:	cfff69f3 	.word	0xcfff69f3
 80056f4:	40008000 	.word	0x40008000
 80056f8:	40013800 	.word	0x40013800
 80056fc:	00f42400 	.word	0x00f42400
 8005700:	08006f44 	.word	0x08006f44
      default:
        pclk = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	76bb      	strb	r3, [r7, #26]
        break;
 800570c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d07f      	beq.n	8005814 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	4a48      	ldr	r2, [pc, #288]	; (800583c <UART_SetConfig+0x404>)
 800571a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800571e:	461a      	mov	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	fbb3 f3f2 	udiv	r3, r3, r2
 8005726:	005a      	lsls	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	441a      	add	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	b29b      	uxth	r3, r3
 800573a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b0f      	cmp	r3, #15
 8005740:	d916      	bls.n	8005770 <UART_SetConfig+0x338>
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005748:	d212      	bcs.n	8005770 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f023 030f 	bic.w	r3, r3, #15
 8005752:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	b29a      	uxth	r2, r3
 8005760:	89fb      	ldrh	r3, [r7, #14]
 8005762:	4313      	orrs	r3, r2
 8005764:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	89fa      	ldrh	r2, [r7, #14]
 800576c:	60da      	str	r2, [r3, #12]
 800576e:	e051      	b.n	8005814 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	76bb      	strb	r3, [r7, #26]
 8005774:	e04e      	b.n	8005814 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005776:	7efb      	ldrb	r3, [r7, #27]
 8005778:	3b01      	subs	r3, #1
 800577a:	2b07      	cmp	r3, #7
 800577c:	d821      	bhi.n	80057c2 <UART_SetConfig+0x38a>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <UART_SetConfig+0x34c>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057a5 	.word	0x080057a5
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057c3 	.word	0x080057c3
 8005790:	080057b3 	.word	0x080057b3
 8005794:	080057c3 	.word	0x080057c3
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057c3 	.word	0x080057c3
 80057a0:	080057bb 	.word	0x080057bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a4:	f7fd fc84 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 80057a8:	6178      	str	r0, [r7, #20]
        break;
 80057aa:	e00f      	b.n	80057cc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ac:	4b24      	ldr	r3, [pc, #144]	; (8005840 <UART_SetConfig+0x408>)
 80057ae:	617b      	str	r3, [r7, #20]
        break;
 80057b0:	e00c      	b.n	80057cc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b2:	f7fd fbe5 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 80057b6:	6178      	str	r0, [r7, #20]
        break;
 80057b8:	e008      	b.n	80057cc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057be:	617b      	str	r3, [r7, #20]
        break;
 80057c0:	e004      	b.n	80057cc <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	76bb      	strb	r3, [r7, #26]
        break;
 80057ca:	bf00      	nop
    }

    if (pclk != 0U)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d020      	beq.n	8005814 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <UART_SetConfig+0x404>)
 80057d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057dc:	461a      	mov	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	085b      	lsrs	r3, r3, #1
 80057ea:	441a      	add	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d908      	bls.n	8005810 <UART_SetConfig+0x3d8>
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d204      	bcs.n	8005810 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	60da      	str	r2, [r3, #12]
 800580e:	e001      	b.n	8005814 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005830:	7ebb      	ldrb	r3, [r7, #26]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bdb0      	pop	{r4, r5, r7, pc}
 800583a:	bf00      	nop
 800583c:	08006f44 	.word	0x08006f44
 8005840:	00f42400 	.word	0x00f42400

08005844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01a      	beq.n	800595a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005942:	d10a      	bne.n	800595a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
  }
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af02      	add	r7, sp, #8
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005998:	f7fb ff00 	bl	800179c <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d10e      	bne.n	80059ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f82f 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e025      	b.n	8005a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d10e      	bne.n	80059f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f819 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e00f      	b.n	8005a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2e:	e062      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a36:	d05e      	beq.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fb feb0 	bl	800179c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11d      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e045      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d02e      	beq.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa6:	d126      	bne.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ac0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e00f      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d08d      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b34:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d107      	bne.n	8005b62 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0210 	bic.w	r2, r2, #16
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fc33 	bl	800540c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fc0f 	bl	80053f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e027      	b.n	8005c84 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e02d      	b.n	8005d04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2224      	movs	r2, #36	; 0x24
 8005cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f84f 	bl	8005d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e02d      	b.n	8005d80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2224      	movs	r2, #36	; 0x24
 8005d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0201 	bic.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f811 	bl	8005d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d108      	bne.n	8005daa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005da8:	e031      	b.n	8005e0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005daa:	2308      	movs	r3, #8
 8005dac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dae:	2308      	movs	r3, #8
 8005db0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	0e5b      	lsrs	r3, r3, #25
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	0f5b      	lsrs	r3, r3, #29
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	7b3a      	ldrb	r2, [r7, #12]
 8005dd6:	4911      	ldr	r1, [pc, #68]	; (8005e1c <UARTEx_SetNbDataToProcess+0x94>)
 8005dd8:	5c8a      	ldrb	r2, [r1, r2]
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dde:	7b3a      	ldrb	r2, [r7, #12]
 8005de0:	490f      	ldr	r1, [pc, #60]	; (8005e20 <UARTEx_SetNbDataToProcess+0x98>)
 8005de2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005de4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	7b7a      	ldrb	r2, [r7, #13]
 8005df4:	4909      	ldr	r1, [pc, #36]	; (8005e1c <UARTEx_SetNbDataToProcess+0x94>)
 8005df6:	5c8a      	ldrb	r2, [r1, r2]
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dfc:	7b7a      	ldrb	r2, [r7, #13]
 8005dfe:	4908      	ldr	r1, [pc, #32]	; (8005e20 <UARTEx_SetNbDataToProcess+0x98>)
 8005e00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e02:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	08006f5c 	.word	0x08006f5c
 8005e20:	08006f64 	.word	0x08006f64

08005e24 <__errno>:
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <__errno+0x8>)
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000018 	.word	0x20000018

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4d0d      	ldr	r5, [pc, #52]	; (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4d0b      	ldr	r5, [pc, #44]	; (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	; (8005e74 <__libc_init_array+0x44>)
 8005e44:	f000 ffec 	bl	8006e20 <_init>
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	0800700c 	.word	0x0800700c
 8005e6c:	0800700c 	.word	0x0800700c
 8005e70:	0800700c 	.word	0x0800700c
 8005e74:	08007010 	.word	0x08007010

08005e78 <memset>:
 8005e78:	4402      	add	r2, r0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <iprintf>:
 8005e88:	b40f      	push	{r0, r1, r2, r3}
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <iprintf+0x2c>)
 8005e8c:	b513      	push	{r0, r1, r4, lr}
 8005e8e:	681c      	ldr	r4, [r3, #0]
 8005e90:	b124      	cbz	r4, 8005e9c <iprintf+0x14>
 8005e92:	69a3      	ldr	r3, [r4, #24]
 8005e94:	b913      	cbnz	r3, 8005e9c <iprintf+0x14>
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 fa5e 	bl	8006358 <__sinit>
 8005e9c:	ab05      	add	r3, sp, #20
 8005e9e:	9a04      	ldr	r2, [sp, #16]
 8005ea0:	68a1      	ldr	r1, [r4, #8]
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 fc2f 	bl	8006708 <_vfiprintf_r>
 8005eaa:	b002      	add	sp, #8
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb0:	b004      	add	sp, #16
 8005eb2:	4770      	bx	lr
 8005eb4:	20000018 	.word	0x20000018

08005eb8 <_puts_r>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	460e      	mov	r6, r1
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	b118      	cbz	r0, 8005ec8 <_puts_r+0x10>
 8005ec0:	6983      	ldr	r3, [r0, #24]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <_puts_r+0x10>
 8005ec4:	f000 fa48 	bl	8006358 <__sinit>
 8005ec8:	69ab      	ldr	r3, [r5, #24]
 8005eca:	68ac      	ldr	r4, [r5, #8]
 8005ecc:	b913      	cbnz	r3, 8005ed4 <_puts_r+0x1c>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 fa42 	bl	8006358 <__sinit>
 8005ed4:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <_puts_r+0xd0>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d120      	bne.n	8005f1c <_puts_r+0x64>
 8005eda:	686c      	ldr	r4, [r5, #4]
 8005edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ede:	07db      	lsls	r3, r3, #31
 8005ee0:	d405      	bmi.n	8005eee <_puts_r+0x36>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	0598      	lsls	r0, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_puts_r+0x36>
 8005ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eea:	f000 fad3 	bl	8006494 <__retarget_lock_acquire_recursive>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	0719      	lsls	r1, r3, #28
 8005ef2:	d51d      	bpl.n	8005f30 <_puts_r+0x78>
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	b1db      	cbz	r3, 8005f30 <_puts_r+0x78>
 8005ef8:	3e01      	subs	r6, #1
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f00:	3b01      	subs	r3, #1
 8005f02:	60a3      	str	r3, [r4, #8]
 8005f04:	bb39      	cbnz	r1, 8005f56 <_puts_r+0x9e>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da38      	bge.n	8005f7c <_puts_r+0xc4>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	210a      	movs	r1, #10
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f848 	bl	8005fa4 <__swbuf_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d011      	beq.n	8005f3c <_puts_r+0x84>
 8005f18:	250a      	movs	r5, #10
 8005f1a:	e011      	b.n	8005f40 <_puts_r+0x88>
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <_puts_r+0xd4>)
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	d101      	bne.n	8005f26 <_puts_r+0x6e>
 8005f22:	68ac      	ldr	r4, [r5, #8]
 8005f24:	e7da      	b.n	8005edc <_puts_r+0x24>
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <_puts_r+0xd8>)
 8005f28:	429c      	cmp	r4, r3
 8005f2a:	bf08      	it	eq
 8005f2c:	68ec      	ldreq	r4, [r5, #12]
 8005f2e:	e7d5      	b.n	8005edc <_puts_r+0x24>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f888 	bl	8006048 <__swsetup_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d0dd      	beq.n	8005ef8 <_puts_r+0x40>
 8005f3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f42:	07da      	lsls	r2, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_puts_r+0x9a>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	059b      	lsls	r3, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_puts_r+0x9a>
 8005f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f4e:	f000 faa2 	bl	8006496 <__retarget_lock_release_recursive>
 8005f52:	4628      	mov	r0, r5
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da04      	bge.n	8005f64 <_puts_r+0xac>
 8005f5a:	69a2      	ldr	r2, [r4, #24]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	dc06      	bgt.n	8005f6e <_puts_r+0xb6>
 8005f60:	290a      	cmp	r1, #10
 8005f62:	d004      	beq.n	8005f6e <_puts_r+0xb6>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	6022      	str	r2, [r4, #0]
 8005f6a:	7019      	strb	r1, [r3, #0]
 8005f6c:	e7c5      	b.n	8005efa <_puts_r+0x42>
 8005f6e:	4622      	mov	r2, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 f817 	bl	8005fa4 <__swbuf_r>
 8005f76:	3001      	adds	r0, #1
 8005f78:	d1bf      	bne.n	8005efa <_puts_r+0x42>
 8005f7a:	e7df      	b.n	8005f3c <_puts_r+0x84>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	250a      	movs	r5, #10
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	6022      	str	r2, [r4, #0]
 8005f84:	701d      	strb	r5, [r3, #0]
 8005f86:	e7db      	b.n	8005f40 <_puts_r+0x88>
 8005f88:	08006f90 	.word	0x08006f90
 8005f8c:	08006fb0 	.word	0x08006fb0
 8005f90:	08006f70 	.word	0x08006f70

08005f94 <puts>:
 8005f94:	4b02      	ldr	r3, [pc, #8]	; (8005fa0 <puts+0xc>)
 8005f96:	4601      	mov	r1, r0
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	f7ff bf8d 	b.w	8005eb8 <_puts_r>
 8005f9e:	bf00      	nop
 8005fa0:	20000018 	.word	0x20000018

08005fa4 <__swbuf_r>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	460e      	mov	r6, r1
 8005fa8:	4614      	mov	r4, r2
 8005faa:	4605      	mov	r5, r0
 8005fac:	b118      	cbz	r0, 8005fb6 <__swbuf_r+0x12>
 8005fae:	6983      	ldr	r3, [r0, #24]
 8005fb0:	b90b      	cbnz	r3, 8005fb6 <__swbuf_r+0x12>
 8005fb2:	f000 f9d1 	bl	8006358 <__sinit>
 8005fb6:	4b21      	ldr	r3, [pc, #132]	; (800603c <__swbuf_r+0x98>)
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	d12b      	bne.n	8006014 <__swbuf_r+0x70>
 8005fbc:	686c      	ldr	r4, [r5, #4]
 8005fbe:	69a3      	ldr	r3, [r4, #24]
 8005fc0:	60a3      	str	r3, [r4, #8]
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	071a      	lsls	r2, r3, #28
 8005fc6:	d52f      	bpl.n	8006028 <__swbuf_r+0x84>
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	b36b      	cbz	r3, 8006028 <__swbuf_r+0x84>
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	6820      	ldr	r0, [r4, #0]
 8005fd0:	1ac0      	subs	r0, r0, r3
 8005fd2:	6963      	ldr	r3, [r4, #20]
 8005fd4:	b2f6      	uxtb	r6, r6
 8005fd6:	4283      	cmp	r3, r0
 8005fd8:	4637      	mov	r7, r6
 8005fda:	dc04      	bgt.n	8005fe6 <__swbuf_r+0x42>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f926 	bl	8006230 <_fflush_r>
 8005fe4:	bb30      	cbnz	r0, 8006034 <__swbuf_r+0x90>
 8005fe6:	68a3      	ldr	r3, [r4, #8]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	60a3      	str	r3, [r4, #8]
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	701e      	strb	r6, [r3, #0]
 8005ff4:	6963      	ldr	r3, [r4, #20]
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	4283      	cmp	r3, r0
 8005ffa:	d004      	beq.n	8006006 <__swbuf_r+0x62>
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	07db      	lsls	r3, r3, #31
 8006000:	d506      	bpl.n	8006010 <__swbuf_r+0x6c>
 8006002:	2e0a      	cmp	r6, #10
 8006004:	d104      	bne.n	8006010 <__swbuf_r+0x6c>
 8006006:	4621      	mov	r1, r4
 8006008:	4628      	mov	r0, r5
 800600a:	f000 f911 	bl	8006230 <_fflush_r>
 800600e:	b988      	cbnz	r0, 8006034 <__swbuf_r+0x90>
 8006010:	4638      	mov	r0, r7
 8006012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <__swbuf_r+0x9c>)
 8006016:	429c      	cmp	r4, r3
 8006018:	d101      	bne.n	800601e <__swbuf_r+0x7a>
 800601a:	68ac      	ldr	r4, [r5, #8]
 800601c:	e7cf      	b.n	8005fbe <__swbuf_r+0x1a>
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <__swbuf_r+0xa0>)
 8006020:	429c      	cmp	r4, r3
 8006022:	bf08      	it	eq
 8006024:	68ec      	ldreq	r4, [r5, #12]
 8006026:	e7ca      	b.n	8005fbe <__swbuf_r+0x1a>
 8006028:	4621      	mov	r1, r4
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f80c 	bl	8006048 <__swsetup_r>
 8006030:	2800      	cmp	r0, #0
 8006032:	d0cb      	beq.n	8005fcc <__swbuf_r+0x28>
 8006034:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006038:	e7ea      	b.n	8006010 <__swbuf_r+0x6c>
 800603a:	bf00      	nop
 800603c:	08006f90 	.word	0x08006f90
 8006040:	08006fb0 	.word	0x08006fb0
 8006044:	08006f70 	.word	0x08006f70

08006048 <__swsetup_r>:
 8006048:	4b32      	ldr	r3, [pc, #200]	; (8006114 <__swsetup_r+0xcc>)
 800604a:	b570      	push	{r4, r5, r6, lr}
 800604c:	681d      	ldr	r5, [r3, #0]
 800604e:	4606      	mov	r6, r0
 8006050:	460c      	mov	r4, r1
 8006052:	b125      	cbz	r5, 800605e <__swsetup_r+0x16>
 8006054:	69ab      	ldr	r3, [r5, #24]
 8006056:	b913      	cbnz	r3, 800605e <__swsetup_r+0x16>
 8006058:	4628      	mov	r0, r5
 800605a:	f000 f97d 	bl	8006358 <__sinit>
 800605e:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <__swsetup_r+0xd0>)
 8006060:	429c      	cmp	r4, r3
 8006062:	d10f      	bne.n	8006084 <__swsetup_r+0x3c>
 8006064:	686c      	ldr	r4, [r5, #4]
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800606c:	0719      	lsls	r1, r3, #28
 800606e:	d42c      	bmi.n	80060ca <__swsetup_r+0x82>
 8006070:	06dd      	lsls	r5, r3, #27
 8006072:	d411      	bmi.n	8006098 <__swsetup_r+0x50>
 8006074:	2309      	movs	r3, #9
 8006076:	6033      	str	r3, [r6, #0]
 8006078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006082:	e03e      	b.n	8006102 <__swsetup_r+0xba>
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <__swsetup_r+0xd4>)
 8006086:	429c      	cmp	r4, r3
 8006088:	d101      	bne.n	800608e <__swsetup_r+0x46>
 800608a:	68ac      	ldr	r4, [r5, #8]
 800608c:	e7eb      	b.n	8006066 <__swsetup_r+0x1e>
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <__swsetup_r+0xd8>)
 8006090:	429c      	cmp	r4, r3
 8006092:	bf08      	it	eq
 8006094:	68ec      	ldreq	r4, [r5, #12]
 8006096:	e7e6      	b.n	8006066 <__swsetup_r+0x1e>
 8006098:	0758      	lsls	r0, r3, #29
 800609a:	d512      	bpl.n	80060c2 <__swsetup_r+0x7a>
 800609c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800609e:	b141      	cbz	r1, 80060b2 <__swsetup_r+0x6a>
 80060a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060a4:	4299      	cmp	r1, r3
 80060a6:	d002      	beq.n	80060ae <__swsetup_r+0x66>
 80060a8:	4630      	mov	r0, r6
 80060aa:	f000 fa59 	bl	8006560 <_free_r>
 80060ae:	2300      	movs	r3, #0
 80060b0:	6363      	str	r3, [r4, #52]	; 0x34
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060b8:	81a3      	strh	r3, [r4, #12]
 80060ba:	2300      	movs	r3, #0
 80060bc:	6063      	str	r3, [r4, #4]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	f043 0308 	orr.w	r3, r3, #8
 80060c8:	81a3      	strh	r3, [r4, #12]
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	b94b      	cbnz	r3, 80060e2 <__swsetup_r+0x9a>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d8:	d003      	beq.n	80060e2 <__swsetup_r+0x9a>
 80060da:	4621      	mov	r1, r4
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 f9ff 	bl	80064e0 <__smakebuf_r>
 80060e2:	89a0      	ldrh	r0, [r4, #12]
 80060e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060e8:	f010 0301 	ands.w	r3, r0, #1
 80060ec:	d00a      	beq.n	8006104 <__swsetup_r+0xbc>
 80060ee:	2300      	movs	r3, #0
 80060f0:	60a3      	str	r3, [r4, #8]
 80060f2:	6963      	ldr	r3, [r4, #20]
 80060f4:	425b      	negs	r3, r3
 80060f6:	61a3      	str	r3, [r4, #24]
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	b943      	cbnz	r3, 800610e <__swsetup_r+0xc6>
 80060fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006100:	d1ba      	bne.n	8006078 <__swsetup_r+0x30>
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	0781      	lsls	r1, r0, #30
 8006106:	bf58      	it	pl
 8006108:	6963      	ldrpl	r3, [r4, #20]
 800610a:	60a3      	str	r3, [r4, #8]
 800610c:	e7f4      	b.n	80060f8 <__swsetup_r+0xb0>
 800610e:	2000      	movs	r0, #0
 8006110:	e7f7      	b.n	8006102 <__swsetup_r+0xba>
 8006112:	bf00      	nop
 8006114:	20000018 	.word	0x20000018
 8006118:	08006f90 	.word	0x08006f90
 800611c:	08006fb0 	.word	0x08006fb0
 8006120:	08006f70 	.word	0x08006f70

08006124 <__sflush_r>:
 8006124:	898a      	ldrh	r2, [r1, #12]
 8006126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612a:	4605      	mov	r5, r0
 800612c:	0710      	lsls	r0, r2, #28
 800612e:	460c      	mov	r4, r1
 8006130:	d458      	bmi.n	80061e4 <__sflush_r+0xc0>
 8006132:	684b      	ldr	r3, [r1, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dc05      	bgt.n	8006144 <__sflush_r+0x20>
 8006138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	dc02      	bgt.n	8006144 <__sflush_r+0x20>
 800613e:	2000      	movs	r0, #0
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006146:	2e00      	cmp	r6, #0
 8006148:	d0f9      	beq.n	800613e <__sflush_r+0x1a>
 800614a:	2300      	movs	r3, #0
 800614c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006150:	682f      	ldr	r7, [r5, #0]
 8006152:	602b      	str	r3, [r5, #0]
 8006154:	d032      	beq.n	80061bc <__sflush_r+0x98>
 8006156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	075a      	lsls	r2, r3, #29
 800615c:	d505      	bpl.n	800616a <__sflush_r+0x46>
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	1ac0      	subs	r0, r0, r3
 8006162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006164:	b10b      	cbz	r3, 800616a <__sflush_r+0x46>
 8006166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006168:	1ac0      	subs	r0, r0, r3
 800616a:	2300      	movs	r3, #0
 800616c:	4602      	mov	r2, r0
 800616e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006170:	6a21      	ldr	r1, [r4, #32]
 8006172:	4628      	mov	r0, r5
 8006174:	47b0      	blx	r6
 8006176:	1c43      	adds	r3, r0, #1
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	d106      	bne.n	800618a <__sflush_r+0x66>
 800617c:	6829      	ldr	r1, [r5, #0]
 800617e:	291d      	cmp	r1, #29
 8006180:	d82c      	bhi.n	80061dc <__sflush_r+0xb8>
 8006182:	4a2a      	ldr	r2, [pc, #168]	; (800622c <__sflush_r+0x108>)
 8006184:	40ca      	lsrs	r2, r1
 8006186:	07d6      	lsls	r6, r2, #31
 8006188:	d528      	bpl.n	80061dc <__sflush_r+0xb8>
 800618a:	2200      	movs	r2, #0
 800618c:	6062      	str	r2, [r4, #4]
 800618e:	04d9      	lsls	r1, r3, #19
 8006190:	6922      	ldr	r2, [r4, #16]
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	d504      	bpl.n	80061a0 <__sflush_r+0x7c>
 8006196:	1c42      	adds	r2, r0, #1
 8006198:	d101      	bne.n	800619e <__sflush_r+0x7a>
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	b903      	cbnz	r3, 80061a0 <__sflush_r+0x7c>
 800619e:	6560      	str	r0, [r4, #84]	; 0x54
 80061a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a2:	602f      	str	r7, [r5, #0]
 80061a4:	2900      	cmp	r1, #0
 80061a6:	d0ca      	beq.n	800613e <__sflush_r+0x1a>
 80061a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ac:	4299      	cmp	r1, r3
 80061ae:	d002      	beq.n	80061b6 <__sflush_r+0x92>
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 f9d5 	bl	8006560 <_free_r>
 80061b6:	2000      	movs	r0, #0
 80061b8:	6360      	str	r0, [r4, #52]	; 0x34
 80061ba:	e7c1      	b.n	8006140 <__sflush_r+0x1c>
 80061bc:	6a21      	ldr	r1, [r4, #32]
 80061be:	2301      	movs	r3, #1
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b0      	blx	r6
 80061c4:	1c41      	adds	r1, r0, #1
 80061c6:	d1c7      	bne.n	8006158 <__sflush_r+0x34>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0c4      	beq.n	8006158 <__sflush_r+0x34>
 80061ce:	2b1d      	cmp	r3, #29
 80061d0:	d001      	beq.n	80061d6 <__sflush_r+0xb2>
 80061d2:	2b16      	cmp	r3, #22
 80061d4:	d101      	bne.n	80061da <__sflush_r+0xb6>
 80061d6:	602f      	str	r7, [r5, #0]
 80061d8:	e7b1      	b.n	800613e <__sflush_r+0x1a>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	e7ad      	b.n	8006140 <__sflush_r+0x1c>
 80061e4:	690f      	ldr	r7, [r1, #16]
 80061e6:	2f00      	cmp	r7, #0
 80061e8:	d0a9      	beq.n	800613e <__sflush_r+0x1a>
 80061ea:	0793      	lsls	r3, r2, #30
 80061ec:	680e      	ldr	r6, [r1, #0]
 80061ee:	bf08      	it	eq
 80061f0:	694b      	ldreq	r3, [r1, #20]
 80061f2:	600f      	str	r7, [r1, #0]
 80061f4:	bf18      	it	ne
 80061f6:	2300      	movne	r3, #0
 80061f8:	eba6 0807 	sub.w	r8, r6, r7
 80061fc:	608b      	str	r3, [r1, #8]
 80061fe:	f1b8 0f00 	cmp.w	r8, #0
 8006202:	dd9c      	ble.n	800613e <__sflush_r+0x1a>
 8006204:	6a21      	ldr	r1, [r4, #32]
 8006206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006208:	4643      	mov	r3, r8
 800620a:	463a      	mov	r2, r7
 800620c:	4628      	mov	r0, r5
 800620e:	47b0      	blx	r6
 8006210:	2800      	cmp	r0, #0
 8006212:	dc06      	bgt.n	8006222 <__sflush_r+0xfe>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621a:	81a3      	strh	r3, [r4, #12]
 800621c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006220:	e78e      	b.n	8006140 <__sflush_r+0x1c>
 8006222:	4407      	add	r7, r0
 8006224:	eba8 0800 	sub.w	r8, r8, r0
 8006228:	e7e9      	b.n	80061fe <__sflush_r+0xda>
 800622a:	bf00      	nop
 800622c:	20400001 	.word	0x20400001

08006230 <_fflush_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	690b      	ldr	r3, [r1, #16]
 8006234:	4605      	mov	r5, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b913      	cbnz	r3, 8006240 <_fflush_r+0x10>
 800623a:	2500      	movs	r5, #0
 800623c:	4628      	mov	r0, r5
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	b118      	cbz	r0, 800624a <_fflush_r+0x1a>
 8006242:	6983      	ldr	r3, [r0, #24]
 8006244:	b90b      	cbnz	r3, 800624a <_fflush_r+0x1a>
 8006246:	f000 f887 	bl	8006358 <__sinit>
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <_fflush_r+0x6c>)
 800624c:	429c      	cmp	r4, r3
 800624e:	d11b      	bne.n	8006288 <_fflush_r+0x58>
 8006250:	686c      	ldr	r4, [r5, #4]
 8006252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ef      	beq.n	800623a <_fflush_r+0xa>
 800625a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800625c:	07d0      	lsls	r0, r2, #31
 800625e:	d404      	bmi.n	800626a <_fflush_r+0x3a>
 8006260:	0599      	lsls	r1, r3, #22
 8006262:	d402      	bmi.n	800626a <_fflush_r+0x3a>
 8006264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006266:	f000 f915 	bl	8006494 <__retarget_lock_acquire_recursive>
 800626a:	4628      	mov	r0, r5
 800626c:	4621      	mov	r1, r4
 800626e:	f7ff ff59 	bl	8006124 <__sflush_r>
 8006272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006274:	07da      	lsls	r2, r3, #31
 8006276:	4605      	mov	r5, r0
 8006278:	d4e0      	bmi.n	800623c <_fflush_r+0xc>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	059b      	lsls	r3, r3, #22
 800627e:	d4dd      	bmi.n	800623c <_fflush_r+0xc>
 8006280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006282:	f000 f908 	bl	8006496 <__retarget_lock_release_recursive>
 8006286:	e7d9      	b.n	800623c <_fflush_r+0xc>
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <_fflush_r+0x70>)
 800628a:	429c      	cmp	r4, r3
 800628c:	d101      	bne.n	8006292 <_fflush_r+0x62>
 800628e:	68ac      	ldr	r4, [r5, #8]
 8006290:	e7df      	b.n	8006252 <_fflush_r+0x22>
 8006292:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <_fflush_r+0x74>)
 8006294:	429c      	cmp	r4, r3
 8006296:	bf08      	it	eq
 8006298:	68ec      	ldreq	r4, [r5, #12]
 800629a:	e7da      	b.n	8006252 <_fflush_r+0x22>
 800629c:	08006f90 	.word	0x08006f90
 80062a0:	08006fb0 	.word	0x08006fb0
 80062a4:	08006f70 	.word	0x08006f70

080062a8 <std>:
 80062a8:	2300      	movs	r3, #0
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	e9c0 3300 	strd	r3, r3, [r0]
 80062b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062b6:	6083      	str	r3, [r0, #8]
 80062b8:	8181      	strh	r1, [r0, #12]
 80062ba:	6643      	str	r3, [r0, #100]	; 0x64
 80062bc:	81c2      	strh	r2, [r0, #14]
 80062be:	6183      	str	r3, [r0, #24]
 80062c0:	4619      	mov	r1, r3
 80062c2:	2208      	movs	r2, #8
 80062c4:	305c      	adds	r0, #92	; 0x5c
 80062c6:	f7ff fdd7 	bl	8005e78 <memset>
 80062ca:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <std+0x38>)
 80062cc:	6263      	str	r3, [r4, #36]	; 0x24
 80062ce:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <std+0x3c>)
 80062d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <std+0x40>)
 80062d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <std+0x44>)
 80062d8:	6224      	str	r4, [r4, #32]
 80062da:	6323      	str	r3, [r4, #48]	; 0x30
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	08006cb1 	.word	0x08006cb1
 80062e4:	08006cd3 	.word	0x08006cd3
 80062e8:	08006d0b 	.word	0x08006d0b
 80062ec:	08006d2f 	.word	0x08006d2f

080062f0 <_cleanup_r>:
 80062f0:	4901      	ldr	r1, [pc, #4]	; (80062f8 <_cleanup_r+0x8>)
 80062f2:	f000 b8af 	b.w	8006454 <_fwalk_reent>
 80062f6:	bf00      	nop
 80062f8:	08006231 	.word	0x08006231

080062fc <__sfmoreglue>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	1e4a      	subs	r2, r1, #1
 8006300:	2568      	movs	r5, #104	; 0x68
 8006302:	4355      	muls	r5, r2
 8006304:	460e      	mov	r6, r1
 8006306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800630a:	f000 f979 	bl	8006600 <_malloc_r>
 800630e:	4604      	mov	r4, r0
 8006310:	b140      	cbz	r0, 8006324 <__sfmoreglue+0x28>
 8006312:	2100      	movs	r1, #0
 8006314:	e9c0 1600 	strd	r1, r6, [r0]
 8006318:	300c      	adds	r0, #12
 800631a:	60a0      	str	r0, [r4, #8]
 800631c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006320:	f7ff fdaa 	bl	8005e78 <memset>
 8006324:	4620      	mov	r0, r4
 8006326:	bd70      	pop	{r4, r5, r6, pc}

08006328 <__sfp_lock_acquire>:
 8006328:	4801      	ldr	r0, [pc, #4]	; (8006330 <__sfp_lock_acquire+0x8>)
 800632a:	f000 b8b3 	b.w	8006494 <__retarget_lock_acquire_recursive>
 800632e:	bf00      	nop
 8006330:	20000220 	.word	0x20000220

08006334 <__sfp_lock_release>:
 8006334:	4801      	ldr	r0, [pc, #4]	; (800633c <__sfp_lock_release+0x8>)
 8006336:	f000 b8ae 	b.w	8006496 <__retarget_lock_release_recursive>
 800633a:	bf00      	nop
 800633c:	20000220 	.word	0x20000220

08006340 <__sinit_lock_acquire>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__sinit_lock_acquire+0x8>)
 8006342:	f000 b8a7 	b.w	8006494 <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	2000021b 	.word	0x2000021b

0800634c <__sinit_lock_release>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__sinit_lock_release+0x8>)
 800634e:	f000 b8a2 	b.w	8006496 <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	2000021b 	.word	0x2000021b

08006358 <__sinit>:
 8006358:	b510      	push	{r4, lr}
 800635a:	4604      	mov	r4, r0
 800635c:	f7ff fff0 	bl	8006340 <__sinit_lock_acquire>
 8006360:	69a3      	ldr	r3, [r4, #24]
 8006362:	b11b      	cbz	r3, 800636c <__sinit+0x14>
 8006364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006368:	f7ff bff0 	b.w	800634c <__sinit_lock_release>
 800636c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006370:	6523      	str	r3, [r4, #80]	; 0x50
 8006372:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <__sinit+0x68>)
 8006374:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <__sinit+0x6c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	62a2      	str	r2, [r4, #40]	; 0x28
 800637a:	42a3      	cmp	r3, r4
 800637c:	bf04      	itt	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	61a3      	streq	r3, [r4, #24]
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f820 	bl	80063c8 <__sfp>
 8006388:	6060      	str	r0, [r4, #4]
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f81c 	bl	80063c8 <__sfp>
 8006390:	60a0      	str	r0, [r4, #8]
 8006392:	4620      	mov	r0, r4
 8006394:	f000 f818 	bl	80063c8 <__sfp>
 8006398:	2200      	movs	r2, #0
 800639a:	60e0      	str	r0, [r4, #12]
 800639c:	2104      	movs	r1, #4
 800639e:	6860      	ldr	r0, [r4, #4]
 80063a0:	f7ff ff82 	bl	80062a8 <std>
 80063a4:	68a0      	ldr	r0, [r4, #8]
 80063a6:	2201      	movs	r2, #1
 80063a8:	2109      	movs	r1, #9
 80063aa:	f7ff ff7d 	bl	80062a8 <std>
 80063ae:	68e0      	ldr	r0, [r4, #12]
 80063b0:	2202      	movs	r2, #2
 80063b2:	2112      	movs	r1, #18
 80063b4:	f7ff ff78 	bl	80062a8 <std>
 80063b8:	2301      	movs	r3, #1
 80063ba:	61a3      	str	r3, [r4, #24]
 80063bc:	e7d2      	b.n	8006364 <__sinit+0xc>
 80063be:	bf00      	nop
 80063c0:	08006f6c 	.word	0x08006f6c
 80063c4:	080062f1 	.word	0x080062f1

080063c8 <__sfp>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	4607      	mov	r7, r0
 80063cc:	f7ff ffac 	bl	8006328 <__sfp_lock_acquire>
 80063d0:	4b1e      	ldr	r3, [pc, #120]	; (800644c <__sfp+0x84>)
 80063d2:	681e      	ldr	r6, [r3, #0]
 80063d4:	69b3      	ldr	r3, [r6, #24]
 80063d6:	b913      	cbnz	r3, 80063de <__sfp+0x16>
 80063d8:	4630      	mov	r0, r6
 80063da:	f7ff ffbd 	bl	8006358 <__sinit>
 80063de:	3648      	adds	r6, #72	; 0x48
 80063e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	d503      	bpl.n	80063f0 <__sfp+0x28>
 80063e8:	6833      	ldr	r3, [r6, #0]
 80063ea:	b30b      	cbz	r3, 8006430 <__sfp+0x68>
 80063ec:	6836      	ldr	r6, [r6, #0]
 80063ee:	e7f7      	b.n	80063e0 <__sfp+0x18>
 80063f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063f4:	b9d5      	cbnz	r5, 800642c <__sfp+0x64>
 80063f6:	4b16      	ldr	r3, [pc, #88]	; (8006450 <__sfp+0x88>)
 80063f8:	60e3      	str	r3, [r4, #12]
 80063fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063fe:	6665      	str	r5, [r4, #100]	; 0x64
 8006400:	f000 f847 	bl	8006492 <__retarget_lock_init_recursive>
 8006404:	f7ff ff96 	bl	8006334 <__sfp_lock_release>
 8006408:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800640c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006410:	6025      	str	r5, [r4, #0]
 8006412:	61a5      	str	r5, [r4, #24]
 8006414:	2208      	movs	r2, #8
 8006416:	4629      	mov	r1, r5
 8006418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800641c:	f7ff fd2c 	bl	8005e78 <memset>
 8006420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006428:	4620      	mov	r0, r4
 800642a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800642c:	3468      	adds	r4, #104	; 0x68
 800642e:	e7d9      	b.n	80063e4 <__sfp+0x1c>
 8006430:	2104      	movs	r1, #4
 8006432:	4638      	mov	r0, r7
 8006434:	f7ff ff62 	bl	80062fc <__sfmoreglue>
 8006438:	4604      	mov	r4, r0
 800643a:	6030      	str	r0, [r6, #0]
 800643c:	2800      	cmp	r0, #0
 800643e:	d1d5      	bne.n	80063ec <__sfp+0x24>
 8006440:	f7ff ff78 	bl	8006334 <__sfp_lock_release>
 8006444:	230c      	movs	r3, #12
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	e7ee      	b.n	8006428 <__sfp+0x60>
 800644a:	bf00      	nop
 800644c:	08006f6c 	.word	0x08006f6c
 8006450:	ffff0001 	.word	0xffff0001

08006454 <_fwalk_reent>:
 8006454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006458:	4606      	mov	r6, r0
 800645a:	4688      	mov	r8, r1
 800645c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006460:	2700      	movs	r7, #0
 8006462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006466:	f1b9 0901 	subs.w	r9, r9, #1
 800646a:	d505      	bpl.n	8006478 <_fwalk_reent+0x24>
 800646c:	6824      	ldr	r4, [r4, #0]
 800646e:	2c00      	cmp	r4, #0
 8006470:	d1f7      	bne.n	8006462 <_fwalk_reent+0xe>
 8006472:	4638      	mov	r0, r7
 8006474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006478:	89ab      	ldrh	r3, [r5, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d907      	bls.n	800648e <_fwalk_reent+0x3a>
 800647e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006482:	3301      	adds	r3, #1
 8006484:	d003      	beq.n	800648e <_fwalk_reent+0x3a>
 8006486:	4629      	mov	r1, r5
 8006488:	4630      	mov	r0, r6
 800648a:	47c0      	blx	r8
 800648c:	4307      	orrs	r7, r0
 800648e:	3568      	adds	r5, #104	; 0x68
 8006490:	e7e9      	b.n	8006466 <_fwalk_reent+0x12>

08006492 <__retarget_lock_init_recursive>:
 8006492:	4770      	bx	lr

08006494 <__retarget_lock_acquire_recursive>:
 8006494:	4770      	bx	lr

08006496 <__retarget_lock_release_recursive>:
 8006496:	4770      	bx	lr

08006498 <__swhatbuf_r>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	460e      	mov	r6, r1
 800649c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a0:	2900      	cmp	r1, #0
 80064a2:	b096      	sub	sp, #88	; 0x58
 80064a4:	4614      	mov	r4, r2
 80064a6:	461d      	mov	r5, r3
 80064a8:	da07      	bge.n	80064ba <__swhatbuf_r+0x22>
 80064aa:	2300      	movs	r3, #0
 80064ac:	602b      	str	r3, [r5, #0]
 80064ae:	89b3      	ldrh	r3, [r6, #12]
 80064b0:	061a      	lsls	r2, r3, #24
 80064b2:	d410      	bmi.n	80064d6 <__swhatbuf_r+0x3e>
 80064b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b8:	e00e      	b.n	80064d8 <__swhatbuf_r+0x40>
 80064ba:	466a      	mov	r2, sp
 80064bc:	f000 fc5e 	bl	8006d7c <_fstat_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	dbf2      	blt.n	80064aa <__swhatbuf_r+0x12>
 80064c4:	9a01      	ldr	r2, [sp, #4]
 80064c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064ce:	425a      	negs	r2, r3
 80064d0:	415a      	adcs	r2, r3
 80064d2:	602a      	str	r2, [r5, #0]
 80064d4:	e7ee      	b.n	80064b4 <__swhatbuf_r+0x1c>
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	2000      	movs	r0, #0
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	b016      	add	sp, #88	; 0x58
 80064de:	bd70      	pop	{r4, r5, r6, pc}

080064e0 <__smakebuf_r>:
 80064e0:	898b      	ldrh	r3, [r1, #12]
 80064e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064e4:	079d      	lsls	r5, r3, #30
 80064e6:	4606      	mov	r6, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	d507      	bpl.n	80064fc <__smakebuf_r+0x1c>
 80064ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	6123      	str	r3, [r4, #16]
 80064f4:	2301      	movs	r3, #1
 80064f6:	6163      	str	r3, [r4, #20]
 80064f8:	b002      	add	sp, #8
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	ab01      	add	r3, sp, #4
 80064fe:	466a      	mov	r2, sp
 8006500:	f7ff ffca 	bl	8006498 <__swhatbuf_r>
 8006504:	9900      	ldr	r1, [sp, #0]
 8006506:	4605      	mov	r5, r0
 8006508:	4630      	mov	r0, r6
 800650a:	f000 f879 	bl	8006600 <_malloc_r>
 800650e:	b948      	cbnz	r0, 8006524 <__smakebuf_r+0x44>
 8006510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006514:	059a      	lsls	r2, r3, #22
 8006516:	d4ef      	bmi.n	80064f8 <__smakebuf_r+0x18>
 8006518:	f023 0303 	bic.w	r3, r3, #3
 800651c:	f043 0302 	orr.w	r3, r3, #2
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	e7e3      	b.n	80064ec <__smakebuf_r+0xc>
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <__smakebuf_r+0x7c>)
 8006526:	62b3      	str	r3, [r6, #40]	; 0x28
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	6020      	str	r0, [r4, #0]
 800652c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	9b00      	ldr	r3, [sp, #0]
 8006534:	6163      	str	r3, [r4, #20]
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	6120      	str	r0, [r4, #16]
 800653a:	b15b      	cbz	r3, 8006554 <__smakebuf_r+0x74>
 800653c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006540:	4630      	mov	r0, r6
 8006542:	f000 fc2d 	bl	8006da0 <_isatty_r>
 8006546:	b128      	cbz	r0, 8006554 <__smakebuf_r+0x74>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	89a0      	ldrh	r0, [r4, #12]
 8006556:	4305      	orrs	r5, r0
 8006558:	81a5      	strh	r5, [r4, #12]
 800655a:	e7cd      	b.n	80064f8 <__smakebuf_r+0x18>
 800655c:	080062f1 	.word	0x080062f1

08006560 <_free_r>:
 8006560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006562:	2900      	cmp	r1, #0
 8006564:	d048      	beq.n	80065f8 <_free_r+0x98>
 8006566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800656a:	9001      	str	r0, [sp, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f1a1 0404 	sub.w	r4, r1, #4
 8006572:	bfb8      	it	lt
 8006574:	18e4      	addlt	r4, r4, r3
 8006576:	f000 fc35 	bl	8006de4 <__malloc_lock>
 800657a:	4a20      	ldr	r2, [pc, #128]	; (80065fc <_free_r+0x9c>)
 800657c:	9801      	ldr	r0, [sp, #4]
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	4615      	mov	r5, r2
 8006582:	b933      	cbnz	r3, 8006592 <_free_r+0x32>
 8006584:	6063      	str	r3, [r4, #4]
 8006586:	6014      	str	r4, [r2, #0]
 8006588:	b003      	add	sp, #12
 800658a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800658e:	f000 bc2f 	b.w	8006df0 <__malloc_unlock>
 8006592:	42a3      	cmp	r3, r4
 8006594:	d90b      	bls.n	80065ae <_free_r+0x4e>
 8006596:	6821      	ldr	r1, [r4, #0]
 8006598:	1862      	adds	r2, r4, r1
 800659a:	4293      	cmp	r3, r2
 800659c:	bf04      	itt	eq
 800659e:	681a      	ldreq	r2, [r3, #0]
 80065a0:	685b      	ldreq	r3, [r3, #4]
 80065a2:	6063      	str	r3, [r4, #4]
 80065a4:	bf04      	itt	eq
 80065a6:	1852      	addeq	r2, r2, r1
 80065a8:	6022      	streq	r2, [r4, #0]
 80065aa:	602c      	str	r4, [r5, #0]
 80065ac:	e7ec      	b.n	8006588 <_free_r+0x28>
 80065ae:	461a      	mov	r2, r3
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	b10b      	cbz	r3, 80065b8 <_free_r+0x58>
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	d9fa      	bls.n	80065ae <_free_r+0x4e>
 80065b8:	6811      	ldr	r1, [r2, #0]
 80065ba:	1855      	adds	r5, r2, r1
 80065bc:	42a5      	cmp	r5, r4
 80065be:	d10b      	bne.n	80065d8 <_free_r+0x78>
 80065c0:	6824      	ldr	r4, [r4, #0]
 80065c2:	4421      	add	r1, r4
 80065c4:	1854      	adds	r4, r2, r1
 80065c6:	42a3      	cmp	r3, r4
 80065c8:	6011      	str	r1, [r2, #0]
 80065ca:	d1dd      	bne.n	8006588 <_free_r+0x28>
 80065cc:	681c      	ldr	r4, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	6053      	str	r3, [r2, #4]
 80065d2:	4421      	add	r1, r4
 80065d4:	6011      	str	r1, [r2, #0]
 80065d6:	e7d7      	b.n	8006588 <_free_r+0x28>
 80065d8:	d902      	bls.n	80065e0 <_free_r+0x80>
 80065da:	230c      	movs	r3, #12
 80065dc:	6003      	str	r3, [r0, #0]
 80065de:	e7d3      	b.n	8006588 <_free_r+0x28>
 80065e0:	6825      	ldr	r5, [r4, #0]
 80065e2:	1961      	adds	r1, r4, r5
 80065e4:	428b      	cmp	r3, r1
 80065e6:	bf04      	itt	eq
 80065e8:	6819      	ldreq	r1, [r3, #0]
 80065ea:	685b      	ldreq	r3, [r3, #4]
 80065ec:	6063      	str	r3, [r4, #4]
 80065ee:	bf04      	itt	eq
 80065f0:	1949      	addeq	r1, r1, r5
 80065f2:	6021      	streq	r1, [r4, #0]
 80065f4:	6054      	str	r4, [r2, #4]
 80065f6:	e7c7      	b.n	8006588 <_free_r+0x28>
 80065f8:	b003      	add	sp, #12
 80065fa:	bd30      	pop	{r4, r5, pc}
 80065fc:	200000a4 	.word	0x200000a4

08006600 <_malloc_r>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	1ccd      	adds	r5, r1, #3
 8006604:	f025 0503 	bic.w	r5, r5, #3
 8006608:	3508      	adds	r5, #8
 800660a:	2d0c      	cmp	r5, #12
 800660c:	bf38      	it	cc
 800660e:	250c      	movcc	r5, #12
 8006610:	2d00      	cmp	r5, #0
 8006612:	4606      	mov	r6, r0
 8006614:	db01      	blt.n	800661a <_malloc_r+0x1a>
 8006616:	42a9      	cmp	r1, r5
 8006618:	d903      	bls.n	8006622 <_malloc_r+0x22>
 800661a:	230c      	movs	r3, #12
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	2000      	movs	r0, #0
 8006620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006622:	f000 fbdf 	bl	8006de4 <__malloc_lock>
 8006626:	4921      	ldr	r1, [pc, #132]	; (80066ac <_malloc_r+0xac>)
 8006628:	680a      	ldr	r2, [r1, #0]
 800662a:	4614      	mov	r4, r2
 800662c:	b99c      	cbnz	r4, 8006656 <_malloc_r+0x56>
 800662e:	4f20      	ldr	r7, [pc, #128]	; (80066b0 <_malloc_r+0xb0>)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	b923      	cbnz	r3, 800663e <_malloc_r+0x3e>
 8006634:	4621      	mov	r1, r4
 8006636:	4630      	mov	r0, r6
 8006638:	f000 fb2a 	bl	8006c90 <_sbrk_r>
 800663c:	6038      	str	r0, [r7, #0]
 800663e:	4629      	mov	r1, r5
 8006640:	4630      	mov	r0, r6
 8006642:	f000 fb25 	bl	8006c90 <_sbrk_r>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	d123      	bne.n	8006692 <_malloc_r+0x92>
 800664a:	230c      	movs	r3, #12
 800664c:	6033      	str	r3, [r6, #0]
 800664e:	4630      	mov	r0, r6
 8006650:	f000 fbce 	bl	8006df0 <__malloc_unlock>
 8006654:	e7e3      	b.n	800661e <_malloc_r+0x1e>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	1b5b      	subs	r3, r3, r5
 800665a:	d417      	bmi.n	800668c <_malloc_r+0x8c>
 800665c:	2b0b      	cmp	r3, #11
 800665e:	d903      	bls.n	8006668 <_malloc_r+0x68>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	441c      	add	r4, r3
 8006664:	6025      	str	r5, [r4, #0]
 8006666:	e004      	b.n	8006672 <_malloc_r+0x72>
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	42a2      	cmp	r2, r4
 800666c:	bf0c      	ite	eq
 800666e:	600b      	streq	r3, [r1, #0]
 8006670:	6053      	strne	r3, [r2, #4]
 8006672:	4630      	mov	r0, r6
 8006674:	f000 fbbc 	bl	8006df0 <__malloc_unlock>
 8006678:	f104 000b 	add.w	r0, r4, #11
 800667c:	1d23      	adds	r3, r4, #4
 800667e:	f020 0007 	bic.w	r0, r0, #7
 8006682:	1ac2      	subs	r2, r0, r3
 8006684:	d0cc      	beq.n	8006620 <_malloc_r+0x20>
 8006686:	1a1b      	subs	r3, r3, r0
 8006688:	50a3      	str	r3, [r4, r2]
 800668a:	e7c9      	b.n	8006620 <_malloc_r+0x20>
 800668c:	4622      	mov	r2, r4
 800668e:	6864      	ldr	r4, [r4, #4]
 8006690:	e7cc      	b.n	800662c <_malloc_r+0x2c>
 8006692:	1cc4      	adds	r4, r0, #3
 8006694:	f024 0403 	bic.w	r4, r4, #3
 8006698:	42a0      	cmp	r0, r4
 800669a:	d0e3      	beq.n	8006664 <_malloc_r+0x64>
 800669c:	1a21      	subs	r1, r4, r0
 800669e:	4630      	mov	r0, r6
 80066a0:	f000 faf6 	bl	8006c90 <_sbrk_r>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d1dd      	bne.n	8006664 <_malloc_r+0x64>
 80066a8:	e7cf      	b.n	800664a <_malloc_r+0x4a>
 80066aa:	bf00      	nop
 80066ac:	200000a4 	.word	0x200000a4
 80066b0:	200000a8 	.word	0x200000a8

080066b4 <__sfputc_r>:
 80066b4:	6893      	ldr	r3, [r2, #8]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	b410      	push	{r4}
 80066bc:	6093      	str	r3, [r2, #8]
 80066be:	da08      	bge.n	80066d2 <__sfputc_r+0x1e>
 80066c0:	6994      	ldr	r4, [r2, #24]
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	db01      	blt.n	80066ca <__sfputc_r+0x16>
 80066c6:	290a      	cmp	r1, #10
 80066c8:	d103      	bne.n	80066d2 <__sfputc_r+0x1e>
 80066ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ce:	f7ff bc69 	b.w	8005fa4 <__swbuf_r>
 80066d2:	6813      	ldr	r3, [r2, #0]
 80066d4:	1c58      	adds	r0, r3, #1
 80066d6:	6010      	str	r0, [r2, #0]
 80066d8:	7019      	strb	r1, [r3, #0]
 80066da:	4608      	mov	r0, r1
 80066dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <__sfputs_r>:
 80066e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e4:	4606      	mov	r6, r0
 80066e6:	460f      	mov	r7, r1
 80066e8:	4614      	mov	r4, r2
 80066ea:	18d5      	adds	r5, r2, r3
 80066ec:	42ac      	cmp	r4, r5
 80066ee:	d101      	bne.n	80066f4 <__sfputs_r+0x12>
 80066f0:	2000      	movs	r0, #0
 80066f2:	e007      	b.n	8006704 <__sfputs_r+0x22>
 80066f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f8:	463a      	mov	r2, r7
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7ff ffda 	bl	80066b4 <__sfputc_r>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d1f3      	bne.n	80066ec <__sfputs_r+0xa>
 8006704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006708 <_vfiprintf_r>:
 8006708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	460d      	mov	r5, r1
 800670e:	b09d      	sub	sp, #116	; 0x74
 8006710:	4614      	mov	r4, r2
 8006712:	4698      	mov	r8, r3
 8006714:	4606      	mov	r6, r0
 8006716:	b118      	cbz	r0, 8006720 <_vfiprintf_r+0x18>
 8006718:	6983      	ldr	r3, [r0, #24]
 800671a:	b90b      	cbnz	r3, 8006720 <_vfiprintf_r+0x18>
 800671c:	f7ff fe1c 	bl	8006358 <__sinit>
 8006720:	4b89      	ldr	r3, [pc, #548]	; (8006948 <_vfiprintf_r+0x240>)
 8006722:	429d      	cmp	r5, r3
 8006724:	d11b      	bne.n	800675e <_vfiprintf_r+0x56>
 8006726:	6875      	ldr	r5, [r6, #4]
 8006728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800672a:	07d9      	lsls	r1, r3, #31
 800672c:	d405      	bmi.n	800673a <_vfiprintf_r+0x32>
 800672e:	89ab      	ldrh	r3, [r5, #12]
 8006730:	059a      	lsls	r2, r3, #22
 8006732:	d402      	bmi.n	800673a <_vfiprintf_r+0x32>
 8006734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006736:	f7ff fead 	bl	8006494 <__retarget_lock_acquire_recursive>
 800673a:	89ab      	ldrh	r3, [r5, #12]
 800673c:	071b      	lsls	r3, r3, #28
 800673e:	d501      	bpl.n	8006744 <_vfiprintf_r+0x3c>
 8006740:	692b      	ldr	r3, [r5, #16]
 8006742:	b9eb      	cbnz	r3, 8006780 <_vfiprintf_r+0x78>
 8006744:	4629      	mov	r1, r5
 8006746:	4630      	mov	r0, r6
 8006748:	f7ff fc7e 	bl	8006048 <__swsetup_r>
 800674c:	b1c0      	cbz	r0, 8006780 <_vfiprintf_r+0x78>
 800674e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006750:	07dc      	lsls	r4, r3, #31
 8006752:	d50e      	bpl.n	8006772 <_vfiprintf_r+0x6a>
 8006754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006758:	b01d      	add	sp, #116	; 0x74
 800675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675e:	4b7b      	ldr	r3, [pc, #492]	; (800694c <_vfiprintf_r+0x244>)
 8006760:	429d      	cmp	r5, r3
 8006762:	d101      	bne.n	8006768 <_vfiprintf_r+0x60>
 8006764:	68b5      	ldr	r5, [r6, #8]
 8006766:	e7df      	b.n	8006728 <_vfiprintf_r+0x20>
 8006768:	4b79      	ldr	r3, [pc, #484]	; (8006950 <_vfiprintf_r+0x248>)
 800676a:	429d      	cmp	r5, r3
 800676c:	bf08      	it	eq
 800676e:	68f5      	ldreq	r5, [r6, #12]
 8006770:	e7da      	b.n	8006728 <_vfiprintf_r+0x20>
 8006772:	89ab      	ldrh	r3, [r5, #12]
 8006774:	0598      	lsls	r0, r3, #22
 8006776:	d4ed      	bmi.n	8006754 <_vfiprintf_r+0x4c>
 8006778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800677a:	f7ff fe8c 	bl	8006496 <__retarget_lock_release_recursive>
 800677e:	e7e9      	b.n	8006754 <_vfiprintf_r+0x4c>
 8006780:	2300      	movs	r3, #0
 8006782:	9309      	str	r3, [sp, #36]	; 0x24
 8006784:	2320      	movs	r3, #32
 8006786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800678a:	f8cd 800c 	str.w	r8, [sp, #12]
 800678e:	2330      	movs	r3, #48	; 0x30
 8006790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006954 <_vfiprintf_r+0x24c>
 8006794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006798:	f04f 0901 	mov.w	r9, #1
 800679c:	4623      	mov	r3, r4
 800679e:	469a      	mov	sl, r3
 80067a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067a4:	b10a      	cbz	r2, 80067aa <_vfiprintf_r+0xa2>
 80067a6:	2a25      	cmp	r2, #37	; 0x25
 80067a8:	d1f9      	bne.n	800679e <_vfiprintf_r+0x96>
 80067aa:	ebba 0b04 	subs.w	fp, sl, r4
 80067ae:	d00b      	beq.n	80067c8 <_vfiprintf_r+0xc0>
 80067b0:	465b      	mov	r3, fp
 80067b2:	4622      	mov	r2, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7ff ff93 	bl	80066e2 <__sfputs_r>
 80067bc:	3001      	adds	r0, #1
 80067be:	f000 80aa 	beq.w	8006916 <_vfiprintf_r+0x20e>
 80067c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067c4:	445a      	add	r2, fp
 80067c6:	9209      	str	r2, [sp, #36]	; 0x24
 80067c8:	f89a 3000 	ldrb.w	r3, [sl]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80a2 	beq.w	8006916 <_vfiprintf_r+0x20e>
 80067d2:	2300      	movs	r3, #0
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067dc:	f10a 0a01 	add.w	sl, sl, #1
 80067e0:	9304      	str	r3, [sp, #16]
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067e8:	931a      	str	r3, [sp, #104]	; 0x68
 80067ea:	4654      	mov	r4, sl
 80067ec:	2205      	movs	r2, #5
 80067ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f2:	4858      	ldr	r0, [pc, #352]	; (8006954 <_vfiprintf_r+0x24c>)
 80067f4:	f7f9 fcc4 	bl	8000180 <memchr>
 80067f8:	9a04      	ldr	r2, [sp, #16]
 80067fa:	b9d8      	cbnz	r0, 8006834 <_vfiprintf_r+0x12c>
 80067fc:	06d1      	lsls	r1, r2, #27
 80067fe:	bf44      	itt	mi
 8006800:	2320      	movmi	r3, #32
 8006802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006806:	0713      	lsls	r3, r2, #28
 8006808:	bf44      	itt	mi
 800680a:	232b      	movmi	r3, #43	; 0x2b
 800680c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006810:	f89a 3000 	ldrb.w	r3, [sl]
 8006814:	2b2a      	cmp	r3, #42	; 0x2a
 8006816:	d015      	beq.n	8006844 <_vfiprintf_r+0x13c>
 8006818:	9a07      	ldr	r2, [sp, #28]
 800681a:	4654      	mov	r4, sl
 800681c:	2000      	movs	r0, #0
 800681e:	f04f 0c0a 	mov.w	ip, #10
 8006822:	4621      	mov	r1, r4
 8006824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006828:	3b30      	subs	r3, #48	; 0x30
 800682a:	2b09      	cmp	r3, #9
 800682c:	d94e      	bls.n	80068cc <_vfiprintf_r+0x1c4>
 800682e:	b1b0      	cbz	r0, 800685e <_vfiprintf_r+0x156>
 8006830:	9207      	str	r2, [sp, #28]
 8006832:	e014      	b.n	800685e <_vfiprintf_r+0x156>
 8006834:	eba0 0308 	sub.w	r3, r0, r8
 8006838:	fa09 f303 	lsl.w	r3, r9, r3
 800683c:	4313      	orrs	r3, r2
 800683e:	9304      	str	r3, [sp, #16]
 8006840:	46a2      	mov	sl, r4
 8006842:	e7d2      	b.n	80067ea <_vfiprintf_r+0xe2>
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	1d19      	adds	r1, r3, #4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	9103      	str	r1, [sp, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	bfbb      	ittet	lt
 8006850:	425b      	neglt	r3, r3
 8006852:	f042 0202 	orrlt.w	r2, r2, #2
 8006856:	9307      	strge	r3, [sp, #28]
 8006858:	9307      	strlt	r3, [sp, #28]
 800685a:	bfb8      	it	lt
 800685c:	9204      	strlt	r2, [sp, #16]
 800685e:	7823      	ldrb	r3, [r4, #0]
 8006860:	2b2e      	cmp	r3, #46	; 0x2e
 8006862:	d10c      	bne.n	800687e <_vfiprintf_r+0x176>
 8006864:	7863      	ldrb	r3, [r4, #1]
 8006866:	2b2a      	cmp	r3, #42	; 0x2a
 8006868:	d135      	bne.n	80068d6 <_vfiprintf_r+0x1ce>
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	1d1a      	adds	r2, r3, #4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	9203      	str	r2, [sp, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfb8      	it	lt
 8006876:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800687a:	3402      	adds	r4, #2
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006964 <_vfiprintf_r+0x25c>
 8006882:	7821      	ldrb	r1, [r4, #0]
 8006884:	2203      	movs	r2, #3
 8006886:	4650      	mov	r0, sl
 8006888:	f7f9 fc7a 	bl	8000180 <memchr>
 800688c:	b140      	cbz	r0, 80068a0 <_vfiprintf_r+0x198>
 800688e:	2340      	movs	r3, #64	; 0x40
 8006890:	eba0 000a 	sub.w	r0, r0, sl
 8006894:	fa03 f000 	lsl.w	r0, r3, r0
 8006898:	9b04      	ldr	r3, [sp, #16]
 800689a:	4303      	orrs	r3, r0
 800689c:	3401      	adds	r4, #1
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a4:	482c      	ldr	r0, [pc, #176]	; (8006958 <_vfiprintf_r+0x250>)
 80068a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068aa:	2206      	movs	r2, #6
 80068ac:	f7f9 fc68 	bl	8000180 <memchr>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d03f      	beq.n	8006934 <_vfiprintf_r+0x22c>
 80068b4:	4b29      	ldr	r3, [pc, #164]	; (800695c <_vfiprintf_r+0x254>)
 80068b6:	bb1b      	cbnz	r3, 8006900 <_vfiprintf_r+0x1f8>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	3307      	adds	r3, #7
 80068bc:	f023 0307 	bic.w	r3, r3, #7
 80068c0:	3308      	adds	r3, #8
 80068c2:	9303      	str	r3, [sp, #12]
 80068c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c6:	443b      	add	r3, r7
 80068c8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ca:	e767      	b.n	800679c <_vfiprintf_r+0x94>
 80068cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80068d0:	460c      	mov	r4, r1
 80068d2:	2001      	movs	r0, #1
 80068d4:	e7a5      	b.n	8006822 <_vfiprintf_r+0x11a>
 80068d6:	2300      	movs	r3, #0
 80068d8:	3401      	adds	r4, #1
 80068da:	9305      	str	r3, [sp, #20]
 80068dc:	4619      	mov	r1, r3
 80068de:	f04f 0c0a 	mov.w	ip, #10
 80068e2:	4620      	mov	r0, r4
 80068e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068e8:	3a30      	subs	r2, #48	; 0x30
 80068ea:	2a09      	cmp	r2, #9
 80068ec:	d903      	bls.n	80068f6 <_vfiprintf_r+0x1ee>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0c5      	beq.n	800687e <_vfiprintf_r+0x176>
 80068f2:	9105      	str	r1, [sp, #20]
 80068f4:	e7c3      	b.n	800687e <_vfiprintf_r+0x176>
 80068f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068fa:	4604      	mov	r4, r0
 80068fc:	2301      	movs	r3, #1
 80068fe:	e7f0      	b.n	80068e2 <_vfiprintf_r+0x1da>
 8006900:	ab03      	add	r3, sp, #12
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	462a      	mov	r2, r5
 8006906:	4b16      	ldr	r3, [pc, #88]	; (8006960 <_vfiprintf_r+0x258>)
 8006908:	a904      	add	r1, sp, #16
 800690a:	4630      	mov	r0, r6
 800690c:	f3af 8000 	nop.w
 8006910:	4607      	mov	r7, r0
 8006912:	1c78      	adds	r0, r7, #1
 8006914:	d1d6      	bne.n	80068c4 <_vfiprintf_r+0x1bc>
 8006916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006918:	07d9      	lsls	r1, r3, #31
 800691a:	d405      	bmi.n	8006928 <_vfiprintf_r+0x220>
 800691c:	89ab      	ldrh	r3, [r5, #12]
 800691e:	059a      	lsls	r2, r3, #22
 8006920:	d402      	bmi.n	8006928 <_vfiprintf_r+0x220>
 8006922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006924:	f7ff fdb7 	bl	8006496 <__retarget_lock_release_recursive>
 8006928:	89ab      	ldrh	r3, [r5, #12]
 800692a:	065b      	lsls	r3, r3, #25
 800692c:	f53f af12 	bmi.w	8006754 <_vfiprintf_r+0x4c>
 8006930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006932:	e711      	b.n	8006758 <_vfiprintf_r+0x50>
 8006934:	ab03      	add	r3, sp, #12
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	462a      	mov	r2, r5
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <_vfiprintf_r+0x258>)
 800693c:	a904      	add	r1, sp, #16
 800693e:	4630      	mov	r0, r6
 8006940:	f000 f880 	bl	8006a44 <_printf_i>
 8006944:	e7e4      	b.n	8006910 <_vfiprintf_r+0x208>
 8006946:	bf00      	nop
 8006948:	08006f90 	.word	0x08006f90
 800694c:	08006fb0 	.word	0x08006fb0
 8006950:	08006f70 	.word	0x08006f70
 8006954:	08006fd0 	.word	0x08006fd0
 8006958:	08006fda 	.word	0x08006fda
 800695c:	00000000 	.word	0x00000000
 8006960:	080066e3 	.word	0x080066e3
 8006964:	08006fd6 	.word	0x08006fd6

08006968 <_printf_common>:
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	4616      	mov	r6, r2
 800696e:	4699      	mov	r9, r3
 8006970:	688a      	ldr	r2, [r1, #8]
 8006972:	690b      	ldr	r3, [r1, #16]
 8006974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006978:	4293      	cmp	r3, r2
 800697a:	bfb8      	it	lt
 800697c:	4613      	movlt	r3, r2
 800697e:	6033      	str	r3, [r6, #0]
 8006980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006984:	4607      	mov	r7, r0
 8006986:	460c      	mov	r4, r1
 8006988:	b10a      	cbz	r2, 800698e <_printf_common+0x26>
 800698a:	3301      	adds	r3, #1
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	0699      	lsls	r1, r3, #26
 8006992:	bf42      	ittt	mi
 8006994:	6833      	ldrmi	r3, [r6, #0]
 8006996:	3302      	addmi	r3, #2
 8006998:	6033      	strmi	r3, [r6, #0]
 800699a:	6825      	ldr	r5, [r4, #0]
 800699c:	f015 0506 	ands.w	r5, r5, #6
 80069a0:	d106      	bne.n	80069b0 <_printf_common+0x48>
 80069a2:	f104 0a19 	add.w	sl, r4, #25
 80069a6:	68e3      	ldr	r3, [r4, #12]
 80069a8:	6832      	ldr	r2, [r6, #0]
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	dc26      	bgt.n	80069fe <_printf_common+0x96>
 80069b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069b4:	1e13      	subs	r3, r2, #0
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	bf18      	it	ne
 80069ba:	2301      	movne	r3, #1
 80069bc:	0692      	lsls	r2, r2, #26
 80069be:	d42b      	bmi.n	8006a18 <_printf_common+0xb0>
 80069c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069c4:	4649      	mov	r1, r9
 80069c6:	4638      	mov	r0, r7
 80069c8:	47c0      	blx	r8
 80069ca:	3001      	adds	r0, #1
 80069cc:	d01e      	beq.n	8006a0c <_printf_common+0xa4>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	68e5      	ldr	r5, [r4, #12]
 80069d2:	6832      	ldr	r2, [r6, #0]
 80069d4:	f003 0306 	and.w	r3, r3, #6
 80069d8:	2b04      	cmp	r3, #4
 80069da:	bf08      	it	eq
 80069dc:	1aad      	subeq	r5, r5, r2
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	6922      	ldr	r2, [r4, #16]
 80069e2:	bf0c      	ite	eq
 80069e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e8:	2500      	movne	r5, #0
 80069ea:	4293      	cmp	r3, r2
 80069ec:	bfc4      	itt	gt
 80069ee:	1a9b      	subgt	r3, r3, r2
 80069f0:	18ed      	addgt	r5, r5, r3
 80069f2:	2600      	movs	r6, #0
 80069f4:	341a      	adds	r4, #26
 80069f6:	42b5      	cmp	r5, r6
 80069f8:	d11a      	bne.n	8006a30 <_printf_common+0xc8>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e008      	b.n	8006a10 <_printf_common+0xa8>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4652      	mov	r2, sl
 8006a02:	4649      	mov	r1, r9
 8006a04:	4638      	mov	r0, r7
 8006a06:	47c0      	blx	r8
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d103      	bne.n	8006a14 <_printf_common+0xac>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a14:	3501      	adds	r5, #1
 8006a16:	e7c6      	b.n	80069a6 <_printf_common+0x3e>
 8006a18:	18e1      	adds	r1, r4, r3
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	2030      	movs	r0, #48	; 0x30
 8006a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a22:	4422      	add	r2, r4
 8006a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	e7c7      	b.n	80069c0 <_printf_common+0x58>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4622      	mov	r2, r4
 8006a34:	4649      	mov	r1, r9
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c0      	blx	r8
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d0e6      	beq.n	8006a0c <_printf_common+0xa4>
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7d9      	b.n	80069f6 <_printf_common+0x8e>
	...

08006a44 <_printf_i>:
 8006a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a48:	460c      	mov	r4, r1
 8006a4a:	4691      	mov	r9, r2
 8006a4c:	7e27      	ldrb	r7, [r4, #24]
 8006a4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a50:	2f78      	cmp	r7, #120	; 0x78
 8006a52:	4680      	mov	r8, r0
 8006a54:	469a      	mov	sl, r3
 8006a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a5a:	d807      	bhi.n	8006a6c <_printf_i+0x28>
 8006a5c:	2f62      	cmp	r7, #98	; 0x62
 8006a5e:	d80a      	bhi.n	8006a76 <_printf_i+0x32>
 8006a60:	2f00      	cmp	r7, #0
 8006a62:	f000 80d8 	beq.w	8006c16 <_printf_i+0x1d2>
 8006a66:	2f58      	cmp	r7, #88	; 0x58
 8006a68:	f000 80a3 	beq.w	8006bb2 <_printf_i+0x16e>
 8006a6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a74:	e03a      	b.n	8006aec <_printf_i+0xa8>
 8006a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a7a:	2b15      	cmp	r3, #21
 8006a7c:	d8f6      	bhi.n	8006a6c <_printf_i+0x28>
 8006a7e:	a001      	add	r0, pc, #4	; (adr r0, 8006a84 <_printf_i+0x40>)
 8006a80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a84:	08006add 	.word	0x08006add
 8006a88:	08006af1 	.word	0x08006af1
 8006a8c:	08006a6d 	.word	0x08006a6d
 8006a90:	08006a6d 	.word	0x08006a6d
 8006a94:	08006a6d 	.word	0x08006a6d
 8006a98:	08006a6d 	.word	0x08006a6d
 8006a9c:	08006af1 	.word	0x08006af1
 8006aa0:	08006a6d 	.word	0x08006a6d
 8006aa4:	08006a6d 	.word	0x08006a6d
 8006aa8:	08006a6d 	.word	0x08006a6d
 8006aac:	08006a6d 	.word	0x08006a6d
 8006ab0:	08006bfd 	.word	0x08006bfd
 8006ab4:	08006b21 	.word	0x08006b21
 8006ab8:	08006bdf 	.word	0x08006bdf
 8006abc:	08006a6d 	.word	0x08006a6d
 8006ac0:	08006a6d 	.word	0x08006a6d
 8006ac4:	08006c1f 	.word	0x08006c1f
 8006ac8:	08006a6d 	.word	0x08006a6d
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006a6d 	.word	0x08006a6d
 8006ad4:	08006a6d 	.word	0x08006a6d
 8006ad8:	08006be7 	.word	0x08006be7
 8006adc:	680b      	ldr	r3, [r1, #0]
 8006ade:	1d1a      	adds	r2, r3, #4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	600a      	str	r2, [r1, #0]
 8006ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0a3      	b.n	8006c38 <_printf_i+0x1f4>
 8006af0:	6825      	ldr	r5, [r4, #0]
 8006af2:	6808      	ldr	r0, [r1, #0]
 8006af4:	062e      	lsls	r6, r5, #24
 8006af6:	f100 0304 	add.w	r3, r0, #4
 8006afa:	d50a      	bpl.n	8006b12 <_printf_i+0xce>
 8006afc:	6805      	ldr	r5, [r0, #0]
 8006afe:	600b      	str	r3, [r1, #0]
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	da03      	bge.n	8006b0c <_printf_i+0xc8>
 8006b04:	232d      	movs	r3, #45	; 0x2d
 8006b06:	426d      	negs	r5, r5
 8006b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b0c:	485e      	ldr	r0, [pc, #376]	; (8006c88 <_printf_i+0x244>)
 8006b0e:	230a      	movs	r3, #10
 8006b10:	e019      	b.n	8006b46 <_printf_i+0x102>
 8006b12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b16:	6805      	ldr	r5, [r0, #0]
 8006b18:	600b      	str	r3, [r1, #0]
 8006b1a:	bf18      	it	ne
 8006b1c:	b22d      	sxthne	r5, r5
 8006b1e:	e7ef      	b.n	8006b00 <_printf_i+0xbc>
 8006b20:	680b      	ldr	r3, [r1, #0]
 8006b22:	6825      	ldr	r5, [r4, #0]
 8006b24:	1d18      	adds	r0, r3, #4
 8006b26:	6008      	str	r0, [r1, #0]
 8006b28:	0628      	lsls	r0, r5, #24
 8006b2a:	d501      	bpl.n	8006b30 <_printf_i+0xec>
 8006b2c:	681d      	ldr	r5, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <_printf_i+0xf2>
 8006b30:	0669      	lsls	r1, r5, #25
 8006b32:	d5fb      	bpl.n	8006b2c <_printf_i+0xe8>
 8006b34:	881d      	ldrh	r5, [r3, #0]
 8006b36:	4854      	ldr	r0, [pc, #336]	; (8006c88 <_printf_i+0x244>)
 8006b38:	2f6f      	cmp	r7, #111	; 0x6f
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2308      	moveq	r3, #8
 8006b3e:	230a      	movne	r3, #10
 8006b40:	2100      	movs	r1, #0
 8006b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b46:	6866      	ldr	r6, [r4, #4]
 8006b48:	60a6      	str	r6, [r4, #8]
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	bfa2      	ittt	ge
 8006b4e:	6821      	ldrge	r1, [r4, #0]
 8006b50:	f021 0104 	bicge.w	r1, r1, #4
 8006b54:	6021      	strge	r1, [r4, #0]
 8006b56:	b90d      	cbnz	r5, 8006b5c <_printf_i+0x118>
 8006b58:	2e00      	cmp	r6, #0
 8006b5a:	d04d      	beq.n	8006bf8 <_printf_i+0x1b4>
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b62:	fb03 5711 	mls	r7, r3, r1, r5
 8006b66:	5dc7      	ldrb	r7, [r0, r7]
 8006b68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b6c:	462f      	mov	r7, r5
 8006b6e:	42bb      	cmp	r3, r7
 8006b70:	460d      	mov	r5, r1
 8006b72:	d9f4      	bls.n	8006b5e <_printf_i+0x11a>
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d10b      	bne.n	8006b90 <_printf_i+0x14c>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	07df      	lsls	r7, r3, #31
 8006b7c:	d508      	bpl.n	8006b90 <_printf_i+0x14c>
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	6861      	ldr	r1, [r4, #4]
 8006b82:	4299      	cmp	r1, r3
 8006b84:	bfde      	ittt	le
 8006b86:	2330      	movle	r3, #48	; 0x30
 8006b88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b8c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006b90:	1b92      	subs	r2, r2, r6
 8006b92:	6122      	str	r2, [r4, #16]
 8006b94:	f8cd a000 	str.w	sl, [sp]
 8006b98:	464b      	mov	r3, r9
 8006b9a:	aa03      	add	r2, sp, #12
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	f7ff fee2 	bl	8006968 <_printf_common>
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d14c      	bne.n	8006c42 <_printf_i+0x1fe>
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bac:	b004      	add	sp, #16
 8006bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb2:	4835      	ldr	r0, [pc, #212]	; (8006c88 <_printf_i+0x244>)
 8006bb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	680e      	ldr	r6, [r1, #0]
 8006bbc:	061f      	lsls	r7, r3, #24
 8006bbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006bc2:	600e      	str	r6, [r1, #0]
 8006bc4:	d514      	bpl.n	8006bf0 <_printf_i+0x1ac>
 8006bc6:	07d9      	lsls	r1, r3, #31
 8006bc8:	bf44      	itt	mi
 8006bca:	f043 0320 	orrmi.w	r3, r3, #32
 8006bce:	6023      	strmi	r3, [r4, #0]
 8006bd0:	b91d      	cbnz	r5, 8006bda <_printf_i+0x196>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f023 0320 	bic.w	r3, r3, #32
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	2310      	movs	r3, #16
 8006bdc:	e7b0      	b.n	8006b40 <_printf_i+0xfc>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f043 0320 	orr.w	r3, r3, #32
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	2378      	movs	r3, #120	; 0x78
 8006be8:	4828      	ldr	r0, [pc, #160]	; (8006c8c <_printf_i+0x248>)
 8006bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bee:	e7e3      	b.n	8006bb8 <_printf_i+0x174>
 8006bf0:	065e      	lsls	r6, r3, #25
 8006bf2:	bf48      	it	mi
 8006bf4:	b2ad      	uxthmi	r5, r5
 8006bf6:	e7e6      	b.n	8006bc6 <_printf_i+0x182>
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	e7bb      	b.n	8006b74 <_printf_i+0x130>
 8006bfc:	680b      	ldr	r3, [r1, #0]
 8006bfe:	6826      	ldr	r6, [r4, #0]
 8006c00:	6960      	ldr	r0, [r4, #20]
 8006c02:	1d1d      	adds	r5, r3, #4
 8006c04:	600d      	str	r5, [r1, #0]
 8006c06:	0635      	lsls	r5, r6, #24
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	d501      	bpl.n	8006c10 <_printf_i+0x1cc>
 8006c0c:	6018      	str	r0, [r3, #0]
 8006c0e:	e002      	b.n	8006c16 <_printf_i+0x1d2>
 8006c10:	0671      	lsls	r1, r6, #25
 8006c12:	d5fb      	bpl.n	8006c0c <_printf_i+0x1c8>
 8006c14:	8018      	strh	r0, [r3, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	6123      	str	r3, [r4, #16]
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	e7ba      	b.n	8006b94 <_printf_i+0x150>
 8006c1e:	680b      	ldr	r3, [r1, #0]
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	600a      	str	r2, [r1, #0]
 8006c24:	681e      	ldr	r6, [r3, #0]
 8006c26:	6862      	ldr	r2, [r4, #4]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7f9 faa8 	bl	8000180 <memchr>
 8006c30:	b108      	cbz	r0, 8006c36 <_printf_i+0x1f2>
 8006c32:	1b80      	subs	r0, r0, r6
 8006c34:	6060      	str	r0, [r4, #4]
 8006c36:	6863      	ldr	r3, [r4, #4]
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c40:	e7a8      	b.n	8006b94 <_printf_i+0x150>
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	4632      	mov	r2, r6
 8006c46:	4649      	mov	r1, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	47d0      	blx	sl
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d0ab      	beq.n	8006ba8 <_printf_i+0x164>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	079b      	lsls	r3, r3, #30
 8006c54:	d413      	bmi.n	8006c7e <_printf_i+0x23a>
 8006c56:	68e0      	ldr	r0, [r4, #12]
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	bfb8      	it	lt
 8006c5e:	4618      	movlt	r0, r3
 8006c60:	e7a4      	b.n	8006bac <_printf_i+0x168>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4632      	mov	r2, r6
 8006c66:	4649      	mov	r1, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	47d0      	blx	sl
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d09b      	beq.n	8006ba8 <_printf_i+0x164>
 8006c70:	3501      	adds	r5, #1
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	9903      	ldr	r1, [sp, #12]
 8006c76:	1a5b      	subs	r3, r3, r1
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dcf2      	bgt.n	8006c62 <_printf_i+0x21e>
 8006c7c:	e7eb      	b.n	8006c56 <_printf_i+0x212>
 8006c7e:	2500      	movs	r5, #0
 8006c80:	f104 0619 	add.w	r6, r4, #25
 8006c84:	e7f5      	b.n	8006c72 <_printf_i+0x22e>
 8006c86:	bf00      	nop
 8006c88:	08006fe1 	.word	0x08006fe1
 8006c8c:	08006ff2 	.word	0x08006ff2

08006c90 <_sbrk_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4d06      	ldr	r5, [pc, #24]	; (8006cac <_sbrk_r+0x1c>)
 8006c94:	2300      	movs	r3, #0
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	f7fa fb3c 	bl	8001318 <_sbrk>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_sbrk_r+0x1a>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_sbrk_r+0x1a>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	20000224 	.word	0x20000224

08006cb0 <__sread>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb8:	f000 f8a0 	bl	8006dfc <_read_r>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	bfab      	itete	ge
 8006cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc4:	181b      	addge	r3, r3, r0
 8006cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cca:	bfac      	ite	ge
 8006ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cce:	81a3      	strhlt	r3, [r4, #12]
 8006cd0:	bd10      	pop	{r4, pc}

08006cd2 <__swrite>:
 8006cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	898b      	ldrh	r3, [r1, #12]
 8006cda:	05db      	lsls	r3, r3, #23
 8006cdc:	4605      	mov	r5, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	d505      	bpl.n	8006cf0 <__swrite+0x1e>
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	2302      	movs	r3, #2
 8006cea:	2200      	movs	r2, #0
 8006cec:	f000 f868 	bl	8006dc0 <_lseek_r>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	463b      	mov	r3, r7
 8006d00:	4628      	mov	r0, r5
 8006d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	f000 b817 	b.w	8006d38 <_write_r>

08006d0a <__sseek>:
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d12:	f000 f855 	bl	8006dc0 <_lseek_r>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	bf15      	itete	ne
 8006d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d26:	81a3      	strheq	r3, [r4, #12]
 8006d28:	bf18      	it	ne
 8006d2a:	81a3      	strhne	r3, [r4, #12]
 8006d2c:	bd10      	pop	{r4, pc}

08006d2e <__sclose>:
 8006d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d32:	f000 b813 	b.w	8006d5c <_close_r>
	...

08006d38 <_write_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d07      	ldr	r5, [pc, #28]	; (8006d58 <_write_r+0x20>)
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	4608      	mov	r0, r1
 8006d40:	4611      	mov	r1, r2
 8006d42:	2200      	movs	r2, #0
 8006d44:	602a      	str	r2, [r5, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f7fa fa95 	bl	8001276 <_write>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_write_r+0x1e>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_write_r+0x1e>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20000224 	.word	0x20000224

08006d5c <_close_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d06      	ldr	r5, [pc, #24]	; (8006d78 <_close_r+0x1c>)
 8006d60:	2300      	movs	r3, #0
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	f7fa faa1 	bl	80012ae <_close>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_close_r+0x1a>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_close_r+0x1a>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	20000224 	.word	0x20000224

08006d7c <_fstat_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d07      	ldr	r5, [pc, #28]	; (8006d9c <_fstat_r+0x20>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	4611      	mov	r1, r2
 8006d88:	602b      	str	r3, [r5, #0]
 8006d8a:	f7fa fa9c 	bl	80012c6 <_fstat>
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	d102      	bne.n	8006d98 <_fstat_r+0x1c>
 8006d92:	682b      	ldr	r3, [r5, #0]
 8006d94:	b103      	cbz	r3, 8006d98 <_fstat_r+0x1c>
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	bd38      	pop	{r3, r4, r5, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000224 	.word	0x20000224

08006da0 <_isatty_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d06      	ldr	r5, [pc, #24]	; (8006dbc <_isatty_r+0x1c>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7fa fa9b 	bl	80012e6 <_isatty>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_isatty_r+0x1a>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_isatty_r+0x1a>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20000224 	.word	0x20000224

08006dc0 <_lseek_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	; (8006de0 <_lseek_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fa fa94 	bl	80012fc <_lseek>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_lseek_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_lseek_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000224 	.word	0x20000224

08006de4 <__malloc_lock>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__malloc_lock+0x8>)
 8006de6:	f7ff bb55 	b.w	8006494 <__retarget_lock_acquire_recursive>
 8006dea:	bf00      	nop
 8006dec:	2000021c 	.word	0x2000021c

08006df0 <__malloc_unlock>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__malloc_unlock+0x8>)
 8006df2:	f7ff bb50 	b.w	8006496 <__retarget_lock_release_recursive>
 8006df6:	bf00      	nop
 8006df8:	2000021c 	.word	0x2000021c

08006dfc <_read_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	; (8006e1c <_read_r+0x20>)
 8006e00:	4604      	mov	r4, r0
 8006e02:	4608      	mov	r0, r1
 8006e04:	4611      	mov	r1, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fa fa16 	bl	800123c <_read>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_read_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_read_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	20000224 	.word	0x20000224

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
