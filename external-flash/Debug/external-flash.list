
external-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  080056c0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000118  20000074  08005730  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000018c  08005730  0002018c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017eaf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003033  00000000  00000000  00037f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001910  00000000  00000000  0003af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017d8  00000000  00000000  0003c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025b24  00000000  00000000  0003e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016155  00000000  00000000  00063b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e184f  00000000  00000000  00079ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0015b538  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070a4  00000000  00000000  0015b58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080054ec 	.word	0x080054ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080054ec 	.word	0x080054ec

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053c:	68fb      	ldr	r3, [r7, #12]
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000560:	2004      	movs	r0, #4
 8000562:	f7ff ffd9 	bl	8000518 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000566:	2080      	movs	r0, #128	; 0x80
 8000568:	f7ff ffd6 	bl	8000518 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	2002      	movs	r0, #2
 800056e:	f7ff ffd3 	bl	8000518 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff ffd0 	bl	8000518 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000578:	2010      	movs	r0, #16
 800057a:	f7ff ffcd 	bl	8000518 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	2008      	movs	r0, #8
 8000580:	f7ff ffca 	bl	8000518 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000584:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000588:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058a:	2303      	movs	r3, #3
 800058c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4619      	mov	r1, r3
 8000596:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0xcc>)
 8000598:	f000 fe06 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800059c:	2308      	movs	r3, #8
 800059e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a0:	2303      	movs	r3, #3
 80005a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	481b      	ldr	r0, [pc, #108]	; (800061c <MX_GPIO_Init+0xd0>)
 80005ae:	f000 fdfb 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10
                           PB11 PB0 PB1 PB12
                           PB13 PB14 PB15 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10
 80005b2:	f64f 7337 	movw	r3, #65335	; 0xff37
 80005b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4619      	mov	r1, r3
 80005c4:	4816      	ldr	r0, [pc, #88]	; (8000620 <MX_GPIO_Init+0xd4>)
 80005c6:	f000 fdef 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ca:	f649 73ff 	movw	r3, #40959	; 0x9fff
 80005ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	2303      	movs	r3, #3
 80005d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 fde2 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e4:	2310      	movs	r3, #16
 80005e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e8:	2303      	movs	r3, #3
 80005ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xd8>)
 80005f6:	f000 fdd7 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fa:	2303      	movs	r3, #3
 80005fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fe:	2303      	movs	r3, #3
 8000600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <MX_GPIO_Init+0xdc>)
 800060c:	f000 fdcc 	bl	80011a8 <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	48000800 	.word	0x48000800
 800061c:	48001c00 	.word	0x48001c00
 8000620:	48000400 	.word	0x48000400
 8000624:	48001000 	.word	0x48001000
 8000628:	48000c00 	.word	0x48000c00

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fb66 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f812 	bl	800065c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ff88 	bl	800054c <MX_GPIO_Init>
  MX_TIM16_Init();
 800063c:	f000 fa2e 	bl	8000a9c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000640:	f000 faa2 	bl	8000b88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <main+0x28>)
 8000646:	f002 fd61 	bl	800310c <HAL_TIM_Base_Start_IT>
  printf("Timer16 Start");
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <main+0x2c>)
 800064c:	f003 fff8 	bl	8004640 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x24>
 8000652:	bf00      	nop
 8000654:	2000009c 	.word	0x2000009c
 8000658:	08005504 	.word	0x08005504

0800065c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0ae      	sub	sp, #184	; 0xb8
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000666:	2248      	movs	r2, #72	; 0x48
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 ffe0 	bl	8004630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2250      	movs	r2, #80	; 0x50
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 ffd0 	bl	8004630 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <_Z18SystemClock_Configv+0x134>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000698:	4a3d      	ldr	r2, [pc, #244]	; (8000790 <_Z18SystemClock_Configv+0x134>)
 800069a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <_Z18SystemClock_Configv+0x134>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80006ac:	2322      	movs	r3, #34	; 0x22
 80006ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 80006e0:	2320      	movs	r3, #32
 80006e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fa54 	bl	8001bb0 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000718:	f000 f850 	bl	80007bc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800071c:	236f      	movs	r3, #111	; 0x6f
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000738:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fdc2 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000754:	f000 f832 	bl	80007bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 8000758:	f242 0301 	movw	r3, #8193	; 0x2001
 800075c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000762:	2300      	movs	r3, #0
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000766:	2310      	movs	r3, #16
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f002 f9ee 	bl	8002b4e <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <_Z18SystemClock_Configv+0x12a>
  {
    Error_Handler();
 8000782:	f000 f81b 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000786:	bf00      	nop
 8000788:	37b8      	adds	r7, #184	; 0xb8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	58000400 	.word	0x58000400

08000794 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d102      	bne.n	80007ac <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		printf("timer event 3");
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007a8:	f003 ff4a 	bl	8004640 <iprintf>
	}
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40014400 	.word	0x40014400
 80007b8:	08005514 	.word	0x08005514

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <__io_putchar>:
#define __PRINTF_TO_UART_H__

#include "usart.h"

int __io_putchar(char ch)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 80007d2:	1df9      	adds	r1, r7, #7
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	2201      	movs	r2, #1
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <__io_putchar+0x24>)
 80007dc:	f002 ff1e 	bl	800361c <HAL_UART_Transmit>
	return ch;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000e8 	.word	0x200000e8

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <NMI_Handler+0x4>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <HardFault_Handler+0x4>

0800080a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <BusFault_Handler+0x4>

08000816 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <UsageFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084a:	f000 fab3 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800085a:	f002 fca5 	bl	80031a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000009c 	.word	0x2000009c

08000868 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <USART1_IRQHandler+0x10>)
 800086e:	f002 ff6b 	bl	8003748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000e8 	.word	0x200000e8

0800087c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	e00a      	b.n	80008a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800088e:	f3af 8000 	nop.w
 8000892:	4601      	mov	r1, r0
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	60ba      	str	r2, [r7, #8]
 800089a:	b2ca      	uxtb	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf0      	blt.n	800088e <_read+0x12>
	}

return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	60f8      	str	r0, [r7, #12]
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e009      	b.n	80008dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	60ba      	str	r2, [r7, #8]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff79 	bl	80007c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	3301      	adds	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	dbf1      	blt.n	80008c8 <_write+0x12>
	}
	return len;
 80008e4:	687b      	ldr	r3, [r7, #4]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_close>:

int _close(int file)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return -1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000916:	605a      	str	r2, [r3, #4]
	return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_isatty>:

int _isatty(int file)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	return 1;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f003 fe28 	bl	80045dc <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20030000 	.word	0x20030000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	20000090 	.word	0x20000090
 80009c0:	20000190 	.word	0x20000190

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <SystemInit+0x98>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <SystemInit+0x98>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80009e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80009f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80009f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <SystemInit+0x9c>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a0e:	f023 0305 	bic.w	r3, r3, #5
 8000a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <SystemInit+0xa0>)
 8000a30:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <SystemInit+0xa0>)
 8000a38:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	faf6fefb 	.word	0xfaf6fefb
 8000a64:	22041000 	.word	0x22041000

08000a68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <MX_TIM16_Init+0x4c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3199;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000aa8:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000aac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000ab6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_TIM16_Init+0x48>)
 8000ad0:	f002 fac4 	bl	800305c <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000ada:	f7ff fe6f 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000009c 	.word	0x2000009c
 8000ae8:	40014400 	.word	0x40014400

08000aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <HAL_TIM_Base_MspInit+0x34>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000afe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b02:	f7ff ffb1 	bl	8000a68 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f000 fa59 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b10:	2019      	movs	r0, #25
 8000b12:	f000 fa70 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40014400 	.word	0x40014400

08000b24 <LL_AHB2_GRP1_EnableClock>:
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b48:	68fb      	ldr	r3, [r7, #12]
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_APB2_GRP1_EnableClock>:
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f002 fcd3 	bl	800357c <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f7ff fdee 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000be4:	f003 fc30 	bl	8004448 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f7ff fde5 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bf6:	f003 fc65 	bl	80044c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f7ff fddc 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000c06:	f003 fbe6 	bl	80043d6 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f7ff fdd4 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000e8 	.word	0x200000e8
 8000c1c:	40013800 	.word	0x40013800

08000c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_UART_MspInit+0x68>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d11e      	bne.n	8000c80 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c46:	f7ff ff86 	bl	8000b56 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f7ff ff6a 	bl	8000b24 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c50:	23c0      	movs	r3, #192	; 0xc0
 8000c52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c60:	2307      	movs	r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <HAL_UART_MspInit+0x6c>)
 8000c6c:	f000 fa9c 	bl	80011a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2024      	movs	r0, #36	; 0x24
 8000c76:	f000 f9a4 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c7a:	2024      	movs	r0, #36	; 0x24
 8000c7c:	f000 f9bb 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	48000400 	.word	0x48000400

08000c90 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c90:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c92:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c94:	3304      	adds	r3, #4

08000c96 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c96:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c98:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c9a:	d3f9      	bcc.n	8000c90 <CopyDataInit>
  bx lr
 8000c9c:	4770      	bx	lr

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c9e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ca0:	3004      	adds	r0, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ca2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>
  bx lr
 8000ca6:	4770      	bx	lr

08000ca8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000caa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cac:	f7ff fe8a 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <LoopForever+0x8>)
 8000cb2:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <LoopForever+0xc>)
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <LoopForever+0x10>)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f7ff ffed 	bl	8000c96 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <LoopForever+0x14>)
 8000cbe:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <LoopForever+0x18>)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f7ff ffee 	bl	8000ca2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cc6:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <LoopForever+0x1c>)
 8000cc8:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <LoopForever+0x20>)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f7ff ffe9 	bl	8000ca2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd0:	f003 fc8a 	bl	80045e8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000cd4:	f7ff fcaa 	bl	800062c <main>

08000cd8 <LoopForever>:

LoopForever:
  b LoopForever
 8000cd8:	e7fe      	b.n	8000cd8 <LoopForever>
 8000cda:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000cdc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	20000074 	.word	0x20000074
 8000ce8:	080056c0 	.word	0x080056c0
  INIT_BSS _sbss, _ebss
 8000cec:	20000074 	.word	0x20000074
 8000cf0:	2000018c 	.word	0x2000018c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cf4:	20030000 	.word	0x20030000
 8000cf8:	20030000 	.word	0x20030000

08000cfc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_Init+0x3c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x3c>)
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f948 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f80f 	bl	8000d40 <HAL_InitTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	e001      	b.n	8000d32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2e:	f7ff fd5f 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58004000 	.word	0x58004000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d024      	beq.n	8000d9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d54:	f001 fc66 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x6c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f950 	bl	8001012 <HAL_SYSTICK_Config>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10f      	bne.n	8000d98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d809      	bhi.n	8000d92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d86:	f000 f91c 	bl	8000fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <HAL_InitTick+0x70>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e004      	b.n	8000da2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e001      	b.n	8000da2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000178 	.word	0x20000178

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000178 	.word	0x20000178

08000df4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTickPrio+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff40 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff90 	bl	8000f00 <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5f 	bl	8000eac <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff33 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffa4 	bl	8000f68 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e04f      	b.n	80010dc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d008      	beq.n	800105a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e040      	b.n	80010dc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 020e 	bic.w	r2, r2, #14
 8001068:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001078:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f003 021c 	and.w	r2, r3, #28
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d005      	beq.n	800110c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2204      	movs	r2, #4
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e047      	b.n	800119c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 020e 	bic.w	r2, r2, #14
 800111a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800113a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f003 021c 	and.w	r2, r3, #28
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001158:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00c      	beq.n	800117c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001170:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800117a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
    }
  }
  return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	e14c      	b.n	8001452 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 813e 	beq.w	800144c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d00b      	beq.n	80011f0 <HAL_GPIO_Init+0x48>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e4:	2b11      	cmp	r3, #17
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b12      	cmp	r3, #18
 80011ee:	d130      	bne.n	8001252 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001226:	2201      	movs	r2, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 0201 	and.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0xea>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b12      	cmp	r3, #18
 8001290:	d123      	bne.n	80012da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	6939      	ldr	r1, [r7, #16]
 80012d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0203 	and.w	r2, r3, #3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8098 	beq.w	800144c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800131c:	4a54      	ldr	r2, [pc, #336]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001346:	d019      	beq.n	800137c <HAL_GPIO_Init+0x1d4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d013      	beq.n	8001378 <HAL_GPIO_Init+0x1d0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a49      	ldr	r2, [pc, #292]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00d      	beq.n	8001374 <HAL_GPIO_Init+0x1cc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a48      	ldr	r2, [pc, #288]	; (800147c <HAL_GPIO_Init+0x2d4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0x1c8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a47      	ldr	r2, [pc, #284]	; (8001480 <HAL_GPIO_Init+0x2d8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_GPIO_Init+0x1c4>
 8001368:	2304      	movs	r3, #4
 800136a:	e008      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 800136c:	2307      	movs	r3, #7
 800136e:	e006      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 8001370:	2303      	movs	r3, #3
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 800137c:	2300      	movs	r3, #0
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138e:	4938      	ldr	r1, [pc, #224]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 800139e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c2:	4a30      	ldr	r2, [pc, #192]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141c:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	f47f aeab 	bne.w	80011b8 <HAL_GPIO_Init+0x10>
  }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40010000 	.word	0x40010000
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800
 800147c:	48000c00 	.word	0x48000c00
 8001480:	48001000 	.word	0x48001000
 8001484:	58000800 	.word	0x58000800

08001488 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	58000400 	.word	0x58000400

080014a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	58000400 	.word	0x58000400

080014c4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014d6:	d101      	bne.n	80014dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001536:	d101      	bne.n	800153c <LL_RCC_HSE_IsReady+0x18>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <LL_RCC_HSE_IsReady+0x1a>
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d101      	bne.n	800159c <LL_RCC_HSI_IsReady+0x18>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <LL_RCC_HSI_IsReady+0x1a>
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b02      	cmp	r3, #2
 8001628:	d101      	bne.n	800162e <LL_RCC_HSI48_IsReady+0x18>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_RCC_HSI48_IsReady+0x1a>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d101      	bne.n	80016da <LL_RCC_LSE_IsReady+0x18>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <LL_RCC_LSE_IsReady+0x1a>
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d101      	bne.n	8001742 <LL_RCC_LSI1_IsReady+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_RCC_LSI1_IsReady+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d101      	bne.n	80017aa <LL_RCC_LSI2_IsReady+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_RCC_LSI2_IsReady+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6013      	str	r3, [r2, #0]
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d101      	bne.n	8001836 <LL_RCC_MSI_IsReady+0x16>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_RCC_MSI_IsReady+0x18>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2bb0      	cmp	r3, #176	; 0xb0
 8001880:	d901      	bls.n	8001886 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001882:	23b0      	movs	r3, #176	; 0xb0
 8001884:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 0203 	bic.w	r2, r3, #3
 80018d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001962:	f023 020f 	bic.w	r2, r3, #15
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196e:	4313      	orrs	r3, r2
 8001970:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a64:	6013      	str	r3, [r2, #0]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a82:	d101      	bne.n	8001a88 <LL_RCC_PLL_IsReady+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_RCC_PLL_IsReady+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d101      	bne.n	8001b0e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b2e:	d101      	bne.n	8001b34 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d101      	bne.n	8001b5a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b78:	d101      	bne.n	8001b7e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b9c:	d101      	bne.n	8001ba2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b08d      	sub	sp, #52	; 0x34
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e37e      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8092 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd0:	f7ff fe89 	bl	80018e6 <LL_RCC_GetSysClkSource>
 8001bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd6:	f7ff ff82 	bl	8001ade <LL_RCC_PLL_GetMainSource>
 8001bda:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x3e>
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d14c      	bne.n	8001c82 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d149      	bne.n	8001c82 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bee:	f7ff fe17 	bl	8001820 <LL_RCC_MSI_IsReady>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_OscConfig+0x54>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e35d      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c08:	f7ff fe2f 	bl	800186a <LL_RCC_MSI_GetRange>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	429c      	cmp	r4, r3
 8001c10:	d914      	bls.n	8001c3c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fd44 	bl	80026a4 <RCC_SetFlashLatencyFromMSIRange>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e34c      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fe09 	bl	8001842 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fe2d 	bl	8001894 <LL_RCC_MSI_SetCalibTrimming>
 8001c3a:	e013      	b.n	8001c64 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fdfe 	bl	8001842 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe22 	bl	8001894 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fd25 	bl	80026a4 <RCC_SetFlashLatencyFromMSIRange>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e32d      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c64:	f000 fcde 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4ab3      	ldr	r2, [pc, #716]	; (8001f38 <HAL_RCC_OscConfig+0x388>)
 8001c6c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c6e:	4bb3      	ldr	r3, [pc, #716]	; (8001f3c <HAL_RCC_OscConfig+0x38c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f864 	bl	8000d40 <HAL_InitTick>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d039      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e31e      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01e      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c8a:	f7ff fdab 	bl	80017e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f8a5 	bl	8000ddc <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c96:	f7ff f8a1 	bl	8000ddc <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e30b      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ca8:	f7ff fdba 	bl	8001820 <LL_RCC_MSI_IsReady>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f1      	beq.n	8001c96 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fdc3 	bl	8001842 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fde7 	bl	8001894 <LL_RCC_MSI_SetCalibTrimming>
 8001cc6:	e015      	b.n	8001cf4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cc8:	f7ff fd9b 	bl	8001802 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f886 	bl	8000ddc <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f882 	bl	8000ddc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e2ec      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ce6:	f7ff fd9b 	bl	8001820 <LL_RCC_MSI_IsReady>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f1      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x124>
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d04e      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d00:	f7ff fdf1 	bl	80018e6 <LL_RCC_GetSysClkSource>
 8001d04:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d06:	f7ff feea 	bl	8001ade <LL_RCC_PLL_GetMainSource>
 8001d0a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x16e>
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d10a      	bne.n	8001d34 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1e:	f7ff fc01 	bl	8001524 <LL_RCC_HSE_IsReady>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d039      	beq.n	8001d9c <HAL_RCC_OscConfig+0x1ec>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d135      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e2c5      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_OscConfig+0x194>
 8001d3e:	f7ff fbd3 	bl	80014e8 <LL_RCC_HSE_Enable>
 8001d42:	e001      	b.n	8001d48 <HAL_RCC_OscConfig+0x198>
 8001d44:	f7ff fbdf 	bl	8001506 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d012      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f844 	bl	8000ddc <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f840 	bl	8000ddc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e2aa      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d6a:	f7ff fbdb 	bl	8001524 <LL_RCC_HSE_IsReady>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f1      	beq.n	8001d58 <HAL_RCC_OscConfig+0x1a8>
 8001d74:	e013      	b.n	8001d9e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f831 	bl	8000ddc <HAL_GetTick>
 8001d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff f82d 	bl	8000ddc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	; 0x64
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e297      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d90:	f7ff fbc8 	bl	8001524 <LL_RCC_HSE_IsReady>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f1      	bne.n	8001d7e <HAL_RCC_OscConfig+0x1ce>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d051      	beq.n	8001e4e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001daa:	f7ff fd9c 	bl	80018e6 <LL_RCC_GetSysClkSource>
 8001dae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db0:	f7ff fe95 	bl	8001ade <LL_RCC_PLL_GetMainSource>
 8001db4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x218>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d113      	bne.n	8001dea <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d110      	bne.n	8001dea <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	f7ff fbdc 	bl	8001584 <LL_RCC_HSI_IsReady>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x22e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e270      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fbe0 	bl	80015a8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de8:	e031      	b.n	8001e4e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d019      	beq.n	8001e26 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df2:	f7ff fba9 	bl	8001548 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7fe fff1 	bl	8000ddc <HAL_GetTick>
 8001dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7fe ffed 	bl	8000ddc <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e257      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e10:	f7ff fbb8 	bl	8001584 <LL_RCC_HSI_IsReady>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f1      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbc2 	bl	80015a8 <LL_RCC_HSI_SetCalibTrimming>
 8001e24:	e013      	b.n	8001e4e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	f7ff fb9e 	bl	8001566 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe ffd7 	bl	8000ddc <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7fe ffd3 	bl	8000ddc <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e23d      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e44:	f7ff fb9e 	bl	8001584 <LL_RCC_HSI_IsReady>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f1      	bne.n	8001e32 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80a3 	beq.w	8001fae <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d076      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d046      	beq.n	8001f0a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001e7c:	f7ff fc55 	bl	800172a <LL_RCC_LSI1_IsReady>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d113      	bne.n	8001eae <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001e86:	f7ff fc2e 	bl	80016e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e8a:	f7fe ffa7 	bl	8000ddc <HAL_GetTick>
 8001e8e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e92:	f7fe ffa3 	bl	8000ddc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e20d      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ea4:	f7ff fc41 	bl	800172a <LL_RCC_LSI1_IsReady>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f1      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001eae:	f7ff fc4e 	bl	800174e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe ff93 	bl	8000ddc <HAL_GetTick>
 8001eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001eba:	f7fe ff8f 	bl	8000ddc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1f9      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ecc:	f7ff fc61 	bl	8001792 <LL_RCC_LSI2_IsReady>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f1      	beq.n	8001eba <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fc6b 	bl	80017b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001ee0:	f7ff fc12 	bl	8001708 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff7a 	bl	8000ddc <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001eec:	f7fe ff76 	bl	8000ddc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1e0      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001efe:	f7ff fc14 	bl	800172a <LL_RCC_LSI1_IsReady>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f1      	bne.n	8001eec <HAL_RCC_OscConfig+0x33c>
 8001f08:	e051      	b.n	8001fae <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f0a:	f7ff fbec 	bl	80016e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7fe ff65 	bl	8000ddc <HAL_GetTick>
 8001f12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f16:	f7fe ff61 	bl	8000ddc <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1cb      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f28:	f7ff fbff 	bl	800172a <LL_RCC_LSI1_IsReady>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f1      	beq.n	8001f16 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001f32:	f7ff fc1d 	bl	8001770 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f36:	e00c      	b.n	8001f52 <HAL_RCC_OscConfig+0x3a2>
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f40:	f7fe ff4c 	bl	8000ddc <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1b6      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f52:	f7ff fc1e 	bl	8001792 <LL_RCC_LSI2_IsReady>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f1      	bne.n	8001f40 <HAL_RCC_OscConfig+0x390>
 8001f5c:	e027      	b.n	8001fae <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001f5e:	f7ff fc07 	bl	8001770 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7fe ff3b 	bl	8000ddc <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f6a:	f7fe ff37 	bl	8000ddc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1a1      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f7c:	f7ff fc09 	bl	8001792 <LL_RCC_LSI2_IsReady>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f1      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001f86:	f7ff fbbf 	bl	8001708 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7fe ff27 	bl	8000ddc <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f92:	f7fe ff23 	bl	8000ddc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e18d      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001fa4:	f7ff fbc1 	bl	800172a <LL_RCC_LSI1_IsReady>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f1      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d05b      	beq.n	8002072 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fba:	4bb5      	ldr	r3, [pc, #724]	; (8002290 <HAL_RCC_OscConfig+0x6e0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d114      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001fc6:	f7ff fa5f 	bl	8001488 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7fe ff07 	bl	8000ddc <HAL_GetTick>
 8001fce:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7fe ff03 	bl	8000ddc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e16d      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe4:	4baa      	ldr	r3, [pc, #680]	; (8002290 <HAL_RCC_OscConfig+0x6e0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <HAL_RCC_OscConfig+0x44e>
 8001ff8:	f7ff fb1f 	bl	800163a <LL_RCC_LSE_Enable>
 8001ffc:	e00c      	b.n	8002018 <HAL_RCC_OscConfig+0x468>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d104      	bne.n	8002010 <HAL_RCC_OscConfig+0x460>
 8002006:	f7ff fb3a 	bl	800167e <LL_RCC_LSE_EnableBypass>
 800200a:	f7ff fb16 	bl	800163a <LL_RCC_LSE_Enable>
 800200e:	e003      	b.n	8002018 <HAL_RCC_OscConfig+0x468>
 8002010:	f7ff fb24 	bl	800165c <LL_RCC_LSE_Disable>
 8002014:	f7ff fb44 	bl	80016a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d014      	beq.n	800204a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe fedc 	bl	8000ddc <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fed8 	bl	8000ddc <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e140      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800203e:	f7ff fb40 	bl	80016c2 <LL_RCC_LSE_IsReady>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ef      	beq.n	8002028 <HAL_RCC_OscConfig+0x478>
 8002048:	e013      	b.n	8002072 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204a:	f7fe fec7 	bl	8000ddc <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fec3 	bl	8000ddc <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e12b      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002068:	f7ff fb2b 	bl	80016c2 <LL_RCC_LSE_IsReady>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ef      	bne.n	8002052 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d02c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d014      	beq.n	80020b0 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002086:	f7ff faa4 	bl	80015d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7fe fea7 	bl	8000ddc <HAL_GetTick>
 800208e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002092:	f7fe fea3 	bl	8000ddc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e10d      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020a4:	f7ff fab7 	bl	8001616 <LL_RCC_HSI48_IsReady>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f1      	beq.n	8002092 <HAL_RCC_OscConfig+0x4e2>
 80020ae:	e013      	b.n	80020d8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020b0:	f7ff faa0 	bl	80015f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7fe fe92 	bl	8000ddc <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020bc:	f7fe fe8e 	bl	8000ddc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0f8      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020ce:	f7ff faa2 	bl	8001616 <LL_RCC_HSI48_IsReady>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f1      	bne.n	80020bc <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80ee 	beq.w	80022be <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e2:	f7ff fc00 	bl	80018e6 <LL_RCC_GetSysClkSource>
 80020e6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80020e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	f040 80af 	bne.w	8002258 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	429a      	cmp	r2, r3
 8002106:	d123      	bne.n	8002150 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d114      	bne.n	8002150 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d10d      	bne.n	8002150 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d05d      	beq.n	800220c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d058      	beq.n	8002208 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0ab      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002168:	f7ff fc73 	bl	8001a52 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800216c:	f7fe fe36 	bl	8000ddc <HAL_GetTick>
 8002170:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7fe fe32 	bl	8000ddc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e09c      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ef      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_RCC_OscConfig+0x6e4>)
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ac:	0212      	lsls	r2, r2, #8
 80021ae:	4311      	orrs	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b4:	4311      	orrs	r1, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021c0:	430a      	orrs	r2, r1
 80021c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021ca:	f7ff fc33 	bl	8001a34 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021de:	f7fe fdfd 	bl	8000ddc <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fdf9 	bl	8000ddc <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e063      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0ef      	beq.n	80021e6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002206:	e05a      	b.n	80022be <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e059      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d151      	bne.n	80022be <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800221a:	f7ff fc0b 	bl	8001a34 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800222e:	f7fe fdd5 	bl	8000ddc <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe fdd1 	bl	8000ddc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e03b      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ef      	beq.n	8002236 <HAL_RCC_OscConfig+0x686>
 8002256:	e032      	b.n	80022be <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d02d      	beq.n	80022ba <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	f7ff fbf8 	bl	8001a52 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226c:	f023 0303 	bic.w	r3, r3, #3
 8002270:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800227c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002284:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7fe fda9 	bl	8000ddc <HAL_GetTick>
 800228a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228c:	e00d      	b.n	80022aa <HAL_RCC_OscConfig+0x6fa>
 800228e:	bf00      	nop
 8002290:	58000400 	.word	0x58000400
 8002294:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fda0 	bl	8000ddc <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ef      	bne.n	8002298 <HAL_RCC_OscConfig+0x6e8>
 80022b8:	e001      	b.n	80022be <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3734      	adds	r7, #52	; 0x34
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e12d      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b98      	ldr	r3, [pc, #608]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d91b      	bls.n	8002322 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b95      	ldr	r3, [pc, #596]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4993      	ldr	r1, [pc, #588]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fa:	f7fe fd6f 	bl	8000ddc <HAL_GetTick>
 80022fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002300:	e008      	b.n	8002314 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002302:	f7fe fd6b 	bl	8000ddc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e111      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002314:	4b8a      	ldr	r3, [pc, #552]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d1ef      	bne.n	8002302 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fae3 	bl	80018fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002338:	f7fe fd50 	bl	8000ddc <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002340:	f7fe fd4c 	bl	8000ddc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0f2      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002352:	f7ff fbd0 	bl	8001af6 <LL_RCC_IsActiveFlag_HPRE>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f1      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d016      	beq.n	8002396 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fada 	bl	8001926 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002372:	f7fe fd33 	bl	8000ddc <HAL_GetTick>
 8002376:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800237a:	f7fe fd2f 	bl	8000ddc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0d5      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800238c:	f7ff fbc5 	bl	8001b1a <LL_RCC_IsActiveFlag_C2HPRE>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f1      	beq.n	800237a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fad3 	bl	8001952 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fd16 	bl	8000ddc <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023b4:	f7fe fd12 	bl	8000ddc <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0b8      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023c6:	f7ff fbbb 	bl	8001b40 <LL_RCC_IsActiveFlag_SHDHPRE>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f1      	beq.n	80023b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff facd 	bl	8001980 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fcf9 	bl	8000ddc <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ee:	f7fe fcf5 	bl	8000ddc <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e09b      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002400:	f7ff fbb1 	bl	8001b66 <LL_RCC_IsActiveFlag_PPRE1>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f1      	beq.n	80023ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fac3 	bl	80019a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002422:	f7fe fcdb 	bl	8000ddc <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800242a:	f7fe fcd7 	bl	8000ddc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e07d      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800243c:	f7ff fba5 	bl	8001b8a <LL_RCC_IsActiveFlag_PPRE2>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f1      	beq.n	800242a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d043      	beq.n	80024da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d106      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800245a:	f7ff f863 	bl	8001524 <LL_RCC_HSE_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11e      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e067      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d106      	bne.n	800247e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002470:	f7ff fafe 	bl	8001a70 <LL_RCC_PLL_IsReady>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e05c      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002486:	f7ff f9cb 	bl	8001820 <LL_RCC_MSI_IsReady>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d108      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e051      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002494:	f7ff f876 	bl	8001584 <LL_RCC_HSI_IsReady>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e04a      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fa09 	bl	80018be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ac:	f7fe fc96 	bl	8000ddc <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7fe fc92 	bl	8000ddc <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e036      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	f7ff fa0c 	bl	80018e6 <LL_RCC_GetSysClkSource>
 80024ce:	4602      	mov	r2, r0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d1ec      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d21b      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	4913      	ldr	r1, [pc, #76]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fc70 	bl	8000ddc <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002500:	f7fe fc6c 	bl	8000ddc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e012      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d1ef      	bne.n	8002500 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002520:	f000 f880 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002524:	4603      	mov	r3, r0
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_RCC_ClockConfig+0x27c>)
 8002528:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800252a:	f7fe fc63 	bl	8000df4 <HAL_GetTickPrio>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fc05 	bl	8000d40 <HAL_InitTick>
 8002536:	4603      	mov	r3, r0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	58004000 	.word	0x58004000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254e:	f7ff f9ca 	bl	80018e6 <LL_RCC_GetSysClkSource>
 8002552:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800255a:	f7ff f986 	bl	800186a <LL_RCC_MSI_GetRange>
 800255e:	4603      	mov	r3, r0
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e04b      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b04      	cmp	r3, #4
 8002574:	d102      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e045      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d10a      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002582:	f7fe ff9f 	bl	80014c4 <LL_RCC_HSE_IsEnabledDiv2>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e03a      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e037      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002598:	f7ff faa1 	bl	8001ade <LL_RCC_PLL_GetMainSource>
 800259c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x64>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80025aa:	e00d      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025ae:	60bb      	str	r3, [r7, #8]
        break;
 80025b0:	e015      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025b2:	f7fe ff87 	bl	80014c4 <LL_RCC_HSE_IsEnabledDiv2>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 80025be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025c0:	e00d      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_RCC_GetSysClockFreq+0xd8>)
 80025c4:	60bb      	str	r3, [r7, #8]
        break;
 80025c6:	e00a      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025c8:	f7ff f94f 	bl	800186a <LL_RCC_MSI_GetRange>
 80025cc:	4603      	mov	r3, r0
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	60bb      	str	r3, [r7, #8]
        break;
 80025dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80025de:	f7ff fa59 	bl	8001a94 <LL_RCC_PLL_GetN>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	fb03 f402 	mul.w	r4, r3, r2
 80025ea:	f7ff fa6c 	bl	8001ac6 <LL_RCC_PLL_GetDivider>
 80025ee:	4603      	mov	r3, r0
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	3301      	adds	r3, #1
 80025f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80025f8:	f7ff fa59 	bl	8001aae <LL_RCC_PLL_GetR>
 80025fc:	4603      	mov	r3, r0
 80025fe:	0f5b      	lsrs	r3, r3, #29
 8002600:	3301      	adds	r3, #1
 8002602:	fbb4 f3f3 	udiv	r3, r4, r3
 8002606:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop
 8002614:	080055b0 	.word	0x080055b0
 8002618:	00f42400 	.word	0x00f42400
 800261c:	003d0900 	.word	0x003d0900
 8002620:	007a1200 	.word	0x007a1200

08002624 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b598      	push	{r3, r4, r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002628:	f7ff ff8e 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 800262c:	4604      	mov	r4, r0
 800262e:	f7ff f9cf 	bl	80019d0 <LL_RCC_GetAHBPrescaler>
 8002632:	4603      	mov	r3, r0
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a03      	ldr	r2, [pc, #12]	; (8002648 <HAL_RCC_GetHCLKFreq+0x24>)
 800263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002640:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd98      	pop	{r3, r4, r7, pc}
 8002648:	08005550 	.word	0x08005550

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b598      	push	{r3, r4, r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002650:	f7ff ffe8 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002654:	4604      	mov	r4, r0
 8002656:	f7ff f9d5 	bl	8001a04 <LL_RCC_GetAPB1Prescaler>
 800265a:	4603      	mov	r3, r0
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd98      	pop	{r3, r4, r7, pc}
 8002674:	08005590 	.word	0x08005590

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b598      	push	{r3, r4, r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800267c:	f7ff ffd2 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002680:	4604      	mov	r4, r0
 8002682:	f7ff f9cb 	bl	8001a1c <LL_RCC_GetAPB2Prescaler>
 8002686:	4603      	mov	r3, r0
 8002688:	0adb      	lsrs	r3, r3, #11
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	fa24 f303 	lsr.w	r3, r4, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd98      	pop	{r3, r4, r7, pc}
 80026a0:	08005590 	.word	0x08005590

080026a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2bb0      	cmp	r3, #176	; 0xb0
 80026b0:	d903      	bls.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e007      	b.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80026ca:	f7ff f98d 	bl	80019e8 <LL_RCC_GetAHB4Prescaler>
 80026ce:	4603      	mov	r3, r0
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	4a0d      	ldr	r2, [pc, #52]	; (800270c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9c      	lsrs	r4, r3, #18
 80026ee:	f7fe fedb 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4619      	mov	r1, r3
 80026f6:	4620      	mov	r0, r4
 80026f8:	f000 f80c 	bl	8002714 <RCC_SetFlashLatency>
 80026fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	080055b0 	.word	0x080055b0
 800270c:	08005550 	.word	0x08005550
 8002710:	431bde83 	.word	0x431bde83

08002714 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b093      	sub	sp, #76	; 0x4c
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <RCC_SetFlashLatency+0xf0>)
 8002720:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <RCC_SetFlashLatency+0xf4>)
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	ca07      	ldmia	r2, {r0, r1, r2}
 8002732:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002736:	4b35      	ldr	r3, [pc, #212]	; (800280c <RCC_SetFlashLatency+0xf8>)
 8002738:	f107 040c 	add.w	r4, r7, #12
 800273c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002742:	2300      	movs	r3, #0
 8002744:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274c:	d11c      	bne.n	8002788 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800274e:	2300      	movs	r3, #0
 8002750:	643b      	str	r3, [r7, #64]	; 0x40
 8002752:	e015      	b.n	8002780 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800275c:	4413      	add	r3, r2
 800275e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d808      	bhi.n	800277a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002770:	4413      	add	r3, r2
 8002772:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002776:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002778:	e022      	b.n	80027c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800277a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277c:	3301      	adds	r3, #1
 800277e:	643b      	str	r3, [r7, #64]	; 0x40
 8002780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002782:	2b03      	cmp	r3, #3
 8002784:	d9e6      	bls.n	8002754 <RCC_SetFlashLatency+0x40>
 8002786:	e01b      	b.n	80027c0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002788:	2300      	movs	r3, #0
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278c:	e015      	b.n	80027ba <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800278e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002796:	4413      	add	r3, r2
 8002798:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d808      	bhi.n	80027b4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027aa:	4413      	add	r3, r2
 80027ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027b2:	e005      	b.n	80027c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b6:	3301      	adds	r3, #1
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d9e6      	bls.n	800278e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <RCC_SetFlashLatency+0xfc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 0207 	bic.w	r2, r3, #7
 80027c8:	4911      	ldr	r1, [pc, #68]	; (8002810 <RCC_SetFlashLatency+0xfc>)
 80027ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027d0:	f7fe fb04 	bl	8000ddc <HAL_GetTick>
 80027d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027d6:	e008      	b.n	80027ea <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027d8:	f7fe fb00 	bl	8000ddc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e007      	b.n	80027fa <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <RCC_SetFlashLatency+0xfc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1ef      	bne.n	80027d8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	374c      	adds	r7, #76	; 0x4c
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	bf00      	nop
 8002804:	08005524 	.word	0x08005524
 8002808:	08005534 	.word	0x08005534
 800280c:	08005540 	.word	0x08005540
 8002810:	58004000 	.word	0x58004000

08002814 <LL_RCC_LSE_IsEnabled>:
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <LL_RCC_LSE_IsEnabled+0x18>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <LL_RCC_LSE_IsEnabled+0x1a>
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_RCC_LSE_IsReady>:
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b02      	cmp	r3, #2
 800284a:	d101      	bne.n	8002850 <LL_RCC_LSE_IsReady+0x18>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <LL_RCC_LSE_IsReady+0x1a>
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_RCC_SetRFWKPClockSource>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002870:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_RCC_SetSMPSClockSource>:
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f023 0203 	bic.w	r2, r3, #3
 800289a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_SetSMPSPrescaler>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_SetUSARTClockSource>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f023 0203 	bic.w	r2, r3, #3
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_RCC_SetLPUARTClockSource>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_RCC_SetI2CClockSource>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_RCC_SetLPTIMClockSource>:
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	041b      	lsls	r3, r3, #16
 8002988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_SetSAIClockSource>:
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_RCC_SetRNGClockSource>:
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_SetCLK48ClockSource>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_SetUSBClockSource>:
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffe3 	bl	80029f6 <LL_RCC_SetCLK48ClockSource>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <LL_RCC_SetADCClockSource>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_RCC_SetRTCClockSource>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_GetRTCClockSource>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_ForceBackupDomainReset>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_RCC_ReleaseBackupDomainReset>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_RCC_PLLSAI1_Enable>:
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b00:	6013      	str	r3, [r2, #0]
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_RCC_PLLSAI1_Disable>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_PLLSAI1_IsReady>:
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3c:	d101      	bne.n	8002b42 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b088      	sub	sp, #32
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b56:	2300      	movs	r3, #0
 8002b58:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d034      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b72:	d021      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002b74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b78:	d81b      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7e:	d01d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b84:	d815      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8e:	d110      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ba0:	e00d      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f947 	bl	8002e3a <RCCEx_PLLSAI1_ConfigNP>
 8002bac:	4603      	mov	r3, r0
 8002bae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bb0:	e005      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	77fb      	strb	r3, [r7, #31]
        break;
 8002bb6:	e002      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fee8 	bl	800299e <LL_RCC_SetSAIClockSource>
 8002bce:	e001      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
 8002bd2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d046      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002be0:	f7ff ff56 	bl	8002a90 <LL_RCC_GetRTCClockSource>
 8002be4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d03c      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002bf0:	f7fe fc4a 	bl	8001488 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff30 	bl	8002a64 <LL_RCC_SetRTCClockSource>
 8002c04:	e02e      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002c10:	f7ff ff4b 	bl	8002aaa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002c14:	f7ff ff5a 	bl	8002acc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002c30:	f7ff fdf0 	bl	8002814 <LL_RCC_LSE_IsEnabled>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d114      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c3a:	f7fe f8cf 	bl	8000ddc <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c40:	e00b      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe f8cb 	bl	8000ddc <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d902      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	77fb      	strb	r3, [r7, #31]
              break;
 8002c58:	e004      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c5a:	f7ff fded 	bl	8002838 <LL_RCC_LSE_IsReady>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d1ee      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c64:	7ffb      	ldrb	r3, [r7, #31]
 8002c66:	77bb      	strb	r3, [r7, #30]
 8002c68:	e001      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
 8002c6c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fe2a 	bl	80028d8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fe35 	bl	8002904 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fe5d 	bl	800296a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fe52 	bl	800296a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fe2a 	bl	8002930 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe1f 	bl	8002930 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d022      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fe8d 	bl	8002a22 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d10:	d107      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d20:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f8dd 	bl	8002ef0 <RCCEx_PLLSAI1_ConfigNQ>
 8002d36:	4603      	mov	r3, r0
 8002d38:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002d3a:	7ffb      	ldrb	r3, [r7, #31]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d62:	d003      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fe2a 	bl	80029ca <LL_RCC_SetRNGClockSource>
 8002d76:	e00a      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff fe21 	bl	80029ca <LL_RCC_SetRNGClockSource>
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fe34 	bl	80029f6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d96:	d107      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d022      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fe3d 	bl	8002a38 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f8dd 	bl	8002fa6 <RCCEx_PLLSAI1_ConfigNR>
 8002dec:	4603      	mov	r3, r0
 8002dee:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002df0:	7ffb      	ldrb	r3, [r7, #31]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8002df6:	7ffb      	ldrb	r3, [r7, #31]
 8002df8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fd26 	bl	800285c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fd45 	bl	80028b0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fd2c 	bl	8002888 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002e30:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e46:	f7ff fe61 	bl	8002b0c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e4a:	f7fd ffc7 	bl	8000ddc <HAL_GetTick>
 8002e4e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e50:	e009      	b.n	8002e66 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e52:	f7fd ffc3 	bl	8000ddc <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d902      	bls.n	8002e66 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e004      	b.n	8002e70 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e66:	f7ff fe60 	bl	8002b2a <LL_RCC_PLLSAI1_IsReady>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d137      	bne.n	8002ee6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002ea4:	f7ff fe23 	bl	8002aee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fd ff98 	bl	8000ddc <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002eae:	e009      	b.n	8002ec4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eb0:	f7fd ff94 	bl	8000ddc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d902      	bls.n	8002ec4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ec2:	e004      	b.n	8002ece <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ec4:	f7ff fe31 	bl	8002b2a <LL_RCC_PLLSAI1_IsReady>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d1f0      	bne.n	8002eb0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d108      	bne.n	8002ee6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002efc:	f7ff fe06 	bl	8002b0c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f00:	f7fd ff6c 	bl	8000ddc <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f06:	e009      	b.n	8002f1c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f08:	f7fd ff68 	bl	8000ddc <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d902      	bls.n	8002f1c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1a:	e004      	b.n	8002f26 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f1c:	f7ff fe05 	bl	8002b2a <LL_RCC_PLLSAI1_IsReady>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d137      	bne.n	8002f9c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f40:	4313      	orrs	r3, r2
 8002f42:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f5a:	f7ff fdc8 	bl	8002aee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5e:	f7fd ff3d 	bl	8000ddc <HAL_GetTick>
 8002f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f64:	e009      	b.n	8002f7a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f66:	f7fd ff39 	bl	8000ddc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d902      	bls.n	8002f7a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	73fb      	strb	r3, [r7, #15]
        break;
 8002f78:	e004      	b.n	8002f84 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f7a:	f7ff fdd6 	bl	8002b2a <LL_RCC_PLLSAI1_IsReady>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d1f0      	bne.n	8002f66 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fb2:	f7ff fdab 	bl	8002b0c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fb6:	f7fd ff11 	bl	8000ddc <HAL_GetTick>
 8002fba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fbc:	e009      	b.n	8002fd2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fbe:	f7fd ff0d 	bl	8000ddc <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d902      	bls.n	8002fd2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e004      	b.n	8002fdc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fd2:	f7ff fdaa 	bl	8002b2a <LL_RCC_PLLSAI1_IsReady>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d137      	bne.n	8003052 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800300c:	4313      	orrs	r3, r2
 800300e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003010:	f7ff fd6d 	bl	8002aee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003014:	f7fd fee2 	bl	8000ddc <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800301a:	e009      	b.n	8003030 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800301c:	f7fd fede 	bl	8000ddc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	73fb      	strb	r3, [r7, #15]
        break;
 800302e:	e004      	b.n	800303a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003030:	f7ff fd7b 	bl	8002b2a <LL_RCC_PLLSAI1_IsReady>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d1f0      	bne.n	800301c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d108      	bne.n	8003052 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800304e:	4313      	orrs	r3, r2
 8003050:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e049      	b.n	8003102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fd32 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f000 f9cc 	bl	8003438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d001      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e036      	b.n	8003192 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_TIM_Base_Start_IT+0x94>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x44>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d115      	bne.n	800317c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b06      	cmp	r3, #6
 8003160:	d015      	beq.n	800318e <HAL_TIM_Base_Start_IT+0x82>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d011      	beq.n	800318e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	e008      	b.n	800318e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e000      	b.n	8003190 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	00010007 	.word	0x00010007

080031a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0202 	mvn.w	r2, #2
 80031d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f905 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8f7 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f908 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d122      	bne.n	8003258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d11b      	bne.n	8003258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0204 	mvn.w	r2, #4
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8db 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8cd 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8de 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b08      	cmp	r3, #8
 8003264:	d122      	bne.n	80032ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d11b      	bne.n	80032ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0208 	mvn.w	r2, #8
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8b1 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8a3 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8b4 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d122      	bne.n	8003300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0210 	mvn.w	r2, #16
 80032d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2208      	movs	r2, #8
 80032d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f887 	bl	80033fa <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f879 	bl	80033e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f88a 	bl	800340e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0201 	mvn.w	r2, #1
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fa34 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8de 	bl	8003514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003366:	d10e      	bne.n	8003386 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d107      	bne.n	8003386 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8d1 	bl	8003528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f838 	bl	8003422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d10e      	bne.n	80033de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d107      	bne.n	80033de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0220 	mvn.w	r2, #32
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f891 	bl	8003500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <TIM_Base_SetConfig+0xbc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_Base_SetConfig+0x20>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003456:	d108      	bne.n	800346a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <TIM_Base_SetConfig+0xbc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00b      	beq.n	800348a <TIM_Base_SetConfig+0x52>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003478:	d007      	beq.n	800348a <TIM_Base_SetConfig+0x52>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <TIM_Base_SetConfig+0xc0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_Base_SetConfig+0x52>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <TIM_Base_SetConfig+0xc4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d108      	bne.n	800349c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <TIM_Base_SetConfig+0xbc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <TIM_Base_SetConfig+0xa0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <TIM_Base_SetConfig+0xc0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0xa0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <TIM_Base_SetConfig+0xc4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	615a      	str	r2, [r3, #20]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800

08003500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_RCC_GetUSARTClockSource>:
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4013      	ands	r3, r2
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_RCC_GetLPUARTClockSource>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4013      	ands	r3, r2
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e042      	b.n	8003614 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fd fb3d 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2224      	movs	r2, #36	; 0x24
 80035aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fb16 	bl	8003bf0 <UART_SetConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fd10 	bl	8003ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fd97 	bl	8004140 <UART_CheckIdleState>
 8003612:	4603      	mov	r3, r0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003632:	2b20      	cmp	r3, #32
 8003634:	f040 8083 	bne.w	800373e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_UART_Transmit+0x28>
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e07b      	b.n	8003740 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_UART_Transmit+0x3a>
 8003652:	2302      	movs	r3, #2
 8003654:	e074      	b.n	8003740 <HAL_UART_Transmit+0x124>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366e:	f7fd fbb5 	bl	8000ddc <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368c:	d108      	bne.n	80036a0 <HAL_UART_Transmit+0x84>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	e003      	b.n	80036a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80036b0:	e02c      	b.n	800370c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fd8a 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e039      	b.n	8003740 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	3302      	adds	r3, #2
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	e007      	b.n	80036fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1cc      	bne.n	80036b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2200      	movs	r2, #0
 8003720:	2140      	movs	r1, #64	; 0x40
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fd57 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e006      	b.n	8003740 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	f640 030f 	movw	r3, #2063	; 0x80f
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d118      	bne.n	80037aa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d013      	beq.n	80037aa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 81fb 	beq.w	8003b96 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
      }
      return;
 80037a8:	e1f5      	b.n	8003b96 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80ef 	beq.w	8003990 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4b73      	ldr	r3, [pc, #460]	; (8003984 <HAL_UART_IRQHandler+0x23c>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4b72      	ldr	r3, [pc, #456]	; (8003988 <HAL_UART_IRQHandler+0x240>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80e4 	beq.w	8003990 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_UART_IRQHandler+0xac>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <HAL_UART_IRQHandler+0xd8>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2202      	movs	r2, #2
 800380e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003816:	f043 0204 	orr.w	r2, r3, #4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <HAL_UART_IRQHandler+0x104>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2204      	movs	r2, #4
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003842:	f043 0202 	orr.w	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d015      	beq.n	8003882 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_UART_IRQHandler+0x23c>)
 8003864:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2208      	movs	r2, #8
 8003870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003878:	f043 0208 	orr.w	r2, r3, #8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003888:	2b00      	cmp	r3, #0
 800388a:	d011      	beq.n	80038b0 <HAL_UART_IRQHandler+0x168>
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800389e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 816f 	beq.w	8003b9a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d004      	beq.n	800390a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003906:	2b00      	cmp	r3, #0
 8003908:	d031      	beq.n	800396e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fce3 	bl	80042d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d123      	bne.n	8003966 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d013      	beq.n	800395e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_UART_IRQHandler+0x244>)
 800393c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fbd0 	bl	80010e8 <HAL_DMA_Abort_IT>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d017      	beq.n	800397e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003958:	4610      	mov	r0, r2
 800395a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	e00f      	b.n	800397e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f930 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e00b      	b.n	800397e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f92c 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e007      	b.n	800397e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f928 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800397c:	e10d      	b.n	8003b9a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397e:	bf00      	nop
    return;
 8003980:	e10b      	b.n	8003b9a <HAL_UART_IRQHandler+0x452>
 8003982:	bf00      	nop
 8003984:	10000001 	.word	0x10000001
 8003988:	04000120 	.word	0x04000120
 800398c:	0800433b 	.word	0x0800433b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 80ab 	bne.w	8003af0 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a5 	beq.w	8003af0 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 809f 	beq.w	8003af0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2210      	movs	r2, #16
 80039b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d155      	bne.n	8003a74 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80039d2:	893b      	ldrh	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80e2 	beq.w	8003b9e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039e0:	893a      	ldrh	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	f080 80db 	bcs.w	8003b9e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	893a      	ldrh	r2, [r7, #8]
 80039ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d12b      	bne.n	8003a58 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0210 	bic.w	r2, r2, #16
 8003a4c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fae9 	bl	800102a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8b3 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a72:	e094      	b.n	8003b9e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8087 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8003a94:	897b      	ldrh	r3, [r7, #10]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8083 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0210 	bic.w	r2, r2, #16
 8003ae2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae4:	897b      	ldrh	r3, [r7, #10]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f875 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003aee:	e058      	b.n	8003ba2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <HAL_UART_IRQHandler+0x3ce>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fc43 	bl	800439a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b14:	e048      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d034      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
    }
    return;
 8003b44:	e02f      	b.n	8003ba6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_UART_IRQHandler+0x41a>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fc03 	bl	8004366 <UART_EndTransmit_IT>
    return;
 8003b60:	e022      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_UART_IRQHandler+0x436>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fc23 	bl	80043c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b7c:	e014      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00f      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x460>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da0c      	bge.n	8003ba8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fc0d 	bl	80043ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b94:	e008      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
      return;
 8003b96:	bf00      	nop
 8003b98:	e006      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
    return;
 8003b9a:	bf00      	nop
 8003b9c:	e004      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
      return;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
      return;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_IRQHandler+0x460>
    return;
 8003ba6:	bf00      	nop
  }
}
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop

08003bb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b5b0      	push	{r4, r5, r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4ba3      	ldr	r3, [pc, #652]	; (8003ea8 <UART_SetConfig+0x2b8>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	69f9      	ldr	r1, [r7, #28]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a98      	ldr	r2, [pc, #608]	; (8003eac <UART_SetConfig+0x2bc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f023 010f 	bic.w	r1, r3, #15
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a89      	ldr	r2, [pc, #548]	; (8003eb0 <UART_SetConfig+0x2c0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d120      	bne.n	8003cd2 <UART_SetConfig+0xe2>
 8003c90:	2003      	movs	r0, #3
 8003c92:	f7ff fc53 	bl	800353c <LL_RCC_GetUSARTClockSource>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d817      	bhi.n	8003ccc <UART_SetConfig+0xdc>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0xb4>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cc1 	.word	0x08003cc1
 8003cac:	08003cbb 	.word	0x08003cbb
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	76fb      	strb	r3, [r7, #27]
 8003cb8:	e038      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	76fb      	strb	r3, [r7, #27]
 8003cbe:	e035      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	76fb      	strb	r3, [r7, #27]
 8003cc4:	e032      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	76fb      	strb	r3, [r7, #27]
 8003cca:	e02f      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	76fb      	strb	r3, [r7, #27]
 8003cd0:	e02c      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a75      	ldr	r2, [pc, #468]	; (8003eac <UART_SetConfig+0x2bc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d125      	bne.n	8003d28 <UART_SetConfig+0x138>
 8003cdc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003ce0:	f7ff fc3c 	bl	800355c <LL_RCC_GetLPUARTClockSource>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cea:	d017      	beq.n	8003d1c <UART_SetConfig+0x12c>
 8003cec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cf0:	d817      	bhi.n	8003d22 <UART_SetConfig+0x132>
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf6:	d00b      	beq.n	8003d10 <UART_SetConfig+0x120>
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfc:	d811      	bhi.n	8003d22 <UART_SetConfig+0x132>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <UART_SetConfig+0x11a>
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d006      	beq.n	8003d16 <UART_SetConfig+0x126>
 8003d08:	e00b      	b.n	8003d22 <UART_SetConfig+0x132>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	76fb      	strb	r3, [r7, #27]
 8003d0e:	e00d      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	76fb      	strb	r3, [r7, #27]
 8003d14:	e00a      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003d16:	2304      	movs	r3, #4
 8003d18:	76fb      	strb	r3, [r7, #27]
 8003d1a:	e007      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	76fb      	strb	r3, [r7, #27]
 8003d20:	e004      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003d22:	2310      	movs	r3, #16
 8003d24:	76fb      	strb	r3, [r7, #27]
 8003d26:	e001      	b.n	8003d2c <UART_SetConfig+0x13c>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a5e      	ldr	r2, [pc, #376]	; (8003eac <UART_SetConfig+0x2bc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f040 808b 	bne.w	8003e4e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d38:	7efb      	ldrb	r3, [r7, #27]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d823      	bhi.n	8003d86 <UART_SetConfig+0x196>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0x154>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d87 	.word	0x08003d87
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d87 	.word	0x08003d87
 8003d54:	08003d77 	.word	0x08003d77
 8003d58:	08003d87 	.word	0x08003d87
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003d87 	.word	0x08003d87
 8003d64:	08003d7f 	.word	0x08003d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fe fc70 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8003d6c:	6178      	str	r0, [r7, #20]
        break;
 8003d6e:	e00f      	b.n	8003d90 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d70:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <UART_SetConfig+0x2c4>)
 8003d72:	617b      	str	r3, [r7, #20]
        break;
 8003d74:	e00c      	b.n	8003d90 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d76:	f7fe fbe7 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003d7a:	6178      	str	r0, [r7, #20]
        break;
 8003d7c:	e008      	b.n	8003d90 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	617b      	str	r3, [r7, #20]
        break;
 8003d84:	e004      	b.n	8003d90 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 811a 	beq.w	8003fcc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	4a46      	ldr	r2, [pc, #280]	; (8003eb8 <UART_SetConfig+0x2c8>)
 8003d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003da2:	461a      	mov	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d305      	bcc.n	8003dc8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	76bb      	strb	r3, [r7, #26]
 8003dcc:	e0fe      	b.n	8003fcc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <UART_SetConfig+0x2c8>)
 8003ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	f7fc fa1b 	bl	8000220 <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	020b      	lsls	r3, r1, #8
 8003dfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e00:	0202      	lsls	r2, r0, #8
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	6849      	ldr	r1, [r1, #4]
 8003e06:	0849      	lsrs	r1, r1, #1
 8003e08:	4608      	mov	r0, r1
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	1814      	adds	r4, r2, r0
 8003e10:	eb43 0501 	adc.w	r5, r3, r1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7fc f9fd 	bl	8000220 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e34:	d308      	bcc.n	8003e48 <UART_SetConfig+0x258>
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3c:	d204      	bcs.n	8003e48 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e0c1      	b.n	8003fcc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	76bb      	strb	r3, [r7, #26]
 8003e4c:	e0be      	b.n	8003fcc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e56:	d16a      	bne.n	8003f2e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003e58:	7efb      	ldrb	r3, [r7, #27]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	2b07      	cmp	r3, #7
 8003e5e:	d82d      	bhi.n	8003ebc <UART_SetConfig+0x2cc>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0x278>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e89 	.word	0x08003e89
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003ebd 	.word	0x08003ebd
 8003e74:	08003e97 	.word	0x08003e97
 8003e78:	08003ebd 	.word	0x08003ebd
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ebd 	.word	0x08003ebd
 8003e84:	08003e9f 	.word	0x08003e9f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e88:	f7fe fbf6 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8003e8c:	6178      	str	r0, [r7, #20]
        break;
 8003e8e:	e01a      	b.n	8003ec6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <UART_SetConfig+0x2c4>)
 8003e92:	617b      	str	r3, [r7, #20]
        break;
 8003e94:	e017      	b.n	8003ec6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e96:	f7fe fb57 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003e9a:	6178      	str	r0, [r7, #20]
        break;
 8003e9c:	e013      	b.n	8003ec6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ea2:	617b      	str	r3, [r7, #20]
        break;
 8003ea4:	e00f      	b.n	8003ec6 <UART_SetConfig+0x2d6>
 8003ea6:	bf00      	nop
 8003ea8:	cfff69f3 	.word	0xcfff69f3
 8003eac:	40008000 	.word	0x40008000
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	080055f0 	.word	0x080055f0
      default:
        pclk = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	76bb      	strb	r3, [r7, #26]
        break;
 8003ec4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d07f      	beq.n	8003fcc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	4a48      	ldr	r2, [pc, #288]	; (8003ff4 <UART_SetConfig+0x404>)
 8003ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ede:	005a      	lsls	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	441a      	add	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b0f      	cmp	r3, #15
 8003ef8:	d916      	bls.n	8003f28 <UART_SetConfig+0x338>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d212      	bcs.n	8003f28 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f023 030f 	bic.w	r3, r3, #15
 8003f0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	89fb      	ldrh	r3, [r7, #14]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	89fa      	ldrh	r2, [r7, #14]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e051      	b.n	8003fcc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	76bb      	strb	r3, [r7, #26]
 8003f2c:	e04e      	b.n	8003fcc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f2e:	7efb      	ldrb	r3, [r7, #27]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	2b07      	cmp	r3, #7
 8003f34:	d821      	bhi.n	8003f7a <UART_SetConfig+0x38a>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x34c>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f5d 	.word	0x08003f5d
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f6b 	.word	0x08003f6b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f7b 	.word	0x08003f7b
 8003f54:	08003f7b 	.word	0x08003f7b
 8003f58:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7fe fb8c 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8003f60:	6178      	str	r0, [r7, #20]
        break;
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <UART_SetConfig+0x408>)
 8003f66:	617b      	str	r3, [r7, #20]
        break;
 8003f68:	e00c      	b.n	8003f84 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe faed 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003f6e:	6178      	str	r0, [r7, #20]
        break;
 8003f70:	e008      	b.n	8003f84 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	617b      	str	r3, [r7, #20]
        break;
 8003f78:	e004      	b.n	8003f84 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	76bb      	strb	r3, [r7, #26]
        break;
 8003f82:	bf00      	nop
    }

    if (pclk != 0U)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d020      	beq.n	8003fcc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <UART_SetConfig+0x404>)
 8003f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f94:	461a      	mov	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	441a      	add	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	d908      	bls.n	8003fc8 <UART_SetConfig+0x3d8>
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d204      	bcs.n	8003fc8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	e001      	b.n	8003fcc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003fe8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	080055f0 	.word	0x080055f0
 8003ff8:	00f42400 	.word	0x00f42400

08003ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01a      	beq.n	8004112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fa:	d10a      	bne.n	8004112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af02      	add	r7, sp, #8
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004150:	f7fc fe44 	bl	8000ddc <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b08      	cmp	r3, #8
 8004162:	d10e      	bne.n	8004182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f82f 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e025      	b.n	80041ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d10e      	bne.n	80041ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f819 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e00f      	b.n	80041ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	e062      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ee:	d05e      	beq.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fc fdf4 	bl	8000ddc <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <UART_WaitOnFlagUntilTimeout+0x30>
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004214:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e045      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02e      	beq.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425e:	d126      	bne.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004268:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004278:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e00f      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d08d      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0210 	bic.w	r2, r2, #16
 8004318:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fc33 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fc0f 	bl	8003bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_UARTEx_DisableFifoMode+0x16>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e027      	b.n	800443c <HAL_UARTEx_DisableFifoMode+0x66>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800441a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800445c:	2302      	movs	r3, #2
 800445e:	e02d      	b.n	80044bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f84f 	bl	8004540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e02d      	b.n	8004538 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f811 	bl	8004540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454c:	2b00      	cmp	r3, #0
 800454e:	d108      	bne.n	8004562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004560:	e031      	b.n	80045c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004562:	2308      	movs	r3, #8
 8004564:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004566:	2308      	movs	r3, #8
 8004568:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	0e5b      	lsrs	r3, r3, #25
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	0f5b      	lsrs	r3, r3, #29
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800458a:	7bbb      	ldrb	r3, [r7, #14]
 800458c:	7b3a      	ldrb	r2, [r7, #12]
 800458e:	4911      	ldr	r1, [pc, #68]	; (80045d4 <UARTEx_SetNbDataToProcess+0x94>)
 8004590:	5c8a      	ldrb	r2, [r1, r2]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004596:	7b3a      	ldrb	r2, [r7, #12]
 8004598:	490f      	ldr	r1, [pc, #60]	; (80045d8 <UARTEx_SetNbDataToProcess+0x98>)
 800459a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800459c:	fb93 f3f2 	sdiv	r3, r3, r2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	7b7a      	ldrb	r2, [r7, #13]
 80045ac:	4909      	ldr	r1, [pc, #36]	; (80045d4 <UARTEx_SetNbDataToProcess+0x94>)
 80045ae:	5c8a      	ldrb	r2, [r1, r2]
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045b4:	7b7a      	ldrb	r2, [r7, #13]
 80045b6:	4908      	ldr	r1, [pc, #32]	; (80045d8 <UARTEx_SetNbDataToProcess+0x98>)
 80045b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	08005608 	.word	0x08005608
 80045d8:	08005610 	.word	0x08005610

080045dc <__errno>:
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <__errno+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000010 	.word	0x20000010

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4d0d      	ldr	r5, [pc, #52]	; (8004620 <__libc_init_array+0x38>)
 80045ec:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045ee:	1b64      	subs	r4, r4, r5
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	2600      	movs	r6, #0
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	4d0b      	ldr	r5, [pc, #44]	; (8004628 <__libc_init_array+0x40>)
 80045fa:	4c0c      	ldr	r4, [pc, #48]	; (800462c <__libc_init_array+0x44>)
 80045fc:	f000 ff76 	bl	80054ec <_init>
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	2600      	movs	r6, #0
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f855 3b04 	ldr.w	r3, [r5], #4
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	080056b8 	.word	0x080056b8
 8004624:	080056b8 	.word	0x080056b8
 8004628:	080056b8 	.word	0x080056b8
 800462c:	080056bc 	.word	0x080056bc

08004630 <memset>:
 8004630:	4402      	add	r2, r0
 8004632:	4603      	mov	r3, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	d100      	bne.n	800463a <memset+0xa>
 8004638:	4770      	bx	lr
 800463a:	f803 1b01 	strb.w	r1, [r3], #1
 800463e:	e7f9      	b.n	8004634 <memset+0x4>

08004640 <iprintf>:
 8004640:	b40f      	push	{r0, r1, r2, r3}
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <iprintf+0x2c>)
 8004644:	b513      	push	{r0, r1, r4, lr}
 8004646:	681c      	ldr	r4, [r3, #0]
 8004648:	b124      	cbz	r4, 8004654 <iprintf+0x14>
 800464a:	69a3      	ldr	r3, [r4, #24]
 800464c:	b913      	cbnz	r3, 8004654 <iprintf+0x14>
 800464e:	4620      	mov	r0, r4
 8004650:	f000 f866 	bl	8004720 <__sinit>
 8004654:	ab05      	add	r3, sp, #20
 8004656:	9a04      	ldr	r2, [sp, #16]
 8004658:	68a1      	ldr	r1, [r4, #8]
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	4620      	mov	r0, r4
 800465e:	f000 f983 	bl	8004968 <_vfiprintf_r>
 8004662:	b002      	add	sp, #8
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004668:	b004      	add	sp, #16
 800466a:	4770      	bx	lr
 800466c:	20000010 	.word	0x20000010

08004670 <std>:
 8004670:	2300      	movs	r3, #0
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	e9c0 3300 	strd	r3, r3, [r0]
 800467a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800467e:	6083      	str	r3, [r0, #8]
 8004680:	8181      	strh	r1, [r0, #12]
 8004682:	6643      	str	r3, [r0, #100]	; 0x64
 8004684:	81c2      	strh	r2, [r0, #14]
 8004686:	6183      	str	r3, [r0, #24]
 8004688:	4619      	mov	r1, r3
 800468a:	2208      	movs	r2, #8
 800468c:	305c      	adds	r0, #92	; 0x5c
 800468e:	f7ff ffcf 	bl	8004630 <memset>
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <std+0x38>)
 8004694:	6263      	str	r3, [r4, #36]	; 0x24
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <std+0x3c>)
 8004698:	62a3      	str	r3, [r4, #40]	; 0x28
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <std+0x40>)
 800469c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <std+0x44>)
 80046a0:	6224      	str	r4, [r4, #32]
 80046a2:	6323      	str	r3, [r4, #48]	; 0x30
 80046a4:	bd10      	pop	{r4, pc}
 80046a6:	bf00      	nop
 80046a8:	08004f11 	.word	0x08004f11
 80046ac:	08004f33 	.word	0x08004f33
 80046b0:	08004f6b 	.word	0x08004f6b
 80046b4:	08004f8f 	.word	0x08004f8f

080046b8 <_cleanup_r>:
 80046b8:	4901      	ldr	r1, [pc, #4]	; (80046c0 <_cleanup_r+0x8>)
 80046ba:	f000 b8af 	b.w	800481c <_fwalk_reent>
 80046be:	bf00      	nop
 80046c0:	08005269 	.word	0x08005269

080046c4 <__sfmoreglue>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	1e4a      	subs	r2, r1, #1
 80046c8:	2568      	movs	r5, #104	; 0x68
 80046ca:	4355      	muls	r5, r2
 80046cc:	460e      	mov	r6, r1
 80046ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046d2:	f000 f8c5 	bl	8004860 <_malloc_r>
 80046d6:	4604      	mov	r4, r0
 80046d8:	b140      	cbz	r0, 80046ec <__sfmoreglue+0x28>
 80046da:	2100      	movs	r1, #0
 80046dc:	e9c0 1600 	strd	r1, r6, [r0]
 80046e0:	300c      	adds	r0, #12
 80046e2:	60a0      	str	r0, [r4, #8]
 80046e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046e8:	f7ff ffa2 	bl	8004630 <memset>
 80046ec:	4620      	mov	r0, r4
 80046ee:	bd70      	pop	{r4, r5, r6, pc}

080046f0 <__sfp_lock_acquire>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__sfp_lock_acquire+0x8>)
 80046f2:	f000 b8b3 	b.w	800485c <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	20000184 	.word	0x20000184

080046fc <__sfp_lock_release>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__sfp_lock_release+0x8>)
 80046fe:	f000 b8ae 	b.w	800485e <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	20000184 	.word	0x20000184

08004708 <__sinit_lock_acquire>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__sinit_lock_acquire+0x8>)
 800470a:	f000 b8a7 	b.w	800485c <__retarget_lock_acquire_recursive>
 800470e:	bf00      	nop
 8004710:	2000017f 	.word	0x2000017f

08004714 <__sinit_lock_release>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__sinit_lock_release+0x8>)
 8004716:	f000 b8a2 	b.w	800485e <__retarget_lock_release_recursive>
 800471a:	bf00      	nop
 800471c:	2000017f 	.word	0x2000017f

08004720 <__sinit>:
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	f7ff fff0 	bl	8004708 <__sinit_lock_acquire>
 8004728:	69a3      	ldr	r3, [r4, #24]
 800472a:	b11b      	cbz	r3, 8004734 <__sinit+0x14>
 800472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004730:	f7ff bff0 	b.w	8004714 <__sinit_lock_release>
 8004734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004738:	6523      	str	r3, [r4, #80]	; 0x50
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <__sinit+0x68>)
 800473c:	4a13      	ldr	r2, [pc, #76]	; (800478c <__sinit+0x6c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	62a2      	str	r2, [r4, #40]	; 0x28
 8004742:	42a3      	cmp	r3, r4
 8004744:	bf04      	itt	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	61a3      	streq	r3, [r4, #24]
 800474a:	4620      	mov	r0, r4
 800474c:	f000 f820 	bl	8004790 <__sfp>
 8004750:	6060      	str	r0, [r4, #4]
 8004752:	4620      	mov	r0, r4
 8004754:	f000 f81c 	bl	8004790 <__sfp>
 8004758:	60a0      	str	r0, [r4, #8]
 800475a:	4620      	mov	r0, r4
 800475c:	f000 f818 	bl	8004790 <__sfp>
 8004760:	2200      	movs	r2, #0
 8004762:	60e0      	str	r0, [r4, #12]
 8004764:	2104      	movs	r1, #4
 8004766:	6860      	ldr	r0, [r4, #4]
 8004768:	f7ff ff82 	bl	8004670 <std>
 800476c:	68a0      	ldr	r0, [r4, #8]
 800476e:	2201      	movs	r2, #1
 8004770:	2109      	movs	r1, #9
 8004772:	f7ff ff7d 	bl	8004670 <std>
 8004776:	68e0      	ldr	r0, [r4, #12]
 8004778:	2202      	movs	r2, #2
 800477a:	2112      	movs	r1, #18
 800477c:	f7ff ff78 	bl	8004670 <std>
 8004780:	2301      	movs	r3, #1
 8004782:	61a3      	str	r3, [r4, #24]
 8004784:	e7d2      	b.n	800472c <__sinit+0xc>
 8004786:	bf00      	nop
 8004788:	08005618 	.word	0x08005618
 800478c:	080046b9 	.word	0x080046b9

08004790 <__sfp>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	4607      	mov	r7, r0
 8004794:	f7ff ffac 	bl	80046f0 <__sfp_lock_acquire>
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <__sfp+0x84>)
 800479a:	681e      	ldr	r6, [r3, #0]
 800479c:	69b3      	ldr	r3, [r6, #24]
 800479e:	b913      	cbnz	r3, 80047a6 <__sfp+0x16>
 80047a0:	4630      	mov	r0, r6
 80047a2:	f7ff ffbd 	bl	8004720 <__sinit>
 80047a6:	3648      	adds	r6, #72	; 0x48
 80047a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	d503      	bpl.n	80047b8 <__sfp+0x28>
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	b30b      	cbz	r3, 80047f8 <__sfp+0x68>
 80047b4:	6836      	ldr	r6, [r6, #0]
 80047b6:	e7f7      	b.n	80047a8 <__sfp+0x18>
 80047b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047bc:	b9d5      	cbnz	r5, 80047f4 <__sfp+0x64>
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <__sfp+0x88>)
 80047c0:	60e3      	str	r3, [r4, #12]
 80047c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047c6:	6665      	str	r5, [r4, #100]	; 0x64
 80047c8:	f000 f847 	bl	800485a <__retarget_lock_init_recursive>
 80047cc:	f7ff ff96 	bl	80046fc <__sfp_lock_release>
 80047d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047d8:	6025      	str	r5, [r4, #0]
 80047da:	61a5      	str	r5, [r4, #24]
 80047dc:	2208      	movs	r2, #8
 80047de:	4629      	mov	r1, r5
 80047e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047e4:	f7ff ff24 	bl	8004630 <memset>
 80047e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047f0:	4620      	mov	r0, r4
 80047f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f4:	3468      	adds	r4, #104	; 0x68
 80047f6:	e7d9      	b.n	80047ac <__sfp+0x1c>
 80047f8:	2104      	movs	r1, #4
 80047fa:	4638      	mov	r0, r7
 80047fc:	f7ff ff62 	bl	80046c4 <__sfmoreglue>
 8004800:	4604      	mov	r4, r0
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	2800      	cmp	r0, #0
 8004806:	d1d5      	bne.n	80047b4 <__sfp+0x24>
 8004808:	f7ff ff78 	bl	80046fc <__sfp_lock_release>
 800480c:	230c      	movs	r3, #12
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	e7ee      	b.n	80047f0 <__sfp+0x60>
 8004812:	bf00      	nop
 8004814:	08005618 	.word	0x08005618
 8004818:	ffff0001 	.word	0xffff0001

0800481c <_fwalk_reent>:
 800481c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004820:	4606      	mov	r6, r0
 8004822:	4688      	mov	r8, r1
 8004824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004828:	2700      	movs	r7, #0
 800482a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800482e:	f1b9 0901 	subs.w	r9, r9, #1
 8004832:	d505      	bpl.n	8004840 <_fwalk_reent+0x24>
 8004834:	6824      	ldr	r4, [r4, #0]
 8004836:	2c00      	cmp	r4, #0
 8004838:	d1f7      	bne.n	800482a <_fwalk_reent+0xe>
 800483a:	4638      	mov	r0, r7
 800483c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004840:	89ab      	ldrh	r3, [r5, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d907      	bls.n	8004856 <_fwalk_reent+0x3a>
 8004846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800484a:	3301      	adds	r3, #1
 800484c:	d003      	beq.n	8004856 <_fwalk_reent+0x3a>
 800484e:	4629      	mov	r1, r5
 8004850:	4630      	mov	r0, r6
 8004852:	47c0      	blx	r8
 8004854:	4307      	orrs	r7, r0
 8004856:	3568      	adds	r5, #104	; 0x68
 8004858:	e7e9      	b.n	800482e <_fwalk_reent+0x12>

0800485a <__retarget_lock_init_recursive>:
 800485a:	4770      	bx	lr

0800485c <__retarget_lock_acquire_recursive>:
 800485c:	4770      	bx	lr

0800485e <__retarget_lock_release_recursive>:
 800485e:	4770      	bx	lr

08004860 <_malloc_r>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	1ccd      	adds	r5, r1, #3
 8004864:	f025 0503 	bic.w	r5, r5, #3
 8004868:	3508      	adds	r5, #8
 800486a:	2d0c      	cmp	r5, #12
 800486c:	bf38      	it	cc
 800486e:	250c      	movcc	r5, #12
 8004870:	2d00      	cmp	r5, #0
 8004872:	4606      	mov	r6, r0
 8004874:	db01      	blt.n	800487a <_malloc_r+0x1a>
 8004876:	42a9      	cmp	r1, r5
 8004878:	d903      	bls.n	8004882 <_malloc_r+0x22>
 800487a:	230c      	movs	r3, #12
 800487c:	6033      	str	r3, [r6, #0]
 800487e:	2000      	movs	r0, #0
 8004880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004882:	f000 fda3 	bl	80053cc <__malloc_lock>
 8004886:	4921      	ldr	r1, [pc, #132]	; (800490c <_malloc_r+0xac>)
 8004888:	680a      	ldr	r2, [r1, #0]
 800488a:	4614      	mov	r4, r2
 800488c:	b99c      	cbnz	r4, 80048b6 <_malloc_r+0x56>
 800488e:	4f20      	ldr	r7, [pc, #128]	; (8004910 <_malloc_r+0xb0>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	b923      	cbnz	r3, 800489e <_malloc_r+0x3e>
 8004894:	4621      	mov	r1, r4
 8004896:	4630      	mov	r0, r6
 8004898:	f000 fb2a 	bl	8004ef0 <_sbrk_r>
 800489c:	6038      	str	r0, [r7, #0]
 800489e:	4629      	mov	r1, r5
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 fb25 	bl	8004ef0 <_sbrk_r>
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	d123      	bne.n	80048f2 <_malloc_r+0x92>
 80048aa:	230c      	movs	r3, #12
 80048ac:	6033      	str	r3, [r6, #0]
 80048ae:	4630      	mov	r0, r6
 80048b0:	f000 fd92 	bl	80053d8 <__malloc_unlock>
 80048b4:	e7e3      	b.n	800487e <_malloc_r+0x1e>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	1b5b      	subs	r3, r3, r5
 80048ba:	d417      	bmi.n	80048ec <_malloc_r+0x8c>
 80048bc:	2b0b      	cmp	r3, #11
 80048be:	d903      	bls.n	80048c8 <_malloc_r+0x68>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	441c      	add	r4, r3
 80048c4:	6025      	str	r5, [r4, #0]
 80048c6:	e004      	b.n	80048d2 <_malloc_r+0x72>
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	42a2      	cmp	r2, r4
 80048cc:	bf0c      	ite	eq
 80048ce:	600b      	streq	r3, [r1, #0]
 80048d0:	6053      	strne	r3, [r2, #4]
 80048d2:	4630      	mov	r0, r6
 80048d4:	f000 fd80 	bl	80053d8 <__malloc_unlock>
 80048d8:	f104 000b 	add.w	r0, r4, #11
 80048dc:	1d23      	adds	r3, r4, #4
 80048de:	f020 0007 	bic.w	r0, r0, #7
 80048e2:	1ac2      	subs	r2, r0, r3
 80048e4:	d0cc      	beq.n	8004880 <_malloc_r+0x20>
 80048e6:	1a1b      	subs	r3, r3, r0
 80048e8:	50a3      	str	r3, [r4, r2]
 80048ea:	e7c9      	b.n	8004880 <_malloc_r+0x20>
 80048ec:	4622      	mov	r2, r4
 80048ee:	6864      	ldr	r4, [r4, #4]
 80048f0:	e7cc      	b.n	800488c <_malloc_r+0x2c>
 80048f2:	1cc4      	adds	r4, r0, #3
 80048f4:	f024 0403 	bic.w	r4, r4, #3
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	d0e3      	beq.n	80048c4 <_malloc_r+0x64>
 80048fc:	1a21      	subs	r1, r4, r0
 80048fe:	4630      	mov	r0, r6
 8004900:	f000 faf6 	bl	8004ef0 <_sbrk_r>
 8004904:	3001      	adds	r0, #1
 8004906:	d1dd      	bne.n	80048c4 <_malloc_r+0x64>
 8004908:	e7cf      	b.n	80048aa <_malloc_r+0x4a>
 800490a:	bf00      	nop
 800490c:	20000094 	.word	0x20000094
 8004910:	20000098 	.word	0x20000098

08004914 <__sfputc_r>:
 8004914:	6893      	ldr	r3, [r2, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	b410      	push	{r4}
 800491c:	6093      	str	r3, [r2, #8]
 800491e:	da08      	bge.n	8004932 <__sfputc_r+0x1e>
 8004920:	6994      	ldr	r4, [r2, #24]
 8004922:	42a3      	cmp	r3, r4
 8004924:	db01      	blt.n	800492a <__sfputc_r+0x16>
 8004926:	290a      	cmp	r1, #10
 8004928:	d103      	bne.n	8004932 <__sfputc_r+0x1e>
 800492a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800492e:	f000 bb33 	b.w	8004f98 <__swbuf_r>
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	1c58      	adds	r0, r3, #1
 8004936:	6010      	str	r0, [r2, #0]
 8004938:	7019      	strb	r1, [r3, #0]
 800493a:	4608      	mov	r0, r1
 800493c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004940:	4770      	bx	lr

08004942 <__sfputs_r>:
 8004942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004944:	4606      	mov	r6, r0
 8004946:	460f      	mov	r7, r1
 8004948:	4614      	mov	r4, r2
 800494a:	18d5      	adds	r5, r2, r3
 800494c:	42ac      	cmp	r4, r5
 800494e:	d101      	bne.n	8004954 <__sfputs_r+0x12>
 8004950:	2000      	movs	r0, #0
 8004952:	e007      	b.n	8004964 <__sfputs_r+0x22>
 8004954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004958:	463a      	mov	r2, r7
 800495a:	4630      	mov	r0, r6
 800495c:	f7ff ffda 	bl	8004914 <__sfputc_r>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d1f3      	bne.n	800494c <__sfputs_r+0xa>
 8004964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004968 <_vfiprintf_r>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	460d      	mov	r5, r1
 800496e:	b09d      	sub	sp, #116	; 0x74
 8004970:	4614      	mov	r4, r2
 8004972:	4698      	mov	r8, r3
 8004974:	4606      	mov	r6, r0
 8004976:	b118      	cbz	r0, 8004980 <_vfiprintf_r+0x18>
 8004978:	6983      	ldr	r3, [r0, #24]
 800497a:	b90b      	cbnz	r3, 8004980 <_vfiprintf_r+0x18>
 800497c:	f7ff fed0 	bl	8004720 <__sinit>
 8004980:	4b89      	ldr	r3, [pc, #548]	; (8004ba8 <_vfiprintf_r+0x240>)
 8004982:	429d      	cmp	r5, r3
 8004984:	d11b      	bne.n	80049be <_vfiprintf_r+0x56>
 8004986:	6875      	ldr	r5, [r6, #4]
 8004988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800498a:	07d9      	lsls	r1, r3, #31
 800498c:	d405      	bmi.n	800499a <_vfiprintf_r+0x32>
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	059a      	lsls	r2, r3, #22
 8004992:	d402      	bmi.n	800499a <_vfiprintf_r+0x32>
 8004994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004996:	f7ff ff61 	bl	800485c <__retarget_lock_acquire_recursive>
 800499a:	89ab      	ldrh	r3, [r5, #12]
 800499c:	071b      	lsls	r3, r3, #28
 800499e:	d501      	bpl.n	80049a4 <_vfiprintf_r+0x3c>
 80049a0:	692b      	ldr	r3, [r5, #16]
 80049a2:	b9eb      	cbnz	r3, 80049e0 <_vfiprintf_r+0x78>
 80049a4:	4629      	mov	r1, r5
 80049a6:	4630      	mov	r0, r6
 80049a8:	f000 fb5a 	bl	8005060 <__swsetup_r>
 80049ac:	b1c0      	cbz	r0, 80049e0 <_vfiprintf_r+0x78>
 80049ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049b0:	07dc      	lsls	r4, r3, #31
 80049b2:	d50e      	bpl.n	80049d2 <_vfiprintf_r+0x6a>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b8:	b01d      	add	sp, #116	; 0x74
 80049ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049be:	4b7b      	ldr	r3, [pc, #492]	; (8004bac <_vfiprintf_r+0x244>)
 80049c0:	429d      	cmp	r5, r3
 80049c2:	d101      	bne.n	80049c8 <_vfiprintf_r+0x60>
 80049c4:	68b5      	ldr	r5, [r6, #8]
 80049c6:	e7df      	b.n	8004988 <_vfiprintf_r+0x20>
 80049c8:	4b79      	ldr	r3, [pc, #484]	; (8004bb0 <_vfiprintf_r+0x248>)
 80049ca:	429d      	cmp	r5, r3
 80049cc:	bf08      	it	eq
 80049ce:	68f5      	ldreq	r5, [r6, #12]
 80049d0:	e7da      	b.n	8004988 <_vfiprintf_r+0x20>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	0598      	lsls	r0, r3, #22
 80049d6:	d4ed      	bmi.n	80049b4 <_vfiprintf_r+0x4c>
 80049d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049da:	f7ff ff40 	bl	800485e <__retarget_lock_release_recursive>
 80049de:	e7e9      	b.n	80049b4 <_vfiprintf_r+0x4c>
 80049e0:	2300      	movs	r3, #0
 80049e2:	9309      	str	r3, [sp, #36]	; 0x24
 80049e4:	2320      	movs	r3, #32
 80049e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ee:	2330      	movs	r3, #48	; 0x30
 80049f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004bb4 <_vfiprintf_r+0x24c>
 80049f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049f8:	f04f 0901 	mov.w	r9, #1
 80049fc:	4623      	mov	r3, r4
 80049fe:	469a      	mov	sl, r3
 8004a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a04:	b10a      	cbz	r2, 8004a0a <_vfiprintf_r+0xa2>
 8004a06:	2a25      	cmp	r2, #37	; 0x25
 8004a08:	d1f9      	bne.n	80049fe <_vfiprintf_r+0x96>
 8004a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a0e:	d00b      	beq.n	8004a28 <_vfiprintf_r+0xc0>
 8004a10:	465b      	mov	r3, fp
 8004a12:	4622      	mov	r2, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	4630      	mov	r0, r6
 8004a18:	f7ff ff93 	bl	8004942 <__sfputs_r>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	f000 80aa 	beq.w	8004b76 <_vfiprintf_r+0x20e>
 8004a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a24:	445a      	add	r2, fp
 8004a26:	9209      	str	r2, [sp, #36]	; 0x24
 8004a28:	f89a 3000 	ldrb.w	r3, [sl]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80a2 	beq.w	8004b76 <_vfiprintf_r+0x20e>
 8004a32:	2300      	movs	r3, #0
 8004a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a3c:	f10a 0a01 	add.w	sl, sl, #1
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	9307      	str	r3, [sp, #28]
 8004a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a48:	931a      	str	r3, [sp, #104]	; 0x68
 8004a4a:	4654      	mov	r4, sl
 8004a4c:	2205      	movs	r2, #5
 8004a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a52:	4858      	ldr	r0, [pc, #352]	; (8004bb4 <_vfiprintf_r+0x24c>)
 8004a54:	f7fb fb94 	bl	8000180 <memchr>
 8004a58:	9a04      	ldr	r2, [sp, #16]
 8004a5a:	b9d8      	cbnz	r0, 8004a94 <_vfiprintf_r+0x12c>
 8004a5c:	06d1      	lsls	r1, r2, #27
 8004a5e:	bf44      	itt	mi
 8004a60:	2320      	movmi	r3, #32
 8004a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a66:	0713      	lsls	r3, r2, #28
 8004a68:	bf44      	itt	mi
 8004a6a:	232b      	movmi	r3, #43	; 0x2b
 8004a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a70:	f89a 3000 	ldrb.w	r3, [sl]
 8004a74:	2b2a      	cmp	r3, #42	; 0x2a
 8004a76:	d015      	beq.n	8004aa4 <_vfiprintf_r+0x13c>
 8004a78:	9a07      	ldr	r2, [sp, #28]
 8004a7a:	4654      	mov	r4, sl
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f04f 0c0a 	mov.w	ip, #10
 8004a82:	4621      	mov	r1, r4
 8004a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a88:	3b30      	subs	r3, #48	; 0x30
 8004a8a:	2b09      	cmp	r3, #9
 8004a8c:	d94e      	bls.n	8004b2c <_vfiprintf_r+0x1c4>
 8004a8e:	b1b0      	cbz	r0, 8004abe <_vfiprintf_r+0x156>
 8004a90:	9207      	str	r2, [sp, #28]
 8004a92:	e014      	b.n	8004abe <_vfiprintf_r+0x156>
 8004a94:	eba0 0308 	sub.w	r3, r0, r8
 8004a98:	fa09 f303 	lsl.w	r3, r9, r3
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	9304      	str	r3, [sp, #16]
 8004aa0:	46a2      	mov	sl, r4
 8004aa2:	e7d2      	b.n	8004a4a <_vfiprintf_r+0xe2>
 8004aa4:	9b03      	ldr	r3, [sp, #12]
 8004aa6:	1d19      	adds	r1, r3, #4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	9103      	str	r1, [sp, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bfbb      	ittet	lt
 8004ab0:	425b      	neglt	r3, r3
 8004ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8004ab6:	9307      	strge	r3, [sp, #28]
 8004ab8:	9307      	strlt	r3, [sp, #28]
 8004aba:	bfb8      	it	lt
 8004abc:	9204      	strlt	r2, [sp, #16]
 8004abe:	7823      	ldrb	r3, [r4, #0]
 8004ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac2:	d10c      	bne.n	8004ade <_vfiprintf_r+0x176>
 8004ac4:	7863      	ldrb	r3, [r4, #1]
 8004ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac8:	d135      	bne.n	8004b36 <_vfiprintf_r+0x1ce>
 8004aca:	9b03      	ldr	r3, [sp, #12]
 8004acc:	1d1a      	adds	r2, r3, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	9203      	str	r2, [sp, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfb8      	it	lt
 8004ad6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ada:	3402      	adds	r4, #2
 8004adc:	9305      	str	r3, [sp, #20]
 8004ade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bc4 <_vfiprintf_r+0x25c>
 8004ae2:	7821      	ldrb	r1, [r4, #0]
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	4650      	mov	r0, sl
 8004ae8:	f7fb fb4a 	bl	8000180 <memchr>
 8004aec:	b140      	cbz	r0, 8004b00 <_vfiprintf_r+0x198>
 8004aee:	2340      	movs	r3, #64	; 0x40
 8004af0:	eba0 000a 	sub.w	r0, r0, sl
 8004af4:	fa03 f000 	lsl.w	r0, r3, r0
 8004af8:	9b04      	ldr	r3, [sp, #16]
 8004afa:	4303      	orrs	r3, r0
 8004afc:	3401      	adds	r4, #1
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b04:	482c      	ldr	r0, [pc, #176]	; (8004bb8 <_vfiprintf_r+0x250>)
 8004b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b0a:	2206      	movs	r2, #6
 8004b0c:	f7fb fb38 	bl	8000180 <memchr>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d03f      	beq.n	8004b94 <_vfiprintf_r+0x22c>
 8004b14:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <_vfiprintf_r+0x254>)
 8004b16:	bb1b      	cbnz	r3, 8004b60 <_vfiprintf_r+0x1f8>
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	3307      	adds	r3, #7
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	3308      	adds	r3, #8
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	443b      	add	r3, r7
 8004b28:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2a:	e767      	b.n	80049fc <_vfiprintf_r+0x94>
 8004b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b30:	460c      	mov	r4, r1
 8004b32:	2001      	movs	r0, #1
 8004b34:	e7a5      	b.n	8004a82 <_vfiprintf_r+0x11a>
 8004b36:	2300      	movs	r3, #0
 8004b38:	3401      	adds	r4, #1
 8004b3a:	9305      	str	r3, [sp, #20]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f04f 0c0a 	mov.w	ip, #10
 8004b42:	4620      	mov	r0, r4
 8004b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b48:	3a30      	subs	r2, #48	; 0x30
 8004b4a:	2a09      	cmp	r2, #9
 8004b4c:	d903      	bls.n	8004b56 <_vfiprintf_r+0x1ee>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0c5      	beq.n	8004ade <_vfiprintf_r+0x176>
 8004b52:	9105      	str	r1, [sp, #20]
 8004b54:	e7c3      	b.n	8004ade <_vfiprintf_r+0x176>
 8004b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e7f0      	b.n	8004b42 <_vfiprintf_r+0x1da>
 8004b60:	ab03      	add	r3, sp, #12
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	462a      	mov	r2, r5
 8004b66:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <_vfiprintf_r+0x258>)
 8004b68:	a904      	add	r1, sp, #16
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f3af 8000 	nop.w
 8004b70:	4607      	mov	r7, r0
 8004b72:	1c78      	adds	r0, r7, #1
 8004b74:	d1d6      	bne.n	8004b24 <_vfiprintf_r+0x1bc>
 8004b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b78:	07d9      	lsls	r1, r3, #31
 8004b7a:	d405      	bmi.n	8004b88 <_vfiprintf_r+0x220>
 8004b7c:	89ab      	ldrh	r3, [r5, #12]
 8004b7e:	059a      	lsls	r2, r3, #22
 8004b80:	d402      	bmi.n	8004b88 <_vfiprintf_r+0x220>
 8004b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b84:	f7ff fe6b 	bl	800485e <__retarget_lock_release_recursive>
 8004b88:	89ab      	ldrh	r3, [r5, #12]
 8004b8a:	065b      	lsls	r3, r3, #25
 8004b8c:	f53f af12 	bmi.w	80049b4 <_vfiprintf_r+0x4c>
 8004b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b92:	e711      	b.n	80049b8 <_vfiprintf_r+0x50>
 8004b94:	ab03      	add	r3, sp, #12
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	462a      	mov	r2, r5
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <_vfiprintf_r+0x258>)
 8004b9c:	a904      	add	r1, sp, #16
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f000 f880 	bl	8004ca4 <_printf_i>
 8004ba4:	e7e4      	b.n	8004b70 <_vfiprintf_r+0x208>
 8004ba6:	bf00      	nop
 8004ba8:	0800563c 	.word	0x0800563c
 8004bac:	0800565c 	.word	0x0800565c
 8004bb0:	0800561c 	.word	0x0800561c
 8004bb4:	0800567c 	.word	0x0800567c
 8004bb8:	08005686 	.word	0x08005686
 8004bbc:	00000000 	.word	0x00000000
 8004bc0:	08004943 	.word	0x08004943
 8004bc4:	08005682 	.word	0x08005682

08004bc8 <_printf_common>:
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	4616      	mov	r6, r2
 8004bce:	4699      	mov	r9, r3
 8004bd0:	688a      	ldr	r2, [r1, #8]
 8004bd2:	690b      	ldr	r3, [r1, #16]
 8004bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	bfb8      	it	lt
 8004bdc:	4613      	movlt	r3, r2
 8004bde:	6033      	str	r3, [r6, #0]
 8004be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004be4:	4607      	mov	r7, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	b10a      	cbz	r2, 8004bee <_printf_common+0x26>
 8004bea:	3301      	adds	r3, #1
 8004bec:	6033      	str	r3, [r6, #0]
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	0699      	lsls	r1, r3, #26
 8004bf2:	bf42      	ittt	mi
 8004bf4:	6833      	ldrmi	r3, [r6, #0]
 8004bf6:	3302      	addmi	r3, #2
 8004bf8:	6033      	strmi	r3, [r6, #0]
 8004bfa:	6825      	ldr	r5, [r4, #0]
 8004bfc:	f015 0506 	ands.w	r5, r5, #6
 8004c00:	d106      	bne.n	8004c10 <_printf_common+0x48>
 8004c02:	f104 0a19 	add.w	sl, r4, #25
 8004c06:	68e3      	ldr	r3, [r4, #12]
 8004c08:	6832      	ldr	r2, [r6, #0]
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	dc26      	bgt.n	8004c5e <_printf_common+0x96>
 8004c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c14:	1e13      	subs	r3, r2, #0
 8004c16:	6822      	ldr	r2, [r4, #0]
 8004c18:	bf18      	it	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	0692      	lsls	r2, r2, #26
 8004c1e:	d42b      	bmi.n	8004c78 <_printf_common+0xb0>
 8004c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c24:	4649      	mov	r1, r9
 8004c26:	4638      	mov	r0, r7
 8004c28:	47c0      	blx	r8
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d01e      	beq.n	8004c6c <_printf_common+0xa4>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	68e5      	ldr	r5, [r4, #12]
 8004c32:	6832      	ldr	r2, [r6, #0]
 8004c34:	f003 0306 	and.w	r3, r3, #6
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	bf08      	it	eq
 8004c3c:	1aad      	subeq	r5, r5, r2
 8004c3e:	68a3      	ldr	r3, [r4, #8]
 8004c40:	6922      	ldr	r2, [r4, #16]
 8004c42:	bf0c      	ite	eq
 8004c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c48:	2500      	movne	r5, #0
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	bfc4      	itt	gt
 8004c4e:	1a9b      	subgt	r3, r3, r2
 8004c50:	18ed      	addgt	r5, r5, r3
 8004c52:	2600      	movs	r6, #0
 8004c54:	341a      	adds	r4, #26
 8004c56:	42b5      	cmp	r5, r6
 8004c58:	d11a      	bne.n	8004c90 <_printf_common+0xc8>
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	e008      	b.n	8004c70 <_printf_common+0xa8>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	4652      	mov	r2, sl
 8004c62:	4649      	mov	r1, r9
 8004c64:	4638      	mov	r0, r7
 8004c66:	47c0      	blx	r8
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d103      	bne.n	8004c74 <_printf_common+0xac>
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c74:	3501      	adds	r5, #1
 8004c76:	e7c6      	b.n	8004c06 <_printf_common+0x3e>
 8004c78:	18e1      	adds	r1, r4, r3
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	2030      	movs	r0, #48	; 0x30
 8004c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c82:	4422      	add	r2, r4
 8004c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	e7c7      	b.n	8004c20 <_printf_common+0x58>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4622      	mov	r2, r4
 8004c94:	4649      	mov	r1, r9
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d0e6      	beq.n	8004c6c <_printf_common+0xa4>
 8004c9e:	3601      	adds	r6, #1
 8004ca0:	e7d9      	b.n	8004c56 <_printf_common+0x8e>
	...

08004ca4 <_printf_i>:
 8004ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4691      	mov	r9, r2
 8004cac:	7e27      	ldrb	r7, [r4, #24]
 8004cae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cb0:	2f78      	cmp	r7, #120	; 0x78
 8004cb2:	4680      	mov	r8, r0
 8004cb4:	469a      	mov	sl, r3
 8004cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cba:	d807      	bhi.n	8004ccc <_printf_i+0x28>
 8004cbc:	2f62      	cmp	r7, #98	; 0x62
 8004cbe:	d80a      	bhi.n	8004cd6 <_printf_i+0x32>
 8004cc0:	2f00      	cmp	r7, #0
 8004cc2:	f000 80d8 	beq.w	8004e76 <_printf_i+0x1d2>
 8004cc6:	2f58      	cmp	r7, #88	; 0x58
 8004cc8:	f000 80a3 	beq.w	8004e12 <_printf_i+0x16e>
 8004ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cd4:	e03a      	b.n	8004d4c <_printf_i+0xa8>
 8004cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cda:	2b15      	cmp	r3, #21
 8004cdc:	d8f6      	bhi.n	8004ccc <_printf_i+0x28>
 8004cde:	a001      	add	r0, pc, #4	; (adr r0, 8004ce4 <_printf_i+0x40>)
 8004ce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ce4:	08004d3d 	.word	0x08004d3d
 8004ce8:	08004d51 	.word	0x08004d51
 8004cec:	08004ccd 	.word	0x08004ccd
 8004cf0:	08004ccd 	.word	0x08004ccd
 8004cf4:	08004ccd 	.word	0x08004ccd
 8004cf8:	08004ccd 	.word	0x08004ccd
 8004cfc:	08004d51 	.word	0x08004d51
 8004d00:	08004ccd 	.word	0x08004ccd
 8004d04:	08004ccd 	.word	0x08004ccd
 8004d08:	08004ccd 	.word	0x08004ccd
 8004d0c:	08004ccd 	.word	0x08004ccd
 8004d10:	08004e5d 	.word	0x08004e5d
 8004d14:	08004d81 	.word	0x08004d81
 8004d18:	08004e3f 	.word	0x08004e3f
 8004d1c:	08004ccd 	.word	0x08004ccd
 8004d20:	08004ccd 	.word	0x08004ccd
 8004d24:	08004e7f 	.word	0x08004e7f
 8004d28:	08004ccd 	.word	0x08004ccd
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004ccd 	.word	0x08004ccd
 8004d34:	08004ccd 	.word	0x08004ccd
 8004d38:	08004e47 	.word	0x08004e47
 8004d3c:	680b      	ldr	r3, [r1, #0]
 8004d3e:	1d1a      	adds	r2, r3, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	600a      	str	r2, [r1, #0]
 8004d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0a3      	b.n	8004e98 <_printf_i+0x1f4>
 8004d50:	6825      	ldr	r5, [r4, #0]
 8004d52:	6808      	ldr	r0, [r1, #0]
 8004d54:	062e      	lsls	r6, r5, #24
 8004d56:	f100 0304 	add.w	r3, r0, #4
 8004d5a:	d50a      	bpl.n	8004d72 <_printf_i+0xce>
 8004d5c:	6805      	ldr	r5, [r0, #0]
 8004d5e:	600b      	str	r3, [r1, #0]
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	da03      	bge.n	8004d6c <_printf_i+0xc8>
 8004d64:	232d      	movs	r3, #45	; 0x2d
 8004d66:	426d      	negs	r5, r5
 8004d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d6c:	485e      	ldr	r0, [pc, #376]	; (8004ee8 <_printf_i+0x244>)
 8004d6e:	230a      	movs	r3, #10
 8004d70:	e019      	b.n	8004da6 <_printf_i+0x102>
 8004d72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d76:	6805      	ldr	r5, [r0, #0]
 8004d78:	600b      	str	r3, [r1, #0]
 8004d7a:	bf18      	it	ne
 8004d7c:	b22d      	sxthne	r5, r5
 8004d7e:	e7ef      	b.n	8004d60 <_printf_i+0xbc>
 8004d80:	680b      	ldr	r3, [r1, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	1d18      	adds	r0, r3, #4
 8004d86:	6008      	str	r0, [r1, #0]
 8004d88:	0628      	lsls	r0, r5, #24
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0xec>
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <_printf_i+0xf2>
 8004d90:	0669      	lsls	r1, r5, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0xe8>
 8004d94:	881d      	ldrh	r5, [r3, #0]
 8004d96:	4854      	ldr	r0, [pc, #336]	; (8004ee8 <_printf_i+0x244>)
 8004d98:	2f6f      	cmp	r7, #111	; 0x6f
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2308      	moveq	r3, #8
 8004d9e:	230a      	movne	r3, #10
 8004da0:	2100      	movs	r1, #0
 8004da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004da6:	6866      	ldr	r6, [r4, #4]
 8004da8:	60a6      	str	r6, [r4, #8]
 8004daa:	2e00      	cmp	r6, #0
 8004dac:	bfa2      	ittt	ge
 8004dae:	6821      	ldrge	r1, [r4, #0]
 8004db0:	f021 0104 	bicge.w	r1, r1, #4
 8004db4:	6021      	strge	r1, [r4, #0]
 8004db6:	b90d      	cbnz	r5, 8004dbc <_printf_i+0x118>
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	d04d      	beq.n	8004e58 <_printf_i+0x1b4>
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8004dc6:	5dc7      	ldrb	r7, [r0, r7]
 8004dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dcc:	462f      	mov	r7, r5
 8004dce:	42bb      	cmp	r3, r7
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	d9f4      	bls.n	8004dbe <_printf_i+0x11a>
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d10b      	bne.n	8004df0 <_printf_i+0x14c>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	07df      	lsls	r7, r3, #31
 8004ddc:	d508      	bpl.n	8004df0 <_printf_i+0x14c>
 8004dde:	6923      	ldr	r3, [r4, #16]
 8004de0:	6861      	ldr	r1, [r4, #4]
 8004de2:	4299      	cmp	r1, r3
 8004de4:	bfde      	ittt	le
 8004de6:	2330      	movle	r3, #48	; 0x30
 8004de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004df0:	1b92      	subs	r2, r2, r6
 8004df2:	6122      	str	r2, [r4, #16]
 8004df4:	f8cd a000 	str.w	sl, [sp]
 8004df8:	464b      	mov	r3, r9
 8004dfa:	aa03      	add	r2, sp, #12
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4640      	mov	r0, r8
 8004e00:	f7ff fee2 	bl	8004bc8 <_printf_common>
 8004e04:	3001      	adds	r0, #1
 8004e06:	d14c      	bne.n	8004ea2 <_printf_i+0x1fe>
 8004e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e0c:	b004      	add	sp, #16
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	4835      	ldr	r0, [pc, #212]	; (8004ee8 <_printf_i+0x244>)
 8004e14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	680e      	ldr	r6, [r1, #0]
 8004e1c:	061f      	lsls	r7, r3, #24
 8004e1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e22:	600e      	str	r6, [r1, #0]
 8004e24:	d514      	bpl.n	8004e50 <_printf_i+0x1ac>
 8004e26:	07d9      	lsls	r1, r3, #31
 8004e28:	bf44      	itt	mi
 8004e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e2e:	6023      	strmi	r3, [r4, #0]
 8004e30:	b91d      	cbnz	r5, 8004e3a <_printf_i+0x196>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	f023 0320 	bic.w	r3, r3, #32
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	2310      	movs	r3, #16
 8004e3c:	e7b0      	b.n	8004da0 <_printf_i+0xfc>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	f043 0320 	orr.w	r3, r3, #32
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	2378      	movs	r3, #120	; 0x78
 8004e48:	4828      	ldr	r0, [pc, #160]	; (8004eec <_printf_i+0x248>)
 8004e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e4e:	e7e3      	b.n	8004e18 <_printf_i+0x174>
 8004e50:	065e      	lsls	r6, r3, #25
 8004e52:	bf48      	it	mi
 8004e54:	b2ad      	uxthmi	r5, r5
 8004e56:	e7e6      	b.n	8004e26 <_printf_i+0x182>
 8004e58:	4616      	mov	r6, r2
 8004e5a:	e7bb      	b.n	8004dd4 <_printf_i+0x130>
 8004e5c:	680b      	ldr	r3, [r1, #0]
 8004e5e:	6826      	ldr	r6, [r4, #0]
 8004e60:	6960      	ldr	r0, [r4, #20]
 8004e62:	1d1d      	adds	r5, r3, #4
 8004e64:	600d      	str	r5, [r1, #0]
 8004e66:	0635      	lsls	r5, r6, #24
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	d501      	bpl.n	8004e70 <_printf_i+0x1cc>
 8004e6c:	6018      	str	r0, [r3, #0]
 8004e6e:	e002      	b.n	8004e76 <_printf_i+0x1d2>
 8004e70:	0671      	lsls	r1, r6, #25
 8004e72:	d5fb      	bpl.n	8004e6c <_printf_i+0x1c8>
 8004e74:	8018      	strh	r0, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	4616      	mov	r6, r2
 8004e7c:	e7ba      	b.n	8004df4 <_printf_i+0x150>
 8004e7e:	680b      	ldr	r3, [r1, #0]
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	600a      	str	r2, [r1, #0]
 8004e84:	681e      	ldr	r6, [r3, #0]
 8004e86:	6862      	ldr	r2, [r4, #4]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7fb f978 	bl	8000180 <memchr>
 8004e90:	b108      	cbz	r0, 8004e96 <_printf_i+0x1f2>
 8004e92:	1b80      	subs	r0, r0, r6
 8004e94:	6060      	str	r0, [r4, #4]
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea0:	e7a8      	b.n	8004df4 <_printf_i+0x150>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	47d0      	blx	sl
 8004eac:	3001      	adds	r0, #1
 8004eae:	d0ab      	beq.n	8004e08 <_printf_i+0x164>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	079b      	lsls	r3, r3, #30
 8004eb4:	d413      	bmi.n	8004ede <_printf_i+0x23a>
 8004eb6:	68e0      	ldr	r0, [r4, #12]
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	4298      	cmp	r0, r3
 8004ebc:	bfb8      	it	lt
 8004ebe:	4618      	movlt	r0, r3
 8004ec0:	e7a4      	b.n	8004e0c <_printf_i+0x168>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	4640      	mov	r0, r8
 8004eca:	47d0      	blx	sl
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d09b      	beq.n	8004e08 <_printf_i+0x164>
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	68e3      	ldr	r3, [r4, #12]
 8004ed4:	9903      	ldr	r1, [sp, #12]
 8004ed6:	1a5b      	subs	r3, r3, r1
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	dcf2      	bgt.n	8004ec2 <_printf_i+0x21e>
 8004edc:	e7eb      	b.n	8004eb6 <_printf_i+0x212>
 8004ede:	2500      	movs	r5, #0
 8004ee0:	f104 0619 	add.w	r6, r4, #25
 8004ee4:	e7f5      	b.n	8004ed2 <_printf_i+0x22e>
 8004ee6:	bf00      	nop
 8004ee8:	0800568d 	.word	0x0800568d
 8004eec:	0800569e 	.word	0x0800569e

08004ef0 <_sbrk_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4d06      	ldr	r5, [pc, #24]	; (8004f0c <_sbrk_r+0x1c>)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	f7fb fd2c 	bl	8000958 <_sbrk>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_sbrk_r+0x1a>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_sbrk_r+0x1a>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000188 	.word	0x20000188

08004f10 <__sread>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	460c      	mov	r4, r1
 8004f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f18:	f000 fab4 	bl	8005484 <_read_r>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	bfab      	itete	ge
 8004f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f22:	89a3      	ldrhlt	r3, [r4, #12]
 8004f24:	181b      	addge	r3, r3, r0
 8004f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f2a:	bfac      	ite	ge
 8004f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f2e:	81a3      	strhlt	r3, [r4, #12]
 8004f30:	bd10      	pop	{r4, pc}

08004f32 <__swrite>:
 8004f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f36:	461f      	mov	r7, r3
 8004f38:	898b      	ldrh	r3, [r1, #12]
 8004f3a:	05db      	lsls	r3, r3, #23
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	4616      	mov	r6, r2
 8004f42:	d505      	bpl.n	8004f50 <__swrite+0x1e>
 8004f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f48:	2302      	movs	r3, #2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f000 f9c8 	bl	80052e0 <_lseek_r>
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	463b      	mov	r3, r7
 8004f60:	4628      	mov	r0, r5
 8004f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f66:	f000 b869 	b.w	800503c <_write_r>

08004f6a <__sseek>:
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f72:	f000 f9b5 	bl	80052e0 <_lseek_r>
 8004f76:	1c43      	adds	r3, r0, #1
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	bf15      	itete	ne
 8004f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f86:	81a3      	strheq	r3, [r4, #12]
 8004f88:	bf18      	it	ne
 8004f8a:	81a3      	strhne	r3, [r4, #12]
 8004f8c:	bd10      	pop	{r4, pc}

08004f8e <__sclose>:
 8004f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f92:	f000 b8d3 	b.w	800513c <_close_r>
	...

08004f98 <__swbuf_r>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	460e      	mov	r6, r1
 8004f9c:	4614      	mov	r4, r2
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	b118      	cbz	r0, 8004faa <__swbuf_r+0x12>
 8004fa2:	6983      	ldr	r3, [r0, #24]
 8004fa4:	b90b      	cbnz	r3, 8004faa <__swbuf_r+0x12>
 8004fa6:	f7ff fbbb 	bl	8004720 <__sinit>
 8004faa:	4b21      	ldr	r3, [pc, #132]	; (8005030 <__swbuf_r+0x98>)
 8004fac:	429c      	cmp	r4, r3
 8004fae:	d12b      	bne.n	8005008 <__swbuf_r+0x70>
 8004fb0:	686c      	ldr	r4, [r5, #4]
 8004fb2:	69a3      	ldr	r3, [r4, #24]
 8004fb4:	60a3      	str	r3, [r4, #8]
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	071a      	lsls	r2, r3, #28
 8004fba:	d52f      	bpl.n	800501c <__swbuf_r+0x84>
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	b36b      	cbz	r3, 800501c <__swbuf_r+0x84>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	1ac0      	subs	r0, r0, r3
 8004fc6:	6963      	ldr	r3, [r4, #20]
 8004fc8:	b2f6      	uxtb	r6, r6
 8004fca:	4283      	cmp	r3, r0
 8004fcc:	4637      	mov	r7, r6
 8004fce:	dc04      	bgt.n	8004fda <__swbuf_r+0x42>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 f948 	bl	8005268 <_fflush_r>
 8004fd8:	bb30      	cbnz	r0, 8005028 <__swbuf_r+0x90>
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	60a3      	str	r3, [r4, #8]
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	6022      	str	r2, [r4, #0]
 8004fe6:	701e      	strb	r6, [r3, #0]
 8004fe8:	6963      	ldr	r3, [r4, #20]
 8004fea:	3001      	adds	r0, #1
 8004fec:	4283      	cmp	r3, r0
 8004fee:	d004      	beq.n	8004ffa <__swbuf_r+0x62>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	07db      	lsls	r3, r3, #31
 8004ff4:	d506      	bpl.n	8005004 <__swbuf_r+0x6c>
 8004ff6:	2e0a      	cmp	r6, #10
 8004ff8:	d104      	bne.n	8005004 <__swbuf_r+0x6c>
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 f933 	bl	8005268 <_fflush_r>
 8005002:	b988      	cbnz	r0, 8005028 <__swbuf_r+0x90>
 8005004:	4638      	mov	r0, r7
 8005006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <__swbuf_r+0x9c>)
 800500a:	429c      	cmp	r4, r3
 800500c:	d101      	bne.n	8005012 <__swbuf_r+0x7a>
 800500e:	68ac      	ldr	r4, [r5, #8]
 8005010:	e7cf      	b.n	8004fb2 <__swbuf_r+0x1a>
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <__swbuf_r+0xa0>)
 8005014:	429c      	cmp	r4, r3
 8005016:	bf08      	it	eq
 8005018:	68ec      	ldreq	r4, [r5, #12]
 800501a:	e7ca      	b.n	8004fb2 <__swbuf_r+0x1a>
 800501c:	4621      	mov	r1, r4
 800501e:	4628      	mov	r0, r5
 8005020:	f000 f81e 	bl	8005060 <__swsetup_r>
 8005024:	2800      	cmp	r0, #0
 8005026:	d0cb      	beq.n	8004fc0 <__swbuf_r+0x28>
 8005028:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800502c:	e7ea      	b.n	8005004 <__swbuf_r+0x6c>
 800502e:	bf00      	nop
 8005030:	0800563c 	.word	0x0800563c
 8005034:	0800565c 	.word	0x0800565c
 8005038:	0800561c 	.word	0x0800561c

0800503c <_write_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4d07      	ldr	r5, [pc, #28]	; (800505c <_write_r+0x20>)
 8005040:	4604      	mov	r4, r0
 8005042:	4608      	mov	r0, r1
 8005044:	4611      	mov	r1, r2
 8005046:	2200      	movs	r2, #0
 8005048:	602a      	str	r2, [r5, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f7fb fc33 	bl	80008b6 <_write>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_write_r+0x1e>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_write_r+0x1e>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	20000188 	.word	0x20000188

08005060 <__swsetup_r>:
 8005060:	4b32      	ldr	r3, [pc, #200]	; (800512c <__swsetup_r+0xcc>)
 8005062:	b570      	push	{r4, r5, r6, lr}
 8005064:	681d      	ldr	r5, [r3, #0]
 8005066:	4606      	mov	r6, r0
 8005068:	460c      	mov	r4, r1
 800506a:	b125      	cbz	r5, 8005076 <__swsetup_r+0x16>
 800506c:	69ab      	ldr	r3, [r5, #24]
 800506e:	b913      	cbnz	r3, 8005076 <__swsetup_r+0x16>
 8005070:	4628      	mov	r0, r5
 8005072:	f7ff fb55 	bl	8004720 <__sinit>
 8005076:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <__swsetup_r+0xd0>)
 8005078:	429c      	cmp	r4, r3
 800507a:	d10f      	bne.n	800509c <__swsetup_r+0x3c>
 800507c:	686c      	ldr	r4, [r5, #4]
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005084:	0719      	lsls	r1, r3, #28
 8005086:	d42c      	bmi.n	80050e2 <__swsetup_r+0x82>
 8005088:	06dd      	lsls	r5, r3, #27
 800508a:	d411      	bmi.n	80050b0 <__swsetup_r+0x50>
 800508c:	2309      	movs	r3, #9
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800509a:	e03e      	b.n	800511a <__swsetup_r+0xba>
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <__swsetup_r+0xd4>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	d101      	bne.n	80050a6 <__swsetup_r+0x46>
 80050a2:	68ac      	ldr	r4, [r5, #8]
 80050a4:	e7eb      	b.n	800507e <__swsetup_r+0x1e>
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <__swsetup_r+0xd8>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	bf08      	it	eq
 80050ac:	68ec      	ldreq	r4, [r5, #12]
 80050ae:	e7e6      	b.n	800507e <__swsetup_r+0x1e>
 80050b0:	0758      	lsls	r0, r3, #29
 80050b2:	d512      	bpl.n	80050da <__swsetup_r+0x7a>
 80050b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b6:	b141      	cbz	r1, 80050ca <__swsetup_r+0x6a>
 80050b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050bc:	4299      	cmp	r1, r3
 80050be:	d002      	beq.n	80050c6 <__swsetup_r+0x66>
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f98f 	bl	80053e4 <_free_r>
 80050c6:	2300      	movs	r3, #0
 80050c8:	6363      	str	r3, [r4, #52]	; 0x34
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050d0:	81a3      	strh	r3, [r4, #12]
 80050d2:	2300      	movs	r3, #0
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f043 0308 	orr.w	r3, r3, #8
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	b94b      	cbnz	r3, 80050fa <__swsetup_r+0x9a>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f0:	d003      	beq.n	80050fa <__swsetup_r+0x9a>
 80050f2:	4621      	mov	r1, r4
 80050f4:	4630      	mov	r0, r6
 80050f6:	f000 f929 	bl	800534c <__smakebuf_r>
 80050fa:	89a0      	ldrh	r0, [r4, #12]
 80050fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005100:	f010 0301 	ands.w	r3, r0, #1
 8005104:	d00a      	beq.n	800511c <__swsetup_r+0xbc>
 8005106:	2300      	movs	r3, #0
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	6963      	ldr	r3, [r4, #20]
 800510c:	425b      	negs	r3, r3
 800510e:	61a3      	str	r3, [r4, #24]
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	b943      	cbnz	r3, 8005126 <__swsetup_r+0xc6>
 8005114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005118:	d1ba      	bne.n	8005090 <__swsetup_r+0x30>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	0781      	lsls	r1, r0, #30
 800511e:	bf58      	it	pl
 8005120:	6963      	ldrpl	r3, [r4, #20]
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	e7f4      	b.n	8005110 <__swsetup_r+0xb0>
 8005126:	2000      	movs	r0, #0
 8005128:	e7f7      	b.n	800511a <__swsetup_r+0xba>
 800512a:	bf00      	nop
 800512c:	20000010 	.word	0x20000010
 8005130:	0800563c 	.word	0x0800563c
 8005134:	0800565c 	.word	0x0800565c
 8005138:	0800561c 	.word	0x0800561c

0800513c <_close_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d06      	ldr	r5, [pc, #24]	; (8005158 <_close_r+0x1c>)
 8005140:	2300      	movs	r3, #0
 8005142:	4604      	mov	r4, r0
 8005144:	4608      	mov	r0, r1
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	f7fb fbd1 	bl	80008ee <_close>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_close_r+0x1a>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_close_r+0x1a>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20000188 	.word	0x20000188

0800515c <__sflush_r>:
 800515c:	898a      	ldrh	r2, [r1, #12]
 800515e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	4605      	mov	r5, r0
 8005164:	0710      	lsls	r0, r2, #28
 8005166:	460c      	mov	r4, r1
 8005168:	d458      	bmi.n	800521c <__sflush_r+0xc0>
 800516a:	684b      	ldr	r3, [r1, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	dc05      	bgt.n	800517c <__sflush_r+0x20>
 8005170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	dc02      	bgt.n	800517c <__sflush_r+0x20>
 8005176:	2000      	movs	r0, #0
 8005178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800517c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800517e:	2e00      	cmp	r6, #0
 8005180:	d0f9      	beq.n	8005176 <__sflush_r+0x1a>
 8005182:	2300      	movs	r3, #0
 8005184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005188:	682f      	ldr	r7, [r5, #0]
 800518a:	602b      	str	r3, [r5, #0]
 800518c:	d032      	beq.n	80051f4 <__sflush_r+0x98>
 800518e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	075a      	lsls	r2, r3, #29
 8005194:	d505      	bpl.n	80051a2 <__sflush_r+0x46>
 8005196:	6863      	ldr	r3, [r4, #4]
 8005198:	1ac0      	subs	r0, r0, r3
 800519a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800519c:	b10b      	cbz	r3, 80051a2 <__sflush_r+0x46>
 800519e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051a0:	1ac0      	subs	r0, r0, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	4602      	mov	r2, r0
 80051a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051a8:	6a21      	ldr	r1, [r4, #32]
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b0      	blx	r6
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	d106      	bne.n	80051c2 <__sflush_r+0x66>
 80051b4:	6829      	ldr	r1, [r5, #0]
 80051b6:	291d      	cmp	r1, #29
 80051b8:	d82c      	bhi.n	8005214 <__sflush_r+0xb8>
 80051ba:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <__sflush_r+0x108>)
 80051bc:	40ca      	lsrs	r2, r1
 80051be:	07d6      	lsls	r6, r2, #31
 80051c0:	d528      	bpl.n	8005214 <__sflush_r+0xb8>
 80051c2:	2200      	movs	r2, #0
 80051c4:	6062      	str	r2, [r4, #4]
 80051c6:	04d9      	lsls	r1, r3, #19
 80051c8:	6922      	ldr	r2, [r4, #16]
 80051ca:	6022      	str	r2, [r4, #0]
 80051cc:	d504      	bpl.n	80051d8 <__sflush_r+0x7c>
 80051ce:	1c42      	adds	r2, r0, #1
 80051d0:	d101      	bne.n	80051d6 <__sflush_r+0x7a>
 80051d2:	682b      	ldr	r3, [r5, #0]
 80051d4:	b903      	cbnz	r3, 80051d8 <__sflush_r+0x7c>
 80051d6:	6560      	str	r0, [r4, #84]	; 0x54
 80051d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051da:	602f      	str	r7, [r5, #0]
 80051dc:	2900      	cmp	r1, #0
 80051de:	d0ca      	beq.n	8005176 <__sflush_r+0x1a>
 80051e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e4:	4299      	cmp	r1, r3
 80051e6:	d002      	beq.n	80051ee <__sflush_r+0x92>
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 f8fb 	bl	80053e4 <_free_r>
 80051ee:	2000      	movs	r0, #0
 80051f0:	6360      	str	r0, [r4, #52]	; 0x34
 80051f2:	e7c1      	b.n	8005178 <__sflush_r+0x1c>
 80051f4:	6a21      	ldr	r1, [r4, #32]
 80051f6:	2301      	movs	r3, #1
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b0      	blx	r6
 80051fc:	1c41      	adds	r1, r0, #1
 80051fe:	d1c7      	bne.n	8005190 <__sflush_r+0x34>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0c4      	beq.n	8005190 <__sflush_r+0x34>
 8005206:	2b1d      	cmp	r3, #29
 8005208:	d001      	beq.n	800520e <__sflush_r+0xb2>
 800520a:	2b16      	cmp	r3, #22
 800520c:	d101      	bne.n	8005212 <__sflush_r+0xb6>
 800520e:	602f      	str	r7, [r5, #0]
 8005210:	e7b1      	b.n	8005176 <__sflush_r+0x1a>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	e7ad      	b.n	8005178 <__sflush_r+0x1c>
 800521c:	690f      	ldr	r7, [r1, #16]
 800521e:	2f00      	cmp	r7, #0
 8005220:	d0a9      	beq.n	8005176 <__sflush_r+0x1a>
 8005222:	0793      	lsls	r3, r2, #30
 8005224:	680e      	ldr	r6, [r1, #0]
 8005226:	bf08      	it	eq
 8005228:	694b      	ldreq	r3, [r1, #20]
 800522a:	600f      	str	r7, [r1, #0]
 800522c:	bf18      	it	ne
 800522e:	2300      	movne	r3, #0
 8005230:	eba6 0807 	sub.w	r8, r6, r7
 8005234:	608b      	str	r3, [r1, #8]
 8005236:	f1b8 0f00 	cmp.w	r8, #0
 800523a:	dd9c      	ble.n	8005176 <__sflush_r+0x1a>
 800523c:	6a21      	ldr	r1, [r4, #32]
 800523e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005240:	4643      	mov	r3, r8
 8005242:	463a      	mov	r2, r7
 8005244:	4628      	mov	r0, r5
 8005246:	47b0      	blx	r6
 8005248:	2800      	cmp	r0, #0
 800524a:	dc06      	bgt.n	800525a <__sflush_r+0xfe>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005258:	e78e      	b.n	8005178 <__sflush_r+0x1c>
 800525a:	4407      	add	r7, r0
 800525c:	eba8 0800 	sub.w	r8, r8, r0
 8005260:	e7e9      	b.n	8005236 <__sflush_r+0xda>
 8005262:	bf00      	nop
 8005264:	20400001 	.word	0x20400001

08005268 <_fflush_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	690b      	ldr	r3, [r1, #16]
 800526c:	4605      	mov	r5, r0
 800526e:	460c      	mov	r4, r1
 8005270:	b913      	cbnz	r3, 8005278 <_fflush_r+0x10>
 8005272:	2500      	movs	r5, #0
 8005274:	4628      	mov	r0, r5
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	b118      	cbz	r0, 8005282 <_fflush_r+0x1a>
 800527a:	6983      	ldr	r3, [r0, #24]
 800527c:	b90b      	cbnz	r3, 8005282 <_fflush_r+0x1a>
 800527e:	f7ff fa4f 	bl	8004720 <__sinit>
 8005282:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <_fflush_r+0x6c>)
 8005284:	429c      	cmp	r4, r3
 8005286:	d11b      	bne.n	80052c0 <_fflush_r+0x58>
 8005288:	686c      	ldr	r4, [r5, #4]
 800528a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0ef      	beq.n	8005272 <_fflush_r+0xa>
 8005292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005294:	07d0      	lsls	r0, r2, #31
 8005296:	d404      	bmi.n	80052a2 <_fflush_r+0x3a>
 8005298:	0599      	lsls	r1, r3, #22
 800529a:	d402      	bmi.n	80052a2 <_fflush_r+0x3a>
 800529c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800529e:	f7ff fadd 	bl	800485c <__retarget_lock_acquire_recursive>
 80052a2:	4628      	mov	r0, r5
 80052a4:	4621      	mov	r1, r4
 80052a6:	f7ff ff59 	bl	800515c <__sflush_r>
 80052aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ac:	07da      	lsls	r2, r3, #31
 80052ae:	4605      	mov	r5, r0
 80052b0:	d4e0      	bmi.n	8005274 <_fflush_r+0xc>
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	059b      	lsls	r3, r3, #22
 80052b6:	d4dd      	bmi.n	8005274 <_fflush_r+0xc>
 80052b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ba:	f7ff fad0 	bl	800485e <__retarget_lock_release_recursive>
 80052be:	e7d9      	b.n	8005274 <_fflush_r+0xc>
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <_fflush_r+0x70>)
 80052c2:	429c      	cmp	r4, r3
 80052c4:	d101      	bne.n	80052ca <_fflush_r+0x62>
 80052c6:	68ac      	ldr	r4, [r5, #8]
 80052c8:	e7df      	b.n	800528a <_fflush_r+0x22>
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <_fflush_r+0x74>)
 80052cc:	429c      	cmp	r4, r3
 80052ce:	bf08      	it	eq
 80052d0:	68ec      	ldreq	r4, [r5, #12]
 80052d2:	e7da      	b.n	800528a <_fflush_r+0x22>
 80052d4:	0800563c 	.word	0x0800563c
 80052d8:	0800565c 	.word	0x0800565c
 80052dc:	0800561c 	.word	0x0800561c

080052e0 <_lseek_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d07      	ldr	r5, [pc, #28]	; (8005300 <_lseek_r+0x20>)
 80052e4:	4604      	mov	r4, r0
 80052e6:	4608      	mov	r0, r1
 80052e8:	4611      	mov	r1, r2
 80052ea:	2200      	movs	r2, #0
 80052ec:	602a      	str	r2, [r5, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7fb fb24 	bl	800093c <_lseek>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_lseek_r+0x1e>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_lseek_r+0x1e>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	20000188 	.word	0x20000188

08005304 <__swhatbuf_r>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	460e      	mov	r6, r1
 8005308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530c:	2900      	cmp	r1, #0
 800530e:	b096      	sub	sp, #88	; 0x58
 8005310:	4614      	mov	r4, r2
 8005312:	461d      	mov	r5, r3
 8005314:	da07      	bge.n	8005326 <__swhatbuf_r+0x22>
 8005316:	2300      	movs	r3, #0
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	89b3      	ldrh	r3, [r6, #12]
 800531c:	061a      	lsls	r2, r3, #24
 800531e:	d410      	bmi.n	8005342 <__swhatbuf_r+0x3e>
 8005320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005324:	e00e      	b.n	8005344 <__swhatbuf_r+0x40>
 8005326:	466a      	mov	r2, sp
 8005328:	f000 f8be 	bl	80054a8 <_fstat_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	dbf2      	blt.n	8005316 <__swhatbuf_r+0x12>
 8005330:	9a01      	ldr	r2, [sp, #4]
 8005332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800533a:	425a      	negs	r2, r3
 800533c:	415a      	adcs	r2, r3
 800533e:	602a      	str	r2, [r5, #0]
 8005340:	e7ee      	b.n	8005320 <__swhatbuf_r+0x1c>
 8005342:	2340      	movs	r3, #64	; 0x40
 8005344:	2000      	movs	r0, #0
 8005346:	6023      	str	r3, [r4, #0]
 8005348:	b016      	add	sp, #88	; 0x58
 800534a:	bd70      	pop	{r4, r5, r6, pc}

0800534c <__smakebuf_r>:
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005350:	079d      	lsls	r5, r3, #30
 8005352:	4606      	mov	r6, r0
 8005354:	460c      	mov	r4, r1
 8005356:	d507      	bpl.n	8005368 <__smakebuf_r+0x1c>
 8005358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	2301      	movs	r3, #1
 8005362:	6163      	str	r3, [r4, #20]
 8005364:	b002      	add	sp, #8
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	ab01      	add	r3, sp, #4
 800536a:	466a      	mov	r2, sp
 800536c:	f7ff ffca 	bl	8005304 <__swhatbuf_r>
 8005370:	9900      	ldr	r1, [sp, #0]
 8005372:	4605      	mov	r5, r0
 8005374:	4630      	mov	r0, r6
 8005376:	f7ff fa73 	bl	8004860 <_malloc_r>
 800537a:	b948      	cbnz	r0, 8005390 <__smakebuf_r+0x44>
 800537c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005380:	059a      	lsls	r2, r3, #22
 8005382:	d4ef      	bmi.n	8005364 <__smakebuf_r+0x18>
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	e7e3      	b.n	8005358 <__smakebuf_r+0xc>
 8005390:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <__smakebuf_r+0x7c>)
 8005392:	62b3      	str	r3, [r6, #40]	; 0x28
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	6020      	str	r0, [r4, #0]
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	6163      	str	r3, [r4, #20]
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	6120      	str	r0, [r4, #16]
 80053a6:	b15b      	cbz	r3, 80053c0 <__smakebuf_r+0x74>
 80053a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ac:	4630      	mov	r0, r6
 80053ae:	f000 f88d 	bl	80054cc <_isatty_r>
 80053b2:	b128      	cbz	r0, 80053c0 <__smakebuf_r+0x74>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	89a0      	ldrh	r0, [r4, #12]
 80053c2:	4305      	orrs	r5, r0
 80053c4:	81a5      	strh	r5, [r4, #12]
 80053c6:	e7cd      	b.n	8005364 <__smakebuf_r+0x18>
 80053c8:	080046b9 	.word	0x080046b9

080053cc <__malloc_lock>:
 80053cc:	4801      	ldr	r0, [pc, #4]	; (80053d4 <__malloc_lock+0x8>)
 80053ce:	f7ff ba45 	b.w	800485c <__retarget_lock_acquire_recursive>
 80053d2:	bf00      	nop
 80053d4:	20000180 	.word	0x20000180

080053d8 <__malloc_unlock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__malloc_unlock+0x8>)
 80053da:	f7ff ba40 	b.w	800485e <__retarget_lock_release_recursive>
 80053de:	bf00      	nop
 80053e0:	20000180 	.word	0x20000180

080053e4 <_free_r>:
 80053e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053e6:	2900      	cmp	r1, #0
 80053e8:	d048      	beq.n	800547c <_free_r+0x98>
 80053ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ee:	9001      	str	r0, [sp, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f1a1 0404 	sub.w	r4, r1, #4
 80053f6:	bfb8      	it	lt
 80053f8:	18e4      	addlt	r4, r4, r3
 80053fa:	f7ff ffe7 	bl	80053cc <__malloc_lock>
 80053fe:	4a20      	ldr	r2, [pc, #128]	; (8005480 <_free_r+0x9c>)
 8005400:	9801      	ldr	r0, [sp, #4]
 8005402:	6813      	ldr	r3, [r2, #0]
 8005404:	4615      	mov	r5, r2
 8005406:	b933      	cbnz	r3, 8005416 <_free_r+0x32>
 8005408:	6063      	str	r3, [r4, #4]
 800540a:	6014      	str	r4, [r2, #0]
 800540c:	b003      	add	sp, #12
 800540e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005412:	f7ff bfe1 	b.w	80053d8 <__malloc_unlock>
 8005416:	42a3      	cmp	r3, r4
 8005418:	d90b      	bls.n	8005432 <_free_r+0x4e>
 800541a:	6821      	ldr	r1, [r4, #0]
 800541c:	1862      	adds	r2, r4, r1
 800541e:	4293      	cmp	r3, r2
 8005420:	bf04      	itt	eq
 8005422:	681a      	ldreq	r2, [r3, #0]
 8005424:	685b      	ldreq	r3, [r3, #4]
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	bf04      	itt	eq
 800542a:	1852      	addeq	r2, r2, r1
 800542c:	6022      	streq	r2, [r4, #0]
 800542e:	602c      	str	r4, [r5, #0]
 8005430:	e7ec      	b.n	800540c <_free_r+0x28>
 8005432:	461a      	mov	r2, r3
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b10b      	cbz	r3, 800543c <_free_r+0x58>
 8005438:	42a3      	cmp	r3, r4
 800543a:	d9fa      	bls.n	8005432 <_free_r+0x4e>
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	1855      	adds	r5, r2, r1
 8005440:	42a5      	cmp	r5, r4
 8005442:	d10b      	bne.n	800545c <_free_r+0x78>
 8005444:	6824      	ldr	r4, [r4, #0]
 8005446:	4421      	add	r1, r4
 8005448:	1854      	adds	r4, r2, r1
 800544a:	42a3      	cmp	r3, r4
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	d1dd      	bne.n	800540c <_free_r+0x28>
 8005450:	681c      	ldr	r4, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	6053      	str	r3, [r2, #4]
 8005456:	4421      	add	r1, r4
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	e7d7      	b.n	800540c <_free_r+0x28>
 800545c:	d902      	bls.n	8005464 <_free_r+0x80>
 800545e:	230c      	movs	r3, #12
 8005460:	6003      	str	r3, [r0, #0]
 8005462:	e7d3      	b.n	800540c <_free_r+0x28>
 8005464:	6825      	ldr	r5, [r4, #0]
 8005466:	1961      	adds	r1, r4, r5
 8005468:	428b      	cmp	r3, r1
 800546a:	bf04      	itt	eq
 800546c:	6819      	ldreq	r1, [r3, #0]
 800546e:	685b      	ldreq	r3, [r3, #4]
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	bf04      	itt	eq
 8005474:	1949      	addeq	r1, r1, r5
 8005476:	6021      	streq	r1, [r4, #0]
 8005478:	6054      	str	r4, [r2, #4]
 800547a:	e7c7      	b.n	800540c <_free_r+0x28>
 800547c:	b003      	add	sp, #12
 800547e:	bd30      	pop	{r4, r5, pc}
 8005480:	20000094 	.word	0x20000094

08005484 <_read_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d07      	ldr	r5, [pc, #28]	; (80054a4 <_read_r+0x20>)
 8005488:	4604      	mov	r4, r0
 800548a:	4608      	mov	r0, r1
 800548c:	4611      	mov	r1, r2
 800548e:	2200      	movs	r2, #0
 8005490:	602a      	str	r2, [r5, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	f7fb f9f2 	bl	800087c <_read>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_read_r+0x1e>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_read_r+0x1e>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000188 	.word	0x20000188

080054a8 <_fstat_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d07      	ldr	r5, [pc, #28]	; (80054c8 <_fstat_r+0x20>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	f7fb fa26 	bl	8000906 <_fstat>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	d102      	bne.n	80054c4 <_fstat_r+0x1c>
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	b103      	cbz	r3, 80054c4 <_fstat_r+0x1c>
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
 80054c6:	bf00      	nop
 80054c8:	20000188 	.word	0x20000188

080054cc <_isatty_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d06      	ldr	r5, [pc, #24]	; (80054e8 <_isatty_r+0x1c>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb fa25 	bl	8000926 <_isatty>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_isatty_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_isatty_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	20000188 	.word	0x20000188

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
