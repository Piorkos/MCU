
store-sensor-data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000004  08005d60  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000120  20000084  08005de0  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001a4  08005de0  000201a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018432  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033a3  00000000  00000000  000384e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b8  00000000  00000000  0003b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001670  00000000  00000000  0003d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000266e5  00000000  00000000  0003e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001571f  00000000  00000000  00064d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dc788  00000000  00000000  0007a4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00156c44  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a1c  00000000  00000000  00156c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000084 	.word	0x20000084
 8000158:	00000000 	.word	0x00000000
 800015c:	08005bc4 	.word	0x08005bc4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000088 	.word	0x20000088
 8000178:	08005bc4 	.word	0x08005bc4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <_ZN3ImuC1EP19__I2C_HandleTypeDef>:
 * @see MPU9250_DEFAULT_ADDRESS
 */

uint8_t buffer[14];

Imu::Imu(I2C_HandleTypeDef* hi2c)
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
{
	this->hi2c = hi2c;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	601a      	str	r2, [r3, #0]
	devAddr = 0xD0;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	22d0      	movs	r2, #208	; 0xd0
 8000488:	711a      	strb	r2, [r3, #4]
	for (int i=0;i<15;i++){
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	2b0e      	cmp	r3, #14
 8000492:	dc09      	bgt.n	80004a8 <_ZN3ImuC1EP19__I2C_HandleTypeDef+0x34>
		buffer[i] = 0x00;
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	4413      	add	r3, r2
 800049a:	3306      	adds	r3, #6
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<15;i++){
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3301      	adds	r3, #1
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	e7f2      	b.n	800048e <_ZN3ImuC1EP19__I2C_HandleTypeDef+0x1a>
	}
	ID = 0;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	715a      	strb	r2, [r3, #5]
}
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4618      	mov	r0, r3
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e0:	68fb      	ldr	r3, [r7, #12]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000504:	2004      	movs	r0, #4
 8000506:	f7ff ffd9 	bl	80004bc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2080      	movs	r0, #128	; 0x80
 800050c:	f7ff ffd6 	bl	80004bc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	2002      	movs	r0, #2
 8000512:	f7ff ffd3 	bl	80004bc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff ffd0 	bl	80004bc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051c:	2010      	movs	r0, #16
 800051e:	f7ff ffcd 	bl	80004bc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000522:	2008      	movs	r0, #8
 8000524:	f7ff ffca 	bl	80004bc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC6 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000528:	f64f 435f 	movw	r3, #64607	; 0xfc5f
 800052c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052e:	2303      	movs	r3, #3
 8000530:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4619      	mov	r1, r3
 800053a:	4838      	ldr	r0, [pc, #224]	; (800061c <MX_GPIO_Init+0x12c>)
 800053c:	f000 ff5c 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000540:	2308      	movs	r3, #8
 8000542:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000544:	2303      	movs	r3, #3
 8000546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4833      	ldr	r0, [pc, #204]	; (8000620 <MX_GPIO_Init+0x130>)
 8000552:	f000 ff51 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000556:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800055a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055c:	2303      	movs	r3, #3
 800055e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 ff44 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_2_Pin;
 8000570:	2320      	movs	r3, #32
 8000572:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000574:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <MX_GPIO_Init+0x134>)
 8000576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000578:	2302      	movs	r3, #2
 800057a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_2_GPIO_Port, &GPIO_InitStruct);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4619      	mov	r1, r3
 8000580:	4826      	ldr	r0, [pc, #152]	; (800061c <MX_GPIO_Init+0x12c>)
 8000582:	f000 ff39 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_1_Pin;
 8000586:	f640 0304 	movw	r3, #2052	; 0x804
 800058a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_GPIO_Init+0x134>)
 800058e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000590:	2302      	movs	r3, #2
 8000592:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4619      	mov	r1, r3
 8000598:	4823      	ldr	r0, [pc, #140]	; (8000628 <MX_GPIO_Init+0x138>)
 800059a:	f000 ff2d 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB0 PB1 PB12
                           PB13 PB14 PB15 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12
 800059e:	f24f 4333 	movw	r3, #62515	; 0xf433
 80005a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a4:	2303      	movs	r3, #3
 80005a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	481d      	ldr	r0, [pc, #116]	; (8000628 <MX_GPIO_Init+0x138>)
 80005b2:	f000 ff21 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005b6:	2310      	movs	r3, #16
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4819      	ldr	r0, [pc, #100]	; (800062c <MX_GPIO_Init+0x13c>)
 80005c8:	f000 ff16 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005cc:	2303      	movs	r3, #3
 80005ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	2303      	movs	r3, #3
 80005d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <MX_GPIO_Init+0x140>)
 80005de:	f000 ff0b 	bl	80013f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2008      	movs	r0, #8
 80005e8:	f000 fe05 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005ec:	2008      	movs	r0, #8
 80005ee:	f000 fe1c 	bl	800122a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2017      	movs	r0, #23
 80005f8:	f000 fdfd 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005fc:	2017      	movs	r0, #23
 80005fe:	f000 fe14 	bl	800122a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2028      	movs	r0, #40	; 0x28
 8000608:	f000 fdf5 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800060c:	2028      	movs	r0, #40	; 0x28
 800060e:	f000 fe0c 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	48000800 	.word	0x48000800
 8000620:	48001c00 	.word	0x48001c00
 8000624:	10110000 	.word	0x10110000
 8000628:	48000400 	.word	0x48000400
 800062c:	48001000 	.word	0x48001000
 8000630:	48000c00 	.word	0x48000c00

08000634 <LL_AHB2_GRP1_EnableClock>:
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800063c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4313      	orrs	r3, r2
 800064a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800064c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000658:	68fb      	ldr	r3, [r7, #12]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4313      	orrs	r3, r2
 800067c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800067e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000682:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4013      	ands	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_I2C1_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <MX_I2C1_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_I2C1_Init+0x74>)
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <MX_I2C1_Init+0x7c>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_I2C1_Init+0x74>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <MX_I2C1_Init+0x74>)
 80006d4:	f001 f818 	bl	8001708 <HAL_I2C_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006de:	f000 f97b 	bl	80009d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <MX_I2C1_Init+0x74>)
 80006e6:	f001 fe36 	bl	8002356 <HAL_I2CEx_ConfigAnalogFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f0:	f000 f972 	bl	80009d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_I2C1_Init+0x74>)
 80006f8:	f001 fe78 	bl	80023ec <HAL_I2CEx_ConfigDigitalFilter>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000702:	f000 f969 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000b4 	.word	0x200000b4
 8000710:	40005400 	.word	0x40005400
 8000714:	10707dbc 	.word	0x10707dbc

08000718 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_I2C_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d127      	bne.n	800078a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff ff7a 	bl	8000634 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000740:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000744:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000746:	2312      	movs	r3, #18
 8000748:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000752:	2304      	movs	r3, #4
 8000754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4619      	mov	r1, r3
 800075c:	480e      	ldr	r0, [pc, #56]	; (8000798 <HAL_I2C_MspInit+0x80>)
 800075e:	f000 fe4b 	bl	80013f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000762:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000766:	f7ff ff7e 	bl	8000666 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	201e      	movs	r0, #30
 8000770:	f000 fd41 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000774:	201e      	movs	r0, #30
 8000776:	f000 fd58 	bl	800122a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	201f      	movs	r0, #31
 8000780:	f000 fd39 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000784:	201f      	movs	r0, #31
 8000786:	f000 fd50 	bl	800122a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40005400 	.word	0x40005400
 8000798:	48000400 	.word	0x48000400

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fbc8 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f834 	bl	8000810 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff fea2 	bl	80004f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ac:	f7ff ff74 	bl	8000698 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007b0:	f000 fb04 	bl	8000dbc <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(counter_1 < (btn_delay + 1))
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <main+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <main+0x68>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d904      	bls.n	80007cc <main+0x30>
	  {
		  ++counter_1;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <main+0x68>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <main+0x68>)
 80007ca:	6013      	str	r3, [r2, #0]
	  }
	  if(counter_2 < (btn_delay + 1))
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <main+0x64>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <main+0x6c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d904      	bls.n	80007e4 <main+0x48>
	  {
		  ++counter_2;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <main+0x6c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <main+0x6c>)
 80007e2:	6013      	str	r3, [r2, #0]
	  }
	  if(counter_3 < (btn_delay + 1))
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <main+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <main+0x70>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d9e0      	bls.n	80007b4 <main+0x18>
	  {
		  ++counter_3;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <main+0x70>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <main+0x70>)
 80007fa:	6013      	str	r3, [r2, #0]
	  if(counter_1 < (btn_delay + 1))
 80007fc:	e7da      	b.n	80007b4 <main+0x18>
 80007fe:	bf00      	nop
 8000800:	20000004 	.word	0x20000004
 8000804:	20000008 	.word	0x20000008
 8000808:	2000000c 	.word	0x2000000c
 800080c:	20000010 	.word	0x20000010

08000810 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0ae      	sub	sp, #184	; 0xb8
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800081a:	2248      	movs	r2, #72	; 0x48
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fcbe 	bl	80051a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2250      	movs	r2, #80	; 0x50
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f004 fcae 	bl	80051a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	4b40      	ldr	r3, [pc, #256]	; (8000948 <_Z18SystemClock_Configv+0x138>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800084c:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <_Z18SystemClock_Configv+0x138>)
 800084e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <_Z18SystemClock_Configv+0x138>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000860:	2322      	movs	r3, #34	; 0x22
 8000862:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000868:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800086a:	2301      	movs	r3, #1
 800086c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800087c:	2360      	movs	r3, #96	; 0x60
 800087e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000888:	2301      	movs	r3, #1
 800088a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000894:	2320      	movs	r3, #32
 8000896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800089e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f978 	bl	8002bac <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80008cc:	f000 f884 	bl	80009d8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008d0:	236f      	movs	r3, #111	; 0x6f
 80008d2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2303      	movs	r3, #3
 80008d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f0:	2103      	movs	r1, #3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fce6 	bl	80032c4 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000908:	f000 f866 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800090c:	f242 0305 	movw	r3, #8197	; 0x2005
 8000910:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000916:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800091c:	2300      	movs	r3, #0
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000920:	2310      	movs	r3, #16
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	4618      	mov	r0, r3
 8000928:	f003 f90f 	bl	8003b4a <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf14      	ite	ne
 8000932:	2301      	movne	r3, #1
 8000934:	2300      	moveq	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <_Z18SystemClock_Configv+0x130>
  {
    Error_Handler();
 800093c:	f000 f84c 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000940:	bf00      	nop
 8000942:	37b8      	adds	r7, #184	; 0xb8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_1_Pin)
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800095c:	d10b      	bne.n	8000976 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		if(counter_1 > btn_delay)
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_GPIO_EXTI_Callback+0x70>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	d905      	bls.n	8000976 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			counter_1 = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_GPIO_EXTI_Callback+0x70>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
			printf("BTN 1 \n");
 8000970:	4814      	ldr	r0, [pc, #80]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000972:	f004 fd35 	bl	80053e0 <puts>
		}
	}
	if(GPIO_Pin == BTN_2_Pin)
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	2b20      	cmp	r3, #32
 800097a:	d10b      	bne.n	8000994 <HAL_GPIO_EXTI_Callback+0x48>
	{
		if(counter_2 > btn_delay)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d905      	bls.n	8000994 <HAL_GPIO_EXTI_Callback+0x48>
		{
			counter_2 = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
			printf("BTN 2 \n");
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <HAL_GPIO_EXTI_Callback+0x80>)
 8000990:	f004 fd26 	bl	80053e0 <puts>
		}
	}
	if(GPIO_Pin == BTN_3_Pin)
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d10b      	bne.n	80009b2 <HAL_GPIO_EXTI_Callback+0x66>
	{
		if(counter_3 > btn_delay)
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_GPIO_EXTI_Callback+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x74>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d905      	bls.n	80009b2 <HAL_GPIO_EXTI_Callback+0x66>
		{
			counter_3 = 0;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_GPIO_EXTI_Callback+0x84>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
			printf("BTN 3 \n");
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <HAL_GPIO_EXTI_Callback+0x88>)
 80009ae:	f004 fd17 	bl	80053e0 <puts>
		}
	}
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000004 	.word	0x20000004
 80009c4:	08005bdc 	.word	0x08005bdc
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	08005be4 	.word	0x08005be4
 80009d0:	20000010 	.word	0x20000010
 80009d4:	08005bec 	.word	0x08005bec

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d10f      	bne.n	8000a14 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d10a      	bne.n	8000a14 <_Z41__static_initialization_and_destruction_0ii+0x30>
Imu *myMPU = new Imu (&hi2c1);
 80009fe:	2014      	movs	r0, #20
 8000a00:	f004 fb7a 	bl	80050f8 <_Znwj>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461c      	mov	r4, r3
 8000a08:	4904      	ldr	r1, [pc, #16]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f7ff fd32 	bl	8000474 <_ZN3ImuC1EP19__I2C_HandleTypeDef>
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000a12:	601c      	str	r4, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	200000b4 	.word	0x200000b4
 8000a20:	200000a0 	.word	0x200000a0

08000a24 <_GLOBAL__sub_I__Z12__io_putcharc>:
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff ffd9 	bl	80009e4 <_Z41__static_initialization_and_destruction_0ii>
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <__io_putchar>:
#define __PRINTF_TO_UART_H__

#include "usart.h"

int __io_putchar(char ch)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 8000a3e:	1df9      	adds	r1, r7, #7
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	2201      	movs	r2, #1
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <__io_putchar+0x24>)
 8000a48:	f003 fb76 	bl	8004138 <HAL_UART_Transmit>
	return ch;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000100 	.word	0x20000100

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <HardFault_Handler+0x4>

08000a76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <MemManage_Handler+0x4>

08000a7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <BusFault_Handler+0x4>

08000a82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <UsageFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 fa97 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}

08000abe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f000 fe08 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 fe01 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <I2C1_EV_IRQHandler+0x10>)
 8000ae2:	f000 fea0 	bl	8001826 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000b4 	.word	0x200000b4

08000af0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <I2C1_ER_IRQHandler+0x10>)
 8000af6:	f000 feb0 	bl	800185a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000b4 	.word	0x200000b4

08000b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART1_IRQHandler+0x10>)
 8000b0a:	f003 fbab 	bl	8004264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000100 	.word	0x20000100

08000b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000b1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b20:	f000 fdda 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	return 1;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_kill>:

int _kill(int pid, int sig)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b42:	f004 fafb 	bl	800513c <__errno>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2216      	movs	r2, #22
 8000b4a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_exit>:

void _exit (int status)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ffe7 	bl	8000b38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b6a:	e7fe      	b.n	8000b6a <_exit+0x12>

08000b6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e00a      	b.n	8000b94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b7e:	f3af 8000 	nop.w
 8000b82:	4601      	mov	r1, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	b2ca      	uxtb	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf0      	blt.n	8000b7e <_read+0x12>
	}

return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e009      	b.n	8000bcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff37 	bl	8000a34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbf1      	blt.n	8000bb8 <_write+0x12>
	}
	return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_close>:

int _close(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
	return -1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c06:	605a      	str	r2, [r3, #4]
	return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_isatty>:

int _isatty(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
	return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f004 fa60 	bl	800513c <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20030000 	.word	0x20030000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	200000a4 	.word	0x200000a4
 8000cb0:	200001a8 	.word	0x200001a8

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemInit+0x98>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <SystemInit+0x98>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cdc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ce0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <SystemInit+0x9c>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cfe:	f023 0305 	bic.w	r3, r3, #5
 8000d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <SystemInit+0xa0>)
 8000d20:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <SystemInit+0xa0>)
 8000d28:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00
 8000d50:	faf6fefb 	.word	0xfaf6fefb
 8000d54:	22041000 	.word	0x22041000

08000d58 <LL_AHB2_GRP1_EnableClock>:
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4013      	ands	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <MX_USART1_UART_Init+0x94>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e06:	f003 f947 	bl	8004098 <HAL_UART_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e10:	f7ff fde2 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e18:	f004 f8a4 	bl	8004f64 <HAL_UARTEx_SetTxFifoThreshold>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e22:	f7ff fdd9 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e2a:	f004 f8d9 	bl	8004fe0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e34:	f7ff fdd0 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e3a:	f004 f85a 	bl	8004ef2 <HAL_UARTEx_DisableFifoMode>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e44:	f7ff fdc8 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000100 	.word	0x20000100
 8000e50:	40013800 	.word	0x40013800

08000e54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_UART_MspInit+0x68>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11e      	bne.n	8000eb4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e76:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e7a:	f7ff ff86 	bl	8000d8a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f7ff ff6a 	bl	8000d58 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e84:	23c0      	movs	r3, #192	; 0xc0
 8000e86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e94:	2307      	movs	r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <HAL_UART_MspInit+0x6c>)
 8000ea0:	f000 faaa 	bl	80013f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2024      	movs	r0, #36	; 0x24
 8000eaa:	f000 f9a4 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eae:	2024      	movs	r0, #36	; 0x24
 8000eb0:	f000 f9bb 	bl	800122a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ec4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec8:	3304      	adds	r3, #4

08000eca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ecc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000ece:	d3f9      	bcc.n	8000ec4 <CopyDataInit>
  bx lr
 8000ed0:	4770      	bx	lr

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ed2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ed4:	3004      	adds	r0, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ed6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>
  bx lr
 8000eda:	4770      	bx	lr

08000edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ee0:	f7ff fee8 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <LoopForever+0x8>)
 8000ee6:	490c      	ldr	r1, [pc, #48]	; (8000f18 <LoopForever+0xc>)
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <LoopForever+0x10>)
 8000eea:	2300      	movs	r3, #0
 8000eec:	f7ff ffed 	bl	8000eca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <LoopForever+0x14>)
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <LoopForever+0x18>)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f7ff ffee 	bl	8000ed6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <LoopForever+0x1c>)
 8000efc:	490b      	ldr	r1, [pc, #44]	; (8000f2c <LoopForever+0x20>)
 8000efe:	2300      	movs	r3, #0
 8000f00:	f7ff ffe9 	bl	8000ed6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f04:	f004 f920 	bl	8005148 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000f08:	f7ff fc48 	bl	800079c <main>

08000f0c <LoopForever>:

LoopForever:
  b LoopForever
 8000f0c:	e7fe      	b.n	8000f0c <LoopForever>
 8000f0e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000f10:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000084 	.word	0x20000084
 8000f1c:	08005d60 	.word	0x08005d60
  INIT_BSS _sbss, _ebss
 8000f20:	20000084 	.word	0x20000084
 8000f24:	200001a4 	.word	0x200001a4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f28:	20030000 	.word	0x20030000
 8000f2c:	20030000 	.word	0x20030000

08000f30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_Init+0x3c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_Init+0x3c>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f000 f948 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f80f 	bl	8000f74 <HAL_InitTick>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	e001      	b.n	8000f66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f62:	f7ff fd7b 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58004000 	.word	0x58004000

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d024      	beq.n	8000fd2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f88:	f002 fb4a 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f950 	bl	8001246 <HAL_SYSTICK_Config>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10f      	bne.n	8000fcc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d809      	bhi.n	8000fc6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fba:	f000 f91c 	bl	80011f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <HAL_InitTick+0x70>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	e007      	b.n	8000fd6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e004      	b.n	8000fd6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e001      	b.n	8000fd6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000001c 	.word	0x2000001c
 8000fe4:	20000018 	.word	0x20000018

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000001c 	.word	0x2000001c
 800100c:	20000190 	.word	0x20000190

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000190 	.word	0x20000190

08001028 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTickPrio+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000018 	.word	0x20000018

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff40 	bl	8001088 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff90 	bl	8001134 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5f 	bl	80010e0 <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff33 	bl	80010a4 <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffa4 	bl	800119c <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e04f      	b.n	8001310 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d008      	beq.n	800128e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2204      	movs	r2, #4
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e040      	b.n	8001310 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020e 	bic.w	r2, r2, #14
 800129c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 021c 	and.w	r2, r3, #28
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d005      	beq.n	8001340 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e047      	b.n	80013d0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020e 	bic.w	r2, r2, #14
 800134e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800136e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f003 021c 	and.w	r2, r3, #28
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	2101      	movs	r1, #1
 800137e:	fa01 f202 	lsl.w	r2, r1, r2
 8001382:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800138c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4798      	blx	r3
    }
  }
  return status;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013e8:	b2db      	uxtb	r3, r3
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e14c      	b.n	80016a2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 813e 	beq.w	800169c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d00b      	beq.n	8001440 <HAL_GPIO_Init+0x48>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001434:	2b11      	cmp	r3, #17
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d130      	bne.n	80014a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001476:	2201      	movs	r2, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 0201 	and.w	r2, r3, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0xea>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d123      	bne.n	800152a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	08da      	lsrs	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	6939      	ldr	r1, [r7, #16]
 8001526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0203 	and.w	r2, r3, #3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8098 	beq.w	800169c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800156c:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_GPIO_Init+0x2c8>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001596:	d019      	beq.n	80015cc <HAL_GPIO_Init+0x1d4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <HAL_GPIO_Init+0x2cc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d013      	beq.n	80015c8 <HAL_GPIO_Init+0x1d0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1cc>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a48      	ldr	r2, [pc, #288]	; (80016cc <HAL_GPIO_Init+0x2d4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1c8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <HAL_GPIO_Init+0x2d8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1c4>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e008      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015bc:	2307      	movs	r3, #7
 80015be:	e006      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015cc:	2300      	movs	r3, #0
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015de:	4938      	ldr	r1, [pc, #224]	; (80016c0 <HAL_GPIO_Init+0x2c8>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 80015ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001612:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 800161c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001640:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f47f aeab 	bne.w	8001408 <HAL_GPIO_Init+0x10>
  }
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40010000 	.word	0x40010000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000c00 	.word	0x48000c00
 80016d0:	48001000 	.word	0x48001000
 80016d4:	58000800 	.word	0x58000800

080016d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f928 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58000800 	.word	0x58000800

08001708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e081      	b.n	800181e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7fe fff2 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2224      	movs	r2, #36	; 0x24
 8001738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001758:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001768:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d107      	bne.n	8001782 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e006      	b.n	8001790 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800178e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d104      	bne.n	80017a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	ea42 0103 	orr.w	r1, r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	021a      	lsls	r2, r3, #8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69d9      	ldr	r1, [r3, #28]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
  }
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d010      	beq.n	80018a0 <HAL_I2C_ER_IRQHandler+0x46>
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	09db      	lsrs	r3, r3, #7
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	0a9b      	lsrs	r3, r3, #10
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <HAL_I2C_ER_IRQHandler+0x74>
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	09db      	lsrs	r3, r3, #7
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00a      	beq.n	80018ce <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	f043 0208 	orr.w	r2, r3, #8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	0a5b      	lsrs	r3, r3, #9
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d010      	beq.n	80018fc <HAL_I2C_ER_IRQHandler+0xa2>
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	09db      	lsrs	r3, r3, #7
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f043 0202 	orr.w	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 030b 	and.w	r3, r3, #11
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fb8a 	bl	8002028 <I2C_ITError>
  }
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
 8001950:	4613      	mov	r3, r2
 8001952:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <I2C_Slave_ISR_IT+0x24>
 80019bc:	2302      	movs	r3, #2
 80019be:	e0ec      	b.n	8001b9a <I2C_Slave_ISR_IT+0x1fe>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <I2C_Slave_ISR_IT+0x4c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80019e0:	6939      	ldr	r1, [r7, #16]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f9c0 	bl	8001d68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d04d      	beq.n	8001a90 <I2C_Slave_ISR_IT+0xf4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d047      	beq.n	8001a90 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d128      	bne.n	8001a5c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b28      	cmp	r3, #40	; 0x28
 8001a14:	d108      	bne.n	8001a28 <I2C_Slave_ISR_IT+0x8c>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a1c:	d104      	bne.n	8001a28 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 faab 	bl	8001f7c <I2C_ITListenCplt>
 8001a26:	e032      	b.n	8001a8e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b29      	cmp	r3, #41	; 0x29
 8001a32:	d10e      	bne.n	8001a52 <I2C_Slave_ISR_IT+0xb6>
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a3a:	d00a      	beq.n	8001a52 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2210      	movs	r2, #16
 8001a42:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fbe6 	bl	8002216 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f92d 	bl	8001caa <I2C_ITSlaveSeqCplt>
 8001a50:	e01d      	b.n	8001a8e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2210      	movs	r2, #16
 8001a58:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a5a:	e096      	b.n	8001b8a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2210      	movs	r2, #16
 8001a62:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0204 	orr.w	r2, r3, #4
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <I2C_Slave_ISR_IT+0xe4>
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	f040 8085 	bne.w	8001b8a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	4619      	mov	r1, r3
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 face 	bl	8002028 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a8c:	e07d      	b.n	8001b8a <I2C_Slave_ISR_IT+0x1ee>
 8001a8e:	e07c      	b.n	8001b8a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d030      	beq.n	8001afe <I2C_Slave_ISR_IT+0x162>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02a      	beq.n	8001afe <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d018      	beq.n	8001ae4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d14f      	bne.n	8001b8e <I2C_Slave_ISR_IT+0x1f2>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001af4:	d04b      	beq.n	8001b8e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f8d7 	bl	8001caa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001afc:	e047      	b.n	8001b8e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <I2C_Slave_ISR_IT+0x184>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b16:	6939      	ldr	r1, [r7, #16]
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f842 	bl	8001ba2 <I2C_ITAddrCplt>
 8001b1e:	e037      	b.n	8001b90 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d031      	beq.n	8001b90 <I2C_Slave_ISR_IT+0x1f4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	085b      	lsrs	r3, r3, #1
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02b      	beq.n	8001b90 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d018      	beq.n	8001b74 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b72:	e00d      	b.n	8001b90 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7a:	d002      	beq.n	8001b82 <I2C_Slave_ISR_IT+0x1e6>
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f891 	bl	8001caa <I2C_ITSlaveSeqCplt>
 8001b88:	e002      	b.n	8001b90 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001b8a:	bf00      	nop
 8001b8c:	e000      	b.n	8001b90 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001b8e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001bb8:	2b28      	cmp	r3, #40	; 0x28
 8001bba:	d16a      	bne.n	8001c92 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	0c1b      	lsrs	r3, r3, #16
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001bda:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001bf6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d138      	bne.n	8001c72 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001c00:	897b      	ldrh	r3, [r7, #10]
 8001c02:	09db      	lsrs	r3, r3, #7
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	89bb      	ldrh	r3, [r7, #12]
 8001c08:	4053      	eors	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f003 0306 	and.w	r3, r3, #6
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d11c      	bne.n	8001c4e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d13b      	bne.n	8001ca2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2208      	movs	r2, #8
 8001c36:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c40:	89ba      	ldrh	r2, [r7, #12]
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe7c 	bl	8001944 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001c4c:	e029      	b.n	8001ca2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001c4e:	893b      	ldrh	r3, [r7, #8]
 8001c50:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fb1f 	bl	800229a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c64:	89ba      	ldrh	r2, [r7, #12]
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fe6a 	bl	8001944 <HAL_I2C_AddrCallback>
}
 8001c70:	e017      	b.n	8001ca2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fb0f 	bl	800229a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c84:	89ba      	ldrh	r2, [r7, #12]
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fe5a 	bl	8001944 <HAL_I2C_AddrCallback>
}
 8001c90:	e007      	b.n	8001ca2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2208      	movs	r2, #8
 8001c98:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	0b9b      	lsrs	r3, r3, #14
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e00d      	b.n	8001cfc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	0bdb      	lsrs	r3, r3, #15
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b29      	cmp	r3, #41	; 0x29
 8001d06:	d112      	bne.n	8001d2e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2228      	movs	r2, #40	; 0x28
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2221      	movs	r2, #33	; 0x21
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d16:	2101      	movs	r1, #1
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fabe 	bl	800229a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fdf8 	bl	800191c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d2c:	e017      	b.n	8001d5e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b2a      	cmp	r3, #42	; 0x2a
 8001d38:	d111      	bne.n	8001d5e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2228      	movs	r2, #40	; 0x28
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2222      	movs	r2, #34	; 0x22
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d48:	2102      	movs	r1, #2
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 faa5 	bl	800229a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fde9 	bl	8001930 <HAL_I2C_SlaveRxCpltCallback>
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d84:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b21      	cmp	r3, #33	; 0x21
 8001d92:	d002      	beq.n	8001d9a <I2C_ITSlaveCplt+0x32>
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b29      	cmp	r3, #41	; 0x29
 8001d98:	d108      	bne.n	8001dac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001d9a:	f248 0101 	movw	r1, #32769	; 0x8001
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa7b 	bl	800229a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2221      	movs	r2, #33	; 0x21
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
 8001daa:	e00d      	b.n	8001dc8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b22      	cmp	r3, #34	; 0x22
 8001db0:	d002      	beq.n	8001db8 <I2C_ITSlaveCplt+0x50>
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	2b2a      	cmp	r3, #42	; 0x2a
 8001db6:	d107      	bne.n	8001dc8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001db8:	f248 0102 	movw	r1, #32770	; 0x8002
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fa6c 	bl	800229a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2222      	movs	r2, #34	; 0x22
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <I2C_ITSlaveCplt+0x20c>)
 8001de4:	400b      	ands	r3, r1
 8001de6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fa14 	bl	8002216 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	0b9b      	lsrs	r3, r3, #14
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d013      	beq.n	8001e22 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e20:	e018      	b.n	8001e54 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	0bdb      	lsrs	r3, r3, #15
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d012      	beq.n	8001e54 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0204 	orr.w	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d010      	beq.n	8001ef0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8a7 	bl	8002028 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b28      	cmp	r3, #40	; 0x28
 8001ee4:	d141      	bne.n	8001f6a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ee6:	6979      	ldr	r1, [r7, #20]
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f847 	bl	8001f7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001eee:	e03c      	b.n	8001f6a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ef8:	d014      	beq.n	8001f24 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fed5 	bl	8001caa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <I2C_ITSlaveCplt+0x210>)
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fd1f 	bl	8001960 <HAL_I2C_ListenCpltCallback>
}
 8001f22:	e022      	b.n	8001f6a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b22      	cmp	r3, #34	; 0x22
 8001f2e:	d10e      	bne.n	8001f4e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fcf2 	bl	8001930 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f4c:	e00d      	b.n	8001f6a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fcd9 	bl	800191c <HAL_I2C_SlaveTxCpltCallback>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	fe00e800 	.word	0xfe00e800
 8001f78:	ffff0000 	.word	0xffff0000

08001f7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <I2C_ITListenCplt+0xa8>)
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d022      	beq.n	8001ffa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ffa:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f94b 	bl	800229a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2210      	movs	r2, #16
 800200a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fca3 	bl	8001960 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	ffff0000 	.word	0xffff0000

08002028 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <I2C_ITError+0x194>)
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b28      	cmp	r3, #40	; 0x28
 800205e:	d005      	beq.n	800206c <I2C_ITError+0x44>
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b29      	cmp	r3, #41	; 0x29
 8002064:	d002      	beq.n	800206c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b2a      	cmp	r3, #42	; 0x2a
 800206a:	d10b      	bne.n	8002084 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800206c:	2103      	movs	r1, #3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f913 	bl	800229a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2228      	movs	r2, #40	; 0x28
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <I2C_ITError+0x198>)
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
 8002082:	e011      	b.n	80020a8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002084:	f248 0103 	movw	r1, #32771	; 0x8003
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f906 	bl	800229a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b60      	cmp	r3, #96	; 0x60
 8002098:	d003      	beq.n	80020a2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d039      	beq.n	800212a <I2C_ITError+0x102>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	d002      	beq.n	80020c2 <I2C_ITError+0x9a>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b21      	cmp	r3, #33	; 0x21
 80020c0:	d133      	bne.n	800212a <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d0:	d107      	bne.n	80020e2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f977 	bl	80013da <HAL_DMA_GetState>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d017      	beq.n	8002122 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	4a33      	ldr	r2, [pc, #204]	; (80021c4 <I2C_ITError+0x19c>)
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f908 	bl	800131c <HAL_DMA_Abort_IT>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d04d      	beq.n	80021ae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800211c:	4610      	mov	r0, r2
 800211e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002120:	e045      	b.n	80021ae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f850 	bl	80021c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002128:	e041      	b.n	80021ae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d039      	beq.n	80021a6 <I2C_ITError+0x17e>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b12      	cmp	r3, #18
 8002136:	d002      	beq.n	800213e <I2C_ITError+0x116>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b22      	cmp	r3, #34	; 0x22
 800213c:	d133      	bne.n	80021a6 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800214c:	d107      	bne.n	800215e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f939 	bl	80013da <HAL_DMA_GetState>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d017      	beq.n	800219e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <I2C_ITError+0x19c>)
 8002174:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f8ca 	bl	800131c <HAL_DMA_Abort_IT>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002198:	4610      	mov	r0, r2
 800219a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800219c:	e009      	b.n	80021b2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f812 	bl	80021c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021a4:	e005      	b.n	80021b2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f80e 	bl	80021c8 <I2C_TreatErrorCallback>
  }
}
 80021ac:	e002      	b.n	80021b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021ae:	bf00      	nop
 80021b0:	e000      	b.n	80021b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021b2:	bf00      	nop
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	ffff0000 	.word	0xffff0000
 80021c0:	0800199d 	.word	0x0800199d
 80021c4:	0800225f 	.word	0x0800225f

080021c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b60      	cmp	r3, #96	; 0x60
 80021da:	d10e      	bne.n	80021fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff fbc8 	bl	8001988 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021f8:	e009      	b.n	800220e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fbb3 	bl	8001974 <HAL_I2C_ErrorCallback>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d103      	bne.n	8002234 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d007      	beq.n	8002252 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	619a      	str	r2, [r3, #24]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	2200      	movs	r2, #0
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	2200      	movs	r2, #0
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff9b 	bl	80021c8 <I2C_TreatErrorCallback>
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00f      	beq.n	80022d4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80022ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022c8:	2b28      	cmp	r3, #40	; 0x28
 80022ca:	d003      	beq.n	80022d4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80022d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00f      	beq.n	80022fe <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80022e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022f2:	2b28      	cmp	r3, #40	; 0x28
 80022f4:	d003      	beq.n	80022fe <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80022fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80022fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da03      	bge.n	800230e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800230c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	2b10      	cmp	r3, #16
 8002312:	d103      	bne.n	800231c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800231a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	2b20      	cmp	r3, #32
 8002320:	d103      	bne.n	800232a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d103      	bne.n	8002338 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002336:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43da      	mvns	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	400a      	ands	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	d138      	bne.n	80023de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002376:	2302      	movs	r3, #2
 8002378:	e032      	b.n	80023e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2224      	movs	r2, #36	; 0x24
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0201 	bic.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023de:	2302      	movs	r3, #2
  }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d139      	bne.n	8002476 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800240c:	2302      	movs	r3, #2
 800240e:	e033      	b.n	8002478 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800243e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	58000400 	.word	0x58000400

080024a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_PWREx_GetVoltageRange+0x18>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	58000400 	.word	0x58000400

080024c0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d2:	d101      	bne.n	80024d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002532:	d101      	bne.n	8002538 <LL_RCC_HSE_IsReady+0x18>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <LL_RCC_HSE_IsReady+0x1a>
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002592:	d101      	bne.n	8002598 <LL_RCC_HSI_IsReady+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_RCC_HSI_IsReady+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d101      	bne.n	800262a <LL_RCC_HSI48_IsReady+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_RCC_HSI48_IsReady+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d101      	bne.n	80026d6 <LL_RCC_LSE_IsReady+0x18>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_RCC_LSE_IsReady+0x1a>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d101      	bne.n	800273e <LL_RCC_LSI1_IsReady+0x18>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_RCC_LSI1_IsReady+0x1a>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277c:	f023 0304 	bic.w	r3, r3, #4
 8002780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d101      	bne.n	80027a6 <LL_RCC_LSI2_IsReady+0x18>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_RCC_LSI2_IsReady+0x1a>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6013      	str	r3, [r2, #0]
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d101      	bne.n	8002832 <LL_RCC_MSI_IsReady+0x16>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_RCC_MSI_IsReady+0x18>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002876:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2bb0      	cmp	r3, #176	; 0xb0
 800287c:	d901      	bls.n	8002882 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800287e:	23b0      	movs	r3, #176	; 0xb0
 8002880:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002882:	687b      	ldr	r3, [r7, #4]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 0203 	bic.w	r2, r3, #3
 80028cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002932:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a60:	6013      	str	r3, [r2, #0]
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a7e:	d101      	bne.n	8002a84 <LL_RCC_PLL_IsReady+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_RCC_PLL_IsReady+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d101      	bne.n	8002b0a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b2a:	d101      	bne.n	8002b30 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d101      	bne.n	8002b56 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b74:	d101      	bne.n	8002b7a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b98:	d101      	bne.n	8002b9e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b08d      	sub	sp, #52	; 0x34
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e37e      	b.n	80032bc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8092 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bcc:	f7ff fe89 	bl	80028e2 <LL_RCC_GetSysClkSource>
 8002bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd2:	f7ff ff82 	bl	8002ada <LL_RCC_PLL_GetMainSource>
 8002bd6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x3e>
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d14c      	bne.n	8002c7e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d149      	bne.n	8002c7e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bea:	f7ff fe17 	bl	800281c <LL_RCC_MSI_IsReady>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_OscConfig+0x54>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e35d      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002c04:	f7ff fe2f 	bl	8002866 <LL_RCC_MSI_GetRange>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	d914      	bls.n	8002c38 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd44 	bl	80036a0 <RCC_SetFlashLatencyFromMSIRange>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e34c      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fe09 	bl	800283e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fe2d 	bl	8002890 <LL_RCC_MSI_SetCalibTrimming>
 8002c36:	e013      	b.n	8002c60 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fdfe 	bl	800283e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fe22 	bl	8002890 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fd25 	bl	80036a0 <RCC_SetFlashLatencyFromMSIRange>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e32d      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c60:	f000 fcde 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4ab3      	ldr	r2, [pc, #716]	; (8002f34 <HAL_RCC_OscConfig+0x388>)
 8002c68:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c6a:	4bb3      	ldr	r3, [pc, #716]	; (8002f38 <HAL_RCC_OscConfig+0x38c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f980 	bl	8000f74 <HAL_InitTick>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d039      	beq.n	8002cee <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e31e      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01e      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c86:	f7ff fdab 	bl	80027e0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe f9c1 	bl	8001010 <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c92:	f7fe f9bd 	bl	8001010 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e30b      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ca4:	f7ff fdba 	bl	800281c <LL_RCC_MSI_IsReady>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f1      	beq.n	8002c92 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fdc3 	bl	800283e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fde7 	bl	8002890 <LL_RCC_MSI_SetCalibTrimming>
 8002cc2:	e015      	b.n	8002cf0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cc4:	f7ff fd9b 	bl	80027fe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f9a2 	bl	8001010 <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd0:	f7fe f99e 	bl	8001010 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e2ec      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ce2:	f7ff fd9b 	bl	800281c <LL_RCC_MSI_IsReady>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f1      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x124>
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d04e      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfc:	f7ff fdf1 	bl	80028e2 <LL_RCC_GetSysClkSource>
 8002d00:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d02:	f7ff feea 	bl	8002ada <LL_RCC_PLL_GetMainSource>
 8002d06:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x16e>
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d10a      	bne.n	8002d30 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1a:	f7ff fc01 	bl	8002520 <LL_RCC_HSE_IsReady>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d039      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1ec>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d135      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e2c5      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x194>
 8002d3a:	f7ff fbd3 	bl	80024e4 <LL_RCC_HSE_Enable>
 8002d3e:	e001      	b.n	8002d44 <HAL_RCC_OscConfig+0x198>
 8002d40:	f7ff fbdf 	bl	8002502 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f960 	bl	8001010 <HAL_GetTick>
 8002d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe f95c 	bl	8001010 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e2aa      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d66:	f7ff fbdb 	bl	8002520 <LL_RCC_HSE_IsReady>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f1      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1a8>
 8002d70:	e013      	b.n	8002d9a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe f94d 	bl	8001010 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7a:	f7fe f949 	bl	8001010 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	; 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e297      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d8c:	f7ff fbc8 	bl	8002520 <LL_RCC_HSE_IsReady>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f1      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1ce>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d051      	beq.n	8002e4a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	f7ff fd9c 	bl	80028e2 <LL_RCC_GetSysClkSource>
 8002daa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dac:	f7ff fe95 	bl	8002ada <LL_RCC_PLL_GetMainSource>
 8002db0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x218>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d113      	bne.n	8002de6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d110      	bne.n	8002de6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc4:	f7ff fbdc 	bl	8002580 <LL_RCC_HSI_IsReady>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_RCC_OscConfig+0x22e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e270      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fbe0 	bl	80025a4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de4:	e031      	b.n	8002e4a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d019      	beq.n	8002e22 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dee:	f7ff fba9 	bl	8002544 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe f90d 	bl	8001010 <HAL_GetTick>
 8002df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fe f909 	bl	8001010 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e257      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e0c:	f7ff fbb8 	bl	8002580 <LL_RCC_HSI_IsReady>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f1      	beq.n	8002dfa <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fbc2 	bl	80025a4 <LL_RCC_HSI_SetCalibTrimming>
 8002e20:	e013      	b.n	8002e4a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	f7ff fb9e 	bl	8002562 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe f8f3 	bl	8001010 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7fe f8ef 	bl	8001010 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e23d      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e40:	f7ff fb9e 	bl	8002580 <LL_RCC_HSI_IsReady>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f1      	bne.n	8002e2e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a3 	beq.w	8002faa <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d076      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d046      	beq.n	8002f06 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002e78:	f7ff fc55 	bl	8002726 <LL_RCC_LSI1_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002e82:	f7ff fc2e 	bl	80026e2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e86:	f7fe f8c3 	bl	8001010 <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e8e:	f7fe f8bf 	bl	8001010 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e20d      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ea0:	f7ff fc41 	bl	8002726 <LL_RCC_LSI1_IsReady>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f1      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002eaa:	f7ff fc4e 	bl	800274a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f8af 	bl	8001010 <HAL_GetTick>
 8002eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002eb6:	f7fe f8ab 	bl	8001010 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1f9      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002ec8:	f7ff fc61 	bl	800278e <LL_RCC_LSI2_IsReady>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f1      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fc6b 	bl	80027b2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002edc:	f7ff fc12 	bl	8002704 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f896 	bl	8001010 <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ee8:	f7fe f892 	bl	8001010 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1e0      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002efa:	f7ff fc14 	bl	8002726 <LL_RCC_LSI1_IsReady>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f1      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x33c>
 8002f04:	e051      	b.n	8002faa <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002f06:	f7ff fbec 	bl	80026e2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f881 	bl	8001010 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f12:	f7fe f87d 	bl	8001010 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1cb      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f24:	f7ff fbff 	bl	8002726 <LL_RCC_LSI1_IsReady>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f1      	beq.n	8002f12 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002f2e:	f7ff fc1d 	bl	800276c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002f32:	e00c      	b.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
 8002f34:	20000014 	.word	0x20000014
 8002f38:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002f3c:	f7fe f868 	bl	8001010 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1b6      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002f4e:	f7ff fc1e 	bl	800278e <LL_RCC_LSI2_IsReady>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f1      	bne.n	8002f3c <HAL_RCC_OscConfig+0x390>
 8002f58:	e027      	b.n	8002faa <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002f5a:	f7ff fc07 	bl	800276c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5e:	f7fe f857 	bl	8001010 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002f66:	f7fe f853 	bl	8001010 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1a1      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002f78:	f7ff fc09 	bl	800278e <LL_RCC_LSI2_IsReady>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f1      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002f82:	f7ff fbbf 	bl	8002704 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe f843 	bl	8001010 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f8e:	f7fe f83f 	bl	8001010 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e18d      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002fa0:	f7ff fbc1 	bl	8002726 <LL_RCC_LSI1_IsReady>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f1      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d05b      	beq.n	800306e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb6:	4bb5      	ldr	r3, [pc, #724]	; (800328c <HAL_RCC_OscConfig+0x6e0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d114      	bne.n	8002fec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fc2:	f7ff fa5f 	bl	8002484 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe f823 	bl	8001010 <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7fe f81f 	bl	8001010 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e16d      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	4baa      	ldr	r3, [pc, #680]	; (800328c <HAL_RCC_OscConfig+0x6e0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_OscConfig+0x44e>
 8002ff4:	f7ff fb1f 	bl	8002636 <LL_RCC_LSE_Enable>
 8002ff8:	e00c      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d104      	bne.n	800300c <HAL_RCC_OscConfig+0x460>
 8003002:	f7ff fb3a 	bl	800267a <LL_RCC_LSE_EnableBypass>
 8003006:	f7ff fb16 	bl	8002636 <LL_RCC_LSE_Enable>
 800300a:	e003      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
 800300c:	f7ff fb24 	bl	8002658 <LL_RCC_LSE_Disable>
 8003010:	f7ff fb44 	bl	800269c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d014      	beq.n	8003046 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fd fff8 	bl	8001010 <HAL_GetTick>
 8003020:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fd fff4 	bl	8001010 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e140      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800303a:	f7ff fb40 	bl	80026be <LL_RCC_LSE_IsReady>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ef      	beq.n	8003024 <HAL_RCC_OscConfig+0x478>
 8003044:	e013      	b.n	800306e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fd ffe3 	bl	8001010 <HAL_GetTick>
 800304a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fd ffdf 	bl	8001010 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e12b      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003064:	f7ff fb2b 	bl	80026be <LL_RCC_LSE_IsReady>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ef      	bne.n	800304e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02c      	beq.n	80030d4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d014      	beq.n	80030ac <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003082:	f7ff faa4 	bl	80025ce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fd ffc3 	bl	8001010 <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308e:	f7fd ffbf 	bl	8001010 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e10d      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80030a0:	f7ff fab7 	bl	8002612 <LL_RCC_HSI48_IsReady>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f1      	beq.n	800308e <HAL_RCC_OscConfig+0x4e2>
 80030aa:	e013      	b.n	80030d4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030ac:	f7ff faa0 	bl	80025f0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fd ffae 	bl	8001010 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b8:	f7fd ffaa 	bl	8001010 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0f8      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80030ca:	f7ff faa2 	bl	8002612 <LL_RCC_HSI48_IsReady>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f1      	bne.n	80030b8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80ee 	beq.w	80032ba <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030de:	f7ff fc00 	bl	80028e2 <LL_RCC_GetSysClkSource>
 80030e2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	f040 80af 	bne.w	8003254 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	429a      	cmp	r2, r3
 8003102:	d123      	bne.n	800314c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d11c      	bne.n	800314c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d114      	bne.n	800314c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d10d      	bne.n	800314c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d05d      	beq.n	8003208 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d058      	beq.n	8003204 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0ab      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003164:	f7ff fc73 	bl	8002a4e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003168:	f7fd ff52 	bl	8001010 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fd ff4e 	bl	8001010 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e09c      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ef      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_RCC_OscConfig+0x6e4>)
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a8:	0212      	lsls	r2, r2, #8
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031b6:	4311      	orrs	r1, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031bc:	430a      	orrs	r2, r1
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031c6:	f7ff fc33 	bl	8002a30 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031da:	f7fd ff19 	bl	8001010 <HAL_GetTick>
 80031de:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd ff15 	bl	8001010 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e063      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ef      	beq.n	80031e2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003202:	e05a      	b.n	80032ba <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e059      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d151      	bne.n	80032ba <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003216:	f7ff fc0b 	bl	8002a30 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003228:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800322a:	f7fd fef1 	bl	8001010 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fd feed 	bl	8001010 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e03b      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ef      	beq.n	8003232 <HAL_RCC_OscConfig+0x686>
 8003252:	e032      	b.n	80032ba <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d02d      	beq.n	80032b6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	f7ff fbf8 	bl	8002a4e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003268:	f023 0303 	bic.w	r3, r3, #3
 800326c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003278:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800327c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003280:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd fec5 	bl	8001010 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	e00d      	b.n	80032a6 <HAL_RCC_OscConfig+0x6fa>
 800328a:	bf00      	nop
 800328c:	58000400 	.word	0x58000400
 8003290:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003294:	f7fd febc 	bl	8001010 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ef      	bne.n	8003294 <HAL_RCC_OscConfig+0x6e8>
 80032b4:	e001      	b.n	80032ba <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3734      	adds	r7, #52	; 0x34
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e12d      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b98      	ldr	r3, [pc, #608]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d91b      	bls.n	800331e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b95      	ldr	r3, [pc, #596]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	4993      	ldr	r1, [pc, #588]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f6:	f7fd fe8b 	bl	8001010 <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032fe:	f7fd fe87 	bl	8001010 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e111      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003310:	4b8a      	ldr	r3, [pc, #552]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d1ef      	bne.n	80032fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fae3 	bl	80028fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003334:	f7fd fe6c 	bl	8001010 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800333c:	f7fd fe68 	bl	8001010 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0f2      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800334e:	f7ff fbd0 	bl	8002af2 <LL_RCC_IsActiveFlag_HPRE>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f1      	beq.n	800333c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d016      	beq.n	8003392 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fada 	bl	8002922 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800336e:	f7fd fe4f 	bl	8001010 <HAL_GetTick>
 8003372:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003376:	f7fd fe4b 	bl	8001010 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0d5      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003388:	f7ff fbc5 	bl	8002b16 <LL_RCC_IsActiveFlag_C2HPRE>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f1      	beq.n	8003376 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fad3 	bl	800294e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033a8:	f7fd fe32 	bl	8001010 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033b0:	f7fd fe2e 	bl	8001010 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0b8      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033c2:	f7ff fbbb 	bl	8002b3c <LL_RCC_IsActiveFlag_SHDHPRE>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f1      	beq.n	80033b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff facd 	bl	800297c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033e2:	f7fd fe15 	bl	8001010 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033ea:	f7fd fe11 	bl	8001010 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e09b      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033fc:	f7ff fbb1 	bl	8002b62 <LL_RCC_IsActiveFlag_PPRE1>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f1      	beq.n	80033ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d017      	beq.n	8003442 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fac3 	bl	80029a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800341e:	f7fd fdf7 	bl	8001010 <HAL_GetTick>
 8003422:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003426:	f7fd fdf3 	bl	8001010 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e07d      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003438:	f7ff fba5 	bl	8002b86 <LL_RCC_IsActiveFlag_PPRE2>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f1      	beq.n	8003426 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d043      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d106      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003456:	f7ff f863 	bl	8002520 <LL_RCC_HSE_IsReady>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d11e      	bne.n	800349e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e067      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d106      	bne.n	800347a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800346c:	f7ff fafe 	bl	8002a6c <LL_RCC_PLL_IsReady>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d113      	bne.n	800349e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e05c      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003482:	f7ff f9cb 	bl	800281c <LL_RCC_MSI_IsReady>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d108      	bne.n	800349e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e051      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003490:	f7ff f876 	bl	8002580 <LL_RCC_HSI_IsReady>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e04a      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fa09 	bl	80028ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a8:	f7fd fdb2 	bl	8001010 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fd fdae 	bl	8001010 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e036      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	f7ff fa0c 	bl	80028e2 <LL_RCC_GetSysClkSource>
 80034ca:	4602      	mov	r2, r0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d1ec      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d21b      	bcs.n	800351c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 0207 	bic.w	r2, r3, #7
 80034ec:	4913      	ldr	r1, [pc, #76]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f4:	f7fd fd8c 	bl	8001010 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	e008      	b.n	800350e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034fc:	f7fd fd88 	bl	8001010 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e012      	b.n	8003534 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_ClockConfig+0x278>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d1ef      	bne.n	80034fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800351c:	f000 f880 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003520:	4603      	mov	r3, r0
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_RCC_ClockConfig+0x27c>)
 8003524:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003526:	f7fd fd7f 	bl	8001028 <HAL_GetTickPrio>
 800352a:	4603      	mov	r3, r0
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fd21 	bl	8000f74 <HAL_InitTick>
 8003532:	4603      	mov	r3, r0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	58004000 	.word	0x58004000
 8003540:	20000014 	.word	0x20000014

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354a:	f7ff f9ca 	bl	80028e2 <LL_RCC_GetSysClkSource>
 800354e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003556:	f7ff f986 	bl	8002866 <LL_RCC_MSI_GetRange>
 800355a:	4603      	mov	r3, r0
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e04b      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d102      	bne.n	8003578 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e045      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b08      	cmp	r3, #8
 800357c:	d10a      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800357e:	f7fe ff9f 	bl	80024c0 <LL_RCC_HSE_IsEnabledDiv2>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003588:	4b23      	ldr	r3, [pc, #140]	; (8003618 <HAL_RCC_GetSysClockFreq+0xd4>)
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e03a      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800358e:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_RCC_GetSysClockFreq+0xd8>)
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e037      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003594:	f7ff faa1 	bl	8002ada <LL_RCC_PLL_GetMainSource>
 8003598:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d003      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x64>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x6a>
 80035a6:	e00d      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035aa:	60bb      	str	r3, [r7, #8]
        break;
 80035ac:	e015      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035ae:	f7fe ff87 	bl	80024c0 <LL_RCC_HSE_IsEnabledDiv2>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d102      	bne.n	80035be <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <HAL_RCC_GetSysClockFreq+0xd4>)
 80035ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80035bc:	e00d      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_RCC_GetSysClockFreq+0xd8>)
 80035c0:	60bb      	str	r3, [r7, #8]
        break;
 80035c2:	e00a      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80035c4:	f7ff f94f 	bl	8002866 <LL_RCC_MSI_GetRange>
 80035c8:	4603      	mov	r3, r0
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	60bb      	str	r3, [r7, #8]
        break;
 80035d8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80035da:	f7ff fa59 	bl	8002a90 <LL_RCC_PLL_GetN>
 80035de:	4602      	mov	r2, r0
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	fb03 f402 	mul.w	r4, r3, r2
 80035e6:	f7ff fa6c 	bl	8002ac2 <LL_RCC_PLL_GetDivider>
 80035ea:	4603      	mov	r3, r0
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	3301      	adds	r3, #1
 80035f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80035f4:	f7ff fa59 	bl	8002aaa <LL_RCC_PLL_GetR>
 80035f8:	4603      	mov	r3, r0
 80035fa:	0f5b      	lsrs	r3, r3, #29
 80035fc:	3301      	adds	r3, #1
 80035fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8003602:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	bf00      	nop
 8003610:	08005c80 	.word	0x08005c80
 8003614:	00f42400 	.word	0x00f42400
 8003618:	003d0900 	.word	0x003d0900
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b598      	push	{r3, r4, r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003624:	f7ff ff8e 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003628:	4604      	mov	r4, r0
 800362a:	f7ff f9cf 	bl	80029cc <LL_RCC_GetAHBPrescaler>
 800362e:	4603      	mov	r3, r0
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	4a03      	ldr	r2, [pc, #12]	; (8003644 <HAL_RCC_GetHCLKFreq+0x24>)
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd98      	pop	{r3, r4, r7, pc}
 8003644:	08005c20 	.word	0x08005c20

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003648:	b598      	push	{r3, r4, r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800364c:	f7ff ffe8 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003650:	4604      	mov	r4, r0
 8003652:	f7ff f9d5 	bl	8002a00 <LL_RCC_GetAPB1Prescaler>
 8003656:	4603      	mov	r3, r0
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	fa24 f303 	lsr.w	r3, r4, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd98      	pop	{r3, r4, r7, pc}
 8003670:	08005c60 	.word	0x08005c60

08003674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003674:	b598      	push	{r3, r4, r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003678:	f7ff ffd2 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 800367c:	4604      	mov	r4, r0
 800367e:	f7ff f9cb 	bl	8002a18 <LL_RCC_GetAPB2Prescaler>
 8003682:	4603      	mov	r3, r0
 8003684:	0adb      	lsrs	r3, r3, #11
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <HAL_RCC_GetPCLK2Freq+0x28>)
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd98      	pop	{r3, r4, r7, pc}
 800369c:	08005c60 	.word	0x08005c60

080036a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2bb0      	cmp	r3, #176	; 0xb0
 80036ac:	d903      	bls.n	80036b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e007      	b.n	80036c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	4a11      	ldr	r2, [pc, #68]	; (8003704 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80036c6:	f7ff f98d 	bl	80029e4 <LL_RCC_GetAHB4Prescaler>
 80036ca:	4603      	mov	r3, r0
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9c      	lsrs	r4, r3, #18
 80036ea:	f7fe fedb 	bl	80024a4 <HAL_PWREx_GetVoltageRange>
 80036ee:	4603      	mov	r3, r0
 80036f0:	4619      	mov	r1, r3
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 f80c 	bl	8003710 <RCC_SetFlashLatency>
 80036f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd90      	pop	{r4, r7, pc}
 8003702:	bf00      	nop
 8003704:	08005c80 	.word	0x08005c80
 8003708:	08005c20 	.word	0x08005c20
 800370c:	431bde83 	.word	0x431bde83

08003710 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b093      	sub	sp, #76	; 0x4c
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800371a:	4b39      	ldr	r3, [pc, #228]	; (8003800 <RCC_SetFlashLatency+0xf0>)
 800371c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003726:	4a37      	ldr	r2, [pc, #220]	; (8003804 <RCC_SetFlashLatency+0xf4>)
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	ca07      	ldmia	r2, {r0, r1, r2}
 800372e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003732:	4b35      	ldr	r3, [pc, #212]	; (8003808 <RCC_SetFlashLatency+0xf8>)
 8003734:	f107 040c 	add.w	r4, r7, #12
 8003738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800373a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800373e:	2300      	movs	r3, #0
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003748:	d11c      	bne.n	8003784 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800374a:	2300      	movs	r3, #0
 800374c:	643b      	str	r3, [r7, #64]	; 0x40
 800374e:	e015      	b.n	800377c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003758:	4413      	add	r3, r2
 800375a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d808      	bhi.n	8003776 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800376c:	4413      	add	r3, r2
 800376e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003772:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003774:	e022      	b.n	80037bc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003778:	3301      	adds	r3, #1
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	2b03      	cmp	r3, #3
 8003780:	d9e6      	bls.n	8003750 <RCC_SetFlashLatency+0x40>
 8003782:	e01b      	b.n	80037bc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003784:	2300      	movs	r3, #0
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003788:	e015      	b.n	80037b6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003792:	4413      	add	r3, r2
 8003794:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d808      	bhi.n	80037b0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800379e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037a6:	4413      	add	r3, r2
 80037a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80037ae:	e005      	b.n	80037bc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b2:	3301      	adds	r3, #1
 80037b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d9e6      	bls.n	800378a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <RCC_SetFlashLatency+0xfc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 0207 	bic.w	r2, r3, #7
 80037c4:	4911      	ldr	r1, [pc, #68]	; (800380c <RCC_SetFlashLatency+0xfc>)
 80037c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037cc:	f7fd fc20 	bl	8001010 <HAL_GetTick>
 80037d0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037d2:	e008      	b.n	80037e6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037d4:	f7fd fc1c 	bl	8001010 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e007      	b.n	80037f6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <RCC_SetFlashLatency+0xfc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d1ef      	bne.n	80037d4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	374c      	adds	r7, #76	; 0x4c
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	08005bf4 	.word	0x08005bf4
 8003804:	08005c04 	.word	0x08005c04
 8003808:	08005c10 	.word	0x08005c10
 800380c:	58004000 	.word	0x58004000

08003810 <LL_RCC_LSE_IsEnabled>:
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <LL_RCC_LSE_IsEnabled+0x18>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <LL_RCC_LSE_IsEnabled+0x1a>
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_RCC_LSE_IsReady>:
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d101      	bne.n	800384c <LL_RCC_LSE_IsReady+0x18>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <LL_RCC_LSE_IsReady+0x1a>
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_RCC_SetRFWKPClockSource>:
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003868:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_RCC_SetSMPSClockSource>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4313      	orrs	r3, r2
 800389e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_RCC_SetSMPSPrescaler>:
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_SetUSARTClockSource>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 0203 	bic.w	r2, r3, #3
 80038e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_RCC_SetLPUARTClockSource>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_RCC_SetI2CClockSource>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003944:	43db      	mvns	r3, r3
 8003946:	401a      	ands	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_RCC_SetLPTIMClockSource>:
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_RCC_SetSAIClockSource>:
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_RCC_SetRNGClockSource>:
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80039da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <LL_RCC_SetCLK48ClockSource>:
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_RCC_SetUSBClockSource>:
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffe3 	bl	80039f2 <LL_RCC_SetCLK48ClockSource>
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <LL_RCC_SetADCClockSource>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_RCC_SetRTCClockSource>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_RCC_GetRTCClockSource>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_ForceBackupDomainReset>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_RCC_PLLSAI1_Enable>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003afc:	6013      	str	r3, [r2, #0]
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_RCC_PLLSAI1_Disable>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <LL_RCC_PLLSAI1_IsReady>:
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b38:	d101      	bne.n	8003b3e <LL_RCC_PLLSAI1_IsReady+0x18>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b088      	sub	sp, #32
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003b52:	2300      	movs	r3, #0
 8003b54:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b56:	2300      	movs	r3, #0
 8003b58:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d034      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b6e:	d021      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b74:	d81b      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b80:	d815      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8a:	d110      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b9c:	e00d      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f947 	bl	8003e36 <RCCEx_PLLSAI1_ConfigNP>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bac:	e005      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	77fb      	strb	r3, [r7, #31]
        break;
 8003bb2:	e002      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003bb4:	bf00      	nop
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bba:	7ffb      	ldrb	r3, [r7, #31]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fee8 	bl	800399a <LL_RCC_SetSAIClockSource>
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
 8003bce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d046      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003bdc:	f7ff ff56 	bl	8003a8c <LL_RCC_GetRTCClockSource>
 8003be0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d03c      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003bec:	f7fe fc4a 	bl	8002484 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ff30 	bl	8003a60 <LL_RCC_SetRTCClockSource>
 8003c00:	e02e      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003c0c:	f7ff ff4b 	bl	8003aa6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003c10:	f7ff ff5a 	bl	8003ac8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003c2c:	f7ff fdf0 	bl	8003810 <LL_RCC_LSE_IsEnabled>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d114      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c36:	f7fd f9eb 	bl	8001010 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd f9e7 	bl	8001010 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d902      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	77fb      	strb	r3, [r7, #31]
              break;
 8003c54:	e004      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c56:	f7ff fded 	bl	8003834 <LL_RCC_LSE_IsReady>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d1ee      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	77bb      	strb	r3, [r7, #30]
 8003c64:	e001      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	7ffb      	ldrb	r3, [r7, #31]
 8003c68:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fe2a 	bl	80038d4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fe35 	bl	8003900 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fe5d 	bl	8003966 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fe52 	bl	8003966 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fe2a 	bl	800392c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fe1f 	bl	800392c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d022      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fe8d 	bl	8003a1e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d26:	d10b      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f8dd 	bl	8003eec <RCCEx_PLLSAI1_ConfigNQ>
 8003d32:	4603      	mov	r3, r0
 8003d34:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003d3c:	7ffb      	ldrb	r3, [r7, #31]
 8003d3e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02b      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d008      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fe2a 	bl	80039c6 <LL_RCC_SetRNGClockSource>
 8003d72:	e00a      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7ff fe21 	bl	80039c6 <LL_RCC_SetRNGClockSource>
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff fe34 	bl	80039f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003d92:	d107      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d022      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fe3d 	bl	8003a34 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ddc:	d10b      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f8dd 	bl	8003fa2 <RCCEx_PLLSAI1_ConfigNR>
 8003de8:	4603      	mov	r3, r0
 8003dea:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003dec:	7ffb      	ldrb	r3, [r7, #31]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003df2:	7ffb      	ldrb	r3, [r7, #31]
 8003df4:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fd26 	bl	8003858 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fd45 	bl	80038ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fd2c 	bl	8003884 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003e2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e42:	f7ff fe61 	bl	8003b08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e46:	f7fd f8e3 	bl	8001010 <HAL_GetTick>
 8003e4a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e4c:	e009      	b.n	8003e62 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e4e:	f7fd f8df 	bl	8001010 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d902      	bls.n	8003e62 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e60:	e004      	b.n	8003e6c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e62:	f7ff fe60 	bl	8003b26 <LL_RCC_PLLSAI1_IsReady>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d137      	bne.n	8003ee2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e86:	4313      	orrs	r3, r2
 8003e88:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ea0:	f7ff fe23 	bl	8003aea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea4:	f7fd f8b4 	bl	8001010 <HAL_GetTick>
 8003ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003eaa:	e009      	b.n	8003ec0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eac:	f7fd f8b0 	bl	8001010 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ebe:	e004      	b.n	8003eca <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ec0:	f7ff fe31 	bl	8003b26 <LL_RCC_PLLSAI1_IsReady>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d1f0      	bne.n	8003eac <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ef8:	f7ff fe06 	bl	8003b08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003efc:	f7fd f888 	bl	8001010 <HAL_GetTick>
 8003f00:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f02:	e009      	b.n	8003f18 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f04:	f7fd f884 	bl	8001010 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	73fb      	strb	r3, [r7, #15]
      break;
 8003f16:	e004      	b.n	8003f22 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f18:	f7ff fe05 	bl	8003b26 <LL_RCC_PLLSAI1_IsReady>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d137      	bne.n	8003f98 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003f56:	f7ff fdc8 	bl	8003aea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fd f859 	bl	8001010 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f60:	e009      	b.n	8003f76 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f62:	f7fd f855 	bl	8001010 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	73fb      	strb	r3, [r7, #15]
        break;
 8003f74:	e004      	b.n	8003f80 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f76:	f7ff fdd6 	bl	8003b26 <LL_RCC_PLLSAI1_IsReady>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d1f0      	bne.n	8003f62 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f94:	4313      	orrs	r3, r2
 8003f96:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fae:	f7ff fdab 	bl	8003b08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fb2:	f7fd f82d 	bl	8001010 <HAL_GetTick>
 8003fb6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fb8:	e009      	b.n	8003fce <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fba:	f7fd f829 	bl	8001010 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d902      	bls.n	8003fce <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e004      	b.n	8003fd8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fce:	f7ff fdaa 	bl	8003b26 <LL_RCC_PLLSAI1_IsReady>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d137      	bne.n	800404e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004008:	4313      	orrs	r3, r2
 800400a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800400c:	f7ff fd6d 	bl	8003aea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fc fffe 	bl	8001010 <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004016:	e009      	b.n	800402c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004018:	f7fc fffa 	bl	8001010 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d902      	bls.n	800402c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	73fb      	strb	r3, [r7, #15]
        break;
 800402a:	e004      	b.n	8004036 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800402c:	f7ff fd7b 	bl	8003b26 <LL_RCC_PLLSAI1_IsReady>
 8004030:	4603      	mov	r3, r0
 8004032:	2b01      	cmp	r3, #1
 8004034:	d1f0      	bne.n	8004018 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d108      	bne.n	800404e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <LL_RCC_GetUSARTClockSource>:
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004064:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4013      	ands	r3, r2
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_RCC_GetLPUARTClockSource>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004084:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4013      	ands	r3, r2
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e042      	b.n	8004130 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fc fec9 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2224      	movs	r2, #36	; 0x24
 80040c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fb16 	bl	800470c <UART_SetConfig>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e022      	b.n	8004130 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fd10 	bl	8004b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fd97 	bl	8004c5c <UART_CheckIdleState>
 800412e:	4603      	mov	r3, r0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	2b20      	cmp	r3, #32
 8004150:	f040 8083 	bne.w	800425a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_Transmit+0x28>
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e07b      	b.n	800425c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_UART_Transmit+0x3a>
 800416e:	2302      	movs	r3, #2
 8004170:	e074      	b.n	800425c <HAL_UART_Transmit+0x124>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418a:	f7fc ff41 	bl	8001010 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d108      	bne.n	80041bc <HAL_UART_Transmit+0x84>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e003      	b.n	80041c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80041cc:	e02c      	b.n	8004228 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fd8a 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e039      	b.n	800425c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	3302      	adds	r3, #2
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	e007      	b.n	8004216 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3301      	adds	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1cc      	bne.n	80041ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fd57 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e006      	b.n	800425c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e000      	b.n	800425c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	f640 030f 	movw	r3, #2063	; 0x80f
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d118      	bne.n	80042c6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d013      	beq.n	80042c6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 81fb 	beq.w	80046b2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
      }
      return;
 80042c4:	e1f5      	b.n	80046b2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80ef 	beq.w	80044ac <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_UART_IRQHandler+0x23c>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4b72      	ldr	r3, [pc, #456]	; (80044a4 <HAL_UART_IRQHandler+0x240>)
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80e4 	beq.w	80044ac <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d010      	beq.n	8004310 <HAL_UART_IRQHandler+0xac>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2201      	movs	r2, #1
 80042fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004306:	f043 0201 	orr.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_UART_IRQHandler+0xd8>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2202      	movs	r2, #2
 800432a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004332:	f043 0204 	orr.w	r2, r3, #4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d010      	beq.n	8004368 <HAL_UART_IRQHandler+0x104>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00b      	beq.n	8004368 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2204      	movs	r2, #4
 8004356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435e:	f043 0202 	orr.w	r2, r3, #2
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d015      	beq.n	800439e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <HAL_UART_IRQHandler+0x23c>)
 8004380:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2208      	movs	r2, #8
 800438c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004394:	f043 0208 	orr.w	r2, r3, #8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d011      	beq.n	80043cc <HAL_UART_IRQHandler+0x168>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 816f 	beq.w	80046b6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d011      	beq.n	8004406 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d004      	beq.n	8004426 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004422:	2b00      	cmp	r3, #0
 8004424:	d031      	beq.n	800448a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fce3 	bl	8004df2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d123      	bne.n	8004482 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004448:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <HAL_UART_IRQHandler+0x244>)
 8004458:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc ff5c 	bl	800131c <HAL_DMA_Abort_IT>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004474:	4610      	mov	r0, r2
 8004476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	e00f      	b.n	800449a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f930 	bl	80046e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	e00b      	b.n	800449a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f92c 	bl	80046e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e007      	b.n	800449a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f928 	bl	80046e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004498:	e10d      	b.n	80046b6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449a:	bf00      	nop
    return;
 800449c:	e10b      	b.n	80046b6 <HAL_UART_IRQHandler+0x452>
 800449e:	bf00      	nop
 80044a0:	10000001 	.word	0x10000001
 80044a4:	04000120 	.word	0x04000120
 80044a8:	08004e57 	.word	0x08004e57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f040 80ab 	bne.w	800460c <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80a5 	beq.w	800460c <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 809f 	beq.w	800460c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d155      	bne.n	8004590 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80044ee:	893b      	ldrh	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80e2 	beq.w	80046ba <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044fc:	893a      	ldrh	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	f080 80db 	bcs.w	80046ba <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	893a      	ldrh	r2, [r7, #8]
 8004508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d12b      	bne.n	8004574 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0210 	bic.w	r2, r2, #16
 8004568:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456e:	4618      	mov	r0, r3
 8004570:	f7fc fe75 	bl	800125e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004580:	b29b      	uxth	r3, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	b29b      	uxth	r3, r3
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8b3 	bl	80046f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800458e:	e094      	b.n	80046ba <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800459c:	b29b      	uxth	r3, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8087 	beq.w	80046be <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80045b0:	897b      	ldrh	r3, [r7, #10]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8083 	beq.w	80046be <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0210 	bic.w	r2, r2, #16
 80045fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004600:	897b      	ldrh	r3, [r7, #10]
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f875 	bl	80046f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800460a:	e058      	b.n	80046be <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <HAL_UART_IRQHandler+0x3ce>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fc43 	bl	8004eb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004630:	e048      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	2b00      	cmp	r3, #0
 8004656:	d034      	beq.n	80046c2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
    }
    return;
 8004660:	e02f      	b.n	80046c2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_UART_IRQHandler+0x41a>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fc03 	bl	8004e82 <UART_EndTransmit_IT>
    return;
 800467c:	e022      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_UART_IRQHandler+0x436>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fc23 	bl	8004ede <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004698:	e014      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00f      	beq.n	80046c4 <HAL_UART_IRQHandler+0x460>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da0c      	bge.n	80046c4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fc0d 	bl	8004eca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046b0:	e008      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
      return;
 80046b2:	bf00      	nop
 80046b4:	e006      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
    return;
 80046b6:	bf00      	nop
 80046b8:	e004      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
      return;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
      return;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_UART_IRQHandler+0x460>
    return;
 80046c2:	bf00      	nop
  }
}
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop

080046cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800470c:	b5b0      	push	{r4, r5, r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4ba3      	ldr	r3, [pc, #652]	; (80049c4 <UART_SetConfig+0x2b8>)
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	430b      	orrs	r3, r1
 8004742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a98      	ldr	r2, [pc, #608]	; (80049c8 <UART_SetConfig+0x2bc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	4313      	orrs	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800477e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	69f9      	ldr	r1, [r7, #28]
 8004788:	430b      	orrs	r3, r1
 800478a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	f023 010f 	bic.w	r1, r3, #15
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a89      	ldr	r2, [pc, #548]	; (80049cc <UART_SetConfig+0x2c0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d120      	bne.n	80047ee <UART_SetConfig+0xe2>
 80047ac:	2003      	movs	r0, #3
 80047ae:	f7ff fc53 	bl	8004058 <LL_RCC_GetUSARTClockSource>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d817      	bhi.n	80047e8 <UART_SetConfig+0xdc>
 80047b8:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <UART_SetConfig+0xb4>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047dd 	.word	0x080047dd
 80047c8:	080047d7 	.word	0x080047d7
 80047cc:	080047e3 	.word	0x080047e3
 80047d0:	2301      	movs	r3, #1
 80047d2:	76fb      	strb	r3, [r7, #27]
 80047d4:	e038      	b.n	8004848 <UART_SetConfig+0x13c>
 80047d6:	2302      	movs	r3, #2
 80047d8:	76fb      	strb	r3, [r7, #27]
 80047da:	e035      	b.n	8004848 <UART_SetConfig+0x13c>
 80047dc:	2304      	movs	r3, #4
 80047de:	76fb      	strb	r3, [r7, #27]
 80047e0:	e032      	b.n	8004848 <UART_SetConfig+0x13c>
 80047e2:	2308      	movs	r3, #8
 80047e4:	76fb      	strb	r3, [r7, #27]
 80047e6:	e02f      	b.n	8004848 <UART_SetConfig+0x13c>
 80047e8:	2310      	movs	r3, #16
 80047ea:	76fb      	strb	r3, [r7, #27]
 80047ec:	e02c      	b.n	8004848 <UART_SetConfig+0x13c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a75      	ldr	r2, [pc, #468]	; (80049c8 <UART_SetConfig+0x2bc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0x138>
 80047f8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80047fc:	f7ff fc3c 	bl	8004078 <LL_RCC_GetLPUARTClockSource>
 8004800:	4603      	mov	r3, r0
 8004802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004806:	d017      	beq.n	8004838 <UART_SetConfig+0x12c>
 8004808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800480c:	d817      	bhi.n	800483e <UART_SetConfig+0x132>
 800480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004812:	d00b      	beq.n	800482c <UART_SetConfig+0x120>
 8004814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004818:	d811      	bhi.n	800483e <UART_SetConfig+0x132>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <UART_SetConfig+0x11a>
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d006      	beq.n	8004832 <UART_SetConfig+0x126>
 8004824:	e00b      	b.n	800483e <UART_SetConfig+0x132>
 8004826:	2300      	movs	r3, #0
 8004828:	76fb      	strb	r3, [r7, #27]
 800482a:	e00d      	b.n	8004848 <UART_SetConfig+0x13c>
 800482c:	2302      	movs	r3, #2
 800482e:	76fb      	strb	r3, [r7, #27]
 8004830:	e00a      	b.n	8004848 <UART_SetConfig+0x13c>
 8004832:	2304      	movs	r3, #4
 8004834:	76fb      	strb	r3, [r7, #27]
 8004836:	e007      	b.n	8004848 <UART_SetConfig+0x13c>
 8004838:	2308      	movs	r3, #8
 800483a:	76fb      	strb	r3, [r7, #27]
 800483c:	e004      	b.n	8004848 <UART_SetConfig+0x13c>
 800483e:	2310      	movs	r3, #16
 8004840:	76fb      	strb	r3, [r7, #27]
 8004842:	e001      	b.n	8004848 <UART_SetConfig+0x13c>
 8004844:	2310      	movs	r3, #16
 8004846:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5e      	ldr	r2, [pc, #376]	; (80049c8 <UART_SetConfig+0x2bc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	f040 808b 	bne.w	800496a <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004854:	7efb      	ldrb	r3, [r7, #27]
 8004856:	2b08      	cmp	r3, #8
 8004858:	d823      	bhi.n	80048a2 <UART_SetConfig+0x196>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x154>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004885 	.word	0x08004885
 8004864:	080048a3 	.word	0x080048a3
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048a3 	.word	0x080048a3
 8004870:	08004893 	.word	0x08004893
 8004874:	080048a3 	.word	0x080048a3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048a3 	.word	0x080048a3
 8004880:	0800489b 	.word	0x0800489b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fe fee0 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8004888:	6178      	str	r0, [r7, #20]
        break;
 800488a:	e00f      	b.n	80048ac <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <UART_SetConfig+0x2c4>)
 800488e:	617b      	str	r3, [r7, #20]
        break;
 8004890:	e00c      	b.n	80048ac <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7fe fe57 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8004896:	6178      	str	r0, [r7, #20]
        break;
 8004898:	e008      	b.n	80048ac <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489e:	617b      	str	r3, [r7, #20]
        break;
 80048a0:	e004      	b.n	80048ac <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	76bb      	strb	r3, [r7, #26]
        break;
 80048aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 811a 	beq.w	8004ae8 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <UART_SetConfig+0x2c8>)
 80048ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048be:	461a      	mov	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d305      	bcc.n	80048e4 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d902      	bls.n	80048ea <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	76bb      	strb	r3, [r7, #26]
 80048e8:	e0fe      	b.n	8004ae8 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	4a37      	ldr	r2, [pc, #220]	; (80049d4 <UART_SetConfig+0x2c8>)
 80048f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f7fb fc3b 	bl	800017c <__aeabi_uldivmod>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	020b      	lsls	r3, r1, #8
 8004918:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800491c:	0202      	lsls	r2, r0, #8
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	6849      	ldr	r1, [r1, #4]
 8004922:	0849      	lsrs	r1, r1, #1
 8004924:	4608      	mov	r0, r1
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	1814      	adds	r4, r2, r0
 800492c:	eb43 0501 	adc.w	r5, r3, r1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	461a      	mov	r2, r3
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	4620      	mov	r0, r4
 800493c:	4629      	mov	r1, r5
 800493e:	f7fb fc1d 	bl	800017c <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4613      	mov	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d308      	bcc.n	8004964 <UART_SetConfig+0x258>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004958:	d204      	bcs.n	8004964 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e0c1      	b.n	8004ae8 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	76bb      	strb	r3, [r7, #26]
 8004968:	e0be      	b.n	8004ae8 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004972:	d16a      	bne.n	8004a4a <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004974:	7efb      	ldrb	r3, [r7, #27]
 8004976:	3b01      	subs	r3, #1
 8004978:	2b07      	cmp	r3, #7
 800497a:	d82d      	bhi.n	80049d8 <UART_SetConfig+0x2cc>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x278>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049a5 	.word	0x080049a5
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049d9 	.word	0x080049d9
 8004990:	080049b3 	.word	0x080049b3
 8004994:	080049d9 	.word	0x080049d9
 8004998:	080049d9 	.word	0x080049d9
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7fe fe66 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 80049a8:	6178      	str	r0, [r7, #20]
        break;
 80049aa:	e01a      	b.n	80049e2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <UART_SetConfig+0x2c4>)
 80049ae:	617b      	str	r3, [r7, #20]
        break;
 80049b0:	e017      	b.n	80049e2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fe fdc7 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 80049b6:	6178      	str	r0, [r7, #20]
        break;
 80049b8:	e013      	b.n	80049e2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	617b      	str	r3, [r7, #20]
        break;
 80049c0:	e00f      	b.n	80049e2 <UART_SetConfig+0x2d6>
 80049c2:	bf00      	nop
 80049c4:	cfff69f3 	.word	0xcfff69f3
 80049c8:	40008000 	.word	0x40008000
 80049cc:	40013800 	.word	0x40013800
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	08005cc0 	.word	0x08005cc0
      default:
        pclk = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	76bb      	strb	r3, [r7, #26]
        break;
 80049e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d07f      	beq.n	8004ae8 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	4a48      	ldr	r2, [pc, #288]	; (8004b10 <UART_SetConfig+0x404>)
 80049ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f2:	461a      	mov	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80049fa:	005a      	lsls	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	441a      	add	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	d916      	bls.n	8004a44 <UART_SetConfig+0x338>
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d212      	bcs.n	8004a44 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f023 030f 	bic.w	r3, r3, #15
 8004a26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	89fb      	ldrh	r3, [r7, #14]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	89fa      	ldrh	r2, [r7, #14]
 8004a40:	60da      	str	r2, [r3, #12]
 8004a42:	e051      	b.n	8004ae8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	76bb      	strb	r3, [r7, #26]
 8004a48:	e04e      	b.n	8004ae8 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a4a:	7efb      	ldrb	r3, [r7, #27]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	2b07      	cmp	r3, #7
 8004a50:	d821      	bhi.n	8004a96 <UART_SetConfig+0x38a>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <UART_SetConfig+0x34c>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a79 	.word	0x08004a79
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a87 	.word	0x08004a87
 8004a68:	08004a97 	.word	0x08004a97
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004a97 	.word	0x08004a97
 8004a74:	08004a8f 	.word	0x08004a8f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7fe fdfc 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	6178      	str	r0, [r7, #20]
        break;
 8004a7e:	e00f      	b.n	8004aa0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <UART_SetConfig+0x408>)
 8004a82:	617b      	str	r3, [r7, #20]
        break;
 8004a84:	e00c      	b.n	8004aa0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a86:	f7fe fd5d 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8004a8a:	6178      	str	r0, [r7, #20]
        break;
 8004a8c:	e008      	b.n	8004aa0 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	617b      	str	r3, [r7, #20]
        break;
 8004a94:	e004      	b.n	8004aa0 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a9e:	bf00      	nop
    }

    if (pclk != 0U)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d020      	beq.n	8004ae8 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <UART_SetConfig+0x404>)
 8004aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	441a      	add	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d908      	bls.n	8004ae4 <UART_SetConfig+0x3d8>
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d204      	bcs.n	8004ae4 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e001      	b.n	8004ae8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b04:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	08005cc0 	.word	0x08005cc0
 8004b14:	00f42400 	.word	0x00f42400

08004b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c16:	d10a      	bne.n	8004c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c6c:	f7fc f9d0 	bl	8001010 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d10e      	bne.n	8004c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f82f 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e025      	b.n	8004cea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d10e      	bne.n	8004cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f819 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e00f      	b.n	8004cea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	e062      	b.n	8004dca <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0a:	d05e      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0c:	f7fc f980 	bl	8001010 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d11d      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e045      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d02e      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7a:	d126      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e00f      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d08d      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e08:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0210 	bic.w	r2, r2, #16
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff fc33 	bl	80046e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e98:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fc0f 	bl	80046cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e027      	b.n	8004f58 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2224      	movs	r2, #36	; 0x24
 8004f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e02d      	b.n	8004fd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2224      	movs	r2, #36	; 0x24
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f84f 	bl	800505c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e02d      	b.n	8005054 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f811 	bl	800505c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800507c:	e031      	b.n	80050e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800507e:	2308      	movs	r3, #8
 8005080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005082:	2308      	movs	r3, #8
 8005084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	0e5b      	lsrs	r3, r3, #25
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	0f5b      	lsrs	r3, r3, #29
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050a6:	7bbb      	ldrb	r3, [r7, #14]
 80050a8:	7b3a      	ldrb	r2, [r7, #12]
 80050aa:	4911      	ldr	r1, [pc, #68]	; (80050f0 <UARTEx_SetNbDataToProcess+0x94>)
 80050ac:	5c8a      	ldrb	r2, [r1, r2]
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050b2:	7b3a      	ldrb	r2, [r7, #12]
 80050b4:	490f      	ldr	r1, [pc, #60]	; (80050f4 <UARTEx_SetNbDataToProcess+0x98>)
 80050b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	7b7a      	ldrb	r2, [r7, #13]
 80050c8:	4909      	ldr	r1, [pc, #36]	; (80050f0 <UARTEx_SetNbDataToProcess+0x94>)
 80050ca:	5c8a      	ldrb	r2, [r1, r2]
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050d0:	7b7a      	ldrb	r2, [r7, #13]
 80050d2:	4908      	ldr	r1, [pc, #32]	; (80050f4 <UARTEx_SetNbDataToProcess+0x98>)
 80050d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	08005cd8 	.word	0x08005cd8
 80050f4:	08005ce0 	.word	0x08005ce0

080050f8 <_Znwj>:
 80050f8:	2801      	cmp	r0, #1
 80050fa:	bf38      	it	cc
 80050fc:	2001      	movcc	r0, #1
 80050fe:	b510      	push	{r4, lr}
 8005100:	4604      	mov	r4, r0
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f844 	bl	8005190 <malloc>
 8005108:	b930      	cbnz	r0, 8005118 <_Znwj+0x20>
 800510a:	f000 f807 	bl	800511c <_ZSt15get_new_handlerv>
 800510e:	b908      	cbnz	r0, 8005114 <_Znwj+0x1c>
 8005110:	f000 f80c 	bl	800512c <abort>
 8005114:	4780      	blx	r0
 8005116:	e7f4      	b.n	8005102 <_Znwj+0xa>
 8005118:	bd10      	pop	{r4, pc}
	...

0800511c <_ZSt15get_new_handlerv>:
 800511c:	4b02      	ldr	r3, [pc, #8]	; (8005128 <_ZSt15get_new_handlerv+0xc>)
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	f3bf 8f5b 	dmb	ish
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	200000a8 	.word	0x200000a8

0800512c <abort>:
 800512c:	b508      	push	{r3, lr}
 800512e:	2006      	movs	r0, #6
 8005130:	f000 f996 	bl	8005460 <raise>
 8005134:	2001      	movs	r0, #1
 8005136:	f7fb fd0f 	bl	8000b58 <_exit>
	...

0800513c <__errno>:
 800513c:	4b01      	ldr	r3, [pc, #4]	; (8005144 <__errno+0x8>)
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000020 	.word	0x20000020

08005148 <__libc_init_array>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4d0d      	ldr	r5, [pc, #52]	; (8005180 <__libc_init_array+0x38>)
 800514c:	4c0d      	ldr	r4, [pc, #52]	; (8005184 <__libc_init_array+0x3c>)
 800514e:	1b64      	subs	r4, r4, r5
 8005150:	10a4      	asrs	r4, r4, #2
 8005152:	2600      	movs	r6, #0
 8005154:	42a6      	cmp	r6, r4
 8005156:	d109      	bne.n	800516c <__libc_init_array+0x24>
 8005158:	4d0b      	ldr	r5, [pc, #44]	; (8005188 <__libc_init_array+0x40>)
 800515a:	4c0c      	ldr	r4, [pc, #48]	; (800518c <__libc_init_array+0x44>)
 800515c:	f000 fd32 	bl	8005bc4 <_init>
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	2600      	movs	r6, #0
 8005166:	42a6      	cmp	r6, r4
 8005168:	d105      	bne.n	8005176 <__libc_init_array+0x2e>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005170:	4798      	blx	r3
 8005172:	3601      	adds	r6, #1
 8005174:	e7ee      	b.n	8005154 <__libc_init_array+0xc>
 8005176:	f855 3b04 	ldr.w	r3, [r5], #4
 800517a:	4798      	blx	r3
 800517c:	3601      	adds	r6, #1
 800517e:	e7f2      	b.n	8005166 <__libc_init_array+0x1e>
 8005180:	08005d54 	.word	0x08005d54
 8005184:	08005d54 	.word	0x08005d54
 8005188:	08005d54 	.word	0x08005d54
 800518c:	08005d5c 	.word	0x08005d5c

08005190 <malloc>:
 8005190:	4b02      	ldr	r3, [pc, #8]	; (800519c <malloc+0xc>)
 8005192:	4601      	mov	r1, r0
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	f000 b85b 	b.w	8005250 <_malloc_r>
 800519a:	bf00      	nop
 800519c:	20000020 	.word	0x20000020

080051a0 <memset>:
 80051a0:	4402      	add	r2, r0
 80051a2:	4603      	mov	r3, r0
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d100      	bne.n	80051aa <memset+0xa>
 80051a8:	4770      	bx	lr
 80051aa:	f803 1b01 	strb.w	r1, [r3], #1
 80051ae:	e7f9      	b.n	80051a4 <memset+0x4>

080051b0 <_free_r>:
 80051b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051b2:	2900      	cmp	r1, #0
 80051b4:	d048      	beq.n	8005248 <_free_r+0x98>
 80051b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ba:	9001      	str	r0, [sp, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f1a1 0404 	sub.w	r4, r1, #4
 80051c2:	bfb8      	it	lt
 80051c4:	18e4      	addlt	r4, r4, r3
 80051c6:	f000 fc45 	bl	8005a54 <__malloc_lock>
 80051ca:	4a20      	ldr	r2, [pc, #128]	; (800524c <_free_r+0x9c>)
 80051cc:	9801      	ldr	r0, [sp, #4]
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	4615      	mov	r5, r2
 80051d2:	b933      	cbnz	r3, 80051e2 <_free_r+0x32>
 80051d4:	6063      	str	r3, [r4, #4]
 80051d6:	6014      	str	r4, [r2, #0]
 80051d8:	b003      	add	sp, #12
 80051da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051de:	f000 bc3f 	b.w	8005a60 <__malloc_unlock>
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	d90b      	bls.n	80051fe <_free_r+0x4e>
 80051e6:	6821      	ldr	r1, [r4, #0]
 80051e8:	1862      	adds	r2, r4, r1
 80051ea:	4293      	cmp	r3, r2
 80051ec:	bf04      	itt	eq
 80051ee:	681a      	ldreq	r2, [r3, #0]
 80051f0:	685b      	ldreq	r3, [r3, #4]
 80051f2:	6063      	str	r3, [r4, #4]
 80051f4:	bf04      	itt	eq
 80051f6:	1852      	addeq	r2, r2, r1
 80051f8:	6022      	streq	r2, [r4, #0]
 80051fa:	602c      	str	r4, [r5, #0]
 80051fc:	e7ec      	b.n	80051d8 <_free_r+0x28>
 80051fe:	461a      	mov	r2, r3
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b10b      	cbz	r3, 8005208 <_free_r+0x58>
 8005204:	42a3      	cmp	r3, r4
 8005206:	d9fa      	bls.n	80051fe <_free_r+0x4e>
 8005208:	6811      	ldr	r1, [r2, #0]
 800520a:	1855      	adds	r5, r2, r1
 800520c:	42a5      	cmp	r5, r4
 800520e:	d10b      	bne.n	8005228 <_free_r+0x78>
 8005210:	6824      	ldr	r4, [r4, #0]
 8005212:	4421      	add	r1, r4
 8005214:	1854      	adds	r4, r2, r1
 8005216:	42a3      	cmp	r3, r4
 8005218:	6011      	str	r1, [r2, #0]
 800521a:	d1dd      	bne.n	80051d8 <_free_r+0x28>
 800521c:	681c      	ldr	r4, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	6053      	str	r3, [r2, #4]
 8005222:	4421      	add	r1, r4
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	e7d7      	b.n	80051d8 <_free_r+0x28>
 8005228:	d902      	bls.n	8005230 <_free_r+0x80>
 800522a:	230c      	movs	r3, #12
 800522c:	6003      	str	r3, [r0, #0]
 800522e:	e7d3      	b.n	80051d8 <_free_r+0x28>
 8005230:	6825      	ldr	r5, [r4, #0]
 8005232:	1961      	adds	r1, r4, r5
 8005234:	428b      	cmp	r3, r1
 8005236:	bf04      	itt	eq
 8005238:	6819      	ldreq	r1, [r3, #0]
 800523a:	685b      	ldreq	r3, [r3, #4]
 800523c:	6063      	str	r3, [r4, #4]
 800523e:	bf04      	itt	eq
 8005240:	1949      	addeq	r1, r1, r5
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	6054      	str	r4, [r2, #4]
 8005246:	e7c7      	b.n	80051d8 <_free_r+0x28>
 8005248:	b003      	add	sp, #12
 800524a:	bd30      	pop	{r4, r5, pc}
 800524c:	200000ac 	.word	0x200000ac

08005250 <_malloc_r>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	1ccd      	adds	r5, r1, #3
 8005254:	f025 0503 	bic.w	r5, r5, #3
 8005258:	3508      	adds	r5, #8
 800525a:	2d0c      	cmp	r5, #12
 800525c:	bf38      	it	cc
 800525e:	250c      	movcc	r5, #12
 8005260:	2d00      	cmp	r5, #0
 8005262:	4606      	mov	r6, r0
 8005264:	db01      	blt.n	800526a <_malloc_r+0x1a>
 8005266:	42a9      	cmp	r1, r5
 8005268:	d903      	bls.n	8005272 <_malloc_r+0x22>
 800526a:	230c      	movs	r3, #12
 800526c:	6033      	str	r3, [r6, #0]
 800526e:	2000      	movs	r0, #0
 8005270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005272:	f000 fbef 	bl	8005a54 <__malloc_lock>
 8005276:	4921      	ldr	r1, [pc, #132]	; (80052fc <_malloc_r+0xac>)
 8005278:	680a      	ldr	r2, [r1, #0]
 800527a:	4614      	mov	r4, r2
 800527c:	b99c      	cbnz	r4, 80052a6 <_malloc_r+0x56>
 800527e:	4f20      	ldr	r7, [pc, #128]	; (8005300 <_malloc_r+0xb0>)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	b923      	cbnz	r3, 800528e <_malloc_r+0x3e>
 8005284:	4621      	mov	r1, r4
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f8b2 	bl	80053f0 <_sbrk_r>
 800528c:	6038      	str	r0, [r7, #0]
 800528e:	4629      	mov	r1, r5
 8005290:	4630      	mov	r0, r6
 8005292:	f000 f8ad 	bl	80053f0 <_sbrk_r>
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	d123      	bne.n	80052e2 <_malloc_r+0x92>
 800529a:	230c      	movs	r3, #12
 800529c:	6033      	str	r3, [r6, #0]
 800529e:	4630      	mov	r0, r6
 80052a0:	f000 fbde 	bl	8005a60 <__malloc_unlock>
 80052a4:	e7e3      	b.n	800526e <_malloc_r+0x1e>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	1b5b      	subs	r3, r3, r5
 80052aa:	d417      	bmi.n	80052dc <_malloc_r+0x8c>
 80052ac:	2b0b      	cmp	r3, #11
 80052ae:	d903      	bls.n	80052b8 <_malloc_r+0x68>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	441c      	add	r4, r3
 80052b4:	6025      	str	r5, [r4, #0]
 80052b6:	e004      	b.n	80052c2 <_malloc_r+0x72>
 80052b8:	6863      	ldr	r3, [r4, #4]
 80052ba:	42a2      	cmp	r2, r4
 80052bc:	bf0c      	ite	eq
 80052be:	600b      	streq	r3, [r1, #0]
 80052c0:	6053      	strne	r3, [r2, #4]
 80052c2:	4630      	mov	r0, r6
 80052c4:	f000 fbcc 	bl	8005a60 <__malloc_unlock>
 80052c8:	f104 000b 	add.w	r0, r4, #11
 80052cc:	1d23      	adds	r3, r4, #4
 80052ce:	f020 0007 	bic.w	r0, r0, #7
 80052d2:	1ac2      	subs	r2, r0, r3
 80052d4:	d0cc      	beq.n	8005270 <_malloc_r+0x20>
 80052d6:	1a1b      	subs	r3, r3, r0
 80052d8:	50a3      	str	r3, [r4, r2]
 80052da:	e7c9      	b.n	8005270 <_malloc_r+0x20>
 80052dc:	4622      	mov	r2, r4
 80052de:	6864      	ldr	r4, [r4, #4]
 80052e0:	e7cc      	b.n	800527c <_malloc_r+0x2c>
 80052e2:	1cc4      	adds	r4, r0, #3
 80052e4:	f024 0403 	bic.w	r4, r4, #3
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d0e3      	beq.n	80052b4 <_malloc_r+0x64>
 80052ec:	1a21      	subs	r1, r4, r0
 80052ee:	4630      	mov	r0, r6
 80052f0:	f000 f87e 	bl	80053f0 <_sbrk_r>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d1dd      	bne.n	80052b4 <_malloc_r+0x64>
 80052f8:	e7cf      	b.n	800529a <_malloc_r+0x4a>
 80052fa:	bf00      	nop
 80052fc:	200000ac 	.word	0x200000ac
 8005300:	200000b0 	.word	0x200000b0

08005304 <_puts_r>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	460e      	mov	r6, r1
 8005308:	4605      	mov	r5, r0
 800530a:	b118      	cbz	r0, 8005314 <_puts_r+0x10>
 800530c:	6983      	ldr	r3, [r0, #24]
 800530e:	b90b      	cbnz	r3, 8005314 <_puts_r+0x10>
 8005310:	f000 fa9c 	bl	800584c <__sinit>
 8005314:	69ab      	ldr	r3, [r5, #24]
 8005316:	68ac      	ldr	r4, [r5, #8]
 8005318:	b913      	cbnz	r3, 8005320 <_puts_r+0x1c>
 800531a:	4628      	mov	r0, r5
 800531c:	f000 fa96 	bl	800584c <__sinit>
 8005320:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <_puts_r+0xd0>)
 8005322:	429c      	cmp	r4, r3
 8005324:	d120      	bne.n	8005368 <_puts_r+0x64>
 8005326:	686c      	ldr	r4, [r5, #4]
 8005328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800532a:	07db      	lsls	r3, r3, #31
 800532c:	d405      	bmi.n	800533a <_puts_r+0x36>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	0598      	lsls	r0, r3, #22
 8005332:	d402      	bmi.n	800533a <_puts_r+0x36>
 8005334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005336:	f000 fb27 	bl	8005988 <__retarget_lock_acquire_recursive>
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	0719      	lsls	r1, r3, #28
 800533e:	d51d      	bpl.n	800537c <_puts_r+0x78>
 8005340:	6923      	ldr	r3, [r4, #16]
 8005342:	b1db      	cbz	r3, 800537c <_puts_r+0x78>
 8005344:	3e01      	subs	r6, #1
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800534c:	3b01      	subs	r3, #1
 800534e:	60a3      	str	r3, [r4, #8]
 8005350:	bb39      	cbnz	r1, 80053a2 <_puts_r+0x9e>
 8005352:	2b00      	cmp	r3, #0
 8005354:	da38      	bge.n	80053c8 <_puts_r+0xc4>
 8005356:	4622      	mov	r2, r4
 8005358:	210a      	movs	r1, #10
 800535a:	4628      	mov	r0, r5
 800535c:	f000 f89c 	bl	8005498 <__swbuf_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d011      	beq.n	8005388 <_puts_r+0x84>
 8005364:	250a      	movs	r5, #10
 8005366:	e011      	b.n	800538c <_puts_r+0x88>
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <_puts_r+0xd4>)
 800536a:	429c      	cmp	r4, r3
 800536c:	d101      	bne.n	8005372 <_puts_r+0x6e>
 800536e:	68ac      	ldr	r4, [r5, #8]
 8005370:	e7da      	b.n	8005328 <_puts_r+0x24>
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <_puts_r+0xd8>)
 8005374:	429c      	cmp	r4, r3
 8005376:	bf08      	it	eq
 8005378:	68ec      	ldreq	r4, [r5, #12]
 800537a:	e7d5      	b.n	8005328 <_puts_r+0x24>
 800537c:	4621      	mov	r1, r4
 800537e:	4628      	mov	r0, r5
 8005380:	f000 f8dc 	bl	800553c <__swsetup_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	d0dd      	beq.n	8005344 <_puts_r+0x40>
 8005388:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800538c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d405      	bmi.n	800539e <_puts_r+0x9a>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	059b      	lsls	r3, r3, #22
 8005396:	d402      	bmi.n	800539e <_puts_r+0x9a>
 8005398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539a:	f000 faf6 	bl	800598a <__retarget_lock_release_recursive>
 800539e:	4628      	mov	r0, r5
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da04      	bge.n	80053b0 <_puts_r+0xac>
 80053a6:	69a2      	ldr	r2, [r4, #24]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	dc06      	bgt.n	80053ba <_puts_r+0xb6>
 80053ac:	290a      	cmp	r1, #10
 80053ae:	d004      	beq.n	80053ba <_puts_r+0xb6>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	6022      	str	r2, [r4, #0]
 80053b6:	7019      	strb	r1, [r3, #0]
 80053b8:	e7c5      	b.n	8005346 <_puts_r+0x42>
 80053ba:	4622      	mov	r2, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 f86b 	bl	8005498 <__swbuf_r>
 80053c2:	3001      	adds	r0, #1
 80053c4:	d1bf      	bne.n	8005346 <_puts_r+0x42>
 80053c6:	e7df      	b.n	8005388 <_puts_r+0x84>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	250a      	movs	r5, #10
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	701d      	strb	r5, [r3, #0]
 80053d2:	e7db      	b.n	800538c <_puts_r+0x88>
 80053d4:	08005d0c 	.word	0x08005d0c
 80053d8:	08005d2c 	.word	0x08005d2c
 80053dc:	08005cec 	.word	0x08005cec

080053e0 <puts>:
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <puts+0xc>)
 80053e2:	4601      	mov	r1, r0
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f7ff bf8d 	b.w	8005304 <_puts_r>
 80053ea:	bf00      	nop
 80053ec:	20000020 	.word	0x20000020

080053f0 <_sbrk_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d06      	ldr	r5, [pc, #24]	; (800540c <_sbrk_r+0x1c>)
 80053f4:	2300      	movs	r3, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	602b      	str	r3, [r5, #0]
 80053fc:	f7fb fc24 	bl	8000c48 <_sbrk>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_sbrk_r+0x1a>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_sbrk_r+0x1a>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	200001a0 	.word	0x200001a0

08005410 <_raise_r>:
 8005410:	291f      	cmp	r1, #31
 8005412:	b538      	push	{r3, r4, r5, lr}
 8005414:	4604      	mov	r4, r0
 8005416:	460d      	mov	r5, r1
 8005418:	d904      	bls.n	8005424 <_raise_r+0x14>
 800541a:	2316      	movs	r3, #22
 800541c:	6003      	str	r3, [r0, #0]
 800541e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005426:	b112      	cbz	r2, 800542e <_raise_r+0x1e>
 8005428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800542c:	b94b      	cbnz	r3, 8005442 <_raise_r+0x32>
 800542e:	4620      	mov	r0, r4
 8005430:	f000 f830 	bl	8005494 <_getpid_r>
 8005434:	462a      	mov	r2, r5
 8005436:	4601      	mov	r1, r0
 8005438:	4620      	mov	r0, r4
 800543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800543e:	f000 b817 	b.w	8005470 <_kill_r>
 8005442:	2b01      	cmp	r3, #1
 8005444:	d00a      	beq.n	800545c <_raise_r+0x4c>
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	d103      	bne.n	8005452 <_raise_r+0x42>
 800544a:	2316      	movs	r3, #22
 800544c:	6003      	str	r3, [r0, #0]
 800544e:	2001      	movs	r0, #1
 8005450:	e7e7      	b.n	8005422 <_raise_r+0x12>
 8005452:	2400      	movs	r4, #0
 8005454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005458:	4628      	mov	r0, r5
 800545a:	4798      	blx	r3
 800545c:	2000      	movs	r0, #0
 800545e:	e7e0      	b.n	8005422 <_raise_r+0x12>

08005460 <raise>:
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <raise+0xc>)
 8005462:	4601      	mov	r1, r0
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	f7ff bfd3 	b.w	8005410 <_raise_r>
 800546a:	bf00      	nop
 800546c:	20000020 	.word	0x20000020

08005470 <_kill_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d07      	ldr	r5, [pc, #28]	; (8005490 <_kill_r+0x20>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	f7fb fb5b 	bl	8000b38 <_kill>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d102      	bne.n	800548c <_kill_r+0x1c>
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	b103      	cbz	r3, 800548c <_kill_r+0x1c>
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	bf00      	nop
 8005490:	200001a0 	.word	0x200001a0

08005494 <_getpid_r>:
 8005494:	f7fb bb48 	b.w	8000b28 <_getpid>

08005498 <__swbuf_r>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	460e      	mov	r6, r1
 800549c:	4614      	mov	r4, r2
 800549e:	4605      	mov	r5, r0
 80054a0:	b118      	cbz	r0, 80054aa <__swbuf_r+0x12>
 80054a2:	6983      	ldr	r3, [r0, #24]
 80054a4:	b90b      	cbnz	r3, 80054aa <__swbuf_r+0x12>
 80054a6:	f000 f9d1 	bl	800584c <__sinit>
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <__swbuf_r+0x98>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d12b      	bne.n	8005508 <__swbuf_r+0x70>
 80054b0:	686c      	ldr	r4, [r5, #4]
 80054b2:	69a3      	ldr	r3, [r4, #24]
 80054b4:	60a3      	str	r3, [r4, #8]
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	071a      	lsls	r2, r3, #28
 80054ba:	d52f      	bpl.n	800551c <__swbuf_r+0x84>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	b36b      	cbz	r3, 800551c <__swbuf_r+0x84>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	1ac0      	subs	r0, r0, r3
 80054c6:	6963      	ldr	r3, [r4, #20]
 80054c8:	b2f6      	uxtb	r6, r6
 80054ca:	4283      	cmp	r3, r0
 80054cc:	4637      	mov	r7, r6
 80054ce:	dc04      	bgt.n	80054da <__swbuf_r+0x42>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 f926 	bl	8005724 <_fflush_r>
 80054d8:	bb30      	cbnz	r0, 8005528 <__swbuf_r+0x90>
 80054da:	68a3      	ldr	r3, [r4, #8]
 80054dc:	3b01      	subs	r3, #1
 80054de:	60a3      	str	r3, [r4, #8]
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	6022      	str	r2, [r4, #0]
 80054e6:	701e      	strb	r6, [r3, #0]
 80054e8:	6963      	ldr	r3, [r4, #20]
 80054ea:	3001      	adds	r0, #1
 80054ec:	4283      	cmp	r3, r0
 80054ee:	d004      	beq.n	80054fa <__swbuf_r+0x62>
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	07db      	lsls	r3, r3, #31
 80054f4:	d506      	bpl.n	8005504 <__swbuf_r+0x6c>
 80054f6:	2e0a      	cmp	r6, #10
 80054f8:	d104      	bne.n	8005504 <__swbuf_r+0x6c>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f911 	bl	8005724 <_fflush_r>
 8005502:	b988      	cbnz	r0, 8005528 <__swbuf_r+0x90>
 8005504:	4638      	mov	r0, r7
 8005506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <__swbuf_r+0x9c>)
 800550a:	429c      	cmp	r4, r3
 800550c:	d101      	bne.n	8005512 <__swbuf_r+0x7a>
 800550e:	68ac      	ldr	r4, [r5, #8]
 8005510:	e7cf      	b.n	80054b2 <__swbuf_r+0x1a>
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <__swbuf_r+0xa0>)
 8005514:	429c      	cmp	r4, r3
 8005516:	bf08      	it	eq
 8005518:	68ec      	ldreq	r4, [r5, #12]
 800551a:	e7ca      	b.n	80054b2 <__swbuf_r+0x1a>
 800551c:	4621      	mov	r1, r4
 800551e:	4628      	mov	r0, r5
 8005520:	f000 f80c 	bl	800553c <__swsetup_r>
 8005524:	2800      	cmp	r0, #0
 8005526:	d0cb      	beq.n	80054c0 <__swbuf_r+0x28>
 8005528:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800552c:	e7ea      	b.n	8005504 <__swbuf_r+0x6c>
 800552e:	bf00      	nop
 8005530:	08005d0c 	.word	0x08005d0c
 8005534:	08005d2c 	.word	0x08005d2c
 8005538:	08005cec 	.word	0x08005cec

0800553c <__swsetup_r>:
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <__swsetup_r+0xcc>)
 800553e:	b570      	push	{r4, r5, r6, lr}
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	4606      	mov	r6, r0
 8005544:	460c      	mov	r4, r1
 8005546:	b125      	cbz	r5, 8005552 <__swsetup_r+0x16>
 8005548:	69ab      	ldr	r3, [r5, #24]
 800554a:	b913      	cbnz	r3, 8005552 <__swsetup_r+0x16>
 800554c:	4628      	mov	r0, r5
 800554e:	f000 f97d 	bl	800584c <__sinit>
 8005552:	4b2e      	ldr	r3, [pc, #184]	; (800560c <__swsetup_r+0xd0>)
 8005554:	429c      	cmp	r4, r3
 8005556:	d10f      	bne.n	8005578 <__swsetup_r+0x3c>
 8005558:	686c      	ldr	r4, [r5, #4]
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005560:	0719      	lsls	r1, r3, #28
 8005562:	d42c      	bmi.n	80055be <__swsetup_r+0x82>
 8005564:	06dd      	lsls	r5, r3, #27
 8005566:	d411      	bmi.n	800558c <__swsetup_r+0x50>
 8005568:	2309      	movs	r3, #9
 800556a:	6033      	str	r3, [r6, #0]
 800556c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005576:	e03e      	b.n	80055f6 <__swsetup_r+0xba>
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <__swsetup_r+0xd4>)
 800557a:	429c      	cmp	r4, r3
 800557c:	d101      	bne.n	8005582 <__swsetup_r+0x46>
 800557e:	68ac      	ldr	r4, [r5, #8]
 8005580:	e7eb      	b.n	800555a <__swsetup_r+0x1e>
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <__swsetup_r+0xd8>)
 8005584:	429c      	cmp	r4, r3
 8005586:	bf08      	it	eq
 8005588:	68ec      	ldreq	r4, [r5, #12]
 800558a:	e7e6      	b.n	800555a <__swsetup_r+0x1e>
 800558c:	0758      	lsls	r0, r3, #29
 800558e:	d512      	bpl.n	80055b6 <__swsetup_r+0x7a>
 8005590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005592:	b141      	cbz	r1, 80055a6 <__swsetup_r+0x6a>
 8005594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005598:	4299      	cmp	r1, r3
 800559a:	d002      	beq.n	80055a2 <__swsetup_r+0x66>
 800559c:	4630      	mov	r0, r6
 800559e:	f7ff fe07 	bl	80051b0 <_free_r>
 80055a2:	2300      	movs	r3, #0
 80055a4:	6363      	str	r3, [r4, #52]	; 0x34
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055ac:	81a3      	strh	r3, [r4, #12]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6063      	str	r3, [r4, #4]
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	b94b      	cbnz	r3, 80055d6 <__swsetup_r+0x9a>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055cc:	d003      	beq.n	80055d6 <__swsetup_r+0x9a>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4630      	mov	r0, r6
 80055d2:	f000 f9ff 	bl	80059d4 <__smakebuf_r>
 80055d6:	89a0      	ldrh	r0, [r4, #12]
 80055d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055dc:	f010 0301 	ands.w	r3, r0, #1
 80055e0:	d00a      	beq.n	80055f8 <__swsetup_r+0xbc>
 80055e2:	2300      	movs	r3, #0
 80055e4:	60a3      	str	r3, [r4, #8]
 80055e6:	6963      	ldr	r3, [r4, #20]
 80055e8:	425b      	negs	r3, r3
 80055ea:	61a3      	str	r3, [r4, #24]
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	b943      	cbnz	r3, 8005602 <__swsetup_r+0xc6>
 80055f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055f4:	d1ba      	bne.n	800556c <__swsetup_r+0x30>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	0781      	lsls	r1, r0, #30
 80055fa:	bf58      	it	pl
 80055fc:	6963      	ldrpl	r3, [r4, #20]
 80055fe:	60a3      	str	r3, [r4, #8]
 8005600:	e7f4      	b.n	80055ec <__swsetup_r+0xb0>
 8005602:	2000      	movs	r0, #0
 8005604:	e7f7      	b.n	80055f6 <__swsetup_r+0xba>
 8005606:	bf00      	nop
 8005608:	20000020 	.word	0x20000020
 800560c:	08005d0c 	.word	0x08005d0c
 8005610:	08005d2c 	.word	0x08005d2c
 8005614:	08005cec 	.word	0x08005cec

08005618 <__sflush_r>:
 8005618:	898a      	ldrh	r2, [r1, #12]
 800561a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	4605      	mov	r5, r0
 8005620:	0710      	lsls	r0, r2, #28
 8005622:	460c      	mov	r4, r1
 8005624:	d458      	bmi.n	80056d8 <__sflush_r+0xc0>
 8005626:	684b      	ldr	r3, [r1, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	dc05      	bgt.n	8005638 <__sflush_r+0x20>
 800562c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	dc02      	bgt.n	8005638 <__sflush_r+0x20>
 8005632:	2000      	movs	r0, #0
 8005634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563a:	2e00      	cmp	r6, #0
 800563c:	d0f9      	beq.n	8005632 <__sflush_r+0x1a>
 800563e:	2300      	movs	r3, #0
 8005640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005644:	682f      	ldr	r7, [r5, #0]
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	d032      	beq.n	80056b0 <__sflush_r+0x98>
 800564a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	075a      	lsls	r2, r3, #29
 8005650:	d505      	bpl.n	800565e <__sflush_r+0x46>
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	1ac0      	subs	r0, r0, r3
 8005656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005658:	b10b      	cbz	r3, 800565e <__sflush_r+0x46>
 800565a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800565c:	1ac0      	subs	r0, r0, r3
 800565e:	2300      	movs	r3, #0
 8005660:	4602      	mov	r2, r0
 8005662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005664:	6a21      	ldr	r1, [r4, #32]
 8005666:	4628      	mov	r0, r5
 8005668:	47b0      	blx	r6
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	d106      	bne.n	800567e <__sflush_r+0x66>
 8005670:	6829      	ldr	r1, [r5, #0]
 8005672:	291d      	cmp	r1, #29
 8005674:	d82c      	bhi.n	80056d0 <__sflush_r+0xb8>
 8005676:	4a2a      	ldr	r2, [pc, #168]	; (8005720 <__sflush_r+0x108>)
 8005678:	40ca      	lsrs	r2, r1
 800567a:	07d6      	lsls	r6, r2, #31
 800567c:	d528      	bpl.n	80056d0 <__sflush_r+0xb8>
 800567e:	2200      	movs	r2, #0
 8005680:	6062      	str	r2, [r4, #4]
 8005682:	04d9      	lsls	r1, r3, #19
 8005684:	6922      	ldr	r2, [r4, #16]
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	d504      	bpl.n	8005694 <__sflush_r+0x7c>
 800568a:	1c42      	adds	r2, r0, #1
 800568c:	d101      	bne.n	8005692 <__sflush_r+0x7a>
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	b903      	cbnz	r3, 8005694 <__sflush_r+0x7c>
 8005692:	6560      	str	r0, [r4, #84]	; 0x54
 8005694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005696:	602f      	str	r7, [r5, #0]
 8005698:	2900      	cmp	r1, #0
 800569a:	d0ca      	beq.n	8005632 <__sflush_r+0x1a>
 800569c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d002      	beq.n	80056aa <__sflush_r+0x92>
 80056a4:	4628      	mov	r0, r5
 80056a6:	f7ff fd83 	bl	80051b0 <_free_r>
 80056aa:	2000      	movs	r0, #0
 80056ac:	6360      	str	r0, [r4, #52]	; 0x34
 80056ae:	e7c1      	b.n	8005634 <__sflush_r+0x1c>
 80056b0:	6a21      	ldr	r1, [r4, #32]
 80056b2:	2301      	movs	r3, #1
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	1c41      	adds	r1, r0, #1
 80056ba:	d1c7      	bne.n	800564c <__sflush_r+0x34>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0c4      	beq.n	800564c <__sflush_r+0x34>
 80056c2:	2b1d      	cmp	r3, #29
 80056c4:	d001      	beq.n	80056ca <__sflush_r+0xb2>
 80056c6:	2b16      	cmp	r3, #22
 80056c8:	d101      	bne.n	80056ce <__sflush_r+0xb6>
 80056ca:	602f      	str	r7, [r5, #0]
 80056cc:	e7b1      	b.n	8005632 <__sflush_r+0x1a>
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	e7ad      	b.n	8005634 <__sflush_r+0x1c>
 80056d8:	690f      	ldr	r7, [r1, #16]
 80056da:	2f00      	cmp	r7, #0
 80056dc:	d0a9      	beq.n	8005632 <__sflush_r+0x1a>
 80056de:	0793      	lsls	r3, r2, #30
 80056e0:	680e      	ldr	r6, [r1, #0]
 80056e2:	bf08      	it	eq
 80056e4:	694b      	ldreq	r3, [r1, #20]
 80056e6:	600f      	str	r7, [r1, #0]
 80056e8:	bf18      	it	ne
 80056ea:	2300      	movne	r3, #0
 80056ec:	eba6 0807 	sub.w	r8, r6, r7
 80056f0:	608b      	str	r3, [r1, #8]
 80056f2:	f1b8 0f00 	cmp.w	r8, #0
 80056f6:	dd9c      	ble.n	8005632 <__sflush_r+0x1a>
 80056f8:	6a21      	ldr	r1, [r4, #32]
 80056fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056fc:	4643      	mov	r3, r8
 80056fe:	463a      	mov	r2, r7
 8005700:	4628      	mov	r0, r5
 8005702:	47b0      	blx	r6
 8005704:	2800      	cmp	r0, #0
 8005706:	dc06      	bgt.n	8005716 <__sflush_r+0xfe>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005714:	e78e      	b.n	8005634 <__sflush_r+0x1c>
 8005716:	4407      	add	r7, r0
 8005718:	eba8 0800 	sub.w	r8, r8, r0
 800571c:	e7e9      	b.n	80056f2 <__sflush_r+0xda>
 800571e:	bf00      	nop
 8005720:	20400001 	.word	0x20400001

08005724 <_fflush_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b913      	cbnz	r3, 8005734 <_fflush_r+0x10>
 800572e:	2500      	movs	r5, #0
 8005730:	4628      	mov	r0, r5
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	b118      	cbz	r0, 800573e <_fflush_r+0x1a>
 8005736:	6983      	ldr	r3, [r0, #24]
 8005738:	b90b      	cbnz	r3, 800573e <_fflush_r+0x1a>
 800573a:	f000 f887 	bl	800584c <__sinit>
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <_fflush_r+0x6c>)
 8005740:	429c      	cmp	r4, r3
 8005742:	d11b      	bne.n	800577c <_fflush_r+0x58>
 8005744:	686c      	ldr	r4, [r5, #4]
 8005746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ef      	beq.n	800572e <_fflush_r+0xa>
 800574e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005750:	07d0      	lsls	r0, r2, #31
 8005752:	d404      	bmi.n	800575e <_fflush_r+0x3a>
 8005754:	0599      	lsls	r1, r3, #22
 8005756:	d402      	bmi.n	800575e <_fflush_r+0x3a>
 8005758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575a:	f000 f915 	bl	8005988 <__retarget_lock_acquire_recursive>
 800575e:	4628      	mov	r0, r5
 8005760:	4621      	mov	r1, r4
 8005762:	f7ff ff59 	bl	8005618 <__sflush_r>
 8005766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005768:	07da      	lsls	r2, r3, #31
 800576a:	4605      	mov	r5, r0
 800576c:	d4e0      	bmi.n	8005730 <_fflush_r+0xc>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	059b      	lsls	r3, r3, #22
 8005772:	d4dd      	bmi.n	8005730 <_fflush_r+0xc>
 8005774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005776:	f000 f908 	bl	800598a <__retarget_lock_release_recursive>
 800577a:	e7d9      	b.n	8005730 <_fflush_r+0xc>
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <_fflush_r+0x70>)
 800577e:	429c      	cmp	r4, r3
 8005780:	d101      	bne.n	8005786 <_fflush_r+0x62>
 8005782:	68ac      	ldr	r4, [r5, #8]
 8005784:	e7df      	b.n	8005746 <_fflush_r+0x22>
 8005786:	4b04      	ldr	r3, [pc, #16]	; (8005798 <_fflush_r+0x74>)
 8005788:	429c      	cmp	r4, r3
 800578a:	bf08      	it	eq
 800578c:	68ec      	ldreq	r4, [r5, #12]
 800578e:	e7da      	b.n	8005746 <_fflush_r+0x22>
 8005790:	08005d0c 	.word	0x08005d0c
 8005794:	08005d2c 	.word	0x08005d2c
 8005798:	08005cec 	.word	0x08005cec

0800579c <std>:
 800579c:	2300      	movs	r3, #0
 800579e:	b510      	push	{r4, lr}
 80057a0:	4604      	mov	r4, r0
 80057a2:	e9c0 3300 	strd	r3, r3, [r0]
 80057a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057aa:	6083      	str	r3, [r0, #8]
 80057ac:	8181      	strh	r1, [r0, #12]
 80057ae:	6643      	str	r3, [r0, #100]	; 0x64
 80057b0:	81c2      	strh	r2, [r0, #14]
 80057b2:	6183      	str	r3, [r0, #24]
 80057b4:	4619      	mov	r1, r3
 80057b6:	2208      	movs	r2, #8
 80057b8:	305c      	adds	r0, #92	; 0x5c
 80057ba:	f7ff fcf1 	bl	80051a0 <memset>
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <std+0x38>)
 80057c0:	6263      	str	r3, [r4, #36]	; 0x24
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <std+0x3c>)
 80057c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <std+0x40>)
 80057c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <std+0x44>)
 80057cc:	6224      	str	r4, [r4, #32]
 80057ce:	6323      	str	r3, [r4, #48]	; 0x30
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	bf00      	nop
 80057d4:	08005a6d 	.word	0x08005a6d
 80057d8:	08005a8f 	.word	0x08005a8f
 80057dc:	08005ac7 	.word	0x08005ac7
 80057e0:	08005aeb 	.word	0x08005aeb

080057e4 <_cleanup_r>:
 80057e4:	4901      	ldr	r1, [pc, #4]	; (80057ec <_cleanup_r+0x8>)
 80057e6:	f000 b8af 	b.w	8005948 <_fwalk_reent>
 80057ea:	bf00      	nop
 80057ec:	08005725 	.word	0x08005725

080057f0 <__sfmoreglue>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	1e4a      	subs	r2, r1, #1
 80057f4:	2568      	movs	r5, #104	; 0x68
 80057f6:	4355      	muls	r5, r2
 80057f8:	460e      	mov	r6, r1
 80057fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057fe:	f7ff fd27 	bl	8005250 <_malloc_r>
 8005802:	4604      	mov	r4, r0
 8005804:	b140      	cbz	r0, 8005818 <__sfmoreglue+0x28>
 8005806:	2100      	movs	r1, #0
 8005808:	e9c0 1600 	strd	r1, r6, [r0]
 800580c:	300c      	adds	r0, #12
 800580e:	60a0      	str	r0, [r4, #8]
 8005810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005814:	f7ff fcc4 	bl	80051a0 <memset>
 8005818:	4620      	mov	r0, r4
 800581a:	bd70      	pop	{r4, r5, r6, pc}

0800581c <__sfp_lock_acquire>:
 800581c:	4801      	ldr	r0, [pc, #4]	; (8005824 <__sfp_lock_acquire+0x8>)
 800581e:	f000 b8b3 	b.w	8005988 <__retarget_lock_acquire_recursive>
 8005822:	bf00      	nop
 8005824:	2000019c 	.word	0x2000019c

08005828 <__sfp_lock_release>:
 8005828:	4801      	ldr	r0, [pc, #4]	; (8005830 <__sfp_lock_release+0x8>)
 800582a:	f000 b8ae 	b.w	800598a <__retarget_lock_release_recursive>
 800582e:	bf00      	nop
 8005830:	2000019c 	.word	0x2000019c

08005834 <__sinit_lock_acquire>:
 8005834:	4801      	ldr	r0, [pc, #4]	; (800583c <__sinit_lock_acquire+0x8>)
 8005836:	f000 b8a7 	b.w	8005988 <__retarget_lock_acquire_recursive>
 800583a:	bf00      	nop
 800583c:	20000197 	.word	0x20000197

08005840 <__sinit_lock_release>:
 8005840:	4801      	ldr	r0, [pc, #4]	; (8005848 <__sinit_lock_release+0x8>)
 8005842:	f000 b8a2 	b.w	800598a <__retarget_lock_release_recursive>
 8005846:	bf00      	nop
 8005848:	20000197 	.word	0x20000197

0800584c <__sinit>:
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
 8005850:	f7ff fff0 	bl	8005834 <__sinit_lock_acquire>
 8005854:	69a3      	ldr	r3, [r4, #24]
 8005856:	b11b      	cbz	r3, 8005860 <__sinit+0x14>
 8005858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800585c:	f7ff bff0 	b.w	8005840 <__sinit_lock_release>
 8005860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005864:	6523      	str	r3, [r4, #80]	; 0x50
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <__sinit+0x68>)
 8005868:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <__sinit+0x6c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	62a2      	str	r2, [r4, #40]	; 0x28
 800586e:	42a3      	cmp	r3, r4
 8005870:	bf04      	itt	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	61a3      	streq	r3, [r4, #24]
 8005876:	4620      	mov	r0, r4
 8005878:	f000 f820 	bl	80058bc <__sfp>
 800587c:	6060      	str	r0, [r4, #4]
 800587e:	4620      	mov	r0, r4
 8005880:	f000 f81c 	bl	80058bc <__sfp>
 8005884:	60a0      	str	r0, [r4, #8]
 8005886:	4620      	mov	r0, r4
 8005888:	f000 f818 	bl	80058bc <__sfp>
 800588c:	2200      	movs	r2, #0
 800588e:	60e0      	str	r0, [r4, #12]
 8005890:	2104      	movs	r1, #4
 8005892:	6860      	ldr	r0, [r4, #4]
 8005894:	f7ff ff82 	bl	800579c <std>
 8005898:	68a0      	ldr	r0, [r4, #8]
 800589a:	2201      	movs	r2, #1
 800589c:	2109      	movs	r1, #9
 800589e:	f7ff ff7d 	bl	800579c <std>
 80058a2:	68e0      	ldr	r0, [r4, #12]
 80058a4:	2202      	movs	r2, #2
 80058a6:	2112      	movs	r1, #18
 80058a8:	f7ff ff78 	bl	800579c <std>
 80058ac:	2301      	movs	r3, #1
 80058ae:	61a3      	str	r3, [r4, #24]
 80058b0:	e7d2      	b.n	8005858 <__sinit+0xc>
 80058b2:	bf00      	nop
 80058b4:	08005ce8 	.word	0x08005ce8
 80058b8:	080057e5 	.word	0x080057e5

080058bc <__sfp>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	4607      	mov	r7, r0
 80058c0:	f7ff ffac 	bl	800581c <__sfp_lock_acquire>
 80058c4:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <__sfp+0x84>)
 80058c6:	681e      	ldr	r6, [r3, #0]
 80058c8:	69b3      	ldr	r3, [r6, #24]
 80058ca:	b913      	cbnz	r3, 80058d2 <__sfp+0x16>
 80058cc:	4630      	mov	r0, r6
 80058ce:	f7ff ffbd 	bl	800584c <__sinit>
 80058d2:	3648      	adds	r6, #72	; 0x48
 80058d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058d8:	3b01      	subs	r3, #1
 80058da:	d503      	bpl.n	80058e4 <__sfp+0x28>
 80058dc:	6833      	ldr	r3, [r6, #0]
 80058de:	b30b      	cbz	r3, 8005924 <__sfp+0x68>
 80058e0:	6836      	ldr	r6, [r6, #0]
 80058e2:	e7f7      	b.n	80058d4 <__sfp+0x18>
 80058e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058e8:	b9d5      	cbnz	r5, 8005920 <__sfp+0x64>
 80058ea:	4b16      	ldr	r3, [pc, #88]	; (8005944 <__sfp+0x88>)
 80058ec:	60e3      	str	r3, [r4, #12]
 80058ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058f2:	6665      	str	r5, [r4, #100]	; 0x64
 80058f4:	f000 f847 	bl	8005986 <__retarget_lock_init_recursive>
 80058f8:	f7ff ff96 	bl	8005828 <__sfp_lock_release>
 80058fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005904:	6025      	str	r5, [r4, #0]
 8005906:	61a5      	str	r5, [r4, #24]
 8005908:	2208      	movs	r2, #8
 800590a:	4629      	mov	r1, r5
 800590c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005910:	f7ff fc46 	bl	80051a0 <memset>
 8005914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800591c:	4620      	mov	r0, r4
 800591e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005920:	3468      	adds	r4, #104	; 0x68
 8005922:	e7d9      	b.n	80058d8 <__sfp+0x1c>
 8005924:	2104      	movs	r1, #4
 8005926:	4638      	mov	r0, r7
 8005928:	f7ff ff62 	bl	80057f0 <__sfmoreglue>
 800592c:	4604      	mov	r4, r0
 800592e:	6030      	str	r0, [r6, #0]
 8005930:	2800      	cmp	r0, #0
 8005932:	d1d5      	bne.n	80058e0 <__sfp+0x24>
 8005934:	f7ff ff78 	bl	8005828 <__sfp_lock_release>
 8005938:	230c      	movs	r3, #12
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	e7ee      	b.n	800591c <__sfp+0x60>
 800593e:	bf00      	nop
 8005940:	08005ce8 	.word	0x08005ce8
 8005944:	ffff0001 	.word	0xffff0001

08005948 <_fwalk_reent>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	4606      	mov	r6, r0
 800594e:	4688      	mov	r8, r1
 8005950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005954:	2700      	movs	r7, #0
 8005956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800595a:	f1b9 0901 	subs.w	r9, r9, #1
 800595e:	d505      	bpl.n	800596c <_fwalk_reent+0x24>
 8005960:	6824      	ldr	r4, [r4, #0]
 8005962:	2c00      	cmp	r4, #0
 8005964:	d1f7      	bne.n	8005956 <_fwalk_reent+0xe>
 8005966:	4638      	mov	r0, r7
 8005968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596c:	89ab      	ldrh	r3, [r5, #12]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d907      	bls.n	8005982 <_fwalk_reent+0x3a>
 8005972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005976:	3301      	adds	r3, #1
 8005978:	d003      	beq.n	8005982 <_fwalk_reent+0x3a>
 800597a:	4629      	mov	r1, r5
 800597c:	4630      	mov	r0, r6
 800597e:	47c0      	blx	r8
 8005980:	4307      	orrs	r7, r0
 8005982:	3568      	adds	r5, #104	; 0x68
 8005984:	e7e9      	b.n	800595a <_fwalk_reent+0x12>

08005986 <__retarget_lock_init_recursive>:
 8005986:	4770      	bx	lr

08005988 <__retarget_lock_acquire_recursive>:
 8005988:	4770      	bx	lr

0800598a <__retarget_lock_release_recursive>:
 800598a:	4770      	bx	lr

0800598c <__swhatbuf_r>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	460e      	mov	r6, r1
 8005990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005994:	2900      	cmp	r1, #0
 8005996:	b096      	sub	sp, #88	; 0x58
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	da07      	bge.n	80059ae <__swhatbuf_r+0x22>
 800599e:	2300      	movs	r3, #0
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	89b3      	ldrh	r3, [r6, #12]
 80059a4:	061a      	lsls	r2, r3, #24
 80059a6:	d410      	bmi.n	80059ca <__swhatbuf_r+0x3e>
 80059a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ac:	e00e      	b.n	80059cc <__swhatbuf_r+0x40>
 80059ae:	466a      	mov	r2, sp
 80059b0:	f000 f8c2 	bl	8005b38 <_fstat_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	dbf2      	blt.n	800599e <__swhatbuf_r+0x12>
 80059b8:	9a01      	ldr	r2, [sp, #4]
 80059ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059c2:	425a      	negs	r2, r3
 80059c4:	415a      	adcs	r2, r3
 80059c6:	602a      	str	r2, [r5, #0]
 80059c8:	e7ee      	b.n	80059a8 <__swhatbuf_r+0x1c>
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	2000      	movs	r0, #0
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	b016      	add	sp, #88	; 0x58
 80059d2:	bd70      	pop	{r4, r5, r6, pc}

080059d4 <__smakebuf_r>:
 80059d4:	898b      	ldrh	r3, [r1, #12]
 80059d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059d8:	079d      	lsls	r5, r3, #30
 80059da:	4606      	mov	r6, r0
 80059dc:	460c      	mov	r4, r1
 80059de:	d507      	bpl.n	80059f0 <__smakebuf_r+0x1c>
 80059e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	2301      	movs	r3, #1
 80059ea:	6163      	str	r3, [r4, #20]
 80059ec:	b002      	add	sp, #8
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	ab01      	add	r3, sp, #4
 80059f2:	466a      	mov	r2, sp
 80059f4:	f7ff ffca 	bl	800598c <__swhatbuf_r>
 80059f8:	9900      	ldr	r1, [sp, #0]
 80059fa:	4605      	mov	r5, r0
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7ff fc27 	bl	8005250 <_malloc_r>
 8005a02:	b948      	cbnz	r0, 8005a18 <__smakebuf_r+0x44>
 8005a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a08:	059a      	lsls	r2, r3, #22
 8005a0a:	d4ef      	bmi.n	80059ec <__smakebuf_r+0x18>
 8005a0c:	f023 0303 	bic.w	r3, r3, #3
 8005a10:	f043 0302 	orr.w	r3, r3, #2
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	e7e3      	b.n	80059e0 <__smakebuf_r+0xc>
 8005a18:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <__smakebuf_r+0x7c>)
 8005a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	6020      	str	r0, [r4, #0]
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	6163      	str	r3, [r4, #20]
 8005a2a:	9b01      	ldr	r3, [sp, #4]
 8005a2c:	6120      	str	r0, [r4, #16]
 8005a2e:	b15b      	cbz	r3, 8005a48 <__smakebuf_r+0x74>
 8005a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a34:	4630      	mov	r0, r6
 8005a36:	f000 f891 	bl	8005b5c <_isatty_r>
 8005a3a:	b128      	cbz	r0, 8005a48 <__smakebuf_r+0x74>
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	81a3      	strh	r3, [r4, #12]
 8005a48:	89a0      	ldrh	r0, [r4, #12]
 8005a4a:	4305      	orrs	r5, r0
 8005a4c:	81a5      	strh	r5, [r4, #12]
 8005a4e:	e7cd      	b.n	80059ec <__smakebuf_r+0x18>
 8005a50:	080057e5 	.word	0x080057e5

08005a54 <__malloc_lock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__malloc_lock+0x8>)
 8005a56:	f7ff bf97 	b.w	8005988 <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	20000198 	.word	0x20000198

08005a60 <__malloc_unlock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__malloc_unlock+0x8>)
 8005a62:	f7ff bf92 	b.w	800598a <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	20000198 	.word	0x20000198

08005a6c <__sread>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	460c      	mov	r4, r1
 8005a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a74:	f000 f894 	bl	8005ba0 <_read_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	bfab      	itete	ge
 8005a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a80:	181b      	addge	r3, r3, r0
 8005a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a86:	bfac      	ite	ge
 8005a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a8a:	81a3      	strhlt	r3, [r4, #12]
 8005a8c:	bd10      	pop	{r4, pc}

08005a8e <__swrite>:
 8005a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a92:	461f      	mov	r7, r3
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	05db      	lsls	r3, r3, #23
 8005a98:	4605      	mov	r5, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	d505      	bpl.n	8005aac <__swrite+0x1e>
 8005aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f000 f868 	bl	8005b7c <_lseek_r>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	4632      	mov	r2, r6
 8005aba:	463b      	mov	r3, r7
 8005abc:	4628      	mov	r0, r5
 8005abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	f000 b817 	b.w	8005af4 <_write_r>

08005ac6 <__sseek>:
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	460c      	mov	r4, r1
 8005aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ace:	f000 f855 	bl	8005b7c <_lseek_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	bf15      	itete	ne
 8005ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ae2:	81a3      	strheq	r3, [r4, #12]
 8005ae4:	bf18      	it	ne
 8005ae6:	81a3      	strhne	r3, [r4, #12]
 8005ae8:	bd10      	pop	{r4, pc}

08005aea <__sclose>:
 8005aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aee:	f000 b813 	b.w	8005b18 <_close_r>
	...

08005af4 <_write_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4d07      	ldr	r5, [pc, #28]	; (8005b14 <_write_r+0x20>)
 8005af8:	4604      	mov	r4, r0
 8005afa:	4608      	mov	r0, r1
 8005afc:	4611      	mov	r1, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	602a      	str	r2, [r5, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f7fb f84f 	bl	8000ba6 <_write>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_write_r+0x1e>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_write_r+0x1e>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	200001a0 	.word	0x200001a0

08005b18 <_close_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d06      	ldr	r5, [pc, #24]	; (8005b34 <_close_r+0x1c>)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	f7fb f85b 	bl	8000bde <_close>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d102      	bne.n	8005b32 <_close_r+0x1a>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	b103      	cbz	r3, 8005b32 <_close_r+0x1a>
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	200001a0 	.word	0x200001a0

08005b38 <_fstat_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d07      	ldr	r5, [pc, #28]	; (8005b58 <_fstat_r+0x20>)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4608      	mov	r0, r1
 8005b42:	4611      	mov	r1, r2
 8005b44:	602b      	str	r3, [r5, #0]
 8005b46:	f7fb f856 	bl	8000bf6 <_fstat>
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	d102      	bne.n	8005b54 <_fstat_r+0x1c>
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	b103      	cbz	r3, 8005b54 <_fstat_r+0x1c>
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	bd38      	pop	{r3, r4, r5, pc}
 8005b56:	bf00      	nop
 8005b58:	200001a0 	.word	0x200001a0

08005b5c <_isatty_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4d06      	ldr	r5, [pc, #24]	; (8005b78 <_isatty_r+0x1c>)
 8005b60:	2300      	movs	r3, #0
 8005b62:	4604      	mov	r4, r0
 8005b64:	4608      	mov	r0, r1
 8005b66:	602b      	str	r3, [r5, #0]
 8005b68:	f7fb f855 	bl	8000c16 <_isatty>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d102      	bne.n	8005b76 <_isatty_r+0x1a>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	b103      	cbz	r3, 8005b76 <_isatty_r+0x1a>
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	200001a0 	.word	0x200001a0

08005b7c <_lseek_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d07      	ldr	r5, [pc, #28]	; (8005b9c <_lseek_r+0x20>)
 8005b80:	4604      	mov	r4, r0
 8005b82:	4608      	mov	r0, r1
 8005b84:	4611      	mov	r1, r2
 8005b86:	2200      	movs	r2, #0
 8005b88:	602a      	str	r2, [r5, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f7fb f84e 	bl	8000c2c <_lseek>
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	d102      	bne.n	8005b9a <_lseek_r+0x1e>
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	b103      	cbz	r3, 8005b9a <_lseek_r+0x1e>
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	200001a0 	.word	0x200001a0

08005ba0 <_read_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4d07      	ldr	r5, [pc, #28]	; (8005bc0 <_read_r+0x20>)
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	4608      	mov	r0, r1
 8005ba8:	4611      	mov	r1, r2
 8005baa:	2200      	movs	r2, #0
 8005bac:	602a      	str	r2, [r5, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f7fa ffdc 	bl	8000b6c <_read>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_read_r+0x1e>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_read_r+0x1e>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	200001a0 	.word	0x200001a0

08005bc4 <_init>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

08005bd0 <_fini>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr
