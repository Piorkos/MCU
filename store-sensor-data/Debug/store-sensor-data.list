
store-sensor-data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009920  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08009a60  08009a60  00019a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a05c  0800a05c  0001a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a06c  0800a06c  0001a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000004  0800a070  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  200001f4  0800a260  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000350  0800a260  00020350  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018685  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033d2  00000000  00000000  000388a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e8  00000000  00000000  0003bc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016a0  00000000  00000000  0003d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000266e5  00000000  00000000  0003eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000159fa  00000000  00000000  000651ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dc882  00000000  00000000  0007abe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00157469  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000740c  00000000  00000000  001574bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f4 	.word	0x200001f4
 800015c:	00000000 	.word	0x00000000
 8000160:	08009a48 	.word	0x08009a48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f8 	.word	0x200001f8
 800017c:	08009a48 	.word	0x08009a48

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468c      	mov	ip, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8083 	bne.w	8000c9e <__udivmoddi4+0x116>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d947      	bls.n	8000c2e <__udivmoddi4+0xa6>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b142      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	f1c2 0020 	rsb	r0, r2, #32
 8000ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4097      	lsls	r7, r2
 8000bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc0:	fa1f fe87 	uxth.w	lr, r7
 8000bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bda:	f080 8119 	bcs.w	8000e10 <__udivmoddi4+0x288>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8116 	bls.w	8000e10 <__udivmoddi4+0x288>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	443b      	add	r3, r7
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8105 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8102 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c18:	eba4 040e 	sub.w	r4, r4, lr
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xaa>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d150      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3a:	1bcb      	subs	r3, r1, r7
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	2601      	movs	r6, #1
 8000c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4a:	0c21      	lsrs	r1, r4, #16
 8000c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb08 f30c 	mul.w	r3, r8, ip
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000c5c:	1879      	adds	r1, r7, r1
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0xe2>
 8000c64:	428b      	cmp	r3, r1
 8000c66:	f200 80e9 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x10c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x10a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80d9 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e7bf      	b.n	8000c1e <__udivmoddi4+0x96>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	f000 80b1 	beq.w	8000e0a <__udivmoddi4+0x282>
 8000ca8:	2600      	movs	r6, #0
 8000caa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cae:	4630      	mov	r0, r6
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f683 	clz	r6, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d14a      	bne.n	8000d54 <__udivmoddi4+0x1cc>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b8 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0103 	sbc.w	r1, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d0a8      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce4:	4097      	lsls	r7, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cee:	40d9      	lsrs	r1, r3
 8000cf0:	4330      	orrs	r0, r6
 8000cf2:	0c03      	lsrs	r3, r0, #16
 8000cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb06 f108 	mul.w	r1, r6, r8
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x19c>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d16:	f080 808d 	bcs.w	8000e34 <__udivmoddi4+0x2ac>
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	f240 808a 	bls.w	8000e34 <__udivmoddi4+0x2ac>
 8000d20:	3e02      	subs	r6, #2
 8000d22:	443b      	add	r3, r7
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	b281      	uxth	r1, r0
 8000d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb00 f308 	mul.w	r3, r0, r8
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d42:	d273      	bcs.n	8000e2c <__udivmoddi4+0x2a4>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d971      	bls.n	8000e2c <__udivmoddi4+0x2a4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4439      	add	r1, r7
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d52:	e778      	b.n	8000c46 <__udivmoddi4+0xbe>
 8000d54:	f1c6 0c20 	rsb	ip, r6, #32
 8000d58:	fa03 f406 	lsl.w	r4, r3, r6
 8000d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d60:	431c      	orrs	r4, r3
 8000d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d66:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d72:	431f      	orrs	r7, r3
 8000d74:	0c3b      	lsrs	r3, r7, #16
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fa1f f884 	uxth.w	r8, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d86:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d90:	fa00 f306 	lsl.w	r3, r0, r6
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x220>
 8000d96:	1861      	adds	r1, r4, r1
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d9c:	d248      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	d946      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4421      	add	r1, r4
 8000da8:	eba1 010a 	sub.w	r1, r1, sl
 8000dac:	b2bf      	uxth	r7, r7
 8000dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dba:	fb00 f808 	mul.w	r8, r0, r8
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x24a>
 8000dc2:	19e7      	adds	r7, r4, r7
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc8:	d22e      	bcs.n	8000e28 <__udivmoddi4+0x2a0>
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d92c      	bls.n	8000e28 <__udivmoddi4+0x2a0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4427      	add	r7, r4
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	eba7 0708 	sub.w	r7, r7, r8
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	454f      	cmp	r7, r9
 8000de0:	46c6      	mov	lr, r8
 8000de2:	4649      	mov	r1, r9
 8000de4:	d31a      	bcc.n	8000e1c <__udivmoddi4+0x294>
 8000de6:	d017      	beq.n	8000e18 <__udivmoddi4+0x290>
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x27a>
 8000dea:	ebb3 020e 	subs.w	r2, r3, lr
 8000dee:	eb67 0701 	sbc.w	r7, r7, r1
 8000df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df6:	40f2      	lsrs	r2, r6
 8000df8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfc:	40f7      	lsrs	r7, r6
 8000dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8000e02:	2600      	movs	r6, #0
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e70b      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6fd      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e5      	bcs.n	8000de8 <__udivmoddi4+0x260>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0104 	sbc.w	r1, r9, r4
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7df      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e7d2      	b.n	8000dd2 <__udivmoddi4+0x24a>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78d      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7b9      	b.n	8000da8 <__udivmoddi4+0x220>
 8000e34:	4666      	mov	r6, ip
 8000e36:	e775      	b.n	8000d24 <__udivmoddi4+0x19c>
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e74a      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	4439      	add	r1, r7
 8000e42:	e713      	b.n	8000c6c <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e724      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <_ZN3ImuC1EP19__I2C_HandleTypeDef>:
 * @see MPU9250_DEFAULT_ADDRESS
 */

uint8_t buffer[14];

Imu::Imu(I2C_HandleTypeDef* hi2c)
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
{
	this->hi2c = hi2c;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	601a      	str	r2, [r3, #0]
	devAddr = 0xD0;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	22d0      	movs	r2, #208	; 0xd0
 8000e64:	711a      	strb	r2, [r3, #4]
	for (int i=0;i<15;i++){
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b0e      	cmp	r3, #14
 8000e6e:	dc09      	bgt.n	8000e84 <_ZN3ImuC1EP19__I2C_HandleTypeDef+0x34>
		buffer[i] = 0x00;
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4413      	add	r3, r2
 8000e76:	3306      	adds	r3, #6
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<15;i++){
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	e7f2      	b.n	8000e6a <_ZN3ImuC1EP19__I2C_HandleTypeDef+0x1a>
	}
	ID = 0;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	715a      	strb	r2, [r3, #5]
}
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_ZN3Imu10initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void Imu::initialize() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

    //set clock source
    setClockSource(MPU9250_CLOCK_PLL_XGYRO);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f978 	bl	8001198 <_ZN3Imu14setClockSourceEh>
    //set gyro output data rate to 1000hz
    setGyroDLPFMode(1);
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f816 	bl	8000edc <_ZN3Imu15setGyroDLPFModeEh>
    //set gyro range to 500dps.
    setFullScaleGyroRange(MPU9250_GYRO_FS_500);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f847 	bl	8000f46 <_ZN3Imu21setFullScaleGyroRangeEh>
    //set accel output data rate to 1000hz
    setAccDLPFMode(1);
 8000eb8:	2101      	movs	r1, #1
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f8ba 	bl	8001034 <_ZN3Imu14setAccDLPFModeEh>
    //set accel range to 2g
    setFullScaleAccelRange(MPU9250_ACCEL_FS_2);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f87d 	bl	8000fc2 <_ZN3Imu22setFullScaleAccelRangeEh>
    //setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    //set i2c bypass enable pin to true to access magnetometer and configure interrupt
    setBypassEnableAndInterrupt();
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f9b4 	bl	8001236 <_ZN3Imu27setBypassEnableAndInterruptEv>
    //enable interrupt
    //enableInterrupt();
    //set mag to continuous measurement mode
    setMagContMeasMode();
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fa01 	bl	80012d6 <_ZN3Imu18setMagContMeasModeEv>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN3Imu15setGyroDLPFModeEh>:
 * @see MPU9250_DLPF_BW_256
 * @see MPU9250_RA_CONFIG
 * @see MPU9250_CFG_DLPF_CFG_BIT
 * @see MPU9250_CFG_DLPF_CFG_LENGTH
 */
void Imu::setGyroDLPFMode(uint8_t mode) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af04      	add	r7, sp, #16
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	b299      	uxth	r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	2264      	movs	r2, #100	; 0x64
 8000ef8:	9202      	str	r2, [sp, #8]
 8000efa:	2201      	movs	r2, #1
 8000efc:	9201      	str	r2, [sp, #4]
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	221a      	movs	r2, #26
 8000f04:	f002 f87a 	bl	8002ffc <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xF8);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	799b      	ldrb	r3, [r3, #6]
 8000f0c:	f023 0307 	bic.w	r3, r3, #7
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
    temp = (temp | mode);
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_CONFIG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	b299      	uxth	r1, r3
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	f107 030f 	add.w	r3, r7, #15
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	221a      	movs	r2, #26
 8000f3a:	f001 ff4b 	bl	8002dd4 <HAL_I2C_Mem_Write>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_ZN3Imu21setFullScaleGyroRangeEh>:
 * @see MPU9250_GYRO_FS_250
 * @see MPU9250_RA_GYRO_CONFIG
 * @see MPU9250_GCONFIG_FS_SEL_BIT
 * @see MPU9250_GCONFIG_FS_SEL_LENGTH
 */
void Imu::setFullScaleGyroRange(uint8_t range) {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b088      	sub	sp, #32
 8000f4a:	af04      	add	r7, sp, #16
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	791b      	ldrb	r3, [r3, #4]
 8000f5a:	b299      	uxth	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3306      	adds	r3, #6
 8000f60:	2264      	movs	r2, #100	; 0x64
 8000f62:	9202      	str	r2, [sp, #8]
 8000f64:	2201      	movs	r2, #1
 8000f66:	9201      	str	r2, [sp, #4]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	221b      	movs	r2, #27
 8000f6e:	f002 f845 	bl	8002ffc <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xE7);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	799b      	ldrb	r3, [r3, #6]
 8000f76:	f023 0318 	bic.w	r3, r3, #24
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
    temp = (temp | (range<<3));
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	73fb      	strb	r3, [r7, #15]
    //set fchoice_b to 00 as well
    temp = (temp & 0xFC);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_GYRO_CONFIG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	b299      	uxth	r1, r3
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 030f 	add.w	r3, r7, #15
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	221b      	movs	r2, #27
 8000fb6:	f001 ff0d 	bl	8002dd4 <HAL_I2C_Mem_Write>
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZN3Imu22setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void Imu::setFullScaleAccelRange(uint8_t range) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b088      	sub	sp, #32
 8000fc6:	af04      	add	r7, sp, #16
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3306      	adds	r3, #6
 8000fdc:	2264      	movs	r2, #100	; 0x64
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	9201      	str	r2, [sp, #4]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	221c      	movs	r2, #28
 8000fea:	f002 f807 	bl	8002ffc <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xE7);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	799b      	ldrb	r3, [r3, #6]
 8000ff2:	f023 0318 	bic.w	r3, r3, #24
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
    temp = (temp | (range<<3));
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	b25a      	sxtb	r2, r3
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	b25b      	sxtb	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b25b      	sxtb	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	b299      	uxth	r1, r3
 8001016:	2364      	movs	r3, #100	; 0x64
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	221c      	movs	r2, #28
 8001028:	f001 fed4 	bl	8002dd4 <HAL_I2C_Mem_Write>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN3Imu14setAccDLPFModeEh>:
uint8_t Imu::getAccDLPFMode() {
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
    return buffer[0];
}

void Imu::setAccDLPFMode(uint8_t bandwidth) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af04      	add	r7, sp, #16
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	791b      	ldrb	r3, [r3, #4]
 8001048:	b299      	uxth	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3306      	adds	r3, #6
 800104e:	2264      	movs	r2, #100	; 0x64
 8001050:	9202      	str	r2, [sp, #8]
 8001052:	2201      	movs	r2, #1
 8001054:	9201      	str	r2, [sp, #4]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221d      	movs	r2, #29
 800105c:	f001 ffce 	bl	8002ffc <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xF8);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	799b      	ldrb	r3, [r3, #6]
 8001064:	f023 0307 	bic.w	r3, r3, #7
 8001068:	b2db      	uxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
    temp = (temp | bandwidth);
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	4313      	orrs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	73fb      	strb	r3, [r7, #15]
    //set fchoice_b to 0
    temp = (temp & 0xF7);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f023 0308 	bic.w	r3, r3, #8
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG2,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	b299      	uxth	r1, r3
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	221d      	movs	r2, #29
 800109c:	f001 fe9a 	bl	8002dd4 <HAL_I2C_Mem_Write>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN3Imu15getAccelerationEPsS0_S0_>:
 * @param x 16-bit signed integer container for X-axis acceleration
 * @param y 16-bit signed integer container for Y-axis acceleration
 * @param z 16-bit signed integer container for Z-axis acceleration
 * @see MPU9250_RA_GYRO_XOUT_H
 */
void Imu::getAcceleration(int16_t* x, int16_t* y, int16_t* z) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_XOUT_H,I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	b299      	uxth	r1, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3306      	adds	r3, #6
 80010c4:	2264      	movs	r2, #100	; 0x64
 80010c6:	9202      	str	r2, [sp, #8]
 80010c8:	2206      	movs	r2, #6
 80010ca:	9201      	str	r2, [sp, #4]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	223b      	movs	r2, #59	; 0x3b
 80010d2:	f001 ff93 	bl	8002ffc <HAL_I2C_Mem_Read>
    //I2Cdev::readBytes(devAddr, MPU9250_RA_ACCEL_XOUT_H, 6, buffer);
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	799b      	ldrb	r3, [r3, #6]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	79db      	ldrb	r3, [r3, #7]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	7a1b      	ldrb	r3, [r3, #8]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	7a5b      	ldrb	r3, [r3, #9]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	7a9b      	ldrb	r3, [r3, #10]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	7adb      	ldrb	r3, [r3, #11]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	801a      	strh	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZN3Imu11getRotationEPsS0_S0_>:
 * @param y 16-bit signed integer container for Y-axis rotation
 * @param z 16-bit signed integer container for Z-axis rotation
 * @see getMotion6()
 * @see MPU9250_RA_GYRO_XOUT_H
 */
void Imu::getRotation(int16_t* x, int16_t* y, int16_t* z) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af04      	add	r7, sp, #16
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	791b      	ldrb	r3, [r3, #4]
 8001136:	b299      	uxth	r1, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3306      	adds	r3, #6
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	2206      	movs	r2, #6
 8001142:	9201      	str	r2, [sp, #4]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	2243      	movs	r2, #67	; 0x43
 800114a:	f001 ff57 	bl	8002ffc <HAL_I2C_Mem_Read>
    //I2Cdev::readBytes(devAddr, MPU9250_RA_GYRO_XOUT_H, 6, buffer);
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	799b      	ldrb	r3, [r3, #6]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	79db      	ldrb	r3, [r3, #7]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	7a1b      	ldrb	r3, [r3, #8]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	7a5b      	ldrb	r3, [r3, #9]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21a      	sxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	7a9b      	ldrb	r3, [r3, #10]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	7adb      	ldrb	r3, [r3, #11]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	801a      	strh	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN3Imu14setClockSourceEh>:
 * @see getClockSource()
 * @see MPU9250_RA_PWR_MGMT_1
 * @see MPU9250_PWR1_CLKSEL_BIT
 * @see MPU9250_PWR1_CLKSEL_LENGTH
 */
void Imu::setClockSource(uint8_t source) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3306      	adds	r3, #6
 80011b2:	2264      	movs	r2, #100	; 0x64
 80011b4:	9202      	str	r2, [sp, #8]
 80011b6:	2201      	movs	r2, #1
 80011b8:	9201      	str	r2, [sp, #4]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	226b      	movs	r2, #107	; 0x6b
 80011c0:	f001 ff1c 	bl	8002ffc <HAL_I2C_Mem_Read>
    uint8_t temp = ((buffer[0]) & (0xF8));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	799b      	ldrb	r3, [r3, #6]
 80011c8:	f023 0307 	bic.w	r3, r3, #7
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]
    temp = (temp | source);
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_PWR_MGMT_1,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	b299      	uxth	r1, r3
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2301      	movs	r3, #1
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 030f 	add.w	r3, r7, #15
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	226b      	movs	r2, #107	; 0x6b
 80011f6:	f001 fded 	bl	8002dd4 <HAL_I2C_Mem_Write>
    //I2Cdev::writeBits(devAddr, MPU9250_RA_PWR_MGMT_1, MPU9250_PWR1_CLKSEL_BIT, MPU9250_PWR1_CLKSEL_LENGTH, source);
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_ZN3Imu11getDeviceIDEv>:
 * @see MPU9250_RA_WHO_AM_I
 * @see MPU9250_WHO_AM_I_BIT
 * @see MPU9250_WHO_AM_I_LENGTH
 */

uint8_t Imu::getDeviceID(){
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af04      	add	r7, sp, #16
 8001208:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_WHO_AM_I, I2C_MEMADD_SIZE_8BIT,&ID,1,100);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	b299      	uxth	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3305      	adds	r3, #5
 8001218:	2264      	movs	r2, #100	; 0x64
 800121a:	9202      	str	r2, [sp, #8]
 800121c:	2201      	movs	r2, #1
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	2275      	movs	r2, #117	; 0x75
 8001226:	f001 fee9 	bl	8002ffc <HAL_I2C_Mem_Read>
    return ID;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	795b      	ldrb	r3, [r3, #5]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZN3Imu27setBypassEnableAndInterruptEv>:

void Imu::setBypassEnableAndInterrupt(){
 8001236:	b580      	push	{r7, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	af04      	add	r7, sp, #16
 800123c:	6078      	str	r0, [r7, #4]
    uint8_t temp = 0x22;
 800123e:	2322      	movs	r3, #34	; 0x22
 8001240:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_INT_PIN_CFG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	b299      	uxth	r1, r3
 800124c:	2364      	movs	r3, #100	; 0x64
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2301      	movs	r3, #1
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	f107 030f 	add.w	r3, r7, #15
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	2237      	movs	r2, #55	; 0x37
 800125e:	f001 fdb9 	bl	8002dd4 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f001 f99e 	bl	80025a4 <HAL_Delay>
    //I2Cdev::writeByte(0x68, MPU9250_RA_INT_PIN_CFG, 0x02);
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZN3Imu15enableInterruptEv>:

void Imu::enableInterrupt(){
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af04      	add	r7, sp, #16
 8001276:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	791b      	ldrb	r3, [r3, #4]
 8001280:	b299      	uxth	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3306      	adds	r3, #6
 8001286:	2264      	movs	r2, #100	; 0x64
 8001288:	9202      	str	r2, [sp, #8]
 800128a:	2201      	movs	r2, #1
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	2238      	movs	r2, #56	; 0x38
 8001294:	f001 feb2 	bl	8002ffc <HAL_I2C_Mem_Read>
    uint8_t temp = ((buffer[0]) & (0xA6)); // 0xA6 = 10100110 -> clear bits 6,4,3,0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	799b      	ldrb	r3, [r3, #6]
 800129c:	f023 0359 	bic.w	r3, r3, #89	; 0x59
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	73fb      	strb	r3, [r7, #15]
    temp = (temp | 0x01); //set last bit to enable data ready interrupt
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_INT_ENABLE,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	791b      	ldrb	r3, [r3, #4]
 80012b6:	b299      	uxth	r1, r3
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2301      	movs	r3, #1
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f107 030f 	add.w	r3, r7, #15
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	2238      	movs	r2, #56	; 0x38
 80012ca:	f001 fd83 	bl	8002dd4 <HAL_I2C_Mem_Write>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN3Imu18setMagContMeasModeEv>:

void Imu::setMagContMeasMode(){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b088      	sub	sp, #32
 80012da:	af04      	add	r7, sp, #16
 80012dc:	6078      	str	r0, [r7, #4]
    uint8_t temp = 0x06;
 80012de:	2306      	movs	r3, #6
 80012e0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,MPU9250_RA_MAG_ADDRESS, 0x0A,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030f 	add.w	r3, r7, #15
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	220a      	movs	r2, #10
 80012f8:	2118      	movs	r1, #24
 80012fa:	f001 fd6b 	bl	8002dd4 <HAL_I2C_Mem_Write>
    //I2C_M.writeByte(MPU9250_RA_MAG_ADDRESS, 0x0A, 0x06);
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_ZN3Imu10getMagDataEPsS0_S0_>:

void Imu::getMagData(int16_t* mx,int16_t* my, int16_t* mz){
 8001306:	b580      	push	{r7, lr}
 8001308:	b08a      	sub	sp, #40	; 0x28
 800130a:	af04      	add	r7, sp, #16
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	603b      	str	r3, [r7, #0]
    HAL_I2C_Mem_Read(hi2c,MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_XOUT_L, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3306      	adds	r3, #6
 800131c:	2264      	movs	r2, #100	; 0x64
 800131e:	9202      	str	r2, [sp, #8]
 8001320:	2206      	movs	r2, #6
 8001322:	9201      	str	r2, [sp, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	2118      	movs	r1, #24
 800132c:	f001 fe66 	bl	8002ffc <HAL_I2C_Mem_Read>
    //I2C_M.readBytes(MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_XOUT_L, 6, buffer_m);

    /*read ST2 register as required by magnetometer.Otherwise the data is protected and won't be updated.*/
    uint8_t temp;
    HAL_I2C_Mem_Read(hi2c,MPU9250_RA_MAG_ADDRESS, 0x09, I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2364      	movs	r3, #100	; 0x64
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 0317 	add.w	r3, r7, #23
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	2209      	movs	r2, #9
 8001346:	2118      	movs	r1, #24
 8001348:	f001 fe58 	bl	8002ffc <HAL_I2C_Mem_Read>
    //I2C_M.readByte(MPU9250_RA_MAG_ADDRESS, 0x09, &buffer_);

    *mx = ((int16_t)(buffer[1]) << 8) | buffer[0] ;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	79db      	ldrb	r3, [r3, #7]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	799b      	ldrb	r3, [r3, #6]
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21a      	sxth	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	801a      	strh	r2, [r3, #0]
    *my = ((int16_t)(buffer[3]) << 8) | buffer[2] ;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	7a5b      	ldrb	r3, [r3, #9]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7a1b      	ldrb	r3, [r3, #8]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	801a      	strh	r2, [r3, #0]
    *mz = ((int16_t)(buffer[5]) << 8) | buffer[4] ;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	7adb      	ldrb	r3, [r3, #11]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	7a9b      	ldrb	r3, [r3, #10]
 8001384:	b21b      	sxth	r3, r3
 8001386:	4313      	orrs	r3, r2
 8001388:	b21a      	sxth	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	801a      	strh	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZN3Imu19getCompassDataReadyEv>:

uint8_t Imu::getCompassDataReady(){
 8001396:	b580      	push	{r7, lr}
 8001398:	b088      	sub	sp, #32
 800139a:	af04      	add	r7, sp, #16
 800139c:	6078      	str	r0, [r7, #4]
   uint8_t temp;
   HAL_I2C_Mem_Read(hi2c,MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_ST1, I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	f107 030f 	add.w	r3, r7, #15
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	2202      	movs	r2, #2
 80013b4:	2118      	movs	r1, #24
 80013b6:	f001 fe21 	bl	8002ffc <HAL_I2C_Mem_Read>
   //I2C_M.readByte(MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_ST1, &buffer_);
   temp = (temp & 0x01);//remove the front 7 bits.
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	73fb      	strb	r3, [r7, #15]
   return temp;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZN3Imu13readIntStatusEv>:

void Imu::readIntStatus(){
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af04      	add	r7, sp, #16
 80013d4:	6078      	str	r0, [r7, #4]
   HAL_I2C_Mem_Read(hi2c,devAddr,MPU9250_RA_DMP_INT_STATUS,I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	b299      	uxth	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3306      	adds	r3, #6
 80013e4:	2264      	movs	r2, #100	; 0x64
 80013e6:	9202      	str	r2, [sp, #8]
 80013e8:	2206      	movs	r2, #6
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2239      	movs	r2, #57	; 0x39
 80013f2:	f001 fe03 	bl	8002ffc <HAL_I2C_Mem_Read>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800140c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4313      	orrs	r3, r2
 8001414:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001444:	2004      	movs	r0, #4
 8001446:	f7ff ffda 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2080      	movs	r0, #128	; 0x80
 800144c:	f7ff ffd7 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	2002      	movs	r0, #2
 8001452:	f7ff ffd4 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff ffd1 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145c:	2010      	movs	r0, #16
 800145e:	f7ff ffce 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	2008      	movs	r0, #8
 8001464:	f7ff ffcb 	bl	80013fe <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC6 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001468:	f64f 435f 	movw	r3, #64607	; 0xfc5f
 800146c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	4838      	ldr	r0, [pc, #224]	; (800155c <MX_GPIO_Init+0x12c>)
 800147c:	f001 fa92 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001480:	2308      	movs	r3, #8
 8001482:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4833      	ldr	r0, [pc, #204]	; (8001560 <MX_GPIO_Init+0x130>)
 8001492:	f001 fa87 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001496:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800149a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f001 fa7a 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_2_Pin;
 80014b0:	2320      	movs	r3, #32
 80014b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_GPIO_Init+0x134>)
 80014b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b8:	2302      	movs	r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_2_GPIO_Port, &GPIO_InitStruct);
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4826      	ldr	r0, [pc, #152]	; (800155c <MX_GPIO_Init+0x12c>)
 80014c2:	f001 fa6f 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_1_Pin;
 80014c6:	f640 0304 	movw	r3, #2052	; 0x804
 80014ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <MX_GPIO_Init+0x134>)
 80014ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d0:	2302      	movs	r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4823      	ldr	r0, [pc, #140]	; (8001568 <MX_GPIO_Init+0x138>)
 80014da:	f001 fa63 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB0 PB1 PB12
                           PB13 PB14 PB15 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12
 80014de:	f24f 4333 	movw	r3, #62515	; 0xf433
 80014e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e4:	2303      	movs	r3, #3
 80014e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	481d      	ldr	r0, [pc, #116]	; (8001568 <MX_GPIO_Init+0x138>)
 80014f2:	f001 fa57 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014f6:	2310      	movs	r3, #16
 80014f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	2303      	movs	r3, #3
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <MX_GPIO_Init+0x13c>)
 8001508:	f001 fa4c 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150c:	2303      	movs	r3, #3
 800150e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001510:	2303      	movs	r3, #3
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_GPIO_Init+0x140>)
 800151e:	f001 fa41 	bl	80029a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2008      	movs	r0, #8
 8001528:	f001 f93b 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800152c:	2008      	movs	r0, #8
 800152e:	f001 f952 	bl	80027d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2017      	movs	r0, #23
 8001538:	f001 f933 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800153c:	2017      	movs	r0, #23
 800153e:	f001 f94a 	bl	80027d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2028      	movs	r0, #40	; 0x28
 8001548:	f001 f92b 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800154c:	2028      	movs	r0, #40	; 0x28
 800154e:	f001 f942 	bl	80027d6 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	48000800 	.word	0x48000800
 8001560:	48001c00 	.word	0x48001c00
 8001564:	10110000 	.word	0x10110000
 8001568:	48000400 	.word	0x48000400
 800156c:	48001000 	.word	0x48001000
 8001570:	48000c00 	.word	0x48000c00

08001574 <LL_AHB2_GRP1_EnableClock>:
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4013      	ands	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_I2C1_Init+0x74>)
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <MX_I2C1_Init+0x78>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_I2C1_Init+0x74>)
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <MX_I2C1_Init+0x7c>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_I2C1_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_I2C1_Init+0x74>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_I2C1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <MX_I2C1_Init+0x74>)
 8001614:	f001 fb4e 	bl	8002cb4 <HAL_I2C_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800161e:	f000 fc8d 	bl	8001f3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001622:	2100      	movs	r1, #0
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <MX_I2C1_Init+0x74>)
 8001626:	f002 fd93 	bl	8004150 <HAL_I2CEx_ConfigAnalogFilter>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001630:	f000 fc84 	bl	8001f3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001634:	2100      	movs	r1, #0
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_I2C1_Init+0x74>)
 8001638:	f002 fdd5 	bl	80041e6 <HAL_I2CEx_ConfigDigitalFilter>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001642:	f000 fc7b 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000260 	.word	0x20000260
 8001650:	40005400 	.word	0x40005400
 8001654:	10707dbc 	.word	0x10707dbc

08001658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_I2C_MspInit+0x7c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d127      	bne.n	80016ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2002      	movs	r0, #2
 800167c:	f7ff ff7a 	bl	8001574 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001680:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001684:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001686:	2312      	movs	r3, #18
 8001688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001692:	2304      	movs	r3, #4
 8001694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	480e      	ldr	r0, [pc, #56]	; (80016d8 <HAL_I2C_MspInit+0x80>)
 800169e:	f001 f981 	bl	80029a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016a6:	f7ff ff7e 	bl	80015a6 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	201e      	movs	r0, #30
 80016b0:	f001 f877 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016b4:	201e      	movs	r0, #30
 80016b6:	f001 f88e 	bl	80027d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	201f      	movs	r0, #31
 80016c0:	f001 f86f 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016c4:	201f      	movs	r0, #31
 80016c6:	f001 f886 	bl	80027d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	48000400 	.word	0x48000400

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e2:	f000 fed9 	bl	8002498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e6:	f000 f879 	bl	80017dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ea:	f7ff fea1 	bl	8001430 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016ee:	f7ff ff73 	bl	80015d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016f2:	f000 fe15 	bl	8002320 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //  -====
  //  -====
  uint8_t deviceID;
  deviceID = myMPU->getDeviceID();
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <main+0xd8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fd81 	bl	8001202 <_ZN3Imu11getDeviceIDEv>
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  if (deviceID == 0x71)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	2b71      	cmp	r3, #113	; 0x71
 8001708:	d10c      	bne.n	8001724 <main+0x48>
  {
	  myMPU->initialize();//initialize
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <main+0xd8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fbc2 	bl	8000e98 <_ZN3Imu10initializeEv>
  {
	  printf("ID wrong");
	  return 0;
  }

  printf("Device OK, reading data \r\n");
 8001714:	4828      	ldr	r0, [pc, #160]	; (80017b8 <main+0xdc>)
 8001716:	f006 f9e3 	bl	8007ae0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //  -====
  //  -====
  if(magCalibrateFlag)
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <main+0xe0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d011      	beq.n	8001746 <main+0x6a>
 8001722:	e004      	b.n	800172e <main+0x52>
	  printf("ID wrong");
 8001724:	4826      	ldr	r0, [pc, #152]	; (80017c0 <main+0xe4>)
 8001726:	f006 f955 	bl	80079d4 <iprintf>
	  return 0;
 800172a:	2300      	movs	r3, #0
 800172c:	e03e      	b.n	80017ac <main+0xd0>
  {
	  calibrateMag();
 800172e:	f000 fb5b 	bl	8001de8 <_Z12calibrateMagv>
	  printf("Mag Calibration done! \r\n");
 8001732:	4824      	ldr	r0, [pc, #144]	; (80017c4 <main+0xe8>)
 8001734:	f006 f9d4 	bl	8007ae0 <puts>
	  HAL_Delay(4000);
 8001738:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800173c:	f000 ff32 	bl	80025a4 <HAL_Delay>
	  printf("Put the device to rest!! \r\n");
 8001740:	4821      	ldr	r0, [pc, #132]	; (80017c8 <main+0xec>)
 8001742:	f006 f9cd 	bl	8007ae0 <puts>
  }

  HAL_Delay(4000);
 8001746:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800174a:	f000 ff2b 	bl	80025a4 <HAL_Delay>

  //enable interrupt
  myMPU->enableInterrupt();
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <main+0xd8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fd8c 	bl	8001270 <_ZN3Imu15enableInterruptEv>
  myMPU->readIntStatus();
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <main+0xd8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe36 	bl	80013ce <_ZN3Imu13readIntStatusEv>

  while (1)
  {
	  if(counter_1 < (btn_delay + 1))
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <main+0xf0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <main+0xf4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d904      	bls.n	800177a <main+0x9e>
	  {
		  ++counter_1;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <main+0xf4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <main+0xf4>)
 8001778:	6013      	str	r3, [r2, #0]
	  }
	  if(counter_2 < (btn_delay + 1))
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <main+0xf0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <main+0xf8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d904      	bls.n	8001792 <main+0xb6>
	  {
		  ++counter_2;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <main+0xf8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <main+0xf8>)
 8001790:	6013      	str	r3, [r2, #0]
	  }
	  if(counter_3 < (btn_delay + 1))
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <main+0xf0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <main+0xfc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d9e0      	bls.n	8001762 <main+0x86>
	  {
		  ++counter_3;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <main+0xfc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <main+0xfc>)
 80017a8:	6013      	str	r3, [r2, #0]
	  if(counter_1 < (btn_delay + 1))
 80017aa:	e7da      	b.n	8001762 <main+0x86>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000024c 	.word	0x2000024c
 80017b8:	08009a6c 	.word	0x08009a6c
 80017bc:	20000014 	.word	0x20000014
 80017c0:	08009a60 	.word	0x08009a60
 80017c4:	08009a88 	.word	0x08009a88
 80017c8:	08009aa0 	.word	0x08009aa0
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000008 	.word	0x20000008
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000010 	.word	0x20000010

080017dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0ae      	sub	sp, #184	; 0xb8
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017e6:	2248      	movs	r2, #72	; 0x48
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fbd6 	bl	8006f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2250      	movs	r2, #80	; 0x50
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f005 fbc6 	bl	8006f9c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <_Z18SystemClock_Configv+0x138>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a3e      	ldr	r2, [pc, #248]	; (8001914 <_Z18SystemClock_Configv+0x138>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <_Z18SystemClock_Configv+0x138>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800182c:	2322      	movs	r3, #34	; 0x22
 800182e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001834:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001836:	2301      	movs	r3, #1
 8001838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001848:	2360      	movs	r3, #96	; 0x60
 800184a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001854:	2301      	movs	r3, #1
 8001856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001860:	2320      	movs	r3, #32
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800186e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001882:	4618      	mov	r0, r3
 8001884:	f003 f890 	bl	80049a8 <HAL_RCC_OscConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8001898:	f000 fb50 	bl	8001f3c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800189c:	236f      	movs	r3, #111	; 0x6f
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2303      	movs	r3, #3
 80018a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018bc:	2103      	movs	r1, #3
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fbfe 	bl	80050c0 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 80018d4:	f000 fb32 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80018d8:	f242 0305 	movw	r3, #8197	; 0x2005
 80018dc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018e2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80018e8:	2300      	movs	r3, #0
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018ec:	2310      	movs	r3, #16
 80018ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 f827 	bl	8005946 <HAL_RCCEx_PeriphCLKConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <_Z18SystemClock_Configv+0x130>
  {
    Error_Handler();
 8001908:	f000 fb18 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800190c:	bf00      	nop
 800190e:	37b8      	adds	r7, #184	; 0xb8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	58000400 	.word	0x58000400

08001918 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b09c      	sub	sp, #112	; 0x70
 800191e:	af10      	add	r7, sp, #64	; 0x40
 8001920:	4603      	mov	r3, r0
 8001922:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if(GPIO_Pin == BTN_1_Pin)
 8001924:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800192a:	d16d      	bne.n	8001a08 <HAL_GPIO_EXTI_Callback+0xf0>
	{
		if(counter_1 > btn_delay)
 800192c:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x138>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d967      	bls.n	8001a08 <HAL_GPIO_EXTI_Callback+0xf0>
		{
			counter_1 = 0;
 8001938:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x138>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
			printf("BTN 1 \n");
 800193e:	4846      	ldr	r0, [pc, #280]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x140>)
 8001940:	f006 f8ce 	bl	8007ae0 <puts>

			getGyroData();
 8001944:	f000 f89c 	bl	8001a80 <_Z11getGyroDatav>
			getAccelData();
 8001948:	f000 f92c 	bl	8001ba4 <_Z12getAccelDatav>
			getCompassData();
 800194c:	f000 f966 	bl	8001c1c <_Z14getCompassDatav>
			printf("GYRO: %f %f %f Accel: %f %f %f Compass: %f %f %f \r\n",Gxyz[0],Gxyz[1],Gxyz[2],Axyz[0],Axyz[1],Axyz[2],Mxyz[0],Mxyz[1],Mxyz[2]);
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x144>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fdcf 	bl	80004f8 <__aeabi_f2d>
 800195a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x144>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdc8 	bl	80004f8 <__aeabi_f2d>
 8001968:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x144>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdc1 	bl	80004f8 <__aeabi_f2d>
 8001976:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x148>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdba 	bl	80004f8 <__aeabi_f2d>
 8001984:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x148>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdb3 	bl	80004f8 <__aeabi_f2d>
 8001992:	e9c7 0100 	strd	r0, r1, [r7]
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x148>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdac 	bl	80004f8 <__aeabi_f2d>
 80019a0:	4682      	mov	sl, r0
 80019a2:	468b      	mov	fp, r1
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x14c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fda5 	bl	80004f8 <__aeabi_f2d>
 80019ae:	4680      	mov	r8, r0
 80019b0:	4689      	mov	r9, r1
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x14c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fd9e 	bl	80004f8 <__aeabi_f2d>
 80019bc:	4604      	mov	r4, r0
 80019be:	460d      	mov	r5, r1
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x14c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd97 	bl	80004f8 <__aeabi_f2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80019d2:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80019d6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80019da:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80019de:	ed97 7b00 	vldr	d7, [r7]
 80019e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80019ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80019f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80019f6:	ed97 7b06 	vldr	d7, [r7, #24]
 80019fa:	ed8d 7b00 	vstr	d7, [sp]
 80019fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a02:	4819      	ldr	r0, [pc, #100]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x150>)
 8001a04:	f005 ffe6 	bl	80079d4 <iprintf>
		}
	}
	if(GPIO_Pin == BTN_2_Pin)
 8001a08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d10b      	bne.n	8001a26 <HAL_GPIO_EXTI_Callback+0x10e>
	{
		if(counter_2 > btn_delay)
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x154>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d905      	bls.n	8001a26 <HAL_GPIO_EXTI_Callback+0x10e>
		{
			counter_2 = 0;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x154>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
			printf("BTN 2 \n");
 8001a20:	4813      	ldr	r0, [pc, #76]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x158>)
 8001a22:	f006 f85d 	bl	8007ae0 <puts>
		}
	}
	if(GPIO_Pin == BTN_3_Pin)
 8001a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d10b      	bne.n	8001a44 <HAL_GPIO_EXTI_Callback+0x12c>
	{
		if(counter_3 > btn_delay)
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d905      	bls.n	8001a44 <HAL_GPIO_EXTI_Callback+0x12c>
		{
			counter_3 = 0;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
			printf("BTN 3 \n");
 8001a3e:	480e      	ldr	r0, [pc, #56]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x160>)
 8001a40:	f006 f84e 	bl	8007ae0 <puts>
		}
	}
}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	; 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000004 	.word	0x20000004
 8001a58:	08009abc 	.word	0x08009abc
 8001a5c:	20000228 	.word	0x20000228
 8001a60:	2000021c 	.word	0x2000021c
 8001a64:	20000234 	.word	0x20000234
 8001a68:	08009ac4 	.word	0x08009ac4
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	08009af8 	.word	0x08009af8
 8001a74:	20000010 	.word	0x20000010
 8001a78:	08009b00 	.word	0x08009b00
 8001a7c:	00000000 	.word	0x00000000

08001a80 <_Z11getGyroDatav>:
void getGyroData()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
  int16_t gx, gy, gz;
  myMPU->getRotation(&gx, &gy, &gz);
 8001a86:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <_Z11getGyroDatav+0x110>)
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	1dbb      	adds	r3, r7, #6
 8001a8c:	f107 0208 	add.w	r2, r7, #8
 8001a90:	f107 010a 	add.w	r1, r7, #10
 8001a94:	f7ff fb44 	bl	8001120 <_ZN3Imu11getRotationEPsS0_S0_>
  Gxyz[0] = (float) gx * 500 / 32768;//131 LSB(??/s)
 8001a98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001b94 <_Z11getGyroDatav+0x114>
 8001aa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aac:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b98 <_Z11getGyroDatav+0x118>
 8001ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
  Gxyz[1] = (float) gy * 500 / 32768;
 8001aba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b94 <_Z11getGyroDatav+0x114>
 8001aca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ace:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001b98 <_Z11getGyroDatav+0x118>
 8001ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001ad8:	edc3 7a01 	vstr	s15, [r3, #4]
  Gxyz[2] = (float) gz * 500 / 32768;
 8001adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b94 <_Z11getGyroDatav+0x114>
 8001aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001b98 <_Z11getGyroDatav+0x118>
 8001af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001afa:	edc3 7a02 	vstr	s15, [r3, #8]
  Gxyz[0] = Gxyz[0] - gyroBias[0];
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <_Z11getGyroDatav+0x120>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b10:	edc3 7a00 	vstr	s15, [r3]
  Gxyz[1] = Gxyz[1] - gyroBias[1];
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b16:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <_Z11getGyroDatav+0x120>)
 8001b1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b26:	edc3 7a01 	vstr	s15, [r3, #4]
  Gxyz[2] = Gxyz[1] - gyroBias[2];
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <_Z11getGyroDatav+0x120>)
 8001b32:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b3c:	edc3 7a02 	vstr	s15, [r3, #8]
  //High Pass Filter -> remove all values that are less than 0.05dps.
  for (int i=0;i<3;i++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	dc1a      	bgt.n	8001b80 <_Z11getGyroDatav+0x100>
    if(Gxyz[i]<0.05){
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fccf 	bl	80004f8 <__aeabi_f2d>
 8001b5a:	a30b      	add	r3, pc, #44	; (adr r3, 8001b88 <_Z11getGyroDatav+0x108>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe ff94 	bl	8000a8c <__aeabi_dcmplt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <_Z11getGyroDatav+0xf8>
      Gxyz[i]=0;
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <_Z11getGyroDatav+0x11c>)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
  for (int i=0;i<3;i++){
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e7e1      	b.n	8001b44 <_Z11getGyroDatav+0xc4>
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	9999999a 	.word	0x9999999a
 8001b8c:	3fa99999 	.word	0x3fa99999
 8001b90:	2000024c 	.word	0x2000024c
 8001b94:	43fa0000 	.word	0x43fa0000
 8001b98:	47000000 	.word	0x47000000
 8001b9c:	20000228 	.word	0x20000228
 8001ba0:	20000240 	.word	0x20000240

08001ba4 <_Z12getAccelDatav>:
	Gxyz[0] = (float) gx * 500 / 32768;//131 LSB(??/s)
	Gxyz[1] = (float) gy * 500 / 32768;
	Gxyz[2] = (float) gz * 500 / 32768;
}

void getAccelData(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	int16_t ax, ay, az;
	myMPU->getAcceleration(&ax,&ay,&az);
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <_Z12getAccelDatav+0x6c>)
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	1d3a      	adds	r2, r7, #4
 8001bb2:	1db9      	adds	r1, r7, #6
 8001bb4:	f7ff fa78 	bl	80010a8 <_ZN3Imu15getAccelerationEPsS0_S0_>
	Axyz[0] = (float) ax / 16384;//16384  LSB/g
 8001bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001c14 <_Z12getAccelDatav+0x70>
 8001bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <_Z12getAccelDatav+0x74>)
 8001bce:	edc3 7a00 	vstr	s15, [r3]
	Axyz[1] = (float) ay / 16384;
 8001bd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bde:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001c14 <_Z12getAccelDatav+0x70>
 8001be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <_Z12getAccelDatav+0x74>)
 8001be8:	edc3 7a01 	vstr	s15, [r3, #4]
	Axyz[2] = (float) az / 16384;
 8001bec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf8:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001c14 <_Z12getAccelDatav+0x70>
 8001bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <_Z12getAccelDatav+0x74>)
 8001c02:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000024c 	.word	0x2000024c
 8001c14:	46800000 	.word	0x46800000
 8001c18:	2000021c 	.word	0x2000021c

08001c1c <_Z14getCompassDatav>:

void getCompassData(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
	uint8_t dataReady = myMPU->getCompassDataReady();
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <_Z14getCompassDatav+0xfc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fbb5 	bl	8001396 <_ZN3Imu19getCompassDataReadyEv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]
	if (dataReady == 1){
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d16c      	bne.n	8001d10 <_Z14getCompassDatav+0xf4>
		int16_t mx, my, mz;
		myMPU->getMagData(&mx,&my,&mz);
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <_Z14getCompassDatav+0xfc>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	1cbb      	adds	r3, r7, #2
 8001c3c:	1d3a      	adds	r2, r7, #4
 8001c3e:	1db9      	adds	r1, r7, #6
 8001c40:	f7ff fb61 	bl	8001306 <_ZN3Imu10getMagDataEPsS0_S0_>
		//14 bit output.
		Mxyz[0] = (float) mx * 4912 / 8192;
 8001c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001d1c <_Z14getCompassDatav+0x100>
 8001c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c58:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001d20 <_Z14getCompassDatav+0x104>
 8001c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
		Mxyz[1] = (float) my * 4912 / 8192;
 8001c66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001d1c <_Z14getCompassDatav+0x100>
 8001c76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001d20 <_Z14getCompassDatav+0x104>
 8001c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001c84:	edc3 7a01 	vstr	s15, [r3, #4]
		Mxyz[2] = (float) mz * 4912 / 8192;
 8001c88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d1c <_Z14getCompassDatav+0x100>
 8001c98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001d20 <_Z14getCompassDatav+0x104>
 8001ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001ca6:	edc3 7a02 	vstr	s15, [r3, #8]
		Mxyz[0] = Mxyz[0] - mx_centre;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <_Z14getCompassDatav+0x10c>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
		Mxyz[1] = Mxyz[1] - my_centre;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <_Z14getCompassDatav+0x110>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cd2:	edc3 7a01 	vstr	s15, [r3, #4]
		Mxyz[2] = Mxyz[2] - mz_centre;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <_Z14getCompassDatav+0x114>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001ce8:	edc3 7a02 	vstr	s15, [r3, #8]

		/*frame transformation -> coz mag is mounted on different axies with gyro and accel*/
		float temp = Mxyz[0];
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60bb      	str	r3, [r7, #8]
		Mxyz[0] = Mxyz[1];
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cf8:	6013      	str	r3, [r2, #0]
		Mxyz[1] = temp;
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	6053      	str	r3, [r2, #4]
		Mxyz[2] = Mxyz[2]*(-1);
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001d02:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d06:	eef1 7a67 	vneg.f32	s15, s15
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <_Z14getCompassDatav+0x108>)
 8001d0c:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000024c 	.word	0x2000024c
 8001d1c:	45998000 	.word	0x45998000
 8001d20:	46000000 	.word	0x46000000
 8001d24:	20000234 	.word	0x20000234
 8001d28:	20000210 	.word	0x20000210
 8001d2c:	20000214 	.word	0x20000214
 8001d30:	20000218 	.word	0x20000218

08001d34 <_Z17getRawCompassDatav>:

void getRawCompassData(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
	uint8_t dataReady = myMPU->getCompassDataReady();
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <_Z17getRawCompassDatav+0xa0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fb29 	bl	8001396 <_ZN3Imu19getCompassDataReadyEv>
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
	if (dataReady == 1){
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d13a      	bne.n	8001dc4 <_Z17getRawCompassDatav+0x90>
		int16_t mx, my, mz;
		myMPU->getMagData(&mx,&my,&mz);
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <_Z17getRawCompassDatav+0xa0>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	463b      	mov	r3, r7
 8001d54:	1cba      	adds	r2, r7, #2
 8001d56:	1d39      	adds	r1, r7, #4
 8001d58:	f7ff fad5 	bl	8001306 <_ZN3Imu10getMagDataEPsS0_S0_>
		//14 bit output.
		Mxyz[0] = (float) mx * 4912 / 8192;
 8001d5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d68:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001dd8 <_Z17getRawCompassDatav+0xa4>
 8001d6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d70:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001ddc <_Z17getRawCompassDatav+0xa8>
 8001d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <_Z17getRawCompassDatav+0xac>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
		Mxyz[1] = (float) my * 4912 / 8192;
 8001d7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001dd8 <_Z17getRawCompassDatav+0xa4>
 8001d8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d92:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001ddc <_Z17getRawCompassDatav+0xa8>
 8001d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <_Z17getRawCompassDatav+0xac>)
 8001d9c:	edc3 7a01 	vstr	s15, [r3, #4]
		Mxyz[2] = (float) mz * 4912 / 8192;
 8001da0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001dd8 <_Z17getRawCompassDatav+0xa4>
 8001db0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001db4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001ddc <_Z17getRawCompassDatav+0xa8>
 8001db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <_Z17getRawCompassDatav+0xac>)
 8001dbe:	edc3 7a02 	vstr	s15, [r3, #8]
	}else{
		printf("Mag data not ready, using original data");
	}
}
 8001dc2:	e002      	b.n	8001dca <_Z17getRawCompassDatav+0x96>
		printf("Mag data not ready, using original data");
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <_Z17getRawCompassDatav+0xb0>)
 8001dc6:	f005 fe05 	bl	80079d4 <iprintf>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000024c 	.word	0x2000024c
 8001dd8:	45998000 	.word	0x45998000
 8001ddc:	46000000 	.word	0x46000000
 8001de0:	20000234 	.word	0x20000234
 8001de4:	08009b08 	.word	0x08009b08

08001de8 <_Z12calibrateMagv>:

void calibrateMag(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
  uint16_t ii = 0, sample_count = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001df2:	2300      	movs	r3, #0
 8001df4:	83fb      	strh	r3, [r7, #30]
  float mag_max[3] = {1,1,1};
 8001df6:	4a4a      	ldr	r2, [pc, #296]	; (8001f20 <_Z12calibrateMagv+0x138>)
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float mag_min[3] = {-1,-1,-1};
 8001e02:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <_Z12calibrateMagv+0x13c>)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e08:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  printf("Mag Calibration: Wave device in a figure eight until done! \r\n");
 8001e0c:	4846      	ldr	r0, [pc, #280]	; (8001f28 <_Z12calibrateMagv+0x140>)
 8001e0e:	f005 fe67 	bl	8007ae0 <puts>
  HAL_Delay(2000);
 8001e12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e16:	f000 fbc5 	bl	80025a4 <HAL_Delay>

  sample_count = 100;
 8001e1a:	2364      	movs	r3, #100	; 0x64
 8001e1c:	83fb      	strh	r3, [r7, #30]
  for(ii = 0; ii < sample_count; ii++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001e24:	8bfb      	ldrh	r3, [r7, #30]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d24f      	bcs.n	8001eca <_Z12calibrateMagv+0xe2>
    getRawCompassData();  // Read the mag data
 8001e2a:	f7ff ff83 	bl	8001d34 <_Z17getRawCompassDatav>
    for (int jj = 0; jj < 3; jj++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	dc41      	bgt.n	8001ebc <_Z12calibrateMagv+0xd4>
      if(Mxyz[jj] > mag_max[jj]) mag_max[jj] = Mxyz[jj];
 8001e38:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <_Z12calibrateMagv+0x144>)
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b18      	subs	r3, #24
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	dd0b      	ble.n	8001e76 <_Z12calibrateMagv+0x8e>
 8001e5e:	4a33      	ldr	r2, [pc, #204]	; (8001f2c <_Z12calibrateMagv+0x144>)
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e70:	440b      	add	r3, r1
 8001e72:	3b18      	subs	r3, #24
 8001e74:	601a      	str	r2, [r3, #0]
      if(Mxyz[jj] < mag_min[jj]) mag_min[jj] = Mxyz[jj];
 8001e76:	4a2d      	ldr	r2, [pc, #180]	; (8001f2c <_Z12calibrateMagv+0x144>)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b24      	subs	r3, #36	; 0x24
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	d50b      	bpl.n	8001eb4 <_Z12calibrateMagv+0xcc>
 8001e9c:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <_Z12calibrateMagv+0x144>)
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001eae:	440b      	add	r3, r1
 8001eb0:	3b24      	subs	r3, #36	; 0x24
 8001eb2:	601a      	str	r2, [r3, #0]
    for (int jj = 0; jj < 3; jj++) {
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
 8001eba:	e7ba      	b.n	8001e32 <_Z12calibrateMagv+0x4a>
    }
    HAL_Delay(200);
 8001ebc:	20c8      	movs	r0, #200	; 0xc8
 8001ebe:	f000 fb71 	bl	80025a4 <HAL_Delay>
  for(ii = 0; ii < sample_count; ii++) {
 8001ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ec8:	e7ab      	b.n	8001e22 <_Z12calibrateMagv+0x3a>
  }

  // Get hard iron correction
  mx_centre  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8001eca:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <_Z12calibrateMagv+0x148>)
 8001ee0:	edc3 7a00 	vstr	s15, [r3]
  my_centre  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8001ee4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <_Z12calibrateMagv+0x14c>)
 8001efa:	edc3 7a00 	vstr	s15, [r3]
  mz_centre  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8001efe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <_Z12calibrateMagv+0x150>)
 8001f14:	edc3 7a00 	vstr	s15, [r3]
  avg_rad /= 3.0;
  dest2[0] = avg_rad/((float)mag_scale[0]);
  dest2[1] = avg_rad/((float)mag_scale[1]);
  dest2[2] = avg_rad/((float)mag_scale[2]);
  */
}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	08009b70 	.word	0x08009b70
 8001f24:	08009b7c 	.word	0x08009b7c
 8001f28:	08009b30 	.word	0x08009b30
 8001f2c:	20000234 	.word	0x20000234
 8001f30:	20000210 	.word	0x20000210
 8001f34:	20000214 	.word	0x20000214
 8001f38:	20000218 	.word	0x20000218

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>
	...

08001f48 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10f      	bne.n	8001f78 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10a      	bne.n	8001f78 <_Z41__static_initialization_and_destruction_0ii+0x30>
Imu *myMPU = new Imu (&hi2c1);
 8001f62:	2014      	movs	r0, #20
 8001f64:	f004 ffc6 	bl	8006ef4 <_Znwj>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461c      	mov	r4, r3
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7fe ff6e 	bl	8000e50 <_ZN3ImuC1EP19__I2C_HandleTypeDef>
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001f76:	601c      	str	r4, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	20000260 	.word	0x20000260
 8001f84:	2000024c 	.word	0x2000024c

08001f88 <_GLOBAL__sub_I__Z12__io_putcharc>:
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7ff ffd9 	bl	8001f48 <_Z41__static_initialization_and_destruction_0ii>
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <__io_putchar>:
#define __PRINTF_TO_UART_H__

#include "usart.h"

int __io_putchar(char ch)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 8001fa2:	1df9      	adds	r1, r7, #7
 8001fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4804      	ldr	r0, [pc, #16]	; (8001fbc <__io_putchar+0x24>)
 8001fac:	f003 ffc2 	bl	8005f34 <HAL_UART_Transmit>
	return ch;
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200002ac 	.word	0x200002ac

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <NMI_Handler+0x4>

08001fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <HardFault_Handler+0x4>

08001fda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <MemManage_Handler+0x4>

08001fe0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <BusFault_Handler+0x4>

08001fe6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <UsageFault_Handler+0x4>

08001fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201a:	f000 fa97 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}

08002022 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002026:	2004      	movs	r0, #4
 8002028:	f000 fe2c 	bl	8002c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002034:	2020      	movs	r0, #32
 8002036:	f000 fe25 	bl	8002c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <I2C1_EV_IRQHandler+0x10>)
 8002046:	f001 f8f3 	bl	8003230 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000260 	.word	0x20000260

08002054 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <I2C1_ER_IRQHandler+0x10>)
 800205a:	f001 f903 	bl	8003264 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000260 	.word	0x20000260

08002068 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <USART1_IRQHandler+0x10>)
 800206e:	f003 fff7 	bl	8006060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002ac 	.word	0x200002ac

0800207c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002080:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002084:	f000 fdfe 	bl	8002c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
	return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_kill>:

int _kill(int pid, int sig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020a6:	f004 ff47 	bl	8006f38 <__errno>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2216      	movs	r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
	return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe7 	bl	800209c <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ce:	e7fe      	b.n	80020ce <_exit+0x12>

080020d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
	}

return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e009      	b.n	8002130 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff37 	bl	8001f98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf1      	blt.n	800211c <_write+0x12>
	}
	return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
	return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
	return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
	return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f004 feac 	bl	8006f38 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20030000 	.word	0x20030000
 800220c:	00000400 	.word	0x00000400
 8002210:	20000250 	.word	0x20000250
 8002214:	20000350 	.word	0x20000350

08002218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <SystemInit+0x98>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <SystemInit+0x98>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002244:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <SystemInit+0x9c>)
 8002252:	4013      	ands	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002262:	f023 0305 	bic.w	r3, r3, #5
 8002266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <SystemInit+0xa0>)
 8002284:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <SystemInit+0xa0>)
 800228c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00
 80022b4:	faf6fefb 	.word	0xfaf6fefb
 80022b8:	22041000 	.word	0x22041000

080022bc <LL_AHB2_GRP1_EnableClock>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4313      	orrs	r3, r2
 8002304:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 8002326:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 8002364:	2200      	movs	r2, #0
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002368:	4811      	ldr	r0, [pc, #68]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800236a:	f003 fd93 	bl	8005e94 <HAL_UART_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002374:	f7ff fde2 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002378:	2100      	movs	r1, #0
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800237c:	f004 fcf0 	bl	8006d60 <HAL_UARTEx_SetTxFifoThreshold>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002386:	f7ff fdd9 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800238a:	2100      	movs	r1, #0
 800238c:	4808      	ldr	r0, [pc, #32]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800238e:	f004 fd25 	bl	8006ddc <HAL_UARTEx_SetRxFifoThreshold>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002398:	f7ff fdd0 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <MX_USART1_UART_Init+0x90>)
 800239e:	f004 fca6 	bl	8006cee <HAL_UARTEx_DisableFifoMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023a8:	f7ff fdc8 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200002ac 	.word	0x200002ac
 80023b4:	40013800 	.word	0x40013800

080023b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_UART_MspInit+0x68>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d11e      	bne.n	8002418 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023de:	f7ff ff86 	bl	80022ee <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	2002      	movs	r0, #2
 80023e4:	f7ff ff6a 	bl	80022bc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023e8:	23c0      	movs	r3, #192	; 0xc0
 80023ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f8:	2307      	movs	r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4619      	mov	r1, r3
 8002402:	4808      	ldr	r0, [pc, #32]	; (8002424 <HAL_UART_MspInit+0x6c>)
 8002404:	f000 face 	bl	80029a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	2024      	movs	r0, #36	; 0x24
 800240e:	f000 f9c8 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002412:	2024      	movs	r0, #36	; 0x24
 8002414:	f000 f9df 	bl	80027d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40013800 	.word	0x40013800
 8002424:	48000400 	.word	0x48000400

08002428 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002428:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242c:	3304      	adds	r3, #4

0800242e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002430:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002432:	d3f9      	bcc.n	8002428 <CopyDataInit>
  bx lr
 8002434:	4770      	bx	lr

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002436:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002438:	3004      	adds	r0, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800243a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>
  bx lr
 800243e:	4770      	bx	lr

08002440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002442:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002444:	f7ff fee8 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <LoopForever+0x8>)
 800244a:	490c      	ldr	r1, [pc, #48]	; (800247c <LoopForever+0xc>)
 800244c:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <LoopForever+0x10>)
 800244e:	2300      	movs	r3, #0
 8002450:	f7ff ffed 	bl	800242e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002454:	480b      	ldr	r0, [pc, #44]	; (8002484 <LoopForever+0x14>)
 8002456:	490c      	ldr	r1, [pc, #48]	; (8002488 <LoopForever+0x18>)
 8002458:	2300      	movs	r3, #0
 800245a:	f7ff ffee 	bl	800243a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800245e:	480b      	ldr	r0, [pc, #44]	; (800248c <LoopForever+0x1c>)
 8002460:	490b      	ldr	r1, [pc, #44]	; (8002490 <LoopForever+0x20>)
 8002462:	2300      	movs	r3, #0
 8002464:	f7ff ffe9 	bl	800243a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002468:	f004 fd6c 	bl	8006f44 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800246c:	f7ff f936 	bl	80016dc <main>

08002470 <LoopForever>:

LoopForever:
  b LoopForever
 8002470:	e7fe      	b.n	8002470 <LoopForever>
 8002472:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002474:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002478:	20000004 	.word	0x20000004
 800247c:	200001f4 	.word	0x200001f4
 8002480:	0800a070 	.word	0x0800a070
  INIT_BSS _sbss, _ebss
 8002484:	200001f4 	.word	0x200001f4
 8002488:	20000350 	.word	0x20000350
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800248c:	20030000 	.word	0x20030000
 8002490:	20030000 	.word	0x20030000

08002494 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC1_IRQHandler>
	...

08002498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_Init+0x3c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <HAL_Init+0x3c>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ae:	2003      	movs	r0, #3
 80024b0:	f000 f96c 	bl	800278c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f80f 	bl	80024d8 <HAL_InitTick>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	71fb      	strb	r3, [r7, #7]
 80024c4:	e001      	b.n	80024ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024c6:	f7ff fd7b 	bl	8001fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	58004000 	.word	0x58004000

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_InitTick+0x6c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d024      	beq.n	8002536 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024ec:	f002 ff96 	bl	800541c <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_InitTick+0x6c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f974 	bl	80027f2 <HAL_SYSTICK_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10f      	bne.n	8002530 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	d809      	bhi.n	800252a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002516:	2200      	movs	r2, #0
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800251e:	f000 f940 	bl	80027a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_InitTick+0x70>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	e007      	b.n	800253a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	e004      	b.n	800253a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000020 	.word	0x20000020
 8002548:	2000001c 	.word	0x2000001c

0800254c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000020 	.word	0x20000020
 8002570:	2000033c 	.word	0x2000033c

08002574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000033c 	.word	0x2000033c

0800258c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTickPrio+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000001c 	.word	0x2000001c

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffe2 	bl	8002574 <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffd2 	bl	8002574 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
    {
    }
  }
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000020 	.word	0x20000020

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff40 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff90 	bl	80026e0 <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5f 	bl	800268c <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff33 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffa4 	bl	8002748 <SysTick_Config>
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e04f      	b.n	80028bc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d008      	beq.n	800283a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2204      	movs	r2, #4
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e040      	b.n	80028bc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 020e 	bic.w	r2, r2, #14
 8002848:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 021c 	and.w	r2, r3, #28
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2101      	movs	r1, #1
 8002878:	fa01 f202 	lsl.w	r2, r1, r2
 800287c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002886:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00c      	beq.n	80028aa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800289e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d005      	beq.n	80028ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2204      	movs	r2, #4
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e047      	b.n	800297c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 020e 	bic.w	r2, r2, #14
 80028fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800291a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f003 021c 	and.w	r2, r3, #28
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002938:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002950:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800295a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
    }
  }
  return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002994:	b2db      	uxtb	r3, r3
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b2:	e14c      	b.n	8002c4e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	4013      	ands	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 813e 	beq.w	8002c48 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d00b      	beq.n	80029ec <HAL_GPIO_Init+0x48>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e0:	2b11      	cmp	r3, #17
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b12      	cmp	r3, #18
 80029ea:	d130      	bne.n	8002a4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a22:	2201      	movs	r2, #1
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0201 	and.w	r2, r3, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0xea>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d123      	bne.n	8002ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	6939      	ldr	r1, [r7, #16]
 8002ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0203 	and.w	r2, r3, #3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8098 	beq.w	8002c48 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b18:	4a54      	ldr	r2, [pc, #336]	; (8002c6c <HAL_GPIO_Init+0x2c8>)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b42:	d019      	beq.n	8002b78 <HAL_GPIO_Init+0x1d4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <HAL_GPIO_Init+0x2cc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_GPIO_Init+0x1d0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a49      	ldr	r2, [pc, #292]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00d      	beq.n	8002b70 <HAL_GPIO_Init+0x1cc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a48      	ldr	r2, [pc, #288]	; (8002c78 <HAL_GPIO_Init+0x2d4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <HAL_GPIO_Init+0x1c8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a47      	ldr	r2, [pc, #284]	; (8002c7c <HAL_GPIO_Init+0x2d8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_GPIO_Init+0x1c4>
 8002b64:	2304      	movs	r3, #4
 8002b66:	e008      	b.n	8002b7a <HAL_GPIO_Init+0x1d6>
 8002b68:	2307      	movs	r3, #7
 8002b6a:	e006      	b.n	8002b7a <HAL_GPIO_Init+0x1d6>
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e004      	b.n	8002b7a <HAL_GPIO_Init+0x1d6>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x1d6>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_GPIO_Init+0x1d6>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b8a:	4938      	ldr	r1, [pc, #224]	; (8002c6c <HAL_GPIO_Init+0x2c8>)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b98:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bbe:	4a30      	ldr	r2, [pc, #192]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c42:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <HAL_GPIO_Init+0x2dc>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f aeab 	bne.w	80029b4 <HAL_GPIO_Init+0x10>
  }
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	48000400 	.word	0x48000400
 8002c74:	48000800 	.word	0x48000800
 8002c78:	48000c00 	.word	0x48000c00
 8002c7c:	48001000 	.word	0x48001000
 8002c80:	58000800 	.word	0x58000800

08002c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fe38 	bl	8001918 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	58000800 	.word	0x58000800

08002cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e081      	b.n	8002dca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fcbc 	bl	8001658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2224      	movs	r2, #36	; 0x24
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d107      	bne.n	8002d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	e006      	b.n	8002d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d104      	bne.n	8002d4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	ea42 0103 	orr.w	r1, r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69d9      	ldr	r1, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	f040 80f9 	bne.w	8002fee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_I2C_Mem_Write+0x34>
 8002e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d105      	bne.n	8002e14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0ed      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Mem_Write+0x4e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0e6      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e2a:	f7ff fba3 	bl	8002574 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2319      	movs	r3, #25
 8002e36:	2201      	movs	r2, #1
 8002e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 ffd8 	bl	8003df2 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0d1      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2221      	movs	r2, #33	; 0x21
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2240      	movs	r2, #64	; 0x40
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e74:	88f8      	ldrh	r0, [r7, #6]
 8002e76:	893a      	ldrh	r2, [r7, #8]
 8002e78:	8979      	ldrh	r1, [r7, #10]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	4603      	mov	r3, r0
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fb91 	bl	80035ac <I2C_RequestMemoryWrite>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0a9      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2bff      	cmp	r3, #255	; 0xff
 8002ea4:	d90e      	bls.n	8002ec4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	8979      	ldrh	r1, [r7, #10]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f001 f8bb 	bl	8004038 <I2C_TransferConfig>
 8002ec2:	e00f      	b.n	8002ee4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f001 f8aa 	bl	8004038 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 ffc2 	bl	8003e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e07b      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d034      	beq.n	8002f9c <HAL_I2C_Mem_Write+0x1c8>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d130      	bne.n	8002f9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 ff54 	bl	8003df2 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e04d      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d90e      	bls.n	8002f7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	8979      	ldrh	r1, [r7, #10]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f001 f85f 	bl	8004038 <I2C_TransferConfig>
 8002f7a:	e00f      	b.n	8002f9c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f001 f84e 	bl	8004038 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d19e      	bne.n	8002ee4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 ffa1 	bl	8003ef2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e01a      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_I2C_Mem_Write+0x224>)
 8002fce:	400b      	ands	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	fe00e800 	.word	0xfe00e800

08002ffc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	460b      	mov	r3, r1
 8003010:	813b      	strh	r3, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b20      	cmp	r3, #32
 8003020:	f040 80fd 	bne.w	800321e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_I2C_Mem_Read+0x34>
 800302a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0f1      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_I2C_Mem_Read+0x4e>
 8003046:	2302      	movs	r3, #2
 8003048:	e0ea      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003052:	f7ff fa8f 	bl	8002574 <HAL_GetTick>
 8003056:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2319      	movs	r3, #25
 800305e:	2201      	movs	r2, #1
 8003060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fec4 	bl	8003df2 <I2C_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0d5      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2222      	movs	r2, #34	; 0x22
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800309c:	88f8      	ldrh	r0, [r7, #6]
 800309e:	893a      	ldrh	r2, [r7, #8]
 80030a0:	8979      	ldrh	r1, [r7, #10]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4603      	mov	r3, r0
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fad1 	bl	8003654 <I2C_RequestMemoryRead>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0ad      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	d90e      	bls.n	80030ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	4b52      	ldr	r3, [pc, #328]	; (8003228 <HAL_I2C_Mem_Read+0x22c>)
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 ffa7 	bl	8004038 <I2C_TransferConfig>
 80030ea:	e00f      	b.n	800310c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <HAL_I2C_Mem_Read+0x22c>)
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 ff96 	bl	8004038 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	2200      	movs	r2, #0
 8003114:	2104      	movs	r1, #4
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fe6b 	bl	8003df2 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07c      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d034      	beq.n	80031cc <HAL_I2C_Mem_Read+0x1d0>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	d130      	bne.n	80031cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	2200      	movs	r2, #0
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fe3c 	bl	8003df2 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e04d      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2bff      	cmp	r3, #255	; 0xff
 800318c:	d90e      	bls.n	80031ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	b2da      	uxtb	r2, r3
 800319a:	8979      	ldrh	r1, [r7, #10]
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 ff47 	bl	8004038 <I2C_TransferConfig>
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	8979      	ldrh	r1, [r7, #10]
 80031be:	2300      	movs	r3, #0
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 ff36 	bl	8004038 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d19a      	bne.n	800310c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fe89 	bl	8003ef2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e01a      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2220      	movs	r2, #32
 80031f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_I2C_Mem_Read+0x230>)
 80031fe:	400b      	ands	r3, r1
 8003200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	80002400 	.word	0x80002400
 800322c:	fe00e800 	.word	0xfe00e800

08003230 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
  }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_I2C_ER_IRQHandler+0x46>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	09db      	lsrs	r3, r3, #7
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	0a9b      	lsrs	r3, r3, #10
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_I2C_ER_IRQHandler+0x74>
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	09db      	lsrs	r3, r3, #7
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f043 0208 	orr.w	r2, r3, #8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_I2C_ER_IRQHandler+0xa2>
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	09db      	lsrs	r3, r3, #7
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003304:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 030b 	and.w	r3, r3, #11
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fc31 	bl	8003b80 <I2C_ITError>
  }
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	70fb      	strb	r3, [r7, #3]
 800335a:	4613      	mov	r3, r2
 800335c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <I2C_Slave_ISR_IT+0x24>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ec      	b.n	80035a4 <I2C_Slave_ISR_IT+0x1fe>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <I2C_Slave_ISR_IT+0x4c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033ea:	6939      	ldr	r1, [r7, #16]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa67 	bl	80038c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d04d      	beq.n	800349a <I2C_Slave_ISR_IT+0xf4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d047      	beq.n	800349a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d128      	bne.n	8003466 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b28      	cmp	r3, #40	; 0x28
 800341e:	d108      	bne.n	8003432 <I2C_Slave_ISR_IT+0x8c>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003426:	d104      	bne.n	8003432 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fb52 	bl	8003ad4 <I2C_ITListenCplt>
 8003430:	e032      	b.n	8003498 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b29      	cmp	r3, #41	; 0x29
 800343c:	d10e      	bne.n	800345c <I2C_Slave_ISR_IT+0xb6>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003444:	d00a      	beq.n	800345c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2210      	movs	r2, #16
 800344c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fc8d 	bl	8003d6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f9d5 	bl	8003804 <I2C_ITSlaveSeqCplt>
 800345a:	e01d      	b.n	8003498 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2210      	movs	r2, #16
 8003462:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003464:	e096      	b.n	8003594 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2210      	movs	r2, #16
 800346c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f043 0204 	orr.w	r2, r3, #4
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <I2C_Slave_ISR_IT+0xe4>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003486:	f040 8085 	bne.w	8003594 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4619      	mov	r1, r3
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fb75 	bl	8003b80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003496:	e07d      	b.n	8003594 <I2C_Slave_ISR_IT+0x1ee>
 8003498:	e07c      	b.n	8003594 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	089b      	lsrs	r3, r3, #2
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d030      	beq.n	8003508 <I2C_Slave_ISR_IT+0x162>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02a      	beq.n	8003508 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d018      	beq.n	80034ee <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d14f      	bne.n	8003598 <I2C_Slave_ISR_IT+0x1f2>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034fe:	d04b      	beq.n	8003598 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f97f 	bl	8003804 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003506:	e047      	b.n	8003598 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <I2C_Slave_ISR_IT+0x184>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	08db      	lsrs	r3, r3, #3
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f8ea 	bl	80036fc <I2C_ITAddrCplt>
 8003528:	e037      	b.n	800359a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d031      	beq.n	800359a <I2C_Slave_ISR_IT+0x1f4>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02b      	beq.n	800359a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d018      	beq.n	800357e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
 800357c:	e00d      	b.n	800359a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d002      	beq.n	800358c <I2C_Slave_ISR_IT+0x1e6>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f939 	bl	8003804 <I2C_ITSlaveSeqCplt>
 8003592:	e002      	b.n	800359a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003598:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	8979      	ldrh	r1, [r7, #10]
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <I2C_RequestMemoryWrite+0xa4>)
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fd2f 	bl	8004038 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fc47 	bl	8003e72 <I2C_WaitOnTXISFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e02c      	b.n	8003648 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
 80035fe:	e015      	b.n	800362c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003600:	893b      	ldrh	r3, [r7, #8]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	b29b      	uxth	r3, r3
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fc2d 	bl	8003e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e012      	b.n	8003648 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003622:	893b      	ldrh	r3, [r7, #8]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2200      	movs	r2, #0
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fbdb 	bl	8003df2 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	80002000 	.word	0x80002000

08003654 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	460b      	mov	r3, r1
 8003668:	813b      	strh	r3, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	8979      	ldrh	r1, [r7, #10]
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <I2C_RequestMemoryRead+0xa4>)
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fcdc 	bl	8004038 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fbf4 	bl	8003e72 <I2C_WaitOnTXISFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e02c      	b.n	80036ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800369a:	893b      	ldrh	r3, [r7, #8]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
 80036a4:	e015      	b.n	80036d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fbda 	bl	8003e72 <I2C_WaitOnTXISFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e012      	b.n	80036ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2200      	movs	r2, #0
 80036da:	2140      	movs	r1, #64	; 0x40
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fb88 	bl	8003df2 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	80002000 	.word	0x80002000

080036fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003712:	2b28      	cmp	r3, #40	; 0x28
 8003714:	d16a      	bne.n	80037ec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	b29b      	uxth	r3, r3
 8003730:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003734:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	b29b      	uxth	r3, r3
 800373e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003742:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003750:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d138      	bne.n	80037cc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	09db      	lsrs	r3, r3, #7
 800375e:	b29a      	uxth	r2, r3
 8003760:	89bb      	ldrh	r3, [r7, #12]
 8003762:	4053      	eors	r3, r2
 8003764:	b29b      	uxth	r3, r3
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11c      	bne.n	80037a8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800376e:	897b      	ldrh	r3, [r7, #10]
 8003770:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	2b02      	cmp	r3, #2
 8003782:	d13b      	bne.n	80037fc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2208      	movs	r2, #8
 8003790:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800379a:	89ba      	ldrh	r2, [r7, #12]
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fdd4 	bl	800334e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037a6:	e029      	b.n	80037fc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80037a8:	893b      	ldrh	r3, [r7, #8]
 80037aa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fc6f 	bl	8004094 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037be:	89ba      	ldrh	r2, [r7, #12]
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff fdc2 	bl	800334e <HAL_I2C_AddrCallback>
}
 80037ca:	e017      	b.n	80037fc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fc5f 	bl	8004094 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037de:	89ba      	ldrh	r2, [r7, #12]
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fdb2 	bl	800334e <HAL_I2C_AddrCallback>
}
 80037ea:	e007      	b.n	80037fc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2208      	movs	r2, #8
 80037f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	0b9b      	lsrs	r3, r3, #14
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e00d      	b.n	8003856 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0bdb      	lsrs	r3, r3, #15
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003854:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b29      	cmp	r3, #41	; 0x29
 8003860:	d112      	bne.n	8003888 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2228      	movs	r2, #40	; 0x28
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2221      	movs	r2, #33	; 0x21
 800386e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003870:	2101      	movs	r1, #1
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fc0e 	bl	8004094 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fd50 	bl	8003326 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003886:	e017      	b.n	80038b8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b2a      	cmp	r3, #42	; 0x2a
 8003892:	d111      	bne.n	80038b8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2228      	movs	r2, #40	; 0x28
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2222      	movs	r2, #34	; 0x22
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038a2:	2102      	movs	r1, #2
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fbf5 	bl	8004094 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fd41 	bl	800333a <HAL_I2C_SlaveRxCpltCallback>
}
 80038b8:	bf00      	nop
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038dc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b21      	cmp	r3, #33	; 0x21
 80038ea:	d002      	beq.n	80038f2 <I2C_ITSlaveCplt+0x32>
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b29      	cmp	r3, #41	; 0x29
 80038f0:	d108      	bne.n	8003904 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80038f2:	f248 0101 	movw	r1, #32769	; 0x8001
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fbcc 	bl	8004094 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2221      	movs	r2, #33	; 0x21
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
 8003902:	e00d      	b.n	8003920 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b22      	cmp	r3, #34	; 0x22
 8003908:	d002      	beq.n	8003910 <I2C_ITSlaveCplt+0x50>
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b2a      	cmp	r3, #42	; 0x2a
 800390e:	d107      	bne.n	8003920 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003910:	f248 0102 	movw	r1, #32770	; 0x8002
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fbbd 	bl	8004094 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2222      	movs	r2, #34	; 0x22
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b64      	ldr	r3, [pc, #400]	; (8003acc <I2C_ITSlaveCplt+0x20c>)
 800393c:	400b      	ands	r3, r1
 800393e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fa14 	bl	8003d6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	0b9b      	lsrs	r3, r3, #14
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d013      	beq.n	800397a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003960:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	2b00      	cmp	r3, #0
 8003968:	d020      	beq.n	80039ac <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003978:	e018      	b.n	80039ac <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	0bdb      	lsrs	r3, r3, #15
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003994:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0304 	bic.w	r3, r3, #4
 80039be:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f043 0204 	orr.w	r2, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d010      	beq.n	8003a48 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f8a7 	bl	8003b80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b28      	cmp	r3, #40	; 0x28
 8003a3c:	d141      	bne.n	8003ac2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a3e:	6979      	ldr	r1, [r7, #20]
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f847 	bl	8003ad4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a46:	e03c      	b.n	8003ac2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a50:	d014      	beq.n	8003a7c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fed6 	bl	8003804 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <I2C_ITSlaveCplt+0x210>)
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fc78 	bl	800336a <HAL_I2C_ListenCpltCallback>
}
 8003a7a:	e022      	b.n	8003ac2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b22      	cmp	r3, #34	; 0x22
 8003a86:	d10e      	bne.n	8003aa6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fc4b 	bl	800333a <HAL_I2C_SlaveRxCpltCallback>
}
 8003aa4:	e00d      	b.n	8003ac2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fc32 	bl	8003326 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	fe00e800 	.word	0xfe00e800
 8003ad0:	ffff0000 	.word	0xffff0000

08003ad4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <I2C_ITListenCplt+0xa8>)
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d022      	beq.n	8003b52 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d012      	beq.n	8003b52 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f043 0204 	orr.w	r2, r3, #4
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b52:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa9c 	bl	8004094 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2210      	movs	r2, #16
 8003b62:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fbfc 	bl	800336a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	ffff0000 	.word	0xffff0000

08003b80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a5d      	ldr	r2, [pc, #372]	; (8003d14 <I2C_ITError+0x194>)
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b28      	cmp	r3, #40	; 0x28
 8003bb6:	d005      	beq.n	8003bc4 <I2C_ITError+0x44>
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b29      	cmp	r3, #41	; 0x29
 8003bbc:	d002      	beq.n	8003bc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bc2:	d10b      	bne.n	8003bdc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bc4:	2103      	movs	r1, #3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa64 	bl	8004094 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2228      	movs	r2, #40	; 0x28
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a50      	ldr	r2, [pc, #320]	; (8003d18 <I2C_ITError+0x198>)
 8003bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bda:	e011      	b.n	8003c00 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bdc:	f248 0103 	movw	r1, #32771	; 0x8003
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fa57 	bl	8004094 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b60      	cmp	r3, #96	; 0x60
 8003bf0:	d003      	beq.n	8003bfa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d039      	beq.n	8003c82 <I2C_ITError+0x102>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b11      	cmp	r3, #17
 8003c12:	d002      	beq.n	8003c1a <I2C_ITError+0x9a>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b21      	cmp	r3, #33	; 0x21
 8003c18:	d133      	bne.n	8003c82 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c28:	d107      	bne.n	8003c3a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c38:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fea1 	bl	8002986 <HAL_DMA_GetState>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d017      	beq.n	8003c7a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <I2C_ITError+0x19c>)
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fe32 	bl	80028c8 <HAL_DMA_Abort_IT>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04d      	beq.n	8003d06 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c74:	4610      	mov	r0, r2
 8003c76:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c78:	e045      	b.n	8003d06 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f850 	bl	8003d20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c80:	e041      	b.n	8003d06 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d039      	beq.n	8003cfe <I2C_ITError+0x17e>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b12      	cmp	r3, #18
 8003c8e:	d002      	beq.n	8003c96 <I2C_ITError+0x116>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b22      	cmp	r3, #34	; 0x22
 8003c94:	d133      	bne.n	8003cfe <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca4:	d107      	bne.n	8003cb6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fe63 	bl	8002986 <HAL_DMA_GetState>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d017      	beq.n	8003cf6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <I2C_ITError+0x19c>)
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fdf4 	bl	80028c8 <HAL_DMA_Abort_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d011      	beq.n	8003d0a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf4:	e009      	b.n	8003d0a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f812 	bl	8003d20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cfc:	e005      	b.n	8003d0a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f80e 	bl	8003d20 <I2C_TreatErrorCallback>
  }
}
 8003d04:	e002      	b.n	8003d0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d0a:	bf00      	nop
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	ffff0000 	.word	0xffff0000
 8003d18:	080033a7 	.word	0x080033a7
 8003d1c:	08003db7 	.word	0x08003db7

08003d20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d10e      	bne.n	8003d52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fb21 	bl	8003392 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d50:	e009      	b.n	8003d66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fb0c 	bl	800337e <HAL_I2C_ErrorCallback>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d103      	bne.n	8003d8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d007      	beq.n	8003daa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	619a      	str	r2, [r3, #24]
  }
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	2200      	movs	r2, #0
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff ff9b 	bl	8003d20 <I2C_TreatErrorCallback>
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e02:	e022      	b.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0a:	d01e      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0c:	f7fe fbb2 	bl	8002574 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d302      	bcc.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d113      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d0cd      	beq.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e7e:	e02c      	b.n	8003eda <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f871 	bl	8003f6c <I2C_IsAcknowledgeFailed>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e02a      	b.n	8003eea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9a:	d01e      	beq.n	8003eda <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9c:	f7fe fb6a 	bl	8002574 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d302      	bcc.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d113      	bne.n	8003eda <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e007      	b.n	8003eea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d1cb      	bne.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003efe:	e028      	b.n	8003f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f831 	bl	8003f6c <I2C_IsAcknowledgeFailed>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e026      	b.n	8003f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f14:	f7fe fb2e 	bl	8002574 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d302      	bcc.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e007      	b.n	8003f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d1cf      	bne.n	8003f00 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d151      	bne.n	800402a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f86:	e022      	b.n	8003fce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8e:	d01e      	beq.n	8003fce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f90:	f7fe faf0 	bl	8002574 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <I2C_IsAcknowledgeFailed+0x3a>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d113      	bne.n	8003fce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02e      	b.n	800402c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d1d5      	bne.n	8003f88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff febe 	bl	8003d6e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <I2C_IsAcknowledgeFailed+0xc8>)
 8003ffe:	400b      	ands	r3, r1
 8004000:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f043 0204 	orr.w	r2, r3, #4
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	fe00e800 	.word	0xfe00e800

08004038 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	817b      	strh	r3, [r7, #10]
 8004046:	4613      	mov	r3, r2
 8004048:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	0d5b      	lsrs	r3, r3, #21
 8004054:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <I2C_TransferConfig+0x58>)
 800405a:	430b      	orrs	r3, r1
 800405c:	43db      	mvns	r3, r3
 800405e:	ea02 0103 	and.w	r1, r2, r3
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004068:	7a7b      	ldrb	r3, [r7, #9]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	431a      	orrs	r2, r3
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	431a      	orrs	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	03ff63ff 	.word	0x03ff63ff

08004094 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00f      	beq.n	80040ce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80040b4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c2:	2b28      	cmp	r3, #40	; 0x28
 80040c4:	d003      	beq.n	80040ce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00f      	beq.n	80040f8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80040de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040ec:	2b28      	cmp	r3, #40	; 0x28
 80040ee:	d003      	beq.n	80040f8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040f6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80040f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	da03      	bge.n	8004108 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004106:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004108:	887b      	ldrh	r3, [r7, #2]
 800410a:	2b10      	cmp	r3, #16
 800410c:	d103      	bne.n	8004116 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004116:	887b      	ldrh	r3, [r7, #2]
 8004118:	2b20      	cmp	r3, #32
 800411a:	d103      	bne.n	8004124 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f043 0320 	orr.w	r3, r3, #32
 8004122:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d103      	bne.n	8004132 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004130:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6819      	ldr	r1, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43da      	mvns	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	400a      	ands	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b20      	cmp	r3, #32
 8004164:	d138      	bne.n	80041d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004170:	2302      	movs	r3, #2
 8004172:	e032      	b.n	80041da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d139      	bne.n	8004270 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004206:	2302      	movs	r3, #2
 8004208:	e033      	b.n	8004272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2224      	movs	r2, #36	; 0x24
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004238:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	58000400 	.word	0x58000400

080042a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	58000400 	.word	0x58000400

080042bc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ce:	d101      	bne.n	80042d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432e:	d101      	bne.n	8004334 <LL_RCC_HSE_IsReady+0x18>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <LL_RCC_HSE_IsReady+0x1a>
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800435e:	b480      	push	{r7}
 8004360:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d101      	bne.n	8004394 <LL_RCC_HSI_IsReady+0x18>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <LL_RCC_HSI_IsReady+0x1a>
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80043ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80043e2:	bf00      	nop
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d101      	bne.n	8004426 <LL_RCC_HSI48_IsReady+0x18>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_RCC_HSI48_IsReady+0x1a>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004476:	b480      	push	{r7}
 8004478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800448e:	bf00      	nop
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800449c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d101      	bne.n	80044d2 <LL_RCC_LSE_IsReady+0x18>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <LL_RCC_LSE_IsReady+0x1a>
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d101      	bne.n	800453a <LL_RCC_LSI1_IsReady+0x18>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <LL_RCC_LSI1_IsReady+0x1a>
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004578:	f023 0304 	bic.w	r3, r3, #4
 800457c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800458e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d101      	bne.n	80045a2 <LL_RCC_LSI2_IsReady+0x18>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <LL_RCC_LSI2_IsReady+0x1a>
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80045e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	6013      	str	r3, [r2, #0]
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800461c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d101      	bne.n	800462e <LL_RCC_MSI_IsReady+0x16>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <LL_RCC_MSI_IsReady+0x18>
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004672:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2bb0      	cmp	r3, #176	; 0xb0
 8004678:	d901      	bls.n	800467e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800467a:	23b0      	movs	r3, #176	; 0xb0
 800467c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800467e:	687b      	ldr	r3, [r7, #4]
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80046be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 0203 	bic.w	r2, r3, #3
 80046c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800472e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800475a:	f023 020f 	bic.w	r2, r3, #15
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800478a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4313      	orrs	r3, r2
 8004792:	608b      	str	r3, [r1, #8]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004822:	4618      	mov	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800483a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800484a:	b480      	push	{r7}
 800484c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800484e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485c:	6013      	str	r3, [r2, #0]
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800487a:	d101      	bne.n	8004880 <LL_RCC_PLL_IsReady+0x18>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <LL_RCC_PLL_IsReady+0x1a>
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0303 	and.w	r3, r3, #3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d101      	bne.n	8004906 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004926:	d101      	bne.n	800492c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494c:	d101      	bne.n	8004952 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004970:	d101      	bne.n	8004976 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004994:	d101      	bne.n	800499a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b08d      	sub	sp, #52	; 0x34
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e37e      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8092 	beq.w	8004aec <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c8:	f7ff fe89 	bl	80046de <LL_RCC_GetSysClkSource>
 80049cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ce:	f7ff ff82 	bl	80048d6 <LL_RCC_PLL_GetMainSource>
 80049d2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_RCC_OscConfig+0x3e>
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	d14c      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d149      	bne.n	8004a7a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049e6:	f7ff fe17 	bl	8004618 <LL_RCC_MSI_IsReady>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_OscConfig+0x54>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e35d      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004a00:	f7ff fe2f 	bl	8004662 <LL_RCC_MSI_GetRange>
 8004a04:	4603      	mov	r3, r0
 8004a06:	429c      	cmp	r4, r3
 8004a08:	d914      	bls.n	8004a34 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fd44 	bl	800549c <RCC_SetFlashLatencyFromMSIRange>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e34c      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fe09 	bl	800463a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fe2d 	bl	800468c <LL_RCC_MSI_SetCalibTrimming>
 8004a32:	e013      	b.n	8004a5c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fdfe 	bl	800463a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fe22 	bl	800468c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fd25 	bl	800549c <RCC_SetFlashLatencyFromMSIRange>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e32d      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a5c:	f000 fcde 	bl	800541c <HAL_RCC_GetHCLKFreq>
 8004a60:	4603      	mov	r3, r0
 8004a62:	4ab3      	ldr	r2, [pc, #716]	; (8004d30 <HAL_RCC_OscConfig+0x388>)
 8004a64:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a66:	4bb3      	ldr	r3, [pc, #716]	; (8004d34 <HAL_RCC_OscConfig+0x38c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fd34 	bl	80024d8 <HAL_InitTick>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d039      	beq.n	8004aea <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e31e      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01e      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a82:	f7ff fdab 	bl	80045dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a86:	f7fd fd75 	bl	8002574 <HAL_GetTick>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a8e:	f7fd fd71 	bl	8002574 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e30b      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004aa0:	f7ff fdba 	bl	8004618 <LL_RCC_MSI_IsReady>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f1      	beq.n	8004a8e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fdc3 	bl	800463a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fde7 	bl	800468c <LL_RCC_MSI_SetCalibTrimming>
 8004abe:	e015      	b.n	8004aec <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ac0:	f7ff fd9b 	bl	80045fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fd56 	bl	8002574 <HAL_GetTick>
 8004ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004acc:	f7fd fd52 	bl	8002574 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e2ec      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004ade:	f7ff fd9b 	bl	8004618 <LL_RCC_MSI_IsReady>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f1      	bne.n	8004acc <HAL_RCC_OscConfig+0x124>
 8004ae8:	e000      	b.n	8004aec <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d04e      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af8:	f7ff fdf1 	bl	80046de <LL_RCC_GetSysClkSource>
 8004afc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004afe:	f7ff feea 	bl	80048d6 <LL_RCC_PLL_GetMainSource>
 8004b02:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d005      	beq.n	8004b16 <HAL_RCC_OscConfig+0x16e>
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d10d      	bne.n	8004b2c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d10a      	bne.n	8004b2c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b16:	f7ff fc01 	bl	800431c <LL_RCC_HSE_IsReady>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d039      	beq.n	8004b94 <HAL_RCC_OscConfig+0x1ec>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d135      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e2c5      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d102      	bne.n	8004b3c <HAL_RCC_OscConfig+0x194>
 8004b36:	f7ff fbd3 	bl	80042e0 <LL_RCC_HSE_Enable>
 8004b3a:	e001      	b.n	8004b40 <HAL_RCC_OscConfig+0x198>
 8004b3c:	f7ff fbdf 	bl	80042fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fd14 	bl	8002574 <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd fd10 	bl	8002574 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e2aa      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b62:	f7ff fbdb 	bl	800431c <LL_RCC_HSE_IsReady>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f1      	beq.n	8004b50 <HAL_RCC_OscConfig+0x1a8>
 8004b6c:	e013      	b.n	8004b96 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fd01 	bl	8002574 <HAL_GetTick>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b76:	f7fd fcfd 	bl	8002574 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b64      	cmp	r3, #100	; 0x64
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e297      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b88:	f7ff fbc8 	bl	800431c <LL_RCC_HSE_IsReady>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f1      	bne.n	8004b76 <HAL_RCC_OscConfig+0x1ce>
 8004b92:	e000      	b.n	8004b96 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d051      	beq.n	8004c46 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba2:	f7ff fd9c 	bl	80046de <LL_RCC_GetSysClkSource>
 8004ba6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba8:	f7ff fe95 	bl	80048d6 <LL_RCC_PLL_GetMainSource>
 8004bac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x218>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d113      	bne.n	8004be2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d110      	bne.n	8004be2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc0:	f7ff fbdc 	bl	800437c <LL_RCC_HSI_IsReady>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x22e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e270      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fbe0 	bl	80043a0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be0:	e031      	b.n	8004c46 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d019      	beq.n	8004c1e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bea:	f7ff fba9 	bl	8004340 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fd fcc1 	bl	8002574 <HAL_GetTick>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf6:	f7fd fcbd 	bl	8002574 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e257      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c08:	f7ff fbb8 	bl	800437c <LL_RCC_HSI_IsReady>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f1      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fbc2 	bl	80043a0 <LL_RCC_HSI_SetCalibTrimming>
 8004c1c:	e013      	b.n	8004c46 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1e:	f7ff fb9e 	bl	800435e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fd fca7 	bl	8002574 <HAL_GetTick>
 8004c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2a:	f7fd fca3 	bl	8002574 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e23d      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004c3c:	f7ff fb9e 	bl	800437c <LL_RCC_HSI_IsReady>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f1      	bne.n	8004c2a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80a3 	beq.w	8004da6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d076      	beq.n	8004d56 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d046      	beq.n	8004d02 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004c74:	f7ff fc55 	bl	8004522 <LL_RCC_LSI1_IsReady>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d113      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004c7e:	f7ff fc2e 	bl	80044de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c82:	f7fd fc77 	bl	8002574 <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c8a:	f7fd fc73 	bl	8002574 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e20d      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c9c:	f7ff fc41 	bl	8004522 <LL_RCC_LSI1_IsReady>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f1      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004ca6:	f7ff fc4e 	bl	8004546 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004caa:	f7fd fc63 	bl	8002574 <HAL_GetTick>
 8004cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cb2:	f7fd fc5f 	bl	8002574 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1f9      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004cc4:	f7ff fc61 	bl	800458a <LL_RCC_LSI2_IsReady>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f1      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fc6b 	bl	80045ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004cd8:	f7ff fc12 	bl	8004500 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fd fc4a 	bl	8002574 <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ce4:	f7fd fc46 	bl	8002574 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1e0      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004cf6:	f7ff fc14 	bl	8004522 <LL_RCC_LSI1_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f1      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x33c>
 8004d00:	e051      	b.n	8004da6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004d02:	f7ff fbec 	bl	80044de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fd fc35 	bl	8002574 <HAL_GetTick>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d0e:	f7fd fc31 	bl	8002574 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1cb      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004d20:	f7ff fbff 	bl	8004522 <LL_RCC_LSI1_IsReady>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f1      	beq.n	8004d0e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004d2a:	f7ff fc1d 	bl	8004568 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004d2e:	e00c      	b.n	8004d4a <HAL_RCC_OscConfig+0x3a2>
 8004d30:	20000018 	.word	0x20000018
 8004d34:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d38:	f7fd fc1c 	bl	8002574 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e1b6      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004d4a:	f7ff fc1e 	bl	800458a <LL_RCC_LSI2_IsReady>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f1      	bne.n	8004d38 <HAL_RCC_OscConfig+0x390>
 8004d54:	e027      	b.n	8004da6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004d56:	f7ff fc07 	bl	8004568 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5a:	f7fd fc0b 	bl	8002574 <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d62:	f7fd fc07 	bl	8002574 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e1a1      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d74:	f7ff fc09 	bl	800458a <LL_RCC_LSI2_IsReady>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f1      	bne.n	8004d62 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004d7e:	f7ff fbbf 	bl	8004500 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd fbf7 	bl	8002574 <HAL_GetTick>
 8004d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d8a:	f7fd fbf3 	bl	8002574 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e18d      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d9c:	f7ff fbc1 	bl	8004522 <LL_RCC_LSI1_IsReady>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f1      	bne.n	8004d8a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d05b      	beq.n	8004e6a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db2:	4bb5      	ldr	r3, [pc, #724]	; (8005088 <HAL_RCC_OscConfig+0x6e0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d114      	bne.n	8004de8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004dbe:	f7ff fa5f 	bl	8004280 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc2:	f7fd fbd7 	bl	8002574 <HAL_GetTick>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fd fbd3 	bl	8002574 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e16d      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ddc:	4baa      	ldr	r3, [pc, #680]	; (8005088 <HAL_RCC_OscConfig+0x6e0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d102      	bne.n	8004df6 <HAL_RCC_OscConfig+0x44e>
 8004df0:	f7ff fb1f 	bl	8004432 <LL_RCC_LSE_Enable>
 8004df4:	e00c      	b.n	8004e10 <HAL_RCC_OscConfig+0x468>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d104      	bne.n	8004e08 <HAL_RCC_OscConfig+0x460>
 8004dfe:	f7ff fb3a 	bl	8004476 <LL_RCC_LSE_EnableBypass>
 8004e02:	f7ff fb16 	bl	8004432 <LL_RCC_LSE_Enable>
 8004e06:	e003      	b.n	8004e10 <HAL_RCC_OscConfig+0x468>
 8004e08:	f7ff fb24 	bl	8004454 <LL_RCC_LSE_Disable>
 8004e0c:	f7ff fb44 	bl	8004498 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d014      	beq.n	8004e42 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fd fbac 	bl	8002574 <HAL_GetTick>
 8004e1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e20:	f7fd fba8 	bl	8002574 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e140      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004e36:	f7ff fb40 	bl	80044ba <LL_RCC_LSE_IsReady>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ef      	beq.n	8004e20 <HAL_RCC_OscConfig+0x478>
 8004e40:	e013      	b.n	8004e6a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fd fb97 	bl	8002574 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e48:	e00a      	b.n	8004e60 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4a:	f7fd fb93 	bl	8002574 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e12b      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e60:	f7ff fb2b 	bl	80044ba <LL_RCC_LSE_IsReady>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1ef      	bne.n	8004e4a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d02c      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d014      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e7e:	f7ff faa4 	bl	80043ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fd fb77 	bl	8002574 <HAL_GetTick>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e8a:	f7fd fb73 	bl	8002574 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e10d      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e9c:	f7ff fab7 	bl	800440e <LL_RCC_HSI48_IsReady>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f1      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4e2>
 8004ea6:	e013      	b.n	8004ed0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea8:	f7ff faa0 	bl	80043ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fd fb62 	bl	8002574 <HAL_GetTick>
 8004eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb4:	f7fd fb5e 	bl	8002574 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0f8      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004ec6:	f7ff faa2 	bl	800440e <LL_RCC_HSI48_IsReady>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f1      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80ee 	beq.w	80050b6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eda:	f7ff fc00 	bl	80046de <LL_RCC_GetSysClkSource>
 8004ede:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	f040 80af 	bne.w	8005050 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0203 	and.w	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d123      	bne.n	8004f48 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d11c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d114      	bne.n	8004f48 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d10d      	bne.n	8004f48 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d106      	bne.n	8004f48 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d05d      	beq.n	8005004 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d058      	beq.n	8005000 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0ab      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f60:	f7ff fc73 	bl	800484a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f64:	f7fd fb06 	bl	8002574 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd fb02 	bl	8002574 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e09c      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ef      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	4b3e      	ldr	r3, [pc, #248]	; (800508c <HAL_RCC_OscConfig+0x6e4>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fa4:	0212      	lsls	r2, r2, #8
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fc2:	f7ff fc33 	bl	800482c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd6:	f7fd facd 	bl	8002574 <HAL_GetTick>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fd fac9 	bl	8002574 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e063      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ef      	beq.n	8004fde <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffe:	e05a      	b.n	80050b6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e059      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d151      	bne.n	80050b6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005012:	f7ff fc0b 	bl	800482c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005024:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005026:	f7fd faa5 	bl	8002574 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502e:	f7fd faa1 	bl	8002574 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e03b      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0ef      	beq.n	800502e <HAL_RCC_OscConfig+0x686>
 800504e:	e032      	b.n	80050b6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d02d      	beq.n	80050b2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	f7ff fbf8 	bl	800484a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800506a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005074:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fd fa79 	bl	8002574 <HAL_GetTick>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005084:	e00d      	b.n	80050a2 <HAL_RCC_OscConfig+0x6fa>
 8005086:	bf00      	nop
 8005088:	58000400 	.word	0x58000400
 800508c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fd fa70 	bl	8002574 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ef      	bne.n	8005090 <HAL_RCC_OscConfig+0x6e8>
 80050b0:	e001      	b.n	80050b6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3734      	adds	r7, #52	; 0x34
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}

080050c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e12d      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d4:	4b98      	ldr	r3, [pc, #608]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d91b      	bls.n	800511a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b95      	ldr	r3, [pc, #596]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 0207 	bic.w	r2, r3, #7
 80050ea:	4993      	ldr	r1, [pc, #588]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f2:	f7fd fa3f 	bl	8002574 <HAL_GetTick>
 80050f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f8:	e008      	b.n	800510c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050fa:	f7fd fa3b 	bl	8002574 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e111      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510c:	4b8a      	ldr	r3, [pc, #552]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d1ef      	bne.n	80050fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fae3 	bl	80046f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005130:	f7fd fa20 	bl	8002574 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005138:	f7fd fa1c 	bl	8002574 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0f2      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800514a:	f7ff fbd0 	bl	80048ee <LL_RCC_IsActiveFlag_HPRE>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f1      	beq.n	8005138 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d016      	beq.n	800518e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fada 	bl	800471e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800516a:	f7fd fa03 	bl	8002574 <HAL_GetTick>
 800516e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005170:	e008      	b.n	8005184 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005172:	f7fd f9ff 	bl	8002574 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0d5      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005184:	f7ff fbc5 	bl	8004912 <LL_RCC_IsActiveFlag_C2HPRE>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f1      	beq.n	8005172 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d016      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fad3 	bl	800474a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051a4:	f7fd f9e6 	bl	8002574 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051ac:	f7fd f9e2 	bl	8002574 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0b8      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051be:	f7ff fbbb 	bl	8004938 <LL_RCC_IsActiveFlag_SHDHPRE>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f1      	beq.n	80051ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d016      	beq.n	8005202 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff facd 	bl	8004778 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051de:	f7fd f9c9 	bl	8002574 <HAL_GetTick>
 80051e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051e6:	f7fd f9c5 	bl	8002574 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e09b      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80051f8:	f7ff fbb1 	bl	800495e <LL_RCC_IsActiveFlag_PPRE1>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f1      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d017      	beq.n	800523e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fac3 	bl	80047a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800521a:	f7fd f9ab 	bl	8002574 <HAL_GetTick>
 800521e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005222:	f7fd f9a7 	bl	8002574 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e07d      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005234:	f7ff fba5 	bl	8004982 <LL_RCC_IsActiveFlag_PPRE2>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f1      	beq.n	8005222 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d043      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d106      	bne.n	8005260 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005252:	f7ff f863 	bl	800431c <LL_RCC_HSE_IsReady>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d11e      	bne.n	800529a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e067      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d106      	bne.n	8005276 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005268:	f7ff fafe 	bl	8004868 <LL_RCC_PLL_IsReady>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d113      	bne.n	800529a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e05c      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800527e:	f7ff f9cb 	bl	8004618 <LL_RCC_MSI_IsReady>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d108      	bne.n	800529a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e051      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800528c:	f7ff f876 	bl	800437c <LL_RCC_HSI_IsReady>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e04a      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fa09 	bl	80046b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fd f966 	bl	8002574 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ac:	f7fd f962 	bl	8002574 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e036      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c2:	f7ff fa0c 	bl	80046de <LL_RCC_GetSysClkSource>
 80052c6:	4602      	mov	r2, r0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d1ec      	bne.n	80052ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052d2:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d21b      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e0:	4b15      	ldr	r3, [pc, #84]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 0207 	bic.w	r2, r3, #7
 80052e8:	4913      	ldr	r1, [pc, #76]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f0:	f7fd f940 	bl	8002574 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	e008      	b.n	800530a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052f8:	f7fd f93c 	bl	8002574 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e012      	b.n	8005330 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x278>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d1ef      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005318:	f000 f880 	bl	800541c <HAL_RCC_GetHCLKFreq>
 800531c:	4603      	mov	r3, r0
 800531e:	4a07      	ldr	r2, [pc, #28]	; (800533c <HAL_RCC_ClockConfig+0x27c>)
 8005320:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005322:	f7fd f933 	bl	800258c <HAL_GetTickPrio>
 8005326:	4603      	mov	r3, r0
 8005328:	4618      	mov	r0, r3
 800532a:	f7fd f8d5 	bl	80024d8 <HAL_InitTick>
 800532e:	4603      	mov	r3, r0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	58004000 	.word	0x58004000
 800533c:	20000018 	.word	0x20000018

08005340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005346:	f7ff f9ca 	bl	80046de <LL_RCC_GetSysClkSource>
 800534a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005352:	f7ff f986 	bl	8004662 <LL_RCC_MSI_GetRange>
 8005356:	4603      	mov	r3, r0
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	4a2b      	ldr	r2, [pc, #172]	; (800540c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e04b      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d102      	bne.n	8005374 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800536e:	4b28      	ldr	r3, [pc, #160]	; (8005410 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e045      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b08      	cmp	r3, #8
 8005378:	d10a      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800537a:	f7fe ff9f 	bl	80042bc <LL_RCC_HSE_IsEnabledDiv2>
 800537e:	4603      	mov	r3, r0
 8005380:	2b01      	cmp	r3, #1
 8005382:	d102      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e03a      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <HAL_RCC_GetSysClockFreq+0xd8>)
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e037      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005390:	f7ff faa1 	bl	80048d6 <LL_RCC_PLL_GetMainSource>
 8005394:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d003      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x64>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d003      	beq.n	80053aa <HAL_RCC_GetSysClockFreq+0x6a>
 80053a2:	e00d      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80053a4:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053a6:	60bb      	str	r3, [r7, #8]
        break;
 80053a8:	e015      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80053aa:	f7fe ff87 	bl	80042bc <LL_RCC_HSE_IsEnabledDiv2>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d102      	bne.n	80053ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80053b4:	4b17      	ldr	r3, [pc, #92]	; (8005414 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80053b8:	e00d      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <HAL_RCC_GetSysClockFreq+0xd8>)
 80053bc:	60bb      	str	r3, [r7, #8]
        break;
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053c0:	f7ff f94f 	bl	8004662 <LL_RCC_MSI_GetRange>
 80053c4:	4603      	mov	r3, r0
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	4a0f      	ldr	r2, [pc, #60]	; (800540c <HAL_RCC_GetSysClockFreq+0xcc>)
 80053ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d2:	60bb      	str	r3, [r7, #8]
        break;
 80053d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80053d6:	f7ff fa59 	bl	800488c <LL_RCC_PLL_GetN>
 80053da:	4602      	mov	r2, r0
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	fb03 f402 	mul.w	r4, r3, r2
 80053e2:	f7ff fa6c 	bl	80048be <LL_RCC_PLL_GetDivider>
 80053e6:	4603      	mov	r3, r0
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	3301      	adds	r3, #1
 80053ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80053f0:	f7ff fa59 	bl	80048a6 <LL_RCC_PLL_GetR>
 80053f4:	4603      	mov	r3, r0
 80053f6:	0f5b      	lsrs	r3, r3, #29
 80053f8:	3301      	adds	r3, #1
 80053fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}
 800540a:	bf00      	nop
 800540c:	08009c14 	.word	0x08009c14
 8005410:	00f42400 	.word	0x00f42400
 8005414:	003d0900 	.word	0x003d0900
 8005418:	007a1200 	.word	0x007a1200

0800541c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800541c:	b598      	push	{r3, r4, r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005420:	f7ff ff8e 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8005424:	4604      	mov	r4, r0
 8005426:	f7ff f9cf 	bl	80047c8 <LL_RCC_GetAHBPrescaler>
 800542a:	4603      	mov	r3, r0
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	4a03      	ldr	r2, [pc, #12]	; (8005440 <HAL_RCC_GetHCLKFreq+0x24>)
 8005434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005438:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd98      	pop	{r3, r4, r7, pc}
 8005440:	08009bb4 	.word	0x08009bb4

08005444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005444:	b598      	push	{r3, r4, r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005448:	f7ff ffe8 	bl	800541c <HAL_RCC_GetHCLKFreq>
 800544c:	4604      	mov	r4, r0
 800544e:	f7ff f9d5 	bl	80047fc <LL_RCC_GetAPB1Prescaler>
 8005452:	4603      	mov	r3, r0
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	4a04      	ldr	r2, [pc, #16]	; (800546c <HAL_RCC_GetPCLK1Freq+0x28>)
 800545c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd98      	pop	{r3, r4, r7, pc}
 800546c:	08009bf4 	.word	0x08009bf4

08005470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005470:	b598      	push	{r3, r4, r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005474:	f7ff ffd2 	bl	800541c <HAL_RCC_GetHCLKFreq>
 8005478:	4604      	mov	r4, r0
 800547a:	f7ff f9cb 	bl	8004814 <LL_RCC_GetAPB2Prescaler>
 800547e:	4603      	mov	r3, r0
 8005480:	0adb      	lsrs	r3, r3, #11
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	4a04      	ldr	r2, [pc, #16]	; (8005498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd98      	pop	{r3, r4, r7, pc}
 8005498:	08009bf4 	.word	0x08009bf4

0800549c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2bb0      	cmp	r3, #176	; 0xb0
 80054a8:	d903      	bls.n	80054b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e007      	b.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	4a11      	ldr	r2, [pc, #68]	; (8005500 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80054c2:	f7ff f98d 	bl	80047e0 <LL_RCC_GetAHB4Prescaler>
 80054c6:	4603      	mov	r3, r0
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	4a0d      	ldr	r2, [pc, #52]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	0c9c      	lsrs	r4, r3, #18
 80054e6:	f7fe fedb 	bl	80042a0 <HAL_PWREx_GetVoltageRange>
 80054ea:	4603      	mov	r3, r0
 80054ec:	4619      	mov	r1, r3
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f80c 	bl	800550c <RCC_SetFlashLatency>
 80054f4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}
 80054fe:	bf00      	nop
 8005500:	08009c14 	.word	0x08009c14
 8005504:	08009bb4 	.word	0x08009bb4
 8005508:	431bde83 	.word	0x431bde83

0800550c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b093      	sub	sp, #76	; 0x4c
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <RCC_SetFlashLatency+0xf0>)
 8005518:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800551c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800551e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005522:	4a37      	ldr	r2, [pc, #220]	; (8005600 <RCC_SetFlashLatency+0xf4>)
 8005524:	f107 031c 	add.w	r3, r7, #28
 8005528:	ca07      	ldmia	r2, {r0, r1, r2}
 800552a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800552e:	4b35      	ldr	r3, [pc, #212]	; (8005604 <RCC_SetFlashLatency+0xf8>)
 8005530:	f107 040c 	add.w	r4, r7, #12
 8005534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005536:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800553a:	2300      	movs	r3, #0
 800553c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005544:	d11c      	bne.n	8005580 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005546:	2300      	movs	r3, #0
 8005548:	643b      	str	r3, [r7, #64]	; 0x40
 800554a:	e015      	b.n	8005578 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800554c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005554:	4413      	add	r3, r2
 8005556:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d808      	bhi.n	8005572 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005568:	4413      	add	r3, r2
 800556a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800556e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005570:	e022      	b.n	80055b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005574:	3301      	adds	r3, #1
 8005576:	643b      	str	r3, [r7, #64]	; 0x40
 8005578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557a:	2b03      	cmp	r3, #3
 800557c:	d9e6      	bls.n	800554c <RCC_SetFlashLatency+0x40>
 800557e:	e01b      	b.n	80055b8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005580:	2300      	movs	r3, #0
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005584:	e015      	b.n	80055b2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800558e:	4413      	add	r3, r2
 8005590:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d808      	bhi.n	80055ac <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055a2:	4413      	add	r3, r2
 80055a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80055aa:	e005      	b.n	80055b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	3301      	adds	r3, #1
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d9e6      	bls.n	8005586 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <RCC_SetFlashLatency+0xfc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 0207 	bic.w	r2, r3, #7
 80055c0:	4911      	ldr	r1, [pc, #68]	; (8005608 <RCC_SetFlashLatency+0xfc>)
 80055c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c4:	4313      	orrs	r3, r2
 80055c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055c8:	f7fc ffd4 	bl	8002574 <HAL_GetTick>
 80055cc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055ce:	e008      	b.n	80055e2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055d0:	f7fc ffd0 	bl	8002574 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e007      	b.n	80055f2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <RCC_SetFlashLatency+0xfc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1ef      	bne.n	80055d0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	374c      	adds	r7, #76	; 0x4c
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}
 80055fa:	bf00      	nop
 80055fc:	08009b88 	.word	0x08009b88
 8005600:	08009b98 	.word	0x08009b98
 8005604:	08009ba4 	.word	0x08009ba4
 8005608:	58004000 	.word	0x58004000

0800560c <LL_RCC_LSE_IsEnabled>:
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <LL_RCC_LSE_IsEnabled+0x18>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <LL_RCC_LSE_IsEnabled+0x1a>
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <LL_RCC_LSE_IsReady>:
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b02      	cmp	r3, #2
 8005642:	d101      	bne.n	8005648 <LL_RCC_LSE_IsReady+0x18>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <LL_RCC_LSE_IsReady+0x1a>
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_RCC_SetRFWKPClockSource>:
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_RCC_SetSMPSClockSource>:
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	f023 0203 	bic.w	r2, r3, #3
 8005692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4313      	orrs	r3, r2
 800569a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <LL_RCC_SetSMPSPrescaler>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80056b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_RCC_SetUSARTClockSource>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f023 0203 	bic.w	r2, r3, #3
 80056e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <LL_RCC_SetLPUARTClockSource>:
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <LL_RCC_SetI2CClockSource>:
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005734:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800574c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <LL_RCC_SetLPTIMClockSource>:
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800576a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	43db      	mvns	r3, r3
 800577a:	401a      	ands	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_RCC_SetSAIClockSource>:
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_RCC_SetRNGClockSource>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80057d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <LL_RCC_SetCLK48ClockSource>:
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <LL_RCC_SetUSBClockSource>:
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ffe3 	bl	80057ee <LL_RCC_SetCLK48ClockSource>
}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <LL_RCC_SetADCClockSource>:
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005840:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_RCC_SetRTCClockSource>:
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005870:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_RCC_GetRTCClockSource>:
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005898:	4618      	mov	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <LL_RCC_ForceBackupDomainReset>:
{
 80058a2:	b480      	push	{r7}
 80058a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <LL_RCC_PLLSAI1_Enable>:
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058f8:	6013      	str	r3, [r2, #0]
}
 80058fa:	bf00      	nop
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <LL_RCC_PLLSAI1_Disable>:
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005916:	6013      	str	r3, [r2, #0]
}
 8005918:	bf00      	nop
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <LL_RCC_PLLSAI1_IsReady>:
{
 8005922:	b480      	push	{r7}
 8005924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005934:	d101      	bne.n	800593a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b088      	sub	sp, #32
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800594e:	2300      	movs	r3, #0
 8005950:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005952:	2300      	movs	r3, #0
 8005954:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d034      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800596a:	d021      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800596c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005970:	d81b      	bhi.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005972:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005976:	d01d      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800597c:	d815      	bhi.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005986:	d110      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005996:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005998:	e00d      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f947 	bl	8005c32 <RCCEx_PLLSAI1_ConfigNP>
 80059a4:	4603      	mov	r3, r0
 80059a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059a8:	e005      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	77fb      	strb	r3, [r7, #31]
        break;
 80059ae:	e002      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80059b0:	bf00      	nop
 80059b2:	e000      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80059b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b6:	7ffb      	ldrb	r3, [r7, #31]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d105      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fee8 	bl	8005796 <LL_RCC_SetSAIClockSource>
 80059c6:	e001      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
 80059ca:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d046      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80059d8:	f7ff ff56 	bl	8005888 <LL_RCC_GetRTCClockSource>
 80059dc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d03c      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80059e8:	f7fe fc4a 	bl	8004280 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ff30 	bl	800585c <LL_RCC_SetRTCClockSource>
 80059fc:	e02e      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a06:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005a08:	f7ff ff4b 	bl	80058a2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005a0c:	f7ff ff5a 	bl	80058c4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005a28:	f7ff fdf0 	bl	800560c <LL_RCC_LSE_IsEnabled>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d114      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a32:	f7fc fd9f 	bl	8002574 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005a38:	e00b      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fc fd9b 	bl	8002574 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d902      	bls.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	77fb      	strb	r3, [r7, #31]
              break;
 8005a50:	e004      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005a52:	f7ff fded 	bl	8005630 <LL_RCC_LSE_IsReady>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d1ee      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005a5c:	7ffb      	ldrb	r3, [r7, #31]
 8005a5e:	77bb      	strb	r3, [r7, #30]
 8005a60:	e001      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a62:	7ffb      	ldrb	r3, [r7, #31]
 8005a64:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fe2a 	bl	80056d0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fe35 	bl	80056fc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fe5d 	bl	8005762 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff fe52 	bl	8005762 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fe2a 	bl	8005728 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fe1f 	bl	8005728 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d022      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fe8d 	bl	800581a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b08:	d107      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b18:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b22:	d10b      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f8dd 	bl	8005ce8 <RCCEx_PLLSAI1_ConfigNQ>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005b32:	7ffb      	ldrb	r3, [r7, #31]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005b38:	7ffb      	ldrb	r3, [r7, #31]
 8005b3a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d02b      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b50:	d008      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b5a:	d003      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fe2a 	bl	80057c2 <LL_RCC_SetRNGClockSource>
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f7ff fe21 	bl	80057c2 <LL_RCC_SetRNGClockSource>
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff fe34 	bl	80057ee <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d022      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fe3d 	bl	8005830 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bce:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f8dd 	bl	8005d9e <RCCEx_PLLSAI1_ConfigNR>
 8005be4:	4603      	mov	r3, r0
 8005be6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005be8:	7ffb      	ldrb	r3, [r7, #31]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005bee:	7ffb      	ldrb	r3, [r7, #31]
 8005bf0:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fd26 	bl	8005654 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff fd45 	bl	80056a8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fd2c 	bl	8005680 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005c28:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c3e:	f7ff fe61 	bl	8005904 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c42:	f7fc fc97 	bl	8002574 <HAL_GetTick>
 8005c46:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c48:	e009      	b.n	8005c5e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c4a:	f7fc fc93 	bl	8002574 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d902      	bls.n	8005c5e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c5c:	e004      	b.n	8005c68 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c5e:	f7ff fe60 	bl	8005922 <LL_RCC_PLLSAI1_IsReady>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f0      	bne.n	8005c4a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d137      	bne.n	8005cde <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c9c:	f7ff fe23 	bl	80058e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fc fc68 	bl	8002574 <HAL_GetTick>
 8005ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ca6:	e009      	b.n	8005cbc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ca8:	f7fc fc64 	bl	8002574 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d902      	bls.n	8005cbc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cba:	e004      	b.n	8005cc6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cbc:	f7ff fe31 	bl	8005922 <LL_RCC_PLLSAI1_IsReady>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d1f0      	bne.n	8005ca8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d108      	bne.n	8005cde <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005cf4:	f7ff fe06 	bl	8005904 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cf8:	f7fc fc3c 	bl	8002574 <HAL_GetTick>
 8005cfc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cfe:	e009      	b.n	8005d14 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d00:	f7fc fc38 	bl	8002574 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d902      	bls.n	8005d14 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	73fb      	strb	r3, [r7, #15]
      break;
 8005d12:	e004      	b.n	8005d1e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d14:	f7ff fe05 	bl	8005922 <LL_RCC_PLLSAI1_IsReady>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d137      	bne.n	8005d94 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d52:	f7ff fdc8 	bl	80058e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d56:	f7fc fc0d 	bl	8002574 <HAL_GetTick>
 8005d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d5c:	e009      	b.n	8005d72 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d5e:	f7fc fc09 	bl	8002574 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d902      	bls.n	8005d72 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	73fb      	strb	r3, [r7, #15]
        break;
 8005d70:	e004      	b.n	8005d7c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d72:	f7ff fdd6 	bl	8005922 <LL_RCC_PLLSAI1_IsReady>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d1f0      	bne.n	8005d5e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d90:	4313      	orrs	r3, r2
 8005d92:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005daa:	f7ff fdab 	bl	8005904 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dae:	f7fc fbe1 	bl	8002574 <HAL_GetTick>
 8005db2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005db4:	e009      	b.n	8005dca <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005db6:	f7fc fbdd 	bl	8002574 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d902      	bls.n	8005dca <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc8:	e004      	b.n	8005dd4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dca:	f7ff fdaa 	bl	8005922 <LL_RCC_PLLSAI1_IsReady>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f0      	bne.n	8005db6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d137      	bne.n	8005e4a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dee:	4313      	orrs	r3, r2
 8005df0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e04:	4313      	orrs	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e08:	f7ff fd6d 	bl	80058e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0c:	f7fc fbb2 	bl	8002574 <HAL_GetTick>
 8005e10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e12:	e009      	b.n	8005e28 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e14:	f7fc fbae 	bl	8002574 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d902      	bls.n	8005e28 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	73fb      	strb	r3, [r7, #15]
        break;
 8005e26:	e004      	b.n	8005e32 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e28:	f7ff fd7b 	bl	8005922 <LL_RCC_PLLSAI1_IsReady>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d1f0      	bne.n	8005e14 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e46:	4313      	orrs	r3, r2
 8005e48:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <LL_RCC_GetUSARTClockSource>:
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4013      	ands	r3, r2
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_RCC_GetLPUARTClockSource>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4013      	ands	r3, r2
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e042      	b.n	8005f2c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d106      	bne.n	8005ebe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fc fa7d 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2224      	movs	r2, #36	; 0x24
 8005ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb16 	bl	8006508 <UART_SetConfig>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e022      	b.n	8005f2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fd10 	bl	8006914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fd97 	bl	8006a58 <UART_CheckIdleState>
 8005f2a:	4603      	mov	r3, r0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	4613      	mov	r3, r2
 8005f42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	f040 8083 	bne.w	8006056 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_UART_Transmit+0x28>
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e07b      	b.n	8006058 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Transmit+0x3a>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e074      	b.n	8006058 <HAL_UART_Transmit+0x124>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2221      	movs	r2, #33	; 0x21
 8005f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f86:	f7fc faf5 	bl	8002574 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa4:	d108      	bne.n	8005fb8 <HAL_UART_Transmit+0x84>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e003      	b.n	8005fc0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005fc8:	e02c      	b.n	8006024 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2180      	movs	r1, #128	; 0x80
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fd8a 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e039      	b.n	8006058 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	e007      	b.n	8006012 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	3301      	adds	r3, #1
 8006010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1cc      	bne.n	8005fca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2200      	movs	r2, #0
 8006038:	2140      	movs	r1, #64	; 0x40
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fd57 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e006      	b.n	8006058 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	f640 030f 	movw	r3, #2063	; 0x80f
 8006086:	4013      	ands	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d118      	bne.n	80060c2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d013      	beq.n	80060c2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 81fb 	beq.w	80064ae <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
      }
      return;
 80060c0:	e1f5      	b.n	80064ae <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 80ef 	beq.w	80062a8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4b73      	ldr	r3, [pc, #460]	; (800629c <HAL_UART_IRQHandler+0x23c>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d105      	bne.n	80060e0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4b72      	ldr	r3, [pc, #456]	; (80062a0 <HAL_UART_IRQHandler+0x240>)
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80e4 	beq.w	80062a8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_UART_IRQHandler+0xac>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2201      	movs	r2, #1
 80060fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006102:	f043 0201 	orr.w	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d010      	beq.n	8006138 <HAL_UART_IRQHandler+0xd8>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2202      	movs	r2, #2
 8006126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612e:	f043 0204 	orr.w	r2, r3, #4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d010      	beq.n	8006164 <HAL_UART_IRQHandler+0x104>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2204      	movs	r2, #4
 8006152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800615a:	f043 0202 	orr.w	r2, r3, #2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d015      	beq.n	800619a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4b48      	ldr	r3, [pc, #288]	; (800629c <HAL_UART_IRQHandler+0x23c>)
 800617c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2208      	movs	r2, #8
 8006188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006190:	f043 0208 	orr.w	r2, r3, #8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d011      	beq.n	80061c8 <HAL_UART_IRQHandler+0x168>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 816f 	beq.w	80064b2 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d011      	beq.n	8006202 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006208:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d004      	beq.n	8006222 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800621e:	2b00      	cmp	r3, #0
 8006220:	d031      	beq.n	8006286 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fce3 	bl	8006bee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d123      	bne.n	800627e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006244:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d013      	beq.n	8006276 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006252:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <HAL_UART_IRQHandler+0x244>)
 8006254:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800625a:	4618      	mov	r0, r3
 800625c:	f7fc fb34 	bl	80028c8 <HAL_DMA_Abort_IT>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d017      	beq.n	8006296 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	e00f      	b.n	8006296 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f930 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627c:	e00b      	b.n	8006296 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f92c 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006284:	e007      	b.n	8006296 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f928 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006294:	e10d      	b.n	80064b2 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006296:	bf00      	nop
    return;
 8006298:	e10b      	b.n	80064b2 <HAL_UART_IRQHandler+0x452>
 800629a:	bf00      	nop
 800629c:	10000001 	.word	0x10000001
 80062a0:	04000120 	.word	0x04000120
 80062a4:	08006c53 	.word	0x08006c53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 80ab 	bne.w	8006408 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 80a5 	beq.w	8006408 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 809f 	beq.w	8006408 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2210      	movs	r2, #16
 80062d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d155      	bne.n	800638c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80062ea:	893b      	ldrh	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80e2 	beq.w	80064b6 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062f8:	893a      	ldrh	r2, [r7, #8]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	f080 80db 	bcs.w	80064b6 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	893a      	ldrh	r2, [r7, #8]
 8006304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d12b      	bne.n	8006370 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006326:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006346:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0210 	bic.w	r2, r2, #16
 8006364:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800636a:	4618      	mov	r0, r3
 800636c:	f7fc fa4d 	bl	800280a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800637c:	b29b      	uxth	r3, r3
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	b29b      	uxth	r3, r3
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f8b3 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800638a:	e094      	b.n	80064b6 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006398:	b29b      	uxth	r3, r3
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8087 	beq.w	80064ba <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80063ac:	897b      	ldrh	r3, [r7, #10]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8083 	beq.w	80064ba <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063c2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0210 	bic.w	r2, r2, #16
 80063fa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063fc:	897b      	ldrh	r3, [r7, #10]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f875 	bl	80064f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006406:	e058      	b.n	80064ba <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <HAL_UART_IRQHandler+0x3ce>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fc43 	bl	8006cb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800642c:	e048      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006450:	2b00      	cmp	r3, #0
 8006452:	d034      	beq.n	80064be <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
    }
    return;
 800645c:	e02f      	b.n	80064be <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <HAL_UART_IRQHandler+0x41a>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fc03 	bl	8006c7e <UART_EndTransmit_IT>
    return;
 8006478:	e022      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_UART_IRQHandler+0x436>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fc23 	bl	8006cda <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006494:	e014      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00f      	beq.n	80064c0 <HAL_UART_IRQHandler+0x460>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da0c      	bge.n	80064c0 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fc0d 	bl	8006cc6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064ac:	e008      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
      return;
 80064ae:	bf00      	nop
 80064b0:	e006      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
    return;
 80064b2:	bf00      	nop
 80064b4:	e004      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
      return;
 80064b6:	bf00      	nop
 80064b8:	e002      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
      return;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <HAL_UART_IRQHandler+0x460>
    return;
 80064be:	bf00      	nop
  }
}
 80064c0:	3720      	adds	r7, #32
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop

080064c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006508:	b5b0      	push	{r4, r5, r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4313      	orrs	r3, r2
 800652a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4ba3      	ldr	r3, [pc, #652]	; (80067c0 <UART_SetConfig+0x2b8>)
 8006534:	4013      	ands	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	69f9      	ldr	r1, [r7, #28]
 800653c:	430b      	orrs	r3, r1
 800653e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a98      	ldr	r2, [pc, #608]	; (80067c4 <UART_SetConfig+0x2bc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	4313      	orrs	r3, r2
 800656e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800657a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	69f9      	ldr	r1, [r7, #28]
 8006584:	430b      	orrs	r3, r1
 8006586:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	f023 010f 	bic.w	r1, r3, #15
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a89      	ldr	r2, [pc, #548]	; (80067c8 <UART_SetConfig+0x2c0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d120      	bne.n	80065ea <UART_SetConfig+0xe2>
 80065a8:	2003      	movs	r0, #3
 80065aa:	f7ff fc53 	bl	8005e54 <LL_RCC_GetUSARTClockSource>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d817      	bhi.n	80065e4 <UART_SetConfig+0xdc>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0xb4>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065d9 	.word	0x080065d9
 80065c4:	080065d3 	.word	0x080065d3
 80065c8:	080065df 	.word	0x080065df
 80065cc:	2301      	movs	r3, #1
 80065ce:	76fb      	strb	r3, [r7, #27]
 80065d0:	e038      	b.n	8006644 <UART_SetConfig+0x13c>
 80065d2:	2302      	movs	r3, #2
 80065d4:	76fb      	strb	r3, [r7, #27]
 80065d6:	e035      	b.n	8006644 <UART_SetConfig+0x13c>
 80065d8:	2304      	movs	r3, #4
 80065da:	76fb      	strb	r3, [r7, #27]
 80065dc:	e032      	b.n	8006644 <UART_SetConfig+0x13c>
 80065de:	2308      	movs	r3, #8
 80065e0:	76fb      	strb	r3, [r7, #27]
 80065e2:	e02f      	b.n	8006644 <UART_SetConfig+0x13c>
 80065e4:	2310      	movs	r3, #16
 80065e6:	76fb      	strb	r3, [r7, #27]
 80065e8:	e02c      	b.n	8006644 <UART_SetConfig+0x13c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a75      	ldr	r2, [pc, #468]	; (80067c4 <UART_SetConfig+0x2bc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d125      	bne.n	8006640 <UART_SetConfig+0x138>
 80065f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80065f8:	f7ff fc3c 	bl	8005e74 <LL_RCC_GetLPUARTClockSource>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006602:	d017      	beq.n	8006634 <UART_SetConfig+0x12c>
 8006604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006608:	d817      	bhi.n	800663a <UART_SetConfig+0x132>
 800660a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660e:	d00b      	beq.n	8006628 <UART_SetConfig+0x120>
 8006610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006614:	d811      	bhi.n	800663a <UART_SetConfig+0x132>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <UART_SetConfig+0x11a>
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d006      	beq.n	800662e <UART_SetConfig+0x126>
 8006620:	e00b      	b.n	800663a <UART_SetConfig+0x132>
 8006622:	2300      	movs	r3, #0
 8006624:	76fb      	strb	r3, [r7, #27]
 8006626:	e00d      	b.n	8006644 <UART_SetConfig+0x13c>
 8006628:	2302      	movs	r3, #2
 800662a:	76fb      	strb	r3, [r7, #27]
 800662c:	e00a      	b.n	8006644 <UART_SetConfig+0x13c>
 800662e:	2304      	movs	r3, #4
 8006630:	76fb      	strb	r3, [r7, #27]
 8006632:	e007      	b.n	8006644 <UART_SetConfig+0x13c>
 8006634:	2308      	movs	r3, #8
 8006636:	76fb      	strb	r3, [r7, #27]
 8006638:	e004      	b.n	8006644 <UART_SetConfig+0x13c>
 800663a:	2310      	movs	r3, #16
 800663c:	76fb      	strb	r3, [r7, #27]
 800663e:	e001      	b.n	8006644 <UART_SetConfig+0x13c>
 8006640:	2310      	movs	r3, #16
 8006642:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a5e      	ldr	r2, [pc, #376]	; (80067c4 <UART_SetConfig+0x2bc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f040 808b 	bne.w	8006766 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006650:	7efb      	ldrb	r3, [r7, #27]
 8006652:	2b08      	cmp	r3, #8
 8006654:	d823      	bhi.n	800669e <UART_SetConfig+0x196>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <UART_SetConfig+0x154>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006681 	.word	0x08006681
 8006660:	0800669f 	.word	0x0800669f
 8006664:	08006689 	.word	0x08006689
 8006668:	0800669f 	.word	0x0800669f
 800666c:	0800668f 	.word	0x0800668f
 8006670:	0800669f 	.word	0x0800669f
 8006674:	0800669f 	.word	0x0800669f
 8006678:	0800669f 	.word	0x0800669f
 800667c:	08006697 	.word	0x08006697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006680:	f7fe fee0 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 8006684:	6178      	str	r0, [r7, #20]
        break;
 8006686:	e00f      	b.n	80066a8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006688:	4b50      	ldr	r3, [pc, #320]	; (80067cc <UART_SetConfig+0x2c4>)
 800668a:	617b      	str	r3, [r7, #20]
        break;
 800668c:	e00c      	b.n	80066a8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800668e:	f7fe fe57 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8006692:	6178      	str	r0, [r7, #20]
        break;
 8006694:	e008      	b.n	80066a8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669a:	617b      	str	r3, [r7, #20]
        break;
 800669c:	e004      	b.n	80066a8 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	76bb      	strb	r3, [r7, #26]
        break;
 80066a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 811a 	beq.w	80068e4 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	4a46      	ldr	r2, [pc, #280]	; (80067d0 <UART_SetConfig+0x2c8>)
 80066b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ba:	461a      	mov	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	4413      	add	r3, r2
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d305      	bcc.n	80066e0 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d902      	bls.n	80066e6 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	76bb      	strb	r3, [r7, #26]
 80066e4:	e0fe      	b.n	80068e4 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	4a37      	ldr	r2, [pc, #220]	; (80067d0 <UART_SetConfig+0x2c8>)
 80066f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	f7fa fa2b 	bl	8000b58 <__aeabi_uldivmod>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	020b      	lsls	r3, r1, #8
 8006714:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006718:	0202      	lsls	r2, r0, #8
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	6849      	ldr	r1, [r1, #4]
 800671e:	0849      	lsrs	r1, r1, #1
 8006720:	4608      	mov	r0, r1
 8006722:	f04f 0100 	mov.w	r1, #0
 8006726:	1814      	adds	r4, r2, r0
 8006728:	eb43 0501 	adc.w	r5, r3, r1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	461a      	mov	r2, r3
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7fa fa0d 	bl	8000b58 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4613      	mov	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800674c:	d308      	bcc.n	8006760 <UART_SetConfig+0x258>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006754:	d204      	bcs.n	8006760 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	60da      	str	r2, [r3, #12]
 800675e:	e0c1      	b.n	80068e4 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	76bb      	strb	r3, [r7, #26]
 8006764:	e0be      	b.n	80068e4 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676e:	d16a      	bne.n	8006846 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006770:	7efb      	ldrb	r3, [r7, #27]
 8006772:	3b01      	subs	r3, #1
 8006774:	2b07      	cmp	r3, #7
 8006776:	d82d      	bhi.n	80067d4 <UART_SetConfig+0x2cc>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UART_SetConfig+0x278>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067a1 	.word	0x080067a1
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067d5 	.word	0x080067d5
 800678c:	080067af 	.word	0x080067af
 8006790:	080067d5 	.word	0x080067d5
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067d5 	.word	0x080067d5
 800679c:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7fe fe66 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 80067a4:	6178      	str	r0, [r7, #20]
        break;
 80067a6:	e01a      	b.n	80067de <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a8:	4b08      	ldr	r3, [pc, #32]	; (80067cc <UART_SetConfig+0x2c4>)
 80067aa:	617b      	str	r3, [r7, #20]
        break;
 80067ac:	e017      	b.n	80067de <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ae:	f7fe fdc7 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 80067b2:	6178      	str	r0, [r7, #20]
        break;
 80067b4:	e013      	b.n	80067de <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ba:	617b      	str	r3, [r7, #20]
        break;
 80067bc:	e00f      	b.n	80067de <UART_SetConfig+0x2d6>
 80067be:	bf00      	nop
 80067c0:	cfff69f3 	.word	0xcfff69f3
 80067c4:	40008000 	.word	0x40008000
 80067c8:	40013800 	.word	0x40013800
 80067cc:	00f42400 	.word	0x00f42400
 80067d0:	08009c54 	.word	0x08009c54
      default:
        pclk = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	76bb      	strb	r3, [r7, #26]
        break;
 80067dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d07f      	beq.n	80068e4 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	4a48      	ldr	r2, [pc, #288]	; (800690c <UART_SetConfig+0x404>)
 80067ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ee:	461a      	mov	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80067f6:	005a      	lsls	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	441a      	add	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	b29b      	uxth	r3, r3
 800680a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	d916      	bls.n	8006840 <UART_SetConfig+0x338>
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d212      	bcs.n	8006840 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f023 030f 	bic.w	r3, r3, #15
 8006822:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	b29b      	uxth	r3, r3
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	b29a      	uxth	r2, r3
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	4313      	orrs	r3, r2
 8006834:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	89fa      	ldrh	r2, [r7, #14]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	e051      	b.n	80068e4 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	76bb      	strb	r3, [r7, #26]
 8006844:	e04e      	b.n	80068e4 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006846:	7efb      	ldrb	r3, [r7, #27]
 8006848:	3b01      	subs	r3, #1
 800684a:	2b07      	cmp	r3, #7
 800684c:	d821      	bhi.n	8006892 <UART_SetConfig+0x38a>
 800684e:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <UART_SetConfig+0x34c>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	08006875 	.word	0x08006875
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006893 	.word	0x08006893
 8006860:	08006883 	.word	0x08006883
 8006864:	08006893 	.word	0x08006893
 8006868:	08006893 	.word	0x08006893
 800686c:	08006893 	.word	0x08006893
 8006870:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006874:	f7fe fdfc 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 8006878:	6178      	str	r0, [r7, #20]
        break;
 800687a:	e00f      	b.n	800689c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b24      	ldr	r3, [pc, #144]	; (8006910 <UART_SetConfig+0x408>)
 800687e:	617b      	str	r3, [r7, #20]
        break;
 8006880:	e00c      	b.n	800689c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fe fd5d 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8006886:	6178      	str	r0, [r7, #20]
        break;
 8006888:	e008      	b.n	800689c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	617b      	str	r3, [r7, #20]
        break;
 8006890:	e004      	b.n	800689c <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	76bb      	strb	r3, [r7, #26]
        break;
 800689a:	bf00      	nop
    }

    if (pclk != 0U)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	4a19      	ldr	r2, [pc, #100]	; (800690c <UART_SetConfig+0x404>)
 80068a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ac:	461a      	mov	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	441a      	add	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b0f      	cmp	r3, #15
 80068cc:	d908      	bls.n	80068e0 <UART_SetConfig+0x3d8>
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d4:	d204      	bcs.n	80068e0 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	e001      	b.n	80068e4 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006900:	7ebb      	ldrb	r3, [r7, #26]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bdb0      	pop	{r4, r5, r7, pc}
 800690a:	bf00      	nop
 800690c:	08009c54 	.word	0x08009c54
 8006910:	00f42400 	.word	0x00f42400

08006914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a12:	d10a      	bne.n	8006a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a68:	f7fb fd84 	bl	8002574 <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d10e      	bne.n	8006a9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f82f 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e025      	b.n	8006ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d10e      	bne.n	8006ac6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f819 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e00f      	b.n	8006ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	4613      	mov	r3, r2
 8006afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afe:	e062      	b.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b06:	d05e      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b08:	f7fb fd34 	bl	8002574 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d302      	bcc.n	8006b1e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d11d      	bne.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0201 	bic.w	r2, r2, #1
 8006b3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e045      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d02e      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b76:	d126      	bne.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e00f      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d08d      	beq.n	8006b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c04:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d107      	bne.n	8006c32 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0210 	bic.w	r2, r2, #16
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fc33 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c94:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fc0f 	bl	80064c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e027      	b.n	8006d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2224      	movs	r2, #36	; 0x24
 8006d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e02d      	b.n	8006dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2224      	movs	r2, #36	; 0x24
 8006d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f84f 	bl	8006e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e02d      	b.n	8006e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2224      	movs	r2, #36	; 0x24
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f811 	bl	8006e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e78:	e031      	b.n	8006ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e7e:	2308      	movs	r3, #8
 8006e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	0e5b      	lsrs	r3, r3, #25
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	0f5b      	lsrs	r3, r3, #29
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	7b3a      	ldrb	r2, [r7, #12]
 8006ea6:	4911      	ldr	r1, [pc, #68]	; (8006eec <UARTEx_SetNbDataToProcess+0x94>)
 8006ea8:	5c8a      	ldrb	r2, [r1, r2]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006eae:	7b3a      	ldrb	r2, [r7, #12]
 8006eb0:	490f      	ldr	r1, [pc, #60]	; (8006ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8006eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	7b7a      	ldrb	r2, [r7, #13]
 8006ec4:	4909      	ldr	r1, [pc, #36]	; (8006eec <UARTEx_SetNbDataToProcess+0x94>)
 8006ec6:	5c8a      	ldrb	r2, [r1, r2]
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ecc:	7b7a      	ldrb	r2, [r7, #13]
 8006ece:	4908      	ldr	r1, [pc, #32]	; (8006ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	08009c6c 	.word	0x08009c6c
 8006ef0:	08009c74 	.word	0x08009c74

08006ef4 <_Znwj>:
 8006ef4:	2801      	cmp	r0, #1
 8006ef6:	bf38      	it	cc
 8006ef8:	2001      	movcc	r0, #1
 8006efa:	b510      	push	{r4, lr}
 8006efc:	4604      	mov	r4, r0
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 f844 	bl	8006f8c <malloc>
 8006f04:	b930      	cbnz	r0, 8006f14 <_Znwj+0x20>
 8006f06:	f000 f807 	bl	8006f18 <_ZSt15get_new_handlerv>
 8006f0a:	b908      	cbnz	r0, 8006f10 <_Znwj+0x1c>
 8006f0c:	f000 f80c 	bl	8006f28 <abort>
 8006f10:	4780      	blx	r0
 8006f12:	e7f4      	b.n	8006efe <_Znwj+0xa>
 8006f14:	bd10      	pop	{r4, pc}
	...

08006f18 <_ZSt15get_new_handlerv>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <_ZSt15get_new_handlerv+0xc>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	f3bf 8f5b 	dmb	ish
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000254 	.word	0x20000254

08006f28 <abort>:
 8006f28:	b508      	push	{r3, lr}
 8006f2a:	2006      	movs	r0, #6
 8006f2c:	f000 fe18 	bl	8007b60 <raise>
 8006f30:	2001      	movs	r0, #1
 8006f32:	f7fb f8c3 	bl	80020bc <_exit>
	...

08006f38 <__errno>:
 8006f38:	4b01      	ldr	r3, [pc, #4]	; (8006f40 <__errno+0x8>)
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000024 	.word	0x20000024

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	; (8006f7c <__libc_init_array+0x38>)
 8006f48:	4c0d      	ldr	r4, [pc, #52]	; (8006f80 <__libc_init_array+0x3c>)
 8006f4a:	1b64      	subs	r4, r4, r5
 8006f4c:	10a4      	asrs	r4, r4, #2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	; (8006f84 <__libc_init_array+0x40>)
 8006f56:	4c0c      	ldr	r4, [pc, #48]	; (8006f88 <__libc_init_array+0x44>)
 8006f58:	f002 fd76 	bl	8009a48 <_init>
 8006f5c:	1b64      	subs	r4, r4, r5
 8006f5e:	10a4      	asrs	r4, r4, #2
 8006f60:	2600      	movs	r6, #0
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	4798      	blx	r3
 8006f6e:	3601      	adds	r6, #1
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	4798      	blx	r3
 8006f78:	3601      	adds	r6, #1
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	0800a064 	.word	0x0800a064
 8006f80:	0800a064 	.word	0x0800a064
 8006f84:	0800a064 	.word	0x0800a064
 8006f88:	0800a06c 	.word	0x0800a06c

08006f8c <malloc>:
 8006f8c:	4b02      	ldr	r3, [pc, #8]	; (8006f98 <malloc+0xc>)
 8006f8e:	4601      	mov	r1, r0
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	f000 b85b 	b.w	800704c <_malloc_r>
 8006f96:	bf00      	nop
 8006f98:	20000024 	.word	0x20000024

08006f9c <memset>:
 8006f9c:	4402      	add	r2, r0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d100      	bne.n	8006fa6 <memset+0xa>
 8006fa4:	4770      	bx	lr
 8006fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8006faa:	e7f9      	b.n	8006fa0 <memset+0x4>

08006fac <_free_r>:
 8006fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	d048      	beq.n	8007044 <_free_r+0x98>
 8006fb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb6:	9001      	str	r0, [sp, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f1a1 0404 	sub.w	r4, r1, #4
 8006fbe:	bfb8      	it	lt
 8006fc0:	18e4      	addlt	r4, r4, r3
 8006fc2:	f001 ff53 	bl	8008e6c <__malloc_lock>
 8006fc6:	4a20      	ldr	r2, [pc, #128]	; (8007048 <_free_r+0x9c>)
 8006fc8:	9801      	ldr	r0, [sp, #4]
 8006fca:	6813      	ldr	r3, [r2, #0]
 8006fcc:	4615      	mov	r5, r2
 8006fce:	b933      	cbnz	r3, 8006fde <_free_r+0x32>
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	6014      	str	r4, [r2, #0]
 8006fd4:	b003      	add	sp, #12
 8006fd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fda:	f001 bf4d 	b.w	8008e78 <__malloc_unlock>
 8006fde:	42a3      	cmp	r3, r4
 8006fe0:	d90b      	bls.n	8006ffa <_free_r+0x4e>
 8006fe2:	6821      	ldr	r1, [r4, #0]
 8006fe4:	1862      	adds	r2, r4, r1
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	bf04      	itt	eq
 8006fea:	681a      	ldreq	r2, [r3, #0]
 8006fec:	685b      	ldreq	r3, [r3, #4]
 8006fee:	6063      	str	r3, [r4, #4]
 8006ff0:	bf04      	itt	eq
 8006ff2:	1852      	addeq	r2, r2, r1
 8006ff4:	6022      	streq	r2, [r4, #0]
 8006ff6:	602c      	str	r4, [r5, #0]
 8006ff8:	e7ec      	b.n	8006fd4 <_free_r+0x28>
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b10b      	cbz	r3, 8007004 <_free_r+0x58>
 8007000:	42a3      	cmp	r3, r4
 8007002:	d9fa      	bls.n	8006ffa <_free_r+0x4e>
 8007004:	6811      	ldr	r1, [r2, #0]
 8007006:	1855      	adds	r5, r2, r1
 8007008:	42a5      	cmp	r5, r4
 800700a:	d10b      	bne.n	8007024 <_free_r+0x78>
 800700c:	6824      	ldr	r4, [r4, #0]
 800700e:	4421      	add	r1, r4
 8007010:	1854      	adds	r4, r2, r1
 8007012:	42a3      	cmp	r3, r4
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	d1dd      	bne.n	8006fd4 <_free_r+0x28>
 8007018:	681c      	ldr	r4, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	6053      	str	r3, [r2, #4]
 800701e:	4421      	add	r1, r4
 8007020:	6011      	str	r1, [r2, #0]
 8007022:	e7d7      	b.n	8006fd4 <_free_r+0x28>
 8007024:	d902      	bls.n	800702c <_free_r+0x80>
 8007026:	230c      	movs	r3, #12
 8007028:	6003      	str	r3, [r0, #0]
 800702a:	e7d3      	b.n	8006fd4 <_free_r+0x28>
 800702c:	6825      	ldr	r5, [r4, #0]
 800702e:	1961      	adds	r1, r4, r5
 8007030:	428b      	cmp	r3, r1
 8007032:	bf04      	itt	eq
 8007034:	6819      	ldreq	r1, [r3, #0]
 8007036:	685b      	ldreq	r3, [r3, #4]
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	bf04      	itt	eq
 800703c:	1949      	addeq	r1, r1, r5
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	6054      	str	r4, [r2, #4]
 8007042:	e7c7      	b.n	8006fd4 <_free_r+0x28>
 8007044:	b003      	add	sp, #12
 8007046:	bd30      	pop	{r4, r5, pc}
 8007048:	20000258 	.word	0x20000258

0800704c <_malloc_r>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	1ccd      	adds	r5, r1, #3
 8007050:	f025 0503 	bic.w	r5, r5, #3
 8007054:	3508      	adds	r5, #8
 8007056:	2d0c      	cmp	r5, #12
 8007058:	bf38      	it	cc
 800705a:	250c      	movcc	r5, #12
 800705c:	2d00      	cmp	r5, #0
 800705e:	4606      	mov	r6, r0
 8007060:	db01      	blt.n	8007066 <_malloc_r+0x1a>
 8007062:	42a9      	cmp	r1, r5
 8007064:	d903      	bls.n	800706e <_malloc_r+0x22>
 8007066:	230c      	movs	r3, #12
 8007068:	6033      	str	r3, [r6, #0]
 800706a:	2000      	movs	r0, #0
 800706c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706e:	f001 fefd 	bl	8008e6c <__malloc_lock>
 8007072:	4921      	ldr	r1, [pc, #132]	; (80070f8 <_malloc_r+0xac>)
 8007074:	680a      	ldr	r2, [r1, #0]
 8007076:	4614      	mov	r4, r2
 8007078:	b99c      	cbnz	r4, 80070a2 <_malloc_r+0x56>
 800707a:	4f20      	ldr	r7, [pc, #128]	; (80070fc <_malloc_r+0xb0>)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	b923      	cbnz	r3, 800708a <_malloc_r+0x3e>
 8007080:	4621      	mov	r1, r4
 8007082:	4630      	mov	r0, r6
 8007084:	f000 fd34 	bl	8007af0 <_sbrk_r>
 8007088:	6038      	str	r0, [r7, #0]
 800708a:	4629      	mov	r1, r5
 800708c:	4630      	mov	r0, r6
 800708e:	f000 fd2f 	bl	8007af0 <_sbrk_r>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d123      	bne.n	80070de <_malloc_r+0x92>
 8007096:	230c      	movs	r3, #12
 8007098:	6033      	str	r3, [r6, #0]
 800709a:	4630      	mov	r0, r6
 800709c:	f001 feec 	bl	8008e78 <__malloc_unlock>
 80070a0:	e7e3      	b.n	800706a <_malloc_r+0x1e>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	1b5b      	subs	r3, r3, r5
 80070a6:	d417      	bmi.n	80070d8 <_malloc_r+0x8c>
 80070a8:	2b0b      	cmp	r3, #11
 80070aa:	d903      	bls.n	80070b4 <_malloc_r+0x68>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	441c      	add	r4, r3
 80070b0:	6025      	str	r5, [r4, #0]
 80070b2:	e004      	b.n	80070be <_malloc_r+0x72>
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	42a2      	cmp	r2, r4
 80070b8:	bf0c      	ite	eq
 80070ba:	600b      	streq	r3, [r1, #0]
 80070bc:	6053      	strne	r3, [r2, #4]
 80070be:	4630      	mov	r0, r6
 80070c0:	f001 feda 	bl	8008e78 <__malloc_unlock>
 80070c4:	f104 000b 	add.w	r0, r4, #11
 80070c8:	1d23      	adds	r3, r4, #4
 80070ca:	f020 0007 	bic.w	r0, r0, #7
 80070ce:	1ac2      	subs	r2, r0, r3
 80070d0:	d0cc      	beq.n	800706c <_malloc_r+0x20>
 80070d2:	1a1b      	subs	r3, r3, r0
 80070d4:	50a3      	str	r3, [r4, r2]
 80070d6:	e7c9      	b.n	800706c <_malloc_r+0x20>
 80070d8:	4622      	mov	r2, r4
 80070da:	6864      	ldr	r4, [r4, #4]
 80070dc:	e7cc      	b.n	8007078 <_malloc_r+0x2c>
 80070de:	1cc4      	adds	r4, r0, #3
 80070e0:	f024 0403 	bic.w	r4, r4, #3
 80070e4:	42a0      	cmp	r0, r4
 80070e6:	d0e3      	beq.n	80070b0 <_malloc_r+0x64>
 80070e8:	1a21      	subs	r1, r4, r0
 80070ea:	4630      	mov	r0, r6
 80070ec:	f000 fd00 	bl	8007af0 <_sbrk_r>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d1dd      	bne.n	80070b0 <_malloc_r+0x64>
 80070f4:	e7cf      	b.n	8007096 <_malloc_r+0x4a>
 80070f6:	bf00      	nop
 80070f8:	20000258 	.word	0x20000258
 80070fc:	2000025c 	.word	0x2000025c

08007100 <__cvt>:
 8007100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	ec55 4b10 	vmov	r4, r5, d0
 8007108:	2d00      	cmp	r5, #0
 800710a:	460e      	mov	r6, r1
 800710c:	4619      	mov	r1, r3
 800710e:	462b      	mov	r3, r5
 8007110:	bfbb      	ittet	lt
 8007112:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007116:	461d      	movlt	r5, r3
 8007118:	2300      	movge	r3, #0
 800711a:	232d      	movlt	r3, #45	; 0x2d
 800711c:	700b      	strb	r3, [r1, #0]
 800711e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007120:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007124:	4691      	mov	r9, r2
 8007126:	f023 0820 	bic.w	r8, r3, #32
 800712a:	bfbc      	itt	lt
 800712c:	4622      	movlt	r2, r4
 800712e:	4614      	movlt	r4, r2
 8007130:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007134:	d005      	beq.n	8007142 <__cvt+0x42>
 8007136:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800713a:	d100      	bne.n	800713e <__cvt+0x3e>
 800713c:	3601      	adds	r6, #1
 800713e:	2102      	movs	r1, #2
 8007140:	e000      	b.n	8007144 <__cvt+0x44>
 8007142:	2103      	movs	r1, #3
 8007144:	ab03      	add	r3, sp, #12
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	ab02      	add	r3, sp, #8
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	ec45 4b10 	vmov	d0, r4, r5
 8007150:	4653      	mov	r3, sl
 8007152:	4632      	mov	r2, r6
 8007154:	f000 fe6c 	bl	8007e30 <_dtoa_r>
 8007158:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800715c:	4607      	mov	r7, r0
 800715e:	d102      	bne.n	8007166 <__cvt+0x66>
 8007160:	f019 0f01 	tst.w	r9, #1
 8007164:	d022      	beq.n	80071ac <__cvt+0xac>
 8007166:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800716a:	eb07 0906 	add.w	r9, r7, r6
 800716e:	d110      	bne.n	8007192 <__cvt+0x92>
 8007170:	783b      	ldrb	r3, [r7, #0]
 8007172:	2b30      	cmp	r3, #48	; 0x30
 8007174:	d10a      	bne.n	800718c <__cvt+0x8c>
 8007176:	2200      	movs	r2, #0
 8007178:	2300      	movs	r3, #0
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 fc7b 	bl	8000a78 <__aeabi_dcmpeq>
 8007182:	b918      	cbnz	r0, 800718c <__cvt+0x8c>
 8007184:	f1c6 0601 	rsb	r6, r6, #1
 8007188:	f8ca 6000 	str.w	r6, [sl]
 800718c:	f8da 3000 	ldr.w	r3, [sl]
 8007190:	4499      	add	r9, r3
 8007192:	2200      	movs	r2, #0
 8007194:	2300      	movs	r3, #0
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 fc6d 	bl	8000a78 <__aeabi_dcmpeq>
 800719e:	b108      	cbz	r0, 80071a4 <__cvt+0xa4>
 80071a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80071a4:	2230      	movs	r2, #48	; 0x30
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	454b      	cmp	r3, r9
 80071aa:	d307      	bcc.n	80071bc <__cvt+0xbc>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b0:	1bdb      	subs	r3, r3, r7
 80071b2:	4638      	mov	r0, r7
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	b004      	add	sp, #16
 80071b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071bc:	1c59      	adds	r1, r3, #1
 80071be:	9103      	str	r1, [sp, #12]
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	e7f0      	b.n	80071a6 <__cvt+0xa6>

080071c4 <__exponent>:
 80071c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071c6:	4603      	mov	r3, r0
 80071c8:	2900      	cmp	r1, #0
 80071ca:	bfb8      	it	lt
 80071cc:	4249      	neglt	r1, r1
 80071ce:	f803 2b02 	strb.w	r2, [r3], #2
 80071d2:	bfb4      	ite	lt
 80071d4:	222d      	movlt	r2, #45	; 0x2d
 80071d6:	222b      	movge	r2, #43	; 0x2b
 80071d8:	2909      	cmp	r1, #9
 80071da:	7042      	strb	r2, [r0, #1]
 80071dc:	dd2a      	ble.n	8007234 <__exponent+0x70>
 80071de:	f10d 0407 	add.w	r4, sp, #7
 80071e2:	46a4      	mov	ip, r4
 80071e4:	270a      	movs	r7, #10
 80071e6:	46a6      	mov	lr, r4
 80071e8:	460a      	mov	r2, r1
 80071ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80071ee:	fb07 1516 	mls	r5, r7, r6, r1
 80071f2:	3530      	adds	r5, #48	; 0x30
 80071f4:	2a63      	cmp	r2, #99	; 0x63
 80071f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80071fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071fe:	4631      	mov	r1, r6
 8007200:	dcf1      	bgt.n	80071e6 <__exponent+0x22>
 8007202:	3130      	adds	r1, #48	; 0x30
 8007204:	f1ae 0502 	sub.w	r5, lr, #2
 8007208:	f804 1c01 	strb.w	r1, [r4, #-1]
 800720c:	1c44      	adds	r4, r0, #1
 800720e:	4629      	mov	r1, r5
 8007210:	4561      	cmp	r1, ip
 8007212:	d30a      	bcc.n	800722a <__exponent+0x66>
 8007214:	f10d 0209 	add.w	r2, sp, #9
 8007218:	eba2 020e 	sub.w	r2, r2, lr
 800721c:	4565      	cmp	r5, ip
 800721e:	bf88      	it	hi
 8007220:	2200      	movhi	r2, #0
 8007222:	4413      	add	r3, r2
 8007224:	1a18      	subs	r0, r3, r0
 8007226:	b003      	add	sp, #12
 8007228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800722a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007232:	e7ed      	b.n	8007210 <__exponent+0x4c>
 8007234:	2330      	movs	r3, #48	; 0x30
 8007236:	3130      	adds	r1, #48	; 0x30
 8007238:	7083      	strb	r3, [r0, #2]
 800723a:	70c1      	strb	r1, [r0, #3]
 800723c:	1d03      	adds	r3, r0, #4
 800723e:	e7f1      	b.n	8007224 <__exponent+0x60>

08007240 <_printf_float>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	ed2d 8b02 	vpush	{d8}
 8007248:	b08d      	sub	sp, #52	; 0x34
 800724a:	460c      	mov	r4, r1
 800724c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007250:	4616      	mov	r6, r2
 8007252:	461f      	mov	r7, r3
 8007254:	4605      	mov	r5, r0
 8007256:	f001 fd8f 	bl	8008d78 <_localeconv_r>
 800725a:	f8d0 a000 	ldr.w	sl, [r0]
 800725e:	4650      	mov	r0, sl
 8007260:	f7f8 ff8e 	bl	8000180 <strlen>
 8007264:	2300      	movs	r3, #0
 8007266:	930a      	str	r3, [sp, #40]	; 0x28
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	9305      	str	r3, [sp, #20]
 800726c:	f8d8 3000 	ldr.w	r3, [r8]
 8007270:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007274:	3307      	adds	r3, #7
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	f103 0208 	add.w	r2, r3, #8
 800727e:	f8c8 2000 	str.w	r2, [r8]
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800728a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800728e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007292:	9307      	str	r3, [sp, #28]
 8007294:	f8cd 8018 	str.w	r8, [sp, #24]
 8007298:	ee08 0a10 	vmov	s16, r0
 800729c:	4b9f      	ldr	r3, [pc, #636]	; (800751c <_printf_float+0x2dc>)
 800729e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a6:	f7f9 fc19 	bl	8000adc <__aeabi_dcmpun>
 80072aa:	bb88      	cbnz	r0, 8007310 <_printf_float+0xd0>
 80072ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072b0:	4b9a      	ldr	r3, [pc, #616]	; (800751c <_printf_float+0x2dc>)
 80072b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072b6:	f7f9 fbf3 	bl	8000aa0 <__aeabi_dcmple>
 80072ba:	bb48      	cbnz	r0, 8007310 <_printf_float+0xd0>
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	4640      	mov	r0, r8
 80072c2:	4649      	mov	r1, r9
 80072c4:	f7f9 fbe2 	bl	8000a8c <__aeabi_dcmplt>
 80072c8:	b110      	cbz	r0, 80072d0 <_printf_float+0x90>
 80072ca:	232d      	movs	r3, #45	; 0x2d
 80072cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d0:	4b93      	ldr	r3, [pc, #588]	; (8007520 <_printf_float+0x2e0>)
 80072d2:	4894      	ldr	r0, [pc, #592]	; (8007524 <_printf_float+0x2e4>)
 80072d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072d8:	bf94      	ite	ls
 80072da:	4698      	movls	r8, r3
 80072dc:	4680      	movhi	r8, r0
 80072de:	2303      	movs	r3, #3
 80072e0:	6123      	str	r3, [r4, #16]
 80072e2:	9b05      	ldr	r3, [sp, #20]
 80072e4:	f023 0204 	bic.w	r2, r3, #4
 80072e8:	6022      	str	r2, [r4, #0]
 80072ea:	f04f 0900 	mov.w	r9, #0
 80072ee:	9700      	str	r7, [sp, #0]
 80072f0:	4633      	mov	r3, r6
 80072f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80072f4:	4621      	mov	r1, r4
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 f9d8 	bl	80076ac <_printf_common>
 80072fc:	3001      	adds	r0, #1
 80072fe:	f040 8090 	bne.w	8007422 <_printf_float+0x1e2>
 8007302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007306:	b00d      	add	sp, #52	; 0x34
 8007308:	ecbd 8b02 	vpop	{d8}
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f9 fbe0 	bl	8000adc <__aeabi_dcmpun>
 800731c:	b140      	cbz	r0, 8007330 <_printf_float+0xf0>
 800731e:	464b      	mov	r3, r9
 8007320:	2b00      	cmp	r3, #0
 8007322:	bfbc      	itt	lt
 8007324:	232d      	movlt	r3, #45	; 0x2d
 8007326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800732a:	487f      	ldr	r0, [pc, #508]	; (8007528 <_printf_float+0x2e8>)
 800732c:	4b7f      	ldr	r3, [pc, #508]	; (800752c <_printf_float+0x2ec>)
 800732e:	e7d1      	b.n	80072d4 <_printf_float+0x94>
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007336:	9206      	str	r2, [sp, #24]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	d13f      	bne.n	80073bc <_printf_float+0x17c>
 800733c:	2306      	movs	r3, #6
 800733e:	6063      	str	r3, [r4, #4]
 8007340:	9b05      	ldr	r3, [sp, #20]
 8007342:	6861      	ldr	r1, [r4, #4]
 8007344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007348:	2300      	movs	r3, #0
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	ab0a      	add	r3, sp, #40	; 0x28
 800734e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007352:	ab09      	add	r3, sp, #36	; 0x24
 8007354:	ec49 8b10 	vmov	d0, r8, r9
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	6022      	str	r2, [r4, #0]
 800735c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007360:	4628      	mov	r0, r5
 8007362:	f7ff fecd 	bl	8007100 <__cvt>
 8007366:	9b06      	ldr	r3, [sp, #24]
 8007368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800736a:	2b47      	cmp	r3, #71	; 0x47
 800736c:	4680      	mov	r8, r0
 800736e:	d108      	bne.n	8007382 <_printf_float+0x142>
 8007370:	1cc8      	adds	r0, r1, #3
 8007372:	db02      	blt.n	800737a <_printf_float+0x13a>
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	4299      	cmp	r1, r3
 8007378:	dd41      	ble.n	80073fe <_printf_float+0x1be>
 800737a:	f1ab 0b02 	sub.w	fp, fp, #2
 800737e:	fa5f fb8b 	uxtb.w	fp, fp
 8007382:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007386:	d820      	bhi.n	80073ca <_printf_float+0x18a>
 8007388:	3901      	subs	r1, #1
 800738a:	465a      	mov	r2, fp
 800738c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007390:	9109      	str	r1, [sp, #36]	; 0x24
 8007392:	f7ff ff17 	bl	80071c4 <__exponent>
 8007396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007398:	1813      	adds	r3, r2, r0
 800739a:	2a01      	cmp	r2, #1
 800739c:	4681      	mov	r9, r0
 800739e:	6123      	str	r3, [r4, #16]
 80073a0:	dc02      	bgt.n	80073a8 <_printf_float+0x168>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	07d2      	lsls	r2, r2, #31
 80073a6:	d501      	bpl.n	80073ac <_printf_float+0x16c>
 80073a8:	3301      	adds	r3, #1
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d09c      	beq.n	80072ee <_printf_float+0xae>
 80073b4:	232d      	movs	r3, #45	; 0x2d
 80073b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ba:	e798      	b.n	80072ee <_printf_float+0xae>
 80073bc:	9a06      	ldr	r2, [sp, #24]
 80073be:	2a47      	cmp	r2, #71	; 0x47
 80073c0:	d1be      	bne.n	8007340 <_printf_float+0x100>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1bc      	bne.n	8007340 <_printf_float+0x100>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e7b9      	b.n	800733e <_printf_float+0xfe>
 80073ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073ce:	d118      	bne.n	8007402 <_printf_float+0x1c2>
 80073d0:	2900      	cmp	r1, #0
 80073d2:	6863      	ldr	r3, [r4, #4]
 80073d4:	dd0b      	ble.n	80073ee <_printf_float+0x1ae>
 80073d6:	6121      	str	r1, [r4, #16]
 80073d8:	b913      	cbnz	r3, 80073e0 <_printf_float+0x1a0>
 80073da:	6822      	ldr	r2, [r4, #0]
 80073dc:	07d0      	lsls	r0, r2, #31
 80073de:	d502      	bpl.n	80073e6 <_printf_float+0x1a6>
 80073e0:	3301      	adds	r3, #1
 80073e2:	440b      	add	r3, r1
 80073e4:	6123      	str	r3, [r4, #16]
 80073e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80073e8:	f04f 0900 	mov.w	r9, #0
 80073ec:	e7de      	b.n	80073ac <_printf_float+0x16c>
 80073ee:	b913      	cbnz	r3, 80073f6 <_printf_float+0x1b6>
 80073f0:	6822      	ldr	r2, [r4, #0]
 80073f2:	07d2      	lsls	r2, r2, #31
 80073f4:	d501      	bpl.n	80073fa <_printf_float+0x1ba>
 80073f6:	3302      	adds	r3, #2
 80073f8:	e7f4      	b.n	80073e4 <_printf_float+0x1a4>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e7f2      	b.n	80073e4 <_printf_float+0x1a4>
 80073fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007404:	4299      	cmp	r1, r3
 8007406:	db05      	blt.n	8007414 <_printf_float+0x1d4>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	6121      	str	r1, [r4, #16]
 800740c:	07d8      	lsls	r0, r3, #31
 800740e:	d5ea      	bpl.n	80073e6 <_printf_float+0x1a6>
 8007410:	1c4b      	adds	r3, r1, #1
 8007412:	e7e7      	b.n	80073e4 <_printf_float+0x1a4>
 8007414:	2900      	cmp	r1, #0
 8007416:	bfd4      	ite	le
 8007418:	f1c1 0202 	rsble	r2, r1, #2
 800741c:	2201      	movgt	r2, #1
 800741e:	4413      	add	r3, r2
 8007420:	e7e0      	b.n	80073e4 <_printf_float+0x1a4>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	055a      	lsls	r2, r3, #21
 8007426:	d407      	bmi.n	8007438 <_printf_float+0x1f8>
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	4642      	mov	r2, r8
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	d12c      	bne.n	8007490 <_printf_float+0x250>
 8007436:	e764      	b.n	8007302 <_printf_float+0xc2>
 8007438:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800743c:	f240 80e0 	bls.w	8007600 <_printf_float+0x3c0>
 8007440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007444:	2200      	movs	r2, #0
 8007446:	2300      	movs	r3, #0
 8007448:	f7f9 fb16 	bl	8000a78 <__aeabi_dcmpeq>
 800744c:	2800      	cmp	r0, #0
 800744e:	d034      	beq.n	80074ba <_printf_float+0x27a>
 8007450:	4a37      	ldr	r2, [pc, #220]	; (8007530 <_printf_float+0x2f0>)
 8007452:	2301      	movs	r3, #1
 8007454:	4631      	mov	r1, r6
 8007456:	4628      	mov	r0, r5
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	f43f af51 	beq.w	8007302 <_printf_float+0xc2>
 8007460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007464:	429a      	cmp	r2, r3
 8007466:	db02      	blt.n	800746e <_printf_float+0x22e>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	07d8      	lsls	r0, r3, #31
 800746c:	d510      	bpl.n	8007490 <_printf_float+0x250>
 800746e:	ee18 3a10 	vmov	r3, s16
 8007472:	4652      	mov	r2, sl
 8007474:	4631      	mov	r1, r6
 8007476:	4628      	mov	r0, r5
 8007478:	47b8      	blx	r7
 800747a:	3001      	adds	r0, #1
 800747c:	f43f af41 	beq.w	8007302 <_printf_float+0xc2>
 8007480:	f04f 0800 	mov.w	r8, #0
 8007484:	f104 091a 	add.w	r9, r4, #26
 8007488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748a:	3b01      	subs	r3, #1
 800748c:	4543      	cmp	r3, r8
 800748e:	dc09      	bgt.n	80074a4 <_printf_float+0x264>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	079b      	lsls	r3, r3, #30
 8007494:	f100 8105 	bmi.w	80076a2 <_printf_float+0x462>
 8007498:	68e0      	ldr	r0, [r4, #12]
 800749a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749c:	4298      	cmp	r0, r3
 800749e:	bfb8      	it	lt
 80074a0:	4618      	movlt	r0, r3
 80074a2:	e730      	b.n	8007306 <_printf_float+0xc6>
 80074a4:	2301      	movs	r3, #1
 80074a6:	464a      	mov	r2, r9
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	3001      	adds	r0, #1
 80074b0:	f43f af27 	beq.w	8007302 <_printf_float+0xc2>
 80074b4:	f108 0801 	add.w	r8, r8, #1
 80074b8:	e7e6      	b.n	8007488 <_printf_float+0x248>
 80074ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dc39      	bgt.n	8007534 <_printf_float+0x2f4>
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <_printf_float+0x2f0>)
 80074c2:	2301      	movs	r3, #1
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	f43f af19 	beq.w	8007302 <_printf_float+0xc2>
 80074d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074d4:	4313      	orrs	r3, r2
 80074d6:	d102      	bne.n	80074de <_printf_float+0x29e>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d5d8      	bpl.n	8007490 <_printf_float+0x250>
 80074de:	ee18 3a10 	vmov	r3, s16
 80074e2:	4652      	mov	r2, sl
 80074e4:	4631      	mov	r1, r6
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	f43f af09 	beq.w	8007302 <_printf_float+0xc2>
 80074f0:	f04f 0900 	mov.w	r9, #0
 80074f4:	f104 0a1a 	add.w	sl, r4, #26
 80074f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fa:	425b      	negs	r3, r3
 80074fc:	454b      	cmp	r3, r9
 80074fe:	dc01      	bgt.n	8007504 <_printf_float+0x2c4>
 8007500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007502:	e792      	b.n	800742a <_printf_float+0x1ea>
 8007504:	2301      	movs	r3, #1
 8007506:	4652      	mov	r2, sl
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	47b8      	blx	r7
 800750e:	3001      	adds	r0, #1
 8007510:	f43f aef7 	beq.w	8007302 <_printf_float+0xc2>
 8007514:	f109 0901 	add.w	r9, r9, #1
 8007518:	e7ee      	b.n	80074f8 <_printf_float+0x2b8>
 800751a:	bf00      	nop
 800751c:	7fefffff 	.word	0x7fefffff
 8007520:	08009c80 	.word	0x08009c80
 8007524:	08009c84 	.word	0x08009c84
 8007528:	08009c8c 	.word	0x08009c8c
 800752c:	08009c88 	.word	0x08009c88
 8007530:	08009c90 	.word	0x08009c90
 8007534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007538:	429a      	cmp	r2, r3
 800753a:	bfa8      	it	ge
 800753c:	461a      	movge	r2, r3
 800753e:	2a00      	cmp	r2, #0
 8007540:	4691      	mov	r9, r2
 8007542:	dc37      	bgt.n	80075b4 <_printf_float+0x374>
 8007544:	f04f 0b00 	mov.w	fp, #0
 8007548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800754c:	f104 021a 	add.w	r2, r4, #26
 8007550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007552:	9305      	str	r3, [sp, #20]
 8007554:	eba3 0309 	sub.w	r3, r3, r9
 8007558:	455b      	cmp	r3, fp
 800755a:	dc33      	bgt.n	80075c4 <_printf_float+0x384>
 800755c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007560:	429a      	cmp	r2, r3
 8007562:	db3b      	blt.n	80075dc <_printf_float+0x39c>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	07da      	lsls	r2, r3, #31
 8007568:	d438      	bmi.n	80075dc <_printf_float+0x39c>
 800756a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756c:	9b05      	ldr	r3, [sp, #20]
 800756e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	eba2 0901 	sub.w	r9, r2, r1
 8007576:	4599      	cmp	r9, r3
 8007578:	bfa8      	it	ge
 800757a:	4699      	movge	r9, r3
 800757c:	f1b9 0f00 	cmp.w	r9, #0
 8007580:	dc35      	bgt.n	80075ee <_printf_float+0x3ae>
 8007582:	f04f 0800 	mov.w	r8, #0
 8007586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800758a:	f104 0a1a 	add.w	sl, r4, #26
 800758e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	eba3 0309 	sub.w	r3, r3, r9
 8007598:	4543      	cmp	r3, r8
 800759a:	f77f af79 	ble.w	8007490 <_printf_float+0x250>
 800759e:	2301      	movs	r3, #1
 80075a0:	4652      	mov	r2, sl
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	f43f aeaa 	beq.w	8007302 <_printf_float+0xc2>
 80075ae:	f108 0801 	add.w	r8, r8, #1
 80075b2:	e7ec      	b.n	800758e <_printf_float+0x34e>
 80075b4:	4613      	mov	r3, r2
 80075b6:	4631      	mov	r1, r6
 80075b8:	4642      	mov	r2, r8
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	d1c0      	bne.n	8007544 <_printf_float+0x304>
 80075c2:	e69e      	b.n	8007302 <_printf_float+0xc2>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4631      	mov	r1, r6
 80075c8:	4628      	mov	r0, r5
 80075ca:	9205      	str	r2, [sp, #20]
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f ae97 	beq.w	8007302 <_printf_float+0xc2>
 80075d4:	9a05      	ldr	r2, [sp, #20]
 80075d6:	f10b 0b01 	add.w	fp, fp, #1
 80075da:	e7b9      	b.n	8007550 <_printf_float+0x310>
 80075dc:	ee18 3a10 	vmov	r3, s16
 80075e0:	4652      	mov	r2, sl
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	d1be      	bne.n	800756a <_printf_float+0x32a>
 80075ec:	e689      	b.n	8007302 <_printf_float+0xc2>
 80075ee:	9a05      	ldr	r2, [sp, #20]
 80075f0:	464b      	mov	r3, r9
 80075f2:	4442      	add	r2, r8
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	d1c1      	bne.n	8007582 <_printf_float+0x342>
 80075fe:	e680      	b.n	8007302 <_printf_float+0xc2>
 8007600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007602:	2a01      	cmp	r2, #1
 8007604:	dc01      	bgt.n	800760a <_printf_float+0x3ca>
 8007606:	07db      	lsls	r3, r3, #31
 8007608:	d538      	bpl.n	800767c <_printf_float+0x43c>
 800760a:	2301      	movs	r3, #1
 800760c:	4642      	mov	r2, r8
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	f43f ae74 	beq.w	8007302 <_printf_float+0xc2>
 800761a:	ee18 3a10 	vmov	r3, s16
 800761e:	4652      	mov	r2, sl
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f ae6b 	beq.w	8007302 <_printf_float+0xc2>
 800762c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	f7f9 fa20 	bl	8000a78 <__aeabi_dcmpeq>
 8007638:	b9d8      	cbnz	r0, 8007672 <_printf_float+0x432>
 800763a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763c:	f108 0201 	add.w	r2, r8, #1
 8007640:	3b01      	subs	r3, #1
 8007642:	4631      	mov	r1, r6
 8007644:	4628      	mov	r0, r5
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	d10e      	bne.n	800766a <_printf_float+0x42a>
 800764c:	e659      	b.n	8007302 <_printf_float+0xc2>
 800764e:	2301      	movs	r3, #1
 8007650:	4652      	mov	r2, sl
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f ae52 	beq.w	8007302 <_printf_float+0xc2>
 800765e:	f108 0801 	add.w	r8, r8, #1
 8007662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007664:	3b01      	subs	r3, #1
 8007666:	4543      	cmp	r3, r8
 8007668:	dcf1      	bgt.n	800764e <_printf_float+0x40e>
 800766a:	464b      	mov	r3, r9
 800766c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007670:	e6dc      	b.n	800742c <_printf_float+0x1ec>
 8007672:	f04f 0800 	mov.w	r8, #0
 8007676:	f104 0a1a 	add.w	sl, r4, #26
 800767a:	e7f2      	b.n	8007662 <_printf_float+0x422>
 800767c:	2301      	movs	r3, #1
 800767e:	4642      	mov	r2, r8
 8007680:	e7df      	b.n	8007642 <_printf_float+0x402>
 8007682:	2301      	movs	r3, #1
 8007684:	464a      	mov	r2, r9
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f ae38 	beq.w	8007302 <_printf_float+0xc2>
 8007692:	f108 0801 	add.w	r8, r8, #1
 8007696:	68e3      	ldr	r3, [r4, #12]
 8007698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800769a:	1a5b      	subs	r3, r3, r1
 800769c:	4543      	cmp	r3, r8
 800769e:	dcf0      	bgt.n	8007682 <_printf_float+0x442>
 80076a0:	e6fa      	b.n	8007498 <_printf_float+0x258>
 80076a2:	f04f 0800 	mov.w	r8, #0
 80076a6:	f104 0919 	add.w	r9, r4, #25
 80076aa:	e7f4      	b.n	8007696 <_printf_float+0x456>

080076ac <_printf_common>:
 80076ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	4616      	mov	r6, r2
 80076b2:	4699      	mov	r9, r3
 80076b4:	688a      	ldr	r2, [r1, #8]
 80076b6:	690b      	ldr	r3, [r1, #16]
 80076b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076bc:	4293      	cmp	r3, r2
 80076be:	bfb8      	it	lt
 80076c0:	4613      	movlt	r3, r2
 80076c2:	6033      	str	r3, [r6, #0]
 80076c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076c8:	4607      	mov	r7, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	b10a      	cbz	r2, 80076d2 <_printf_common+0x26>
 80076ce:	3301      	adds	r3, #1
 80076d0:	6033      	str	r3, [r6, #0]
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	0699      	lsls	r1, r3, #26
 80076d6:	bf42      	ittt	mi
 80076d8:	6833      	ldrmi	r3, [r6, #0]
 80076da:	3302      	addmi	r3, #2
 80076dc:	6033      	strmi	r3, [r6, #0]
 80076de:	6825      	ldr	r5, [r4, #0]
 80076e0:	f015 0506 	ands.w	r5, r5, #6
 80076e4:	d106      	bne.n	80076f4 <_printf_common+0x48>
 80076e6:	f104 0a19 	add.w	sl, r4, #25
 80076ea:	68e3      	ldr	r3, [r4, #12]
 80076ec:	6832      	ldr	r2, [r6, #0]
 80076ee:	1a9b      	subs	r3, r3, r2
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	dc26      	bgt.n	8007742 <_printf_common+0x96>
 80076f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076f8:	1e13      	subs	r3, r2, #0
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	bf18      	it	ne
 80076fe:	2301      	movne	r3, #1
 8007700:	0692      	lsls	r2, r2, #26
 8007702:	d42b      	bmi.n	800775c <_printf_common+0xb0>
 8007704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007708:	4649      	mov	r1, r9
 800770a:	4638      	mov	r0, r7
 800770c:	47c0      	blx	r8
 800770e:	3001      	adds	r0, #1
 8007710:	d01e      	beq.n	8007750 <_printf_common+0xa4>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	68e5      	ldr	r5, [r4, #12]
 8007716:	6832      	ldr	r2, [r6, #0]
 8007718:	f003 0306 	and.w	r3, r3, #6
 800771c:	2b04      	cmp	r3, #4
 800771e:	bf08      	it	eq
 8007720:	1aad      	subeq	r5, r5, r2
 8007722:	68a3      	ldr	r3, [r4, #8]
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	bf0c      	ite	eq
 8007728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800772c:	2500      	movne	r5, #0
 800772e:	4293      	cmp	r3, r2
 8007730:	bfc4      	itt	gt
 8007732:	1a9b      	subgt	r3, r3, r2
 8007734:	18ed      	addgt	r5, r5, r3
 8007736:	2600      	movs	r6, #0
 8007738:	341a      	adds	r4, #26
 800773a:	42b5      	cmp	r5, r6
 800773c:	d11a      	bne.n	8007774 <_printf_common+0xc8>
 800773e:	2000      	movs	r0, #0
 8007740:	e008      	b.n	8007754 <_printf_common+0xa8>
 8007742:	2301      	movs	r3, #1
 8007744:	4652      	mov	r2, sl
 8007746:	4649      	mov	r1, r9
 8007748:	4638      	mov	r0, r7
 800774a:	47c0      	blx	r8
 800774c:	3001      	adds	r0, #1
 800774e:	d103      	bne.n	8007758 <_printf_common+0xac>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007758:	3501      	adds	r5, #1
 800775a:	e7c6      	b.n	80076ea <_printf_common+0x3e>
 800775c:	18e1      	adds	r1, r4, r3
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	2030      	movs	r0, #48	; 0x30
 8007762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007766:	4422      	add	r2, r4
 8007768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800776c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007770:	3302      	adds	r3, #2
 8007772:	e7c7      	b.n	8007704 <_printf_common+0x58>
 8007774:	2301      	movs	r3, #1
 8007776:	4622      	mov	r2, r4
 8007778:	4649      	mov	r1, r9
 800777a:	4638      	mov	r0, r7
 800777c:	47c0      	blx	r8
 800777e:	3001      	adds	r0, #1
 8007780:	d0e6      	beq.n	8007750 <_printf_common+0xa4>
 8007782:	3601      	adds	r6, #1
 8007784:	e7d9      	b.n	800773a <_printf_common+0x8e>
	...

08007788 <_printf_i>:
 8007788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800778c:	460c      	mov	r4, r1
 800778e:	4691      	mov	r9, r2
 8007790:	7e27      	ldrb	r7, [r4, #24]
 8007792:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007794:	2f78      	cmp	r7, #120	; 0x78
 8007796:	4680      	mov	r8, r0
 8007798:	469a      	mov	sl, r3
 800779a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800779e:	d807      	bhi.n	80077b0 <_printf_i+0x28>
 80077a0:	2f62      	cmp	r7, #98	; 0x62
 80077a2:	d80a      	bhi.n	80077ba <_printf_i+0x32>
 80077a4:	2f00      	cmp	r7, #0
 80077a6:	f000 80d8 	beq.w	800795a <_printf_i+0x1d2>
 80077aa:	2f58      	cmp	r7, #88	; 0x58
 80077ac:	f000 80a3 	beq.w	80078f6 <_printf_i+0x16e>
 80077b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077b8:	e03a      	b.n	8007830 <_printf_i+0xa8>
 80077ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077be:	2b15      	cmp	r3, #21
 80077c0:	d8f6      	bhi.n	80077b0 <_printf_i+0x28>
 80077c2:	a001      	add	r0, pc, #4	; (adr r0, 80077c8 <_printf_i+0x40>)
 80077c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80077c8:	08007821 	.word	0x08007821
 80077cc:	08007835 	.word	0x08007835
 80077d0:	080077b1 	.word	0x080077b1
 80077d4:	080077b1 	.word	0x080077b1
 80077d8:	080077b1 	.word	0x080077b1
 80077dc:	080077b1 	.word	0x080077b1
 80077e0:	08007835 	.word	0x08007835
 80077e4:	080077b1 	.word	0x080077b1
 80077e8:	080077b1 	.word	0x080077b1
 80077ec:	080077b1 	.word	0x080077b1
 80077f0:	080077b1 	.word	0x080077b1
 80077f4:	08007941 	.word	0x08007941
 80077f8:	08007865 	.word	0x08007865
 80077fc:	08007923 	.word	0x08007923
 8007800:	080077b1 	.word	0x080077b1
 8007804:	080077b1 	.word	0x080077b1
 8007808:	08007963 	.word	0x08007963
 800780c:	080077b1 	.word	0x080077b1
 8007810:	08007865 	.word	0x08007865
 8007814:	080077b1 	.word	0x080077b1
 8007818:	080077b1 	.word	0x080077b1
 800781c:	0800792b 	.word	0x0800792b
 8007820:	680b      	ldr	r3, [r1, #0]
 8007822:	1d1a      	adds	r2, r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	600a      	str	r2, [r1, #0]
 8007828:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800782c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007830:	2301      	movs	r3, #1
 8007832:	e0a3      	b.n	800797c <_printf_i+0x1f4>
 8007834:	6825      	ldr	r5, [r4, #0]
 8007836:	6808      	ldr	r0, [r1, #0]
 8007838:	062e      	lsls	r6, r5, #24
 800783a:	f100 0304 	add.w	r3, r0, #4
 800783e:	d50a      	bpl.n	8007856 <_printf_i+0xce>
 8007840:	6805      	ldr	r5, [r0, #0]
 8007842:	600b      	str	r3, [r1, #0]
 8007844:	2d00      	cmp	r5, #0
 8007846:	da03      	bge.n	8007850 <_printf_i+0xc8>
 8007848:	232d      	movs	r3, #45	; 0x2d
 800784a:	426d      	negs	r5, r5
 800784c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007850:	485e      	ldr	r0, [pc, #376]	; (80079cc <_printf_i+0x244>)
 8007852:	230a      	movs	r3, #10
 8007854:	e019      	b.n	800788a <_printf_i+0x102>
 8007856:	f015 0f40 	tst.w	r5, #64	; 0x40
 800785a:	6805      	ldr	r5, [r0, #0]
 800785c:	600b      	str	r3, [r1, #0]
 800785e:	bf18      	it	ne
 8007860:	b22d      	sxthne	r5, r5
 8007862:	e7ef      	b.n	8007844 <_printf_i+0xbc>
 8007864:	680b      	ldr	r3, [r1, #0]
 8007866:	6825      	ldr	r5, [r4, #0]
 8007868:	1d18      	adds	r0, r3, #4
 800786a:	6008      	str	r0, [r1, #0]
 800786c:	0628      	lsls	r0, r5, #24
 800786e:	d501      	bpl.n	8007874 <_printf_i+0xec>
 8007870:	681d      	ldr	r5, [r3, #0]
 8007872:	e002      	b.n	800787a <_printf_i+0xf2>
 8007874:	0669      	lsls	r1, r5, #25
 8007876:	d5fb      	bpl.n	8007870 <_printf_i+0xe8>
 8007878:	881d      	ldrh	r5, [r3, #0]
 800787a:	4854      	ldr	r0, [pc, #336]	; (80079cc <_printf_i+0x244>)
 800787c:	2f6f      	cmp	r7, #111	; 0x6f
 800787e:	bf0c      	ite	eq
 8007880:	2308      	moveq	r3, #8
 8007882:	230a      	movne	r3, #10
 8007884:	2100      	movs	r1, #0
 8007886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800788a:	6866      	ldr	r6, [r4, #4]
 800788c:	60a6      	str	r6, [r4, #8]
 800788e:	2e00      	cmp	r6, #0
 8007890:	bfa2      	ittt	ge
 8007892:	6821      	ldrge	r1, [r4, #0]
 8007894:	f021 0104 	bicge.w	r1, r1, #4
 8007898:	6021      	strge	r1, [r4, #0]
 800789a:	b90d      	cbnz	r5, 80078a0 <_printf_i+0x118>
 800789c:	2e00      	cmp	r6, #0
 800789e:	d04d      	beq.n	800793c <_printf_i+0x1b4>
 80078a0:	4616      	mov	r6, r2
 80078a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80078a6:	fb03 5711 	mls	r7, r3, r1, r5
 80078aa:	5dc7      	ldrb	r7, [r0, r7]
 80078ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078b0:	462f      	mov	r7, r5
 80078b2:	42bb      	cmp	r3, r7
 80078b4:	460d      	mov	r5, r1
 80078b6:	d9f4      	bls.n	80078a2 <_printf_i+0x11a>
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d10b      	bne.n	80078d4 <_printf_i+0x14c>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	07df      	lsls	r7, r3, #31
 80078c0:	d508      	bpl.n	80078d4 <_printf_i+0x14c>
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	6861      	ldr	r1, [r4, #4]
 80078c6:	4299      	cmp	r1, r3
 80078c8:	bfde      	ittt	le
 80078ca:	2330      	movle	r3, #48	; 0x30
 80078cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80078d4:	1b92      	subs	r2, r2, r6
 80078d6:	6122      	str	r2, [r4, #16]
 80078d8:	f8cd a000 	str.w	sl, [sp]
 80078dc:	464b      	mov	r3, r9
 80078de:	aa03      	add	r2, sp, #12
 80078e0:	4621      	mov	r1, r4
 80078e2:	4640      	mov	r0, r8
 80078e4:	f7ff fee2 	bl	80076ac <_printf_common>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d14c      	bne.n	8007986 <_printf_i+0x1fe>
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078f0:	b004      	add	sp, #16
 80078f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f6:	4835      	ldr	r0, [pc, #212]	; (80079cc <_printf_i+0x244>)
 80078f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	680e      	ldr	r6, [r1, #0]
 8007900:	061f      	lsls	r7, r3, #24
 8007902:	f856 5b04 	ldr.w	r5, [r6], #4
 8007906:	600e      	str	r6, [r1, #0]
 8007908:	d514      	bpl.n	8007934 <_printf_i+0x1ac>
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	bf44      	itt	mi
 800790e:	f043 0320 	orrmi.w	r3, r3, #32
 8007912:	6023      	strmi	r3, [r4, #0]
 8007914:	b91d      	cbnz	r5, 800791e <_printf_i+0x196>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	f023 0320 	bic.w	r3, r3, #32
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	2310      	movs	r3, #16
 8007920:	e7b0      	b.n	8007884 <_printf_i+0xfc>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	f043 0320 	orr.w	r3, r3, #32
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	2378      	movs	r3, #120	; 0x78
 800792c:	4828      	ldr	r0, [pc, #160]	; (80079d0 <_printf_i+0x248>)
 800792e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007932:	e7e3      	b.n	80078fc <_printf_i+0x174>
 8007934:	065e      	lsls	r6, r3, #25
 8007936:	bf48      	it	mi
 8007938:	b2ad      	uxthmi	r5, r5
 800793a:	e7e6      	b.n	800790a <_printf_i+0x182>
 800793c:	4616      	mov	r6, r2
 800793e:	e7bb      	b.n	80078b8 <_printf_i+0x130>
 8007940:	680b      	ldr	r3, [r1, #0]
 8007942:	6826      	ldr	r6, [r4, #0]
 8007944:	6960      	ldr	r0, [r4, #20]
 8007946:	1d1d      	adds	r5, r3, #4
 8007948:	600d      	str	r5, [r1, #0]
 800794a:	0635      	lsls	r5, r6, #24
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	d501      	bpl.n	8007954 <_printf_i+0x1cc>
 8007950:	6018      	str	r0, [r3, #0]
 8007952:	e002      	b.n	800795a <_printf_i+0x1d2>
 8007954:	0671      	lsls	r1, r6, #25
 8007956:	d5fb      	bpl.n	8007950 <_printf_i+0x1c8>
 8007958:	8018      	strh	r0, [r3, #0]
 800795a:	2300      	movs	r3, #0
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	4616      	mov	r6, r2
 8007960:	e7ba      	b.n	80078d8 <_printf_i+0x150>
 8007962:	680b      	ldr	r3, [r1, #0]
 8007964:	1d1a      	adds	r2, r3, #4
 8007966:	600a      	str	r2, [r1, #0]
 8007968:	681e      	ldr	r6, [r3, #0]
 800796a:	6862      	ldr	r2, [r4, #4]
 800796c:	2100      	movs	r1, #0
 800796e:	4630      	mov	r0, r6
 8007970:	f7f8 fc0e 	bl	8000190 <memchr>
 8007974:	b108      	cbz	r0, 800797a <_printf_i+0x1f2>
 8007976:	1b80      	subs	r0, r0, r6
 8007978:	6060      	str	r0, [r4, #4]
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	2300      	movs	r3, #0
 8007980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007984:	e7a8      	b.n	80078d8 <_printf_i+0x150>
 8007986:	6923      	ldr	r3, [r4, #16]
 8007988:	4632      	mov	r2, r6
 800798a:	4649      	mov	r1, r9
 800798c:	4640      	mov	r0, r8
 800798e:	47d0      	blx	sl
 8007990:	3001      	adds	r0, #1
 8007992:	d0ab      	beq.n	80078ec <_printf_i+0x164>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	079b      	lsls	r3, r3, #30
 8007998:	d413      	bmi.n	80079c2 <_printf_i+0x23a>
 800799a:	68e0      	ldr	r0, [r4, #12]
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	4298      	cmp	r0, r3
 80079a0:	bfb8      	it	lt
 80079a2:	4618      	movlt	r0, r3
 80079a4:	e7a4      	b.n	80078f0 <_printf_i+0x168>
 80079a6:	2301      	movs	r3, #1
 80079a8:	4632      	mov	r2, r6
 80079aa:	4649      	mov	r1, r9
 80079ac:	4640      	mov	r0, r8
 80079ae:	47d0      	blx	sl
 80079b0:	3001      	adds	r0, #1
 80079b2:	d09b      	beq.n	80078ec <_printf_i+0x164>
 80079b4:	3501      	adds	r5, #1
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	9903      	ldr	r1, [sp, #12]
 80079ba:	1a5b      	subs	r3, r3, r1
 80079bc:	42ab      	cmp	r3, r5
 80079be:	dcf2      	bgt.n	80079a6 <_printf_i+0x21e>
 80079c0:	e7eb      	b.n	800799a <_printf_i+0x212>
 80079c2:	2500      	movs	r5, #0
 80079c4:	f104 0619 	add.w	r6, r4, #25
 80079c8:	e7f5      	b.n	80079b6 <_printf_i+0x22e>
 80079ca:	bf00      	nop
 80079cc:	08009c92 	.word	0x08009c92
 80079d0:	08009ca3 	.word	0x08009ca3

080079d4 <iprintf>:
 80079d4:	b40f      	push	{r0, r1, r2, r3}
 80079d6:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <iprintf+0x2c>)
 80079d8:	b513      	push	{r0, r1, r4, lr}
 80079da:	681c      	ldr	r4, [r3, #0]
 80079dc:	b124      	cbz	r4, 80079e8 <iprintf+0x14>
 80079de:	69a3      	ldr	r3, [r4, #24]
 80079e0:	b913      	cbnz	r3, 80079e8 <iprintf+0x14>
 80079e2:	4620      	mov	r0, r4
 80079e4:	f001 f92a 	bl	8008c3c <__sinit>
 80079e8:	ab05      	add	r3, sp, #20
 80079ea:	9a04      	ldr	r2, [sp, #16]
 80079ec:	68a1      	ldr	r1, [r4, #8]
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f001 fdfd 	bl	80095f0 <_vfiprintf_r>
 80079f6:	b002      	add	sp, #8
 80079f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fc:	b004      	add	sp, #16
 80079fe:	4770      	bx	lr
 8007a00:	20000024 	.word	0x20000024

08007a04 <_puts_r>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	460e      	mov	r6, r1
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b118      	cbz	r0, 8007a14 <_puts_r+0x10>
 8007a0c:	6983      	ldr	r3, [r0, #24]
 8007a0e:	b90b      	cbnz	r3, 8007a14 <_puts_r+0x10>
 8007a10:	f001 f914 	bl	8008c3c <__sinit>
 8007a14:	69ab      	ldr	r3, [r5, #24]
 8007a16:	68ac      	ldr	r4, [r5, #8]
 8007a18:	b913      	cbnz	r3, 8007a20 <_puts_r+0x1c>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f001 f90e 	bl	8008c3c <__sinit>
 8007a20:	4b2c      	ldr	r3, [pc, #176]	; (8007ad4 <_puts_r+0xd0>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d120      	bne.n	8007a68 <_puts_r+0x64>
 8007a26:	686c      	ldr	r4, [r5, #4]
 8007a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a2a:	07db      	lsls	r3, r3, #31
 8007a2c:	d405      	bmi.n	8007a3a <_puts_r+0x36>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	0598      	lsls	r0, r3, #22
 8007a32:	d402      	bmi.n	8007a3a <_puts_r+0x36>
 8007a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a36:	f001 f9a4 	bl	8008d82 <__retarget_lock_acquire_recursive>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	0719      	lsls	r1, r3, #28
 8007a3e:	d51d      	bpl.n	8007a7c <_puts_r+0x78>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	b1db      	cbz	r3, 8007a7c <_puts_r+0x78>
 8007a44:	3e01      	subs	r6, #1
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60a3      	str	r3, [r4, #8]
 8007a50:	bb39      	cbnz	r1, 8007aa2 <_puts_r+0x9e>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da38      	bge.n	8007ac8 <_puts_r+0xc4>
 8007a56:	4622      	mov	r2, r4
 8007a58:	210a      	movs	r1, #10
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f89c 	bl	8007b98 <__swbuf_r>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d011      	beq.n	8007a88 <_puts_r+0x84>
 8007a64:	250a      	movs	r5, #10
 8007a66:	e011      	b.n	8007a8c <_puts_r+0x88>
 8007a68:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <_puts_r+0xd4>)
 8007a6a:	429c      	cmp	r4, r3
 8007a6c:	d101      	bne.n	8007a72 <_puts_r+0x6e>
 8007a6e:	68ac      	ldr	r4, [r5, #8]
 8007a70:	e7da      	b.n	8007a28 <_puts_r+0x24>
 8007a72:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <_puts_r+0xd8>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	bf08      	it	eq
 8007a78:	68ec      	ldreq	r4, [r5, #12]
 8007a7a:	e7d5      	b.n	8007a28 <_puts_r+0x24>
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 f8dc 	bl	8007c3c <__swsetup_r>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d0dd      	beq.n	8007a44 <_puts_r+0x40>
 8007a88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a8e:	07da      	lsls	r2, r3, #31
 8007a90:	d405      	bmi.n	8007a9e <_puts_r+0x9a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	059b      	lsls	r3, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <_puts_r+0x9a>
 8007a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a9a:	f001 f973 	bl	8008d84 <__retarget_lock_release_recursive>
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da04      	bge.n	8007ab0 <_puts_r+0xac>
 8007aa6:	69a2      	ldr	r2, [r4, #24]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	dc06      	bgt.n	8007aba <_puts_r+0xb6>
 8007aac:	290a      	cmp	r1, #10
 8007aae:	d004      	beq.n	8007aba <_puts_r+0xb6>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	6022      	str	r2, [r4, #0]
 8007ab6:	7019      	strb	r1, [r3, #0]
 8007ab8:	e7c5      	b.n	8007a46 <_puts_r+0x42>
 8007aba:	4622      	mov	r2, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	f000 f86b 	bl	8007b98 <__swbuf_r>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d1bf      	bne.n	8007a46 <_puts_r+0x42>
 8007ac6:	e7df      	b.n	8007a88 <_puts_r+0x84>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	250a      	movs	r5, #10
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	701d      	strb	r5, [r3, #0]
 8007ad2:	e7db      	b.n	8007a8c <_puts_r+0x88>
 8007ad4:	08009d68 	.word	0x08009d68
 8007ad8:	08009d88 	.word	0x08009d88
 8007adc:	08009d48 	.word	0x08009d48

08007ae0 <puts>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <puts+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f7ff bf8d 	b.w	8007a04 <_puts_r>
 8007aea:	bf00      	nop
 8007aec:	20000024 	.word	0x20000024

08007af0 <_sbrk_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d06      	ldr	r5, [pc, #24]	; (8007b0c <_sbrk_r+0x1c>)
 8007af4:	2300      	movs	r3, #0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	f7fa fb56 	bl	80021ac <_sbrk>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_sbrk_r+0x1a>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_sbrk_r+0x1a>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	2000034c 	.word	0x2000034c

08007b10 <_raise_r>:
 8007b10:	291f      	cmp	r1, #31
 8007b12:	b538      	push	{r3, r4, r5, lr}
 8007b14:	4604      	mov	r4, r0
 8007b16:	460d      	mov	r5, r1
 8007b18:	d904      	bls.n	8007b24 <_raise_r+0x14>
 8007b1a:	2316      	movs	r3, #22
 8007b1c:	6003      	str	r3, [r0, #0]
 8007b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b26:	b112      	cbz	r2, 8007b2e <_raise_r+0x1e>
 8007b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b2c:	b94b      	cbnz	r3, 8007b42 <_raise_r+0x32>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 f830 	bl	8007b94 <_getpid_r>
 8007b34:	462a      	mov	r2, r5
 8007b36:	4601      	mov	r1, r0
 8007b38:	4620      	mov	r0, r4
 8007b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b3e:	f000 b817 	b.w	8007b70 <_kill_r>
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d00a      	beq.n	8007b5c <_raise_r+0x4c>
 8007b46:	1c59      	adds	r1, r3, #1
 8007b48:	d103      	bne.n	8007b52 <_raise_r+0x42>
 8007b4a:	2316      	movs	r3, #22
 8007b4c:	6003      	str	r3, [r0, #0]
 8007b4e:	2001      	movs	r0, #1
 8007b50:	e7e7      	b.n	8007b22 <_raise_r+0x12>
 8007b52:	2400      	movs	r4, #0
 8007b54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b58:	4628      	mov	r0, r5
 8007b5a:	4798      	blx	r3
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e7e0      	b.n	8007b22 <_raise_r+0x12>

08007b60 <raise>:
 8007b60:	4b02      	ldr	r3, [pc, #8]	; (8007b6c <raise+0xc>)
 8007b62:	4601      	mov	r1, r0
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	f7ff bfd3 	b.w	8007b10 <_raise_r>
 8007b6a:	bf00      	nop
 8007b6c:	20000024 	.word	0x20000024

08007b70 <_kill_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	; (8007b90 <_kill_r+0x20>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	f7fa fa8d 	bl	800209c <_kill>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d102      	bne.n	8007b8c <_kill_r+0x1c>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	b103      	cbz	r3, 8007b8c <_kill_r+0x1c>
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	bd38      	pop	{r3, r4, r5, pc}
 8007b8e:	bf00      	nop
 8007b90:	2000034c 	.word	0x2000034c

08007b94 <_getpid_r>:
 8007b94:	f7fa ba7a 	b.w	800208c <_getpid>

08007b98 <__swbuf_r>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	460e      	mov	r6, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	b118      	cbz	r0, 8007baa <__swbuf_r+0x12>
 8007ba2:	6983      	ldr	r3, [r0, #24]
 8007ba4:	b90b      	cbnz	r3, 8007baa <__swbuf_r+0x12>
 8007ba6:	f001 f849 	bl	8008c3c <__sinit>
 8007baa:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <__swbuf_r+0x98>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d12b      	bne.n	8007c08 <__swbuf_r+0x70>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	69a3      	ldr	r3, [r4, #24]
 8007bb4:	60a3      	str	r3, [r4, #8]
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	071a      	lsls	r2, r3, #28
 8007bba:	d52f      	bpl.n	8007c1c <__swbuf_r+0x84>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	b36b      	cbz	r3, 8007c1c <__swbuf_r+0x84>
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	6820      	ldr	r0, [r4, #0]
 8007bc4:	1ac0      	subs	r0, r0, r3
 8007bc6:	6963      	ldr	r3, [r4, #20]
 8007bc8:	b2f6      	uxtb	r6, r6
 8007bca:	4283      	cmp	r3, r0
 8007bcc:	4637      	mov	r7, r6
 8007bce:	dc04      	bgt.n	8007bda <__swbuf_r+0x42>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 ff9e 	bl	8008b14 <_fflush_r>
 8007bd8:	bb30      	cbnz	r0, 8007c28 <__swbuf_r+0x90>
 8007bda:	68a3      	ldr	r3, [r4, #8]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	701e      	strb	r6, [r3, #0]
 8007be8:	6963      	ldr	r3, [r4, #20]
 8007bea:	3001      	adds	r0, #1
 8007bec:	4283      	cmp	r3, r0
 8007bee:	d004      	beq.n	8007bfa <__swbuf_r+0x62>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	07db      	lsls	r3, r3, #31
 8007bf4:	d506      	bpl.n	8007c04 <__swbuf_r+0x6c>
 8007bf6:	2e0a      	cmp	r6, #10
 8007bf8:	d104      	bne.n	8007c04 <__swbuf_r+0x6c>
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 ff89 	bl	8008b14 <_fflush_r>
 8007c02:	b988      	cbnz	r0, 8007c28 <__swbuf_r+0x90>
 8007c04:	4638      	mov	r0, r7
 8007c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <__swbuf_r+0x9c>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d101      	bne.n	8007c12 <__swbuf_r+0x7a>
 8007c0e:	68ac      	ldr	r4, [r5, #8]
 8007c10:	e7cf      	b.n	8007bb2 <__swbuf_r+0x1a>
 8007c12:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <__swbuf_r+0xa0>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	bf08      	it	eq
 8007c18:	68ec      	ldreq	r4, [r5, #12]
 8007c1a:	e7ca      	b.n	8007bb2 <__swbuf_r+0x1a>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f80c 	bl	8007c3c <__swsetup_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0cb      	beq.n	8007bc0 <__swbuf_r+0x28>
 8007c28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c2c:	e7ea      	b.n	8007c04 <__swbuf_r+0x6c>
 8007c2e:	bf00      	nop
 8007c30:	08009d68 	.word	0x08009d68
 8007c34:	08009d88 	.word	0x08009d88
 8007c38:	08009d48 	.word	0x08009d48

08007c3c <__swsetup_r>:
 8007c3c:	4b32      	ldr	r3, [pc, #200]	; (8007d08 <__swsetup_r+0xcc>)
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	681d      	ldr	r5, [r3, #0]
 8007c42:	4606      	mov	r6, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	b125      	cbz	r5, 8007c52 <__swsetup_r+0x16>
 8007c48:	69ab      	ldr	r3, [r5, #24]
 8007c4a:	b913      	cbnz	r3, 8007c52 <__swsetup_r+0x16>
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f000 fff5 	bl	8008c3c <__sinit>
 8007c52:	4b2e      	ldr	r3, [pc, #184]	; (8007d0c <__swsetup_r+0xd0>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d10f      	bne.n	8007c78 <__swsetup_r+0x3c>
 8007c58:	686c      	ldr	r4, [r5, #4]
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c60:	0719      	lsls	r1, r3, #28
 8007c62:	d42c      	bmi.n	8007cbe <__swsetup_r+0x82>
 8007c64:	06dd      	lsls	r5, r3, #27
 8007c66:	d411      	bmi.n	8007c8c <__swsetup_r+0x50>
 8007c68:	2309      	movs	r3, #9
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c76:	e03e      	b.n	8007cf6 <__swsetup_r+0xba>
 8007c78:	4b25      	ldr	r3, [pc, #148]	; (8007d10 <__swsetup_r+0xd4>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d101      	bne.n	8007c82 <__swsetup_r+0x46>
 8007c7e:	68ac      	ldr	r4, [r5, #8]
 8007c80:	e7eb      	b.n	8007c5a <__swsetup_r+0x1e>
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <__swsetup_r+0xd8>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	bf08      	it	eq
 8007c88:	68ec      	ldreq	r4, [r5, #12]
 8007c8a:	e7e6      	b.n	8007c5a <__swsetup_r+0x1e>
 8007c8c:	0758      	lsls	r0, r3, #29
 8007c8e:	d512      	bpl.n	8007cb6 <__swsetup_r+0x7a>
 8007c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c92:	b141      	cbz	r1, 8007ca6 <__swsetup_r+0x6a>
 8007c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d002      	beq.n	8007ca2 <__swsetup_r+0x66>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff f985 	bl	8006fac <_free_r>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6063      	str	r3, [r4, #4]
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f043 0308 	orr.w	r3, r3, #8
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	b94b      	cbnz	r3, 8007cd6 <__swsetup_r+0x9a>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ccc:	d003      	beq.n	8007cd6 <__swsetup_r+0x9a>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f001 f87d 	bl	8008dd0 <__smakebuf_r>
 8007cd6:	89a0      	ldrh	r0, [r4, #12]
 8007cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cdc:	f010 0301 	ands.w	r3, r0, #1
 8007ce0:	d00a      	beq.n	8007cf8 <__swsetup_r+0xbc>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60a3      	str	r3, [r4, #8]
 8007ce6:	6963      	ldr	r3, [r4, #20]
 8007ce8:	425b      	negs	r3, r3
 8007cea:	61a3      	str	r3, [r4, #24]
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	b943      	cbnz	r3, 8007d02 <__swsetup_r+0xc6>
 8007cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cf4:	d1ba      	bne.n	8007c6c <__swsetup_r+0x30>
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	0781      	lsls	r1, r0, #30
 8007cfa:	bf58      	it	pl
 8007cfc:	6963      	ldrpl	r3, [r4, #20]
 8007cfe:	60a3      	str	r3, [r4, #8]
 8007d00:	e7f4      	b.n	8007cec <__swsetup_r+0xb0>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e7f7      	b.n	8007cf6 <__swsetup_r+0xba>
 8007d06:	bf00      	nop
 8007d08:	20000024 	.word	0x20000024
 8007d0c:	08009d68 	.word	0x08009d68
 8007d10:	08009d88 	.word	0x08009d88
 8007d14:	08009d48 	.word	0x08009d48

08007d18 <quorem>:
 8007d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	6903      	ldr	r3, [r0, #16]
 8007d1e:	690c      	ldr	r4, [r1, #16]
 8007d20:	42a3      	cmp	r3, r4
 8007d22:	4607      	mov	r7, r0
 8007d24:	f2c0 8081 	blt.w	8007e2a <quorem+0x112>
 8007d28:	3c01      	subs	r4, #1
 8007d2a:	f101 0814 	add.w	r8, r1, #20
 8007d2e:	f100 0514 	add.w	r5, r0, #20
 8007d32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d40:	3301      	adds	r3, #1
 8007d42:	429a      	cmp	r2, r3
 8007d44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d50:	d331      	bcc.n	8007db6 <quorem+0x9e>
 8007d52:	f04f 0e00 	mov.w	lr, #0
 8007d56:	4640      	mov	r0, r8
 8007d58:	46ac      	mov	ip, r5
 8007d5a:	46f2      	mov	sl, lr
 8007d5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d60:	b293      	uxth	r3, r2
 8007d62:	fb06 e303 	mla	r3, r6, r3, lr
 8007d66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d70:	0c12      	lsrs	r2, r2, #16
 8007d72:	f8dc a000 	ldr.w	sl, [ip]
 8007d76:	fb06 e202 	mla	r2, r6, r2, lr
 8007d7a:	fa13 f38a 	uxtah	r3, r3, sl
 8007d7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d82:	fa1f fa82 	uxth.w	sl, r2
 8007d86:	f8dc 2000 	ldr.w	r2, [ip]
 8007d8a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d98:	4581      	cmp	r9, r0
 8007d9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007d9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007da2:	d2db      	bcs.n	8007d5c <quorem+0x44>
 8007da4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007da8:	b92b      	cbnz	r3, 8007db6 <quorem+0x9e>
 8007daa:	9b01      	ldr	r3, [sp, #4]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	429d      	cmp	r5, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	d32e      	bcc.n	8007e12 <quorem+0xfa>
 8007db4:	613c      	str	r4, [r7, #16]
 8007db6:	4638      	mov	r0, r7
 8007db8:	f001 fae2 	bl	8009380 <__mcmp>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	db24      	blt.n	8007e0a <quorem+0xf2>
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f04f 0c00 	mov.w	ip, #0
 8007dc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dcc:	f8d0 e000 	ldr.w	lr, [r0]
 8007dd0:	b293      	uxth	r3, r2
 8007dd2:	ebac 0303 	sub.w	r3, ip, r3
 8007dd6:	0c12      	lsrs	r2, r2, #16
 8007dd8:	fa13 f38e 	uxtah	r3, r3, lr
 8007ddc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007de0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dea:	45c1      	cmp	r9, r8
 8007dec:	f840 3b04 	str.w	r3, [r0], #4
 8007df0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007df4:	d2e8      	bcs.n	8007dc8 <quorem+0xb0>
 8007df6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dfe:	b922      	cbnz	r2, 8007e0a <quorem+0xf2>
 8007e00:	3b04      	subs	r3, #4
 8007e02:	429d      	cmp	r5, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	d30a      	bcc.n	8007e1e <quorem+0x106>
 8007e08:	613c      	str	r4, [r7, #16]
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	b003      	add	sp, #12
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	3b04      	subs	r3, #4
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	d1cc      	bne.n	8007db4 <quorem+0x9c>
 8007e1a:	3c01      	subs	r4, #1
 8007e1c:	e7c7      	b.n	8007dae <quorem+0x96>
 8007e1e:	6812      	ldr	r2, [r2, #0]
 8007e20:	3b04      	subs	r3, #4
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	d1f0      	bne.n	8007e08 <quorem+0xf0>
 8007e26:	3c01      	subs	r4, #1
 8007e28:	e7eb      	b.n	8007e02 <quorem+0xea>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e7ee      	b.n	8007e0c <quorem+0xf4>
	...

08007e30 <_dtoa_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	ed2d 8b02 	vpush	{d8}
 8007e38:	ec57 6b10 	vmov	r6, r7, d0
 8007e3c:	b095      	sub	sp, #84	; 0x54
 8007e3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e44:	9105      	str	r1, [sp, #20]
 8007e46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e50:	b975      	cbnz	r5, 8007e70 <_dtoa_r+0x40>
 8007e52:	2010      	movs	r0, #16
 8007e54:	f7ff f89a 	bl	8006f8c <malloc>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e5c:	b920      	cbnz	r0, 8007e68 <_dtoa_r+0x38>
 8007e5e:	4bb2      	ldr	r3, [pc, #712]	; (8008128 <_dtoa_r+0x2f8>)
 8007e60:	21ea      	movs	r1, #234	; 0xea
 8007e62:	48b2      	ldr	r0, [pc, #712]	; (800812c <_dtoa_r+0x2fc>)
 8007e64:	f001 fd4a 	bl	80098fc <__assert_func>
 8007e68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e6c:	6005      	str	r5, [r0, #0]
 8007e6e:	60c5      	str	r5, [r0, #12]
 8007e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e72:	6819      	ldr	r1, [r3, #0]
 8007e74:	b151      	cbz	r1, 8007e8c <_dtoa_r+0x5c>
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	604a      	str	r2, [r1, #4]
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4093      	lsls	r3, r2
 8007e7e:	608b      	str	r3, [r1, #8]
 8007e80:	4620      	mov	r0, r4
 8007e82:	f001 f83f 	bl	8008f04 <_Bfree>
 8007e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	1e3b      	subs	r3, r7, #0
 8007e8e:	bfb9      	ittee	lt
 8007e90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	9303      	strlt	r3, [sp, #12]
 8007e96:	2300      	movge	r3, #0
 8007e98:	f8c8 3000 	strge.w	r3, [r8]
 8007e9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ea0:	4ba3      	ldr	r3, [pc, #652]	; (8008130 <_dtoa_r+0x300>)
 8007ea2:	bfbc      	itt	lt
 8007ea4:	2201      	movlt	r2, #1
 8007ea6:	f8c8 2000 	strlt.w	r2, [r8]
 8007eaa:	ea33 0309 	bics.w	r3, r3, r9
 8007eae:	d11b      	bne.n	8007ee8 <_dtoa_r+0xb8>
 8007eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ebc:	4333      	orrs	r3, r6
 8007ebe:	f000 857a 	beq.w	80089b6 <_dtoa_r+0xb86>
 8007ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ec4:	b963      	cbnz	r3, 8007ee0 <_dtoa_r+0xb0>
 8007ec6:	4b9b      	ldr	r3, [pc, #620]	; (8008134 <_dtoa_r+0x304>)
 8007ec8:	e024      	b.n	8007f14 <_dtoa_r+0xe4>
 8007eca:	4b9b      	ldr	r3, [pc, #620]	; (8008138 <_dtoa_r+0x308>)
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	9800      	ldr	r0, [sp, #0]
 8007ed6:	b015      	add	sp, #84	; 0x54
 8007ed8:	ecbd 8b02 	vpop	{d8}
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	4b94      	ldr	r3, [pc, #592]	; (8008134 <_dtoa_r+0x304>)
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	e7f3      	b.n	8007ed0 <_dtoa_r+0xa0>
 8007ee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eec:	2200      	movs	r2, #0
 8007eee:	ec51 0b17 	vmov	r0, r1, d7
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ef8:	f7f8 fdbe 	bl	8000a78 <__aeabi_dcmpeq>
 8007efc:	4680      	mov	r8, r0
 8007efe:	b158      	cbz	r0, 8007f18 <_dtoa_r+0xe8>
 8007f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f02:	2301      	movs	r3, #1
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8551 	beq.w	80089b0 <_dtoa_r+0xb80>
 8007f0e:	488b      	ldr	r0, [pc, #556]	; (800813c <_dtoa_r+0x30c>)
 8007f10:	6018      	str	r0, [r3, #0]
 8007f12:	1e43      	subs	r3, r0, #1
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	e7dd      	b.n	8007ed4 <_dtoa_r+0xa4>
 8007f18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f1c:	aa12      	add	r2, sp, #72	; 0x48
 8007f1e:	a913      	add	r1, sp, #76	; 0x4c
 8007f20:	4620      	mov	r0, r4
 8007f22:	f001 fad1 	bl	80094c8 <__d2b>
 8007f26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f2a:	4683      	mov	fp, r0
 8007f2c:	2d00      	cmp	r5, #0
 8007f2e:	d07c      	beq.n	800802a <_dtoa_r+0x1fa>
 8007f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007f3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f4a:	4b7d      	ldr	r3, [pc, #500]	; (8008140 <_dtoa_r+0x310>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 f971 	bl	8000238 <__aeabi_dsub>
 8007f56:	a36e      	add	r3, pc, #440	; (adr r3, 8008110 <_dtoa_r+0x2e0>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 fb24 	bl	80005a8 <__aeabi_dmul>
 8007f60:	a36d      	add	r3, pc, #436	; (adr r3, 8008118 <_dtoa_r+0x2e8>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 f969 	bl	800023c <__adddf3>
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	460f      	mov	r7, r1
 8007f70:	f7f8 fab0 	bl	80004d4 <__aeabi_i2d>
 8007f74:	a36a      	add	r3, pc, #424	; (adr r3, 8008120 <_dtoa_r+0x2f0>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 fb15 	bl	80005a8 <__aeabi_dmul>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 f959 	bl	800023c <__adddf3>
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	f7f8 fdbb 	bl	8000b08 <__aeabi_d2iz>
 8007f92:	2200      	movs	r2, #0
 8007f94:	4682      	mov	sl, r0
 8007f96:	2300      	movs	r3, #0
 8007f98:	4630      	mov	r0, r6
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	f7f8 fd76 	bl	8000a8c <__aeabi_dcmplt>
 8007fa0:	b148      	cbz	r0, 8007fb6 <_dtoa_r+0x186>
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	f7f8 fa96 	bl	80004d4 <__aeabi_i2d>
 8007fa8:	4632      	mov	r2, r6
 8007faa:	463b      	mov	r3, r7
 8007fac:	f7f8 fd64 	bl	8000a78 <__aeabi_dcmpeq>
 8007fb0:	b908      	cbnz	r0, 8007fb6 <_dtoa_r+0x186>
 8007fb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007fb6:	f1ba 0f16 	cmp.w	sl, #22
 8007fba:	d854      	bhi.n	8008066 <_dtoa_r+0x236>
 8007fbc:	4b61      	ldr	r3, [pc, #388]	; (8008144 <_dtoa_r+0x314>)
 8007fbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fca:	f7f8 fd5f 	bl	8000a8c <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d04b      	beq.n	800806a <_dtoa_r+0x23a>
 8007fd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	930e      	str	r3, [sp, #56]	; 0x38
 8007fda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fdc:	1b5d      	subs	r5, r3, r5
 8007fde:	1e6b      	subs	r3, r5, #1
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	bf43      	ittte	mi
 8007fe4:	2300      	movmi	r3, #0
 8007fe6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007fea:	9304      	strmi	r3, [sp, #16]
 8007fec:	f04f 0800 	movpl.w	r8, #0
 8007ff0:	f1ba 0f00 	cmp.w	sl, #0
 8007ff4:	db3b      	blt.n	800806e <_dtoa_r+0x23e>
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ffc:	4453      	add	r3, sl
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	2300      	movs	r3, #0
 8008002:	9306      	str	r3, [sp, #24]
 8008004:	9b05      	ldr	r3, [sp, #20]
 8008006:	2b09      	cmp	r3, #9
 8008008:	d869      	bhi.n	80080de <_dtoa_r+0x2ae>
 800800a:	2b05      	cmp	r3, #5
 800800c:	bfc4      	itt	gt
 800800e:	3b04      	subgt	r3, #4
 8008010:	9305      	strgt	r3, [sp, #20]
 8008012:	9b05      	ldr	r3, [sp, #20]
 8008014:	f1a3 0302 	sub.w	r3, r3, #2
 8008018:	bfcc      	ite	gt
 800801a:	2500      	movgt	r5, #0
 800801c:	2501      	movle	r5, #1
 800801e:	2b03      	cmp	r3, #3
 8008020:	d869      	bhi.n	80080f6 <_dtoa_r+0x2c6>
 8008022:	e8df f003 	tbb	[pc, r3]
 8008026:	4e2c      	.short	0x4e2c
 8008028:	5a4c      	.short	0x5a4c
 800802a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800802e:	441d      	add	r5, r3
 8008030:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008034:	2b20      	cmp	r3, #32
 8008036:	bfc1      	itttt	gt
 8008038:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800803c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008040:	fa09 f303 	lslgt.w	r3, r9, r3
 8008044:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008048:	bfda      	itte	le
 800804a:	f1c3 0320 	rsble	r3, r3, #32
 800804e:	fa06 f003 	lslle.w	r0, r6, r3
 8008052:	4318      	orrgt	r0, r3
 8008054:	f7f8 fa2e 	bl	80004b4 <__aeabi_ui2d>
 8008058:	2301      	movs	r3, #1
 800805a:	4606      	mov	r6, r0
 800805c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008060:	3d01      	subs	r5, #1
 8008062:	9310      	str	r3, [sp, #64]	; 0x40
 8008064:	e771      	b.n	8007f4a <_dtoa_r+0x11a>
 8008066:	2301      	movs	r3, #1
 8008068:	e7b6      	b.n	8007fd8 <_dtoa_r+0x1a8>
 800806a:	900e      	str	r0, [sp, #56]	; 0x38
 800806c:	e7b5      	b.n	8007fda <_dtoa_r+0x1aa>
 800806e:	f1ca 0300 	rsb	r3, sl, #0
 8008072:	9306      	str	r3, [sp, #24]
 8008074:	2300      	movs	r3, #0
 8008076:	eba8 080a 	sub.w	r8, r8, sl
 800807a:	930d      	str	r3, [sp, #52]	; 0x34
 800807c:	e7c2      	b.n	8008004 <_dtoa_r+0x1d4>
 800807e:	2300      	movs	r3, #0
 8008080:	9308      	str	r3, [sp, #32]
 8008082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	dc39      	bgt.n	80080fc <_dtoa_r+0x2cc>
 8008088:	f04f 0901 	mov.w	r9, #1
 800808c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008090:	464b      	mov	r3, r9
 8008092:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008096:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008098:	2200      	movs	r2, #0
 800809a:	6042      	str	r2, [r0, #4]
 800809c:	2204      	movs	r2, #4
 800809e:	f102 0614 	add.w	r6, r2, #20
 80080a2:	429e      	cmp	r6, r3
 80080a4:	6841      	ldr	r1, [r0, #4]
 80080a6:	d92f      	bls.n	8008108 <_dtoa_r+0x2d8>
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 feeb 	bl	8008e84 <_Balloc>
 80080ae:	9000      	str	r0, [sp, #0]
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d14b      	bne.n	800814c <_dtoa_r+0x31c>
 80080b4:	4b24      	ldr	r3, [pc, #144]	; (8008148 <_dtoa_r+0x318>)
 80080b6:	4602      	mov	r2, r0
 80080b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080bc:	e6d1      	b.n	8007e62 <_dtoa_r+0x32>
 80080be:	2301      	movs	r3, #1
 80080c0:	e7de      	b.n	8008080 <_dtoa_r+0x250>
 80080c2:	2300      	movs	r3, #0
 80080c4:	9308      	str	r3, [sp, #32]
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	eb0a 0903 	add.w	r9, sl, r3
 80080cc:	f109 0301 	add.w	r3, r9, #1
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	bfb8      	it	lt
 80080d6:	2301      	movlt	r3, #1
 80080d8:	e7dd      	b.n	8008096 <_dtoa_r+0x266>
 80080da:	2301      	movs	r3, #1
 80080dc:	e7f2      	b.n	80080c4 <_dtoa_r+0x294>
 80080de:	2501      	movs	r5, #1
 80080e0:	2300      	movs	r3, #0
 80080e2:	9305      	str	r3, [sp, #20]
 80080e4:	9508      	str	r5, [sp, #32]
 80080e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80080f0:	2312      	movs	r3, #18
 80080f2:	9209      	str	r2, [sp, #36]	; 0x24
 80080f4:	e7cf      	b.n	8008096 <_dtoa_r+0x266>
 80080f6:	2301      	movs	r3, #1
 80080f8:	9308      	str	r3, [sp, #32]
 80080fa:	e7f4      	b.n	80080e6 <_dtoa_r+0x2b6>
 80080fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008100:	f8cd 9004 	str.w	r9, [sp, #4]
 8008104:	464b      	mov	r3, r9
 8008106:	e7c6      	b.n	8008096 <_dtoa_r+0x266>
 8008108:	3101      	adds	r1, #1
 800810a:	6041      	str	r1, [r0, #4]
 800810c:	0052      	lsls	r2, r2, #1
 800810e:	e7c6      	b.n	800809e <_dtoa_r+0x26e>
 8008110:	636f4361 	.word	0x636f4361
 8008114:	3fd287a7 	.word	0x3fd287a7
 8008118:	8b60c8b3 	.word	0x8b60c8b3
 800811c:	3fc68a28 	.word	0x3fc68a28
 8008120:	509f79fb 	.word	0x509f79fb
 8008124:	3fd34413 	.word	0x3fd34413
 8008128:	08009cc1 	.word	0x08009cc1
 800812c:	08009cd8 	.word	0x08009cd8
 8008130:	7ff00000 	.word	0x7ff00000
 8008134:	08009cbd 	.word	0x08009cbd
 8008138:	08009cb4 	.word	0x08009cb4
 800813c:	08009c91 	.word	0x08009c91
 8008140:	3ff80000 	.word	0x3ff80000
 8008144:	08009e30 	.word	0x08009e30
 8008148:	08009d37 	.word	0x08009d37
 800814c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800814e:	9a00      	ldr	r2, [sp, #0]
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	2b0e      	cmp	r3, #14
 8008156:	f200 80ad 	bhi.w	80082b4 <_dtoa_r+0x484>
 800815a:	2d00      	cmp	r5, #0
 800815c:	f000 80aa 	beq.w	80082b4 <_dtoa_r+0x484>
 8008160:	f1ba 0f00 	cmp.w	sl, #0
 8008164:	dd36      	ble.n	80081d4 <_dtoa_r+0x3a4>
 8008166:	4ac3      	ldr	r2, [pc, #780]	; (8008474 <_dtoa_r+0x644>)
 8008168:	f00a 030f 	and.w	r3, sl, #15
 800816c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008170:	ed93 7b00 	vldr	d7, [r3]
 8008174:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008178:	ea4f 172a 	mov.w	r7, sl, asr #4
 800817c:	eeb0 8a47 	vmov.f32	s16, s14
 8008180:	eef0 8a67 	vmov.f32	s17, s15
 8008184:	d016      	beq.n	80081b4 <_dtoa_r+0x384>
 8008186:	4bbc      	ldr	r3, [pc, #752]	; (8008478 <_dtoa_r+0x648>)
 8008188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800818c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008190:	f7f8 fb34 	bl	80007fc <__aeabi_ddiv>
 8008194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008198:	f007 070f 	and.w	r7, r7, #15
 800819c:	2503      	movs	r5, #3
 800819e:	4eb6      	ldr	r6, [pc, #728]	; (8008478 <_dtoa_r+0x648>)
 80081a0:	b957      	cbnz	r7, 80081b8 <_dtoa_r+0x388>
 80081a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a6:	ec53 2b18 	vmov	r2, r3, d8
 80081aa:	f7f8 fb27 	bl	80007fc <__aeabi_ddiv>
 80081ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b2:	e029      	b.n	8008208 <_dtoa_r+0x3d8>
 80081b4:	2502      	movs	r5, #2
 80081b6:	e7f2      	b.n	800819e <_dtoa_r+0x36e>
 80081b8:	07f9      	lsls	r1, r7, #31
 80081ba:	d508      	bpl.n	80081ce <_dtoa_r+0x39e>
 80081bc:	ec51 0b18 	vmov	r0, r1, d8
 80081c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081c4:	f7f8 f9f0 	bl	80005a8 <__aeabi_dmul>
 80081c8:	ec41 0b18 	vmov	d8, r0, r1
 80081cc:	3501      	adds	r5, #1
 80081ce:	107f      	asrs	r7, r7, #1
 80081d0:	3608      	adds	r6, #8
 80081d2:	e7e5      	b.n	80081a0 <_dtoa_r+0x370>
 80081d4:	f000 80a6 	beq.w	8008324 <_dtoa_r+0x4f4>
 80081d8:	f1ca 0600 	rsb	r6, sl, #0
 80081dc:	4ba5      	ldr	r3, [pc, #660]	; (8008474 <_dtoa_r+0x644>)
 80081de:	4fa6      	ldr	r7, [pc, #664]	; (8008478 <_dtoa_r+0x648>)
 80081e0:	f006 020f 	and.w	r2, r6, #15
 80081e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081f0:	f7f8 f9da 	bl	80005a8 <__aeabi_dmul>
 80081f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f8:	1136      	asrs	r6, r6, #4
 80081fa:	2300      	movs	r3, #0
 80081fc:	2502      	movs	r5, #2
 80081fe:	2e00      	cmp	r6, #0
 8008200:	f040 8085 	bne.w	800830e <_dtoa_r+0x4de>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1d2      	bne.n	80081ae <_dtoa_r+0x37e>
 8008208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 808c 	beq.w	8008328 <_dtoa_r+0x4f8>
 8008210:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008214:	4b99      	ldr	r3, [pc, #612]	; (800847c <_dtoa_r+0x64c>)
 8008216:	2200      	movs	r2, #0
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 fc36 	bl	8000a8c <__aeabi_dcmplt>
 8008220:	2800      	cmp	r0, #0
 8008222:	f000 8081 	beq.w	8008328 <_dtoa_r+0x4f8>
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d07d      	beq.n	8008328 <_dtoa_r+0x4f8>
 800822c:	f1b9 0f00 	cmp.w	r9, #0
 8008230:	dd3c      	ble.n	80082ac <_dtoa_r+0x47c>
 8008232:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	2200      	movs	r2, #0
 800823a:	4b91      	ldr	r3, [pc, #580]	; (8008480 <_dtoa_r+0x650>)
 800823c:	4630      	mov	r0, r6
 800823e:	4639      	mov	r1, r7
 8008240:	f7f8 f9b2 	bl	80005a8 <__aeabi_dmul>
 8008244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008248:	3501      	adds	r5, #1
 800824a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800824e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008252:	4628      	mov	r0, r5
 8008254:	f7f8 f93e 	bl	80004d4 <__aeabi_i2d>
 8008258:	4632      	mov	r2, r6
 800825a:	463b      	mov	r3, r7
 800825c:	f7f8 f9a4 	bl	80005a8 <__aeabi_dmul>
 8008260:	4b88      	ldr	r3, [pc, #544]	; (8008484 <_dtoa_r+0x654>)
 8008262:	2200      	movs	r2, #0
 8008264:	f7f7 ffea 	bl	800023c <__adddf3>
 8008268:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800826c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008274:	2b00      	cmp	r3, #0
 8008276:	d15c      	bne.n	8008332 <_dtoa_r+0x502>
 8008278:	4b83      	ldr	r3, [pc, #524]	; (8008488 <_dtoa_r+0x658>)
 800827a:	2200      	movs	r2, #0
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f7 ffda 	bl	8000238 <__aeabi_dsub>
 8008284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008288:	4606      	mov	r6, r0
 800828a:	460f      	mov	r7, r1
 800828c:	f7f8 fc1c 	bl	8000ac8 <__aeabi_dcmpgt>
 8008290:	2800      	cmp	r0, #0
 8008292:	f040 8296 	bne.w	80087c2 <_dtoa_r+0x992>
 8008296:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800829a:	4630      	mov	r0, r6
 800829c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 fbf3 	bl	8000a8c <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f040 8288 	bne.w	80087bc <_dtoa_r+0x98c>
 80082ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f2c0 8158 	blt.w	800856c <_dtoa_r+0x73c>
 80082bc:	f1ba 0f0e 	cmp.w	sl, #14
 80082c0:	f300 8154 	bgt.w	800856c <_dtoa_r+0x73c>
 80082c4:	4b6b      	ldr	r3, [pc, #428]	; (8008474 <_dtoa_r+0x644>)
 80082c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f280 80e3 	bge.w	800849c <_dtoa_r+0x66c>
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f300 80df 	bgt.w	800849c <_dtoa_r+0x66c>
 80082de:	f040 826d 	bne.w	80087bc <_dtoa_r+0x98c>
 80082e2:	4b69      	ldr	r3, [pc, #420]	; (8008488 <_dtoa_r+0x658>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	4640      	mov	r0, r8
 80082e8:	4649      	mov	r1, r9
 80082ea:	f7f8 f95d 	bl	80005a8 <__aeabi_dmul>
 80082ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f2:	f7f8 fbdf 	bl	8000ab4 <__aeabi_dcmpge>
 80082f6:	9e01      	ldr	r6, [sp, #4]
 80082f8:	4637      	mov	r7, r6
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f040 8243 	bne.w	8008786 <_dtoa_r+0x956>
 8008300:	9d00      	ldr	r5, [sp, #0]
 8008302:	2331      	movs	r3, #49	; 0x31
 8008304:	f805 3b01 	strb.w	r3, [r5], #1
 8008308:	f10a 0a01 	add.w	sl, sl, #1
 800830c:	e23f      	b.n	800878e <_dtoa_r+0x95e>
 800830e:	07f2      	lsls	r2, r6, #31
 8008310:	d505      	bpl.n	800831e <_dtoa_r+0x4ee>
 8008312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008316:	f7f8 f947 	bl	80005a8 <__aeabi_dmul>
 800831a:	3501      	adds	r5, #1
 800831c:	2301      	movs	r3, #1
 800831e:	1076      	asrs	r6, r6, #1
 8008320:	3708      	adds	r7, #8
 8008322:	e76c      	b.n	80081fe <_dtoa_r+0x3ce>
 8008324:	2502      	movs	r5, #2
 8008326:	e76f      	b.n	8008208 <_dtoa_r+0x3d8>
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	f8cd a01c 	str.w	sl, [sp, #28]
 800832e:	930c      	str	r3, [sp, #48]	; 0x30
 8008330:	e78d      	b.n	800824e <_dtoa_r+0x41e>
 8008332:	9900      	ldr	r1, [sp, #0]
 8008334:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008338:	4b4e      	ldr	r3, [pc, #312]	; (8008474 <_dtoa_r+0x644>)
 800833a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800833e:	4401      	add	r1, r0
 8008340:	9102      	str	r1, [sp, #8]
 8008342:	9908      	ldr	r1, [sp, #32]
 8008344:	eeb0 8a47 	vmov.f32	s16, s14
 8008348:	eef0 8a67 	vmov.f32	s17, s15
 800834c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008350:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008354:	2900      	cmp	r1, #0
 8008356:	d045      	beq.n	80083e4 <_dtoa_r+0x5b4>
 8008358:	494c      	ldr	r1, [pc, #304]	; (800848c <_dtoa_r+0x65c>)
 800835a:	2000      	movs	r0, #0
 800835c:	f7f8 fa4e 	bl	80007fc <__aeabi_ddiv>
 8008360:	ec53 2b18 	vmov	r2, r3, d8
 8008364:	f7f7 ff68 	bl	8000238 <__aeabi_dsub>
 8008368:	9d00      	ldr	r5, [sp, #0]
 800836a:	ec41 0b18 	vmov	d8, r0, r1
 800836e:	4639      	mov	r1, r7
 8008370:	4630      	mov	r0, r6
 8008372:	f7f8 fbc9 	bl	8000b08 <__aeabi_d2iz>
 8008376:	900c      	str	r0, [sp, #48]	; 0x30
 8008378:	f7f8 f8ac 	bl	80004d4 <__aeabi_i2d>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4630      	mov	r0, r6
 8008382:	4639      	mov	r1, r7
 8008384:	f7f7 ff58 	bl	8000238 <__aeabi_dsub>
 8008388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800838a:	3330      	adds	r3, #48	; 0x30
 800838c:	f805 3b01 	strb.w	r3, [r5], #1
 8008390:	ec53 2b18 	vmov	r2, r3, d8
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	f7f8 fb78 	bl	8000a8c <__aeabi_dcmplt>
 800839c:	2800      	cmp	r0, #0
 800839e:	d165      	bne.n	800846c <_dtoa_r+0x63c>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	4935      	ldr	r1, [pc, #212]	; (800847c <_dtoa_r+0x64c>)
 80083a6:	2000      	movs	r0, #0
 80083a8:	f7f7 ff46 	bl	8000238 <__aeabi_dsub>
 80083ac:	ec53 2b18 	vmov	r2, r3, d8
 80083b0:	f7f8 fb6c 	bl	8000a8c <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f040 80b9 	bne.w	800852c <_dtoa_r+0x6fc>
 80083ba:	9b02      	ldr	r3, [sp, #8]
 80083bc:	429d      	cmp	r5, r3
 80083be:	f43f af75 	beq.w	80082ac <_dtoa_r+0x47c>
 80083c2:	4b2f      	ldr	r3, [pc, #188]	; (8008480 <_dtoa_r+0x650>)
 80083c4:	ec51 0b18 	vmov	r0, r1, d8
 80083c8:	2200      	movs	r2, #0
 80083ca:	f7f8 f8ed 	bl	80005a8 <__aeabi_dmul>
 80083ce:	4b2c      	ldr	r3, [pc, #176]	; (8008480 <_dtoa_r+0x650>)
 80083d0:	ec41 0b18 	vmov	d8, r0, r1
 80083d4:	2200      	movs	r2, #0
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	f7f8 f8e5 	bl	80005a8 <__aeabi_dmul>
 80083de:	4606      	mov	r6, r0
 80083e0:	460f      	mov	r7, r1
 80083e2:	e7c4      	b.n	800836e <_dtoa_r+0x53e>
 80083e4:	ec51 0b17 	vmov	r0, r1, d7
 80083e8:	f7f8 f8de 	bl	80005a8 <__aeabi_dmul>
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	9d00      	ldr	r5, [sp, #0]
 80083f0:	930c      	str	r3, [sp, #48]	; 0x30
 80083f2:	ec41 0b18 	vmov	d8, r0, r1
 80083f6:	4639      	mov	r1, r7
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7f8 fb85 	bl	8000b08 <__aeabi_d2iz>
 80083fe:	9011      	str	r0, [sp, #68]	; 0x44
 8008400:	f7f8 f868 	bl	80004d4 <__aeabi_i2d>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f7 ff14 	bl	8000238 <__aeabi_dsub>
 8008410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008412:	3330      	adds	r3, #48	; 0x30
 8008414:	f805 3b01 	strb.w	r3, [r5], #1
 8008418:	9b02      	ldr	r3, [sp, #8]
 800841a:	429d      	cmp	r5, r3
 800841c:	4606      	mov	r6, r0
 800841e:	460f      	mov	r7, r1
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	d134      	bne.n	8008490 <_dtoa_r+0x660>
 8008426:	4b19      	ldr	r3, [pc, #100]	; (800848c <_dtoa_r+0x65c>)
 8008428:	ec51 0b18 	vmov	r0, r1, d8
 800842c:	f7f7 ff06 	bl	800023c <__adddf3>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4630      	mov	r0, r6
 8008436:	4639      	mov	r1, r7
 8008438:	f7f8 fb46 	bl	8000ac8 <__aeabi_dcmpgt>
 800843c:	2800      	cmp	r0, #0
 800843e:	d175      	bne.n	800852c <_dtoa_r+0x6fc>
 8008440:	ec53 2b18 	vmov	r2, r3, d8
 8008444:	4911      	ldr	r1, [pc, #68]	; (800848c <_dtoa_r+0x65c>)
 8008446:	2000      	movs	r0, #0
 8008448:	f7f7 fef6 	bl	8000238 <__aeabi_dsub>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	f7f8 fb1a 	bl	8000a8c <__aeabi_dcmplt>
 8008458:	2800      	cmp	r0, #0
 800845a:	f43f af27 	beq.w	80082ac <_dtoa_r+0x47c>
 800845e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008460:	1e6b      	subs	r3, r5, #1
 8008462:	930c      	str	r3, [sp, #48]	; 0x30
 8008464:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008468:	2b30      	cmp	r3, #48	; 0x30
 800846a:	d0f8      	beq.n	800845e <_dtoa_r+0x62e>
 800846c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008470:	e04a      	b.n	8008508 <_dtoa_r+0x6d8>
 8008472:	bf00      	nop
 8008474:	08009e30 	.word	0x08009e30
 8008478:	08009e08 	.word	0x08009e08
 800847c:	3ff00000 	.word	0x3ff00000
 8008480:	40240000 	.word	0x40240000
 8008484:	401c0000 	.word	0x401c0000
 8008488:	40140000 	.word	0x40140000
 800848c:	3fe00000 	.word	0x3fe00000
 8008490:	4baf      	ldr	r3, [pc, #700]	; (8008750 <_dtoa_r+0x920>)
 8008492:	f7f8 f889 	bl	80005a8 <__aeabi_dmul>
 8008496:	4606      	mov	r6, r0
 8008498:	460f      	mov	r7, r1
 800849a:	e7ac      	b.n	80083f6 <_dtoa_r+0x5c6>
 800849c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084a0:	9d00      	ldr	r5, [sp, #0]
 80084a2:	4642      	mov	r2, r8
 80084a4:	464b      	mov	r3, r9
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f8 f9a7 	bl	80007fc <__aeabi_ddiv>
 80084ae:	f7f8 fb2b 	bl	8000b08 <__aeabi_d2iz>
 80084b2:	9002      	str	r0, [sp, #8]
 80084b4:	f7f8 f80e 	bl	80004d4 <__aeabi_i2d>
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	f7f8 f874 	bl	80005a8 <__aeabi_dmul>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4630      	mov	r0, r6
 80084c6:	4639      	mov	r1, r7
 80084c8:	f7f7 feb6 	bl	8000238 <__aeabi_dsub>
 80084cc:	9e02      	ldr	r6, [sp, #8]
 80084ce:	9f01      	ldr	r7, [sp, #4]
 80084d0:	3630      	adds	r6, #48	; 0x30
 80084d2:	f805 6b01 	strb.w	r6, [r5], #1
 80084d6:	9e00      	ldr	r6, [sp, #0]
 80084d8:	1bae      	subs	r6, r5, r6
 80084da:	42b7      	cmp	r7, r6
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	d137      	bne.n	8008552 <_dtoa_r+0x722>
 80084e2:	f7f7 feab 	bl	800023c <__adddf3>
 80084e6:	4642      	mov	r2, r8
 80084e8:	464b      	mov	r3, r9
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	f7f8 faeb 	bl	8000ac8 <__aeabi_dcmpgt>
 80084f2:	b9c8      	cbnz	r0, 8008528 <_dtoa_r+0x6f8>
 80084f4:	4642      	mov	r2, r8
 80084f6:	464b      	mov	r3, r9
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f8 fabc 	bl	8000a78 <__aeabi_dcmpeq>
 8008500:	b110      	cbz	r0, 8008508 <_dtoa_r+0x6d8>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	07d9      	lsls	r1, r3, #31
 8008506:	d40f      	bmi.n	8008528 <_dtoa_r+0x6f8>
 8008508:	4620      	mov	r0, r4
 800850a:	4659      	mov	r1, fp
 800850c:	f000 fcfa 	bl	8008f04 <_Bfree>
 8008510:	2300      	movs	r3, #0
 8008512:	702b      	strb	r3, [r5, #0]
 8008514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008516:	f10a 0001 	add.w	r0, sl, #1
 800851a:	6018      	str	r0, [r3, #0]
 800851c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800851e:	2b00      	cmp	r3, #0
 8008520:	f43f acd8 	beq.w	8007ed4 <_dtoa_r+0xa4>
 8008524:	601d      	str	r5, [r3, #0]
 8008526:	e4d5      	b.n	8007ed4 <_dtoa_r+0xa4>
 8008528:	f8cd a01c 	str.w	sl, [sp, #28]
 800852c:	462b      	mov	r3, r5
 800852e:	461d      	mov	r5, r3
 8008530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008534:	2a39      	cmp	r2, #57	; 0x39
 8008536:	d108      	bne.n	800854a <_dtoa_r+0x71a>
 8008538:	9a00      	ldr	r2, [sp, #0]
 800853a:	429a      	cmp	r2, r3
 800853c:	d1f7      	bne.n	800852e <_dtoa_r+0x6fe>
 800853e:	9a07      	ldr	r2, [sp, #28]
 8008540:	9900      	ldr	r1, [sp, #0]
 8008542:	3201      	adds	r2, #1
 8008544:	9207      	str	r2, [sp, #28]
 8008546:	2230      	movs	r2, #48	; 0x30
 8008548:	700a      	strb	r2, [r1, #0]
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	3201      	adds	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e78c      	b.n	800846c <_dtoa_r+0x63c>
 8008552:	4b7f      	ldr	r3, [pc, #508]	; (8008750 <_dtoa_r+0x920>)
 8008554:	2200      	movs	r2, #0
 8008556:	f7f8 f827 	bl	80005a8 <__aeabi_dmul>
 800855a:	2200      	movs	r2, #0
 800855c:	2300      	movs	r3, #0
 800855e:	4606      	mov	r6, r0
 8008560:	460f      	mov	r7, r1
 8008562:	f7f8 fa89 	bl	8000a78 <__aeabi_dcmpeq>
 8008566:	2800      	cmp	r0, #0
 8008568:	d09b      	beq.n	80084a2 <_dtoa_r+0x672>
 800856a:	e7cd      	b.n	8008508 <_dtoa_r+0x6d8>
 800856c:	9a08      	ldr	r2, [sp, #32]
 800856e:	2a00      	cmp	r2, #0
 8008570:	f000 80c4 	beq.w	80086fc <_dtoa_r+0x8cc>
 8008574:	9a05      	ldr	r2, [sp, #20]
 8008576:	2a01      	cmp	r2, #1
 8008578:	f300 80a8 	bgt.w	80086cc <_dtoa_r+0x89c>
 800857c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800857e:	2a00      	cmp	r2, #0
 8008580:	f000 80a0 	beq.w	80086c4 <_dtoa_r+0x894>
 8008584:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008588:	9e06      	ldr	r6, [sp, #24]
 800858a:	4645      	mov	r5, r8
 800858c:	9a04      	ldr	r2, [sp, #16]
 800858e:	2101      	movs	r1, #1
 8008590:	441a      	add	r2, r3
 8008592:	4620      	mov	r0, r4
 8008594:	4498      	add	r8, r3
 8008596:	9204      	str	r2, [sp, #16]
 8008598:	f000 fd70 	bl	800907c <__i2b>
 800859c:	4607      	mov	r7, r0
 800859e:	2d00      	cmp	r5, #0
 80085a0:	dd0b      	ble.n	80085ba <_dtoa_r+0x78a>
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dd08      	ble.n	80085ba <_dtoa_r+0x78a>
 80085a8:	42ab      	cmp	r3, r5
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	bfa8      	it	ge
 80085ae:	462b      	movge	r3, r5
 80085b0:	eba8 0803 	sub.w	r8, r8, r3
 80085b4:	1aed      	subs	r5, r5, r3
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	9b06      	ldr	r3, [sp, #24]
 80085bc:	b1fb      	cbz	r3, 80085fe <_dtoa_r+0x7ce>
 80085be:	9b08      	ldr	r3, [sp, #32]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 809f 	beq.w	8008704 <_dtoa_r+0x8d4>
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	dd11      	ble.n	80085ee <_dtoa_r+0x7be>
 80085ca:	4639      	mov	r1, r7
 80085cc:	4632      	mov	r2, r6
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fe10 	bl	80091f4 <__pow5mult>
 80085d4:	465a      	mov	r2, fp
 80085d6:	4601      	mov	r1, r0
 80085d8:	4607      	mov	r7, r0
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 fd64 	bl	80090a8 <__multiply>
 80085e0:	4659      	mov	r1, fp
 80085e2:	9007      	str	r0, [sp, #28]
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fc8d 	bl	8008f04 <_Bfree>
 80085ea:	9b07      	ldr	r3, [sp, #28]
 80085ec:	469b      	mov	fp, r3
 80085ee:	9b06      	ldr	r3, [sp, #24]
 80085f0:	1b9a      	subs	r2, r3, r6
 80085f2:	d004      	beq.n	80085fe <_dtoa_r+0x7ce>
 80085f4:	4659      	mov	r1, fp
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fdfc 	bl	80091f4 <__pow5mult>
 80085fc:	4683      	mov	fp, r0
 80085fe:	2101      	movs	r1, #1
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fd3b 	bl	800907c <__i2b>
 8008606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008608:	2b00      	cmp	r3, #0
 800860a:	4606      	mov	r6, r0
 800860c:	dd7c      	ble.n	8008708 <_dtoa_r+0x8d8>
 800860e:	461a      	mov	r2, r3
 8008610:	4601      	mov	r1, r0
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fdee 	bl	80091f4 <__pow5mult>
 8008618:	9b05      	ldr	r3, [sp, #20]
 800861a:	2b01      	cmp	r3, #1
 800861c:	4606      	mov	r6, r0
 800861e:	dd76      	ble.n	800870e <_dtoa_r+0x8de>
 8008620:	2300      	movs	r3, #0
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	6933      	ldr	r3, [r6, #16]
 8008626:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800862a:	6918      	ldr	r0, [r3, #16]
 800862c:	f000 fcd6 	bl	8008fdc <__hi0bits>
 8008630:	f1c0 0020 	rsb	r0, r0, #32
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	4418      	add	r0, r3
 8008638:	f010 001f 	ands.w	r0, r0, #31
 800863c:	f000 8086 	beq.w	800874c <_dtoa_r+0x91c>
 8008640:	f1c0 0320 	rsb	r3, r0, #32
 8008644:	2b04      	cmp	r3, #4
 8008646:	dd7f      	ble.n	8008748 <_dtoa_r+0x918>
 8008648:	f1c0 001c 	rsb	r0, r0, #28
 800864c:	9b04      	ldr	r3, [sp, #16]
 800864e:	4403      	add	r3, r0
 8008650:	4480      	add	r8, r0
 8008652:	4405      	add	r5, r0
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	f1b8 0f00 	cmp.w	r8, #0
 800865a:	dd05      	ble.n	8008668 <_dtoa_r+0x838>
 800865c:	4659      	mov	r1, fp
 800865e:	4642      	mov	r2, r8
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fe21 	bl	80092a8 <__lshift>
 8008666:	4683      	mov	fp, r0
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	dd05      	ble.n	800867a <_dtoa_r+0x84a>
 800866e:	4631      	mov	r1, r6
 8008670:	461a      	mov	r2, r3
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fe18 	bl	80092a8 <__lshift>
 8008678:	4606      	mov	r6, r0
 800867a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d069      	beq.n	8008754 <_dtoa_r+0x924>
 8008680:	4631      	mov	r1, r6
 8008682:	4658      	mov	r0, fp
 8008684:	f000 fe7c 	bl	8009380 <__mcmp>
 8008688:	2800      	cmp	r0, #0
 800868a:	da63      	bge.n	8008754 <_dtoa_r+0x924>
 800868c:	2300      	movs	r3, #0
 800868e:	4659      	mov	r1, fp
 8008690:	220a      	movs	r2, #10
 8008692:	4620      	mov	r0, r4
 8008694:	f000 fc58 	bl	8008f48 <__multadd>
 8008698:	9b08      	ldr	r3, [sp, #32]
 800869a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800869e:	4683      	mov	fp, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 818f 	beq.w	80089c4 <_dtoa_r+0xb94>
 80086a6:	4639      	mov	r1, r7
 80086a8:	2300      	movs	r3, #0
 80086aa:	220a      	movs	r2, #10
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fc4b 	bl	8008f48 <__multadd>
 80086b2:	f1b9 0f00 	cmp.w	r9, #0
 80086b6:	4607      	mov	r7, r0
 80086b8:	f300 808e 	bgt.w	80087d8 <_dtoa_r+0x9a8>
 80086bc:	9b05      	ldr	r3, [sp, #20]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	dc50      	bgt.n	8008764 <_dtoa_r+0x934>
 80086c2:	e089      	b.n	80087d8 <_dtoa_r+0x9a8>
 80086c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086ca:	e75d      	b.n	8008588 <_dtoa_r+0x758>
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	1e5e      	subs	r6, r3, #1
 80086d0:	9b06      	ldr	r3, [sp, #24]
 80086d2:	42b3      	cmp	r3, r6
 80086d4:	bfbf      	itttt	lt
 80086d6:	9b06      	ldrlt	r3, [sp, #24]
 80086d8:	9606      	strlt	r6, [sp, #24]
 80086da:	1af2      	sublt	r2, r6, r3
 80086dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80086de:	bfb6      	itet	lt
 80086e0:	189b      	addlt	r3, r3, r2
 80086e2:	1b9e      	subge	r6, r3, r6
 80086e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80086e6:	9b01      	ldr	r3, [sp, #4]
 80086e8:	bfb8      	it	lt
 80086ea:	2600      	movlt	r6, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfb5      	itete	lt
 80086f0:	eba8 0503 	sublt.w	r5, r8, r3
 80086f4:	9b01      	ldrge	r3, [sp, #4]
 80086f6:	2300      	movlt	r3, #0
 80086f8:	4645      	movge	r5, r8
 80086fa:	e747      	b.n	800858c <_dtoa_r+0x75c>
 80086fc:	9e06      	ldr	r6, [sp, #24]
 80086fe:	9f08      	ldr	r7, [sp, #32]
 8008700:	4645      	mov	r5, r8
 8008702:	e74c      	b.n	800859e <_dtoa_r+0x76e>
 8008704:	9a06      	ldr	r2, [sp, #24]
 8008706:	e775      	b.n	80085f4 <_dtoa_r+0x7c4>
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	2b01      	cmp	r3, #1
 800870c:	dc18      	bgt.n	8008740 <_dtoa_r+0x910>
 800870e:	9b02      	ldr	r3, [sp, #8]
 8008710:	b9b3      	cbnz	r3, 8008740 <_dtoa_r+0x910>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008718:	b9a3      	cbnz	r3, 8008744 <_dtoa_r+0x914>
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008720:	0d1b      	lsrs	r3, r3, #20
 8008722:	051b      	lsls	r3, r3, #20
 8008724:	b12b      	cbz	r3, 8008732 <_dtoa_r+0x902>
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	3301      	adds	r3, #1
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	f108 0801 	add.w	r8, r8, #1
 8008730:	2301      	movs	r3, #1
 8008732:	9306      	str	r3, [sp, #24]
 8008734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008736:	2b00      	cmp	r3, #0
 8008738:	f47f af74 	bne.w	8008624 <_dtoa_r+0x7f4>
 800873c:	2001      	movs	r0, #1
 800873e:	e779      	b.n	8008634 <_dtoa_r+0x804>
 8008740:	2300      	movs	r3, #0
 8008742:	e7f6      	b.n	8008732 <_dtoa_r+0x902>
 8008744:	9b02      	ldr	r3, [sp, #8]
 8008746:	e7f4      	b.n	8008732 <_dtoa_r+0x902>
 8008748:	d085      	beq.n	8008656 <_dtoa_r+0x826>
 800874a:	4618      	mov	r0, r3
 800874c:	301c      	adds	r0, #28
 800874e:	e77d      	b.n	800864c <_dtoa_r+0x81c>
 8008750:	40240000 	.word	0x40240000
 8008754:	9b01      	ldr	r3, [sp, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	dc38      	bgt.n	80087cc <_dtoa_r+0x99c>
 800875a:	9b05      	ldr	r3, [sp, #20]
 800875c:	2b02      	cmp	r3, #2
 800875e:	dd35      	ble.n	80087cc <_dtoa_r+0x99c>
 8008760:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	d10d      	bne.n	8008786 <_dtoa_r+0x956>
 800876a:	4631      	mov	r1, r6
 800876c:	464b      	mov	r3, r9
 800876e:	2205      	movs	r2, #5
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fbe9 	bl	8008f48 <__multadd>
 8008776:	4601      	mov	r1, r0
 8008778:	4606      	mov	r6, r0
 800877a:	4658      	mov	r0, fp
 800877c:	f000 fe00 	bl	8009380 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	f73f adbd 	bgt.w	8008300 <_dtoa_r+0x4d0>
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	9d00      	ldr	r5, [sp, #0]
 800878a:	ea6f 0a03 	mvn.w	sl, r3
 800878e:	f04f 0800 	mov.w	r8, #0
 8008792:	4631      	mov	r1, r6
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fbb5 	bl	8008f04 <_Bfree>
 800879a:	2f00      	cmp	r7, #0
 800879c:	f43f aeb4 	beq.w	8008508 <_dtoa_r+0x6d8>
 80087a0:	f1b8 0f00 	cmp.w	r8, #0
 80087a4:	d005      	beq.n	80087b2 <_dtoa_r+0x982>
 80087a6:	45b8      	cmp	r8, r7
 80087a8:	d003      	beq.n	80087b2 <_dtoa_r+0x982>
 80087aa:	4641      	mov	r1, r8
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fba9 	bl	8008f04 <_Bfree>
 80087b2:	4639      	mov	r1, r7
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fba5 	bl	8008f04 <_Bfree>
 80087ba:	e6a5      	b.n	8008508 <_dtoa_r+0x6d8>
 80087bc:	2600      	movs	r6, #0
 80087be:	4637      	mov	r7, r6
 80087c0:	e7e1      	b.n	8008786 <_dtoa_r+0x956>
 80087c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087c8:	4637      	mov	r7, r6
 80087ca:	e599      	b.n	8008300 <_dtoa_r+0x4d0>
 80087cc:	9b08      	ldr	r3, [sp, #32]
 80087ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80fd 	beq.w	80089d2 <_dtoa_r+0xba2>
 80087d8:	2d00      	cmp	r5, #0
 80087da:	dd05      	ble.n	80087e8 <_dtoa_r+0x9b8>
 80087dc:	4639      	mov	r1, r7
 80087de:	462a      	mov	r2, r5
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fd61 	bl	80092a8 <__lshift>
 80087e6:	4607      	mov	r7, r0
 80087e8:	9b06      	ldr	r3, [sp, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d05c      	beq.n	80088a8 <_dtoa_r+0xa78>
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 fb47 	bl	8008e84 <_Balloc>
 80087f6:	4605      	mov	r5, r0
 80087f8:	b928      	cbnz	r0, 8008806 <_dtoa_r+0x9d6>
 80087fa:	4b80      	ldr	r3, [pc, #512]	; (80089fc <_dtoa_r+0xbcc>)
 80087fc:	4602      	mov	r2, r0
 80087fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008802:	f7ff bb2e 	b.w	8007e62 <_dtoa_r+0x32>
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	3202      	adds	r2, #2
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	f107 010c 	add.w	r1, r7, #12
 8008810:	300c      	adds	r0, #12
 8008812:	f000 fb1d 	bl	8008e50 <memcpy>
 8008816:	2201      	movs	r2, #1
 8008818:	4629      	mov	r1, r5
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fd44 	bl	80092a8 <__lshift>
 8008820:	9b00      	ldr	r3, [sp, #0]
 8008822:	3301      	adds	r3, #1
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	9b00      	ldr	r3, [sp, #0]
 8008828:	444b      	add	r3, r9
 800882a:	9307      	str	r3, [sp, #28]
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	46b8      	mov	r8, r7
 8008834:	9306      	str	r3, [sp, #24]
 8008836:	4607      	mov	r7, r0
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	4631      	mov	r1, r6
 800883c:	3b01      	subs	r3, #1
 800883e:	4658      	mov	r0, fp
 8008840:	9302      	str	r3, [sp, #8]
 8008842:	f7ff fa69 	bl	8007d18 <quorem>
 8008846:	4603      	mov	r3, r0
 8008848:	3330      	adds	r3, #48	; 0x30
 800884a:	9004      	str	r0, [sp, #16]
 800884c:	4641      	mov	r1, r8
 800884e:	4658      	mov	r0, fp
 8008850:	9308      	str	r3, [sp, #32]
 8008852:	f000 fd95 	bl	8009380 <__mcmp>
 8008856:	463a      	mov	r2, r7
 8008858:	4681      	mov	r9, r0
 800885a:	4631      	mov	r1, r6
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fdab 	bl	80093b8 <__mdiff>
 8008862:	68c2      	ldr	r2, [r0, #12]
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	4605      	mov	r5, r0
 8008868:	bb02      	cbnz	r2, 80088ac <_dtoa_r+0xa7c>
 800886a:	4601      	mov	r1, r0
 800886c:	4658      	mov	r0, fp
 800886e:	f000 fd87 	bl	8009380 <__mcmp>
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	4602      	mov	r2, r0
 8008876:	4629      	mov	r1, r5
 8008878:	4620      	mov	r0, r4
 800887a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800887e:	f000 fb41 	bl	8008f04 <_Bfree>
 8008882:	9b05      	ldr	r3, [sp, #20]
 8008884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008886:	9d01      	ldr	r5, [sp, #4]
 8008888:	ea43 0102 	orr.w	r1, r3, r2
 800888c:	9b06      	ldr	r3, [sp, #24]
 800888e:	430b      	orrs	r3, r1
 8008890:	9b08      	ldr	r3, [sp, #32]
 8008892:	d10d      	bne.n	80088b0 <_dtoa_r+0xa80>
 8008894:	2b39      	cmp	r3, #57	; 0x39
 8008896:	d029      	beq.n	80088ec <_dtoa_r+0xabc>
 8008898:	f1b9 0f00 	cmp.w	r9, #0
 800889c:	dd01      	ble.n	80088a2 <_dtoa_r+0xa72>
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	3331      	adds	r3, #49	; 0x31
 80088a2:	9a02      	ldr	r2, [sp, #8]
 80088a4:	7013      	strb	r3, [r2, #0]
 80088a6:	e774      	b.n	8008792 <_dtoa_r+0x962>
 80088a8:	4638      	mov	r0, r7
 80088aa:	e7b9      	b.n	8008820 <_dtoa_r+0x9f0>
 80088ac:	2201      	movs	r2, #1
 80088ae:	e7e2      	b.n	8008876 <_dtoa_r+0xa46>
 80088b0:	f1b9 0f00 	cmp.w	r9, #0
 80088b4:	db06      	blt.n	80088c4 <_dtoa_r+0xa94>
 80088b6:	9905      	ldr	r1, [sp, #20]
 80088b8:	ea41 0909 	orr.w	r9, r1, r9
 80088bc:	9906      	ldr	r1, [sp, #24]
 80088be:	ea59 0101 	orrs.w	r1, r9, r1
 80088c2:	d120      	bne.n	8008906 <_dtoa_r+0xad6>
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	ddec      	ble.n	80088a2 <_dtoa_r+0xa72>
 80088c8:	4659      	mov	r1, fp
 80088ca:	2201      	movs	r2, #1
 80088cc:	4620      	mov	r0, r4
 80088ce:	9301      	str	r3, [sp, #4]
 80088d0:	f000 fcea 	bl	80092a8 <__lshift>
 80088d4:	4631      	mov	r1, r6
 80088d6:	4683      	mov	fp, r0
 80088d8:	f000 fd52 	bl	8009380 <__mcmp>
 80088dc:	2800      	cmp	r0, #0
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	dc02      	bgt.n	80088e8 <_dtoa_r+0xab8>
 80088e2:	d1de      	bne.n	80088a2 <_dtoa_r+0xa72>
 80088e4:	07da      	lsls	r2, r3, #31
 80088e6:	d5dc      	bpl.n	80088a2 <_dtoa_r+0xa72>
 80088e8:	2b39      	cmp	r3, #57	; 0x39
 80088ea:	d1d8      	bne.n	800889e <_dtoa_r+0xa6e>
 80088ec:	9a02      	ldr	r2, [sp, #8]
 80088ee:	2339      	movs	r3, #57	; 0x39
 80088f0:	7013      	strb	r3, [r2, #0]
 80088f2:	462b      	mov	r3, r5
 80088f4:	461d      	mov	r5, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088fc:	2a39      	cmp	r2, #57	; 0x39
 80088fe:	d050      	beq.n	80089a2 <_dtoa_r+0xb72>
 8008900:	3201      	adds	r2, #1
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	e745      	b.n	8008792 <_dtoa_r+0x962>
 8008906:	2a00      	cmp	r2, #0
 8008908:	dd03      	ble.n	8008912 <_dtoa_r+0xae2>
 800890a:	2b39      	cmp	r3, #57	; 0x39
 800890c:	d0ee      	beq.n	80088ec <_dtoa_r+0xabc>
 800890e:	3301      	adds	r3, #1
 8008910:	e7c7      	b.n	80088a2 <_dtoa_r+0xa72>
 8008912:	9a01      	ldr	r2, [sp, #4]
 8008914:	9907      	ldr	r1, [sp, #28]
 8008916:	f802 3c01 	strb.w	r3, [r2, #-1]
 800891a:	428a      	cmp	r2, r1
 800891c:	d02a      	beq.n	8008974 <_dtoa_r+0xb44>
 800891e:	4659      	mov	r1, fp
 8008920:	2300      	movs	r3, #0
 8008922:	220a      	movs	r2, #10
 8008924:	4620      	mov	r0, r4
 8008926:	f000 fb0f 	bl	8008f48 <__multadd>
 800892a:	45b8      	cmp	r8, r7
 800892c:	4683      	mov	fp, r0
 800892e:	f04f 0300 	mov.w	r3, #0
 8008932:	f04f 020a 	mov.w	r2, #10
 8008936:	4641      	mov	r1, r8
 8008938:	4620      	mov	r0, r4
 800893a:	d107      	bne.n	800894c <_dtoa_r+0xb1c>
 800893c:	f000 fb04 	bl	8008f48 <__multadd>
 8008940:	4680      	mov	r8, r0
 8008942:	4607      	mov	r7, r0
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	3301      	adds	r3, #1
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	e775      	b.n	8008838 <_dtoa_r+0xa08>
 800894c:	f000 fafc 	bl	8008f48 <__multadd>
 8008950:	4639      	mov	r1, r7
 8008952:	4680      	mov	r8, r0
 8008954:	2300      	movs	r3, #0
 8008956:	220a      	movs	r2, #10
 8008958:	4620      	mov	r0, r4
 800895a:	f000 faf5 	bl	8008f48 <__multadd>
 800895e:	4607      	mov	r7, r0
 8008960:	e7f0      	b.n	8008944 <_dtoa_r+0xb14>
 8008962:	f1b9 0f00 	cmp.w	r9, #0
 8008966:	9a00      	ldr	r2, [sp, #0]
 8008968:	bfcc      	ite	gt
 800896a:	464d      	movgt	r5, r9
 800896c:	2501      	movle	r5, #1
 800896e:	4415      	add	r5, r2
 8008970:	f04f 0800 	mov.w	r8, #0
 8008974:	4659      	mov	r1, fp
 8008976:	2201      	movs	r2, #1
 8008978:	4620      	mov	r0, r4
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	f000 fc94 	bl	80092a8 <__lshift>
 8008980:	4631      	mov	r1, r6
 8008982:	4683      	mov	fp, r0
 8008984:	f000 fcfc 	bl	8009380 <__mcmp>
 8008988:	2800      	cmp	r0, #0
 800898a:	dcb2      	bgt.n	80088f2 <_dtoa_r+0xac2>
 800898c:	d102      	bne.n	8008994 <_dtoa_r+0xb64>
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	07db      	lsls	r3, r3, #31
 8008992:	d4ae      	bmi.n	80088f2 <_dtoa_r+0xac2>
 8008994:	462b      	mov	r3, r5
 8008996:	461d      	mov	r5, r3
 8008998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800899c:	2a30      	cmp	r2, #48	; 0x30
 800899e:	d0fa      	beq.n	8008996 <_dtoa_r+0xb66>
 80089a0:	e6f7      	b.n	8008792 <_dtoa_r+0x962>
 80089a2:	9a00      	ldr	r2, [sp, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d1a5      	bne.n	80088f4 <_dtoa_r+0xac4>
 80089a8:	f10a 0a01 	add.w	sl, sl, #1
 80089ac:	2331      	movs	r3, #49	; 0x31
 80089ae:	e779      	b.n	80088a4 <_dtoa_r+0xa74>
 80089b0:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <_dtoa_r+0xbd0>)
 80089b2:	f7ff baaf 	b.w	8007f14 <_dtoa_r+0xe4>
 80089b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f47f aa86 	bne.w	8007eca <_dtoa_r+0x9a>
 80089be:	4b11      	ldr	r3, [pc, #68]	; (8008a04 <_dtoa_r+0xbd4>)
 80089c0:	f7ff baa8 	b.w	8007f14 <_dtoa_r+0xe4>
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	dc03      	bgt.n	80089d2 <_dtoa_r+0xba2>
 80089ca:	9b05      	ldr	r3, [sp, #20]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	f73f aec9 	bgt.w	8008764 <_dtoa_r+0x934>
 80089d2:	9d00      	ldr	r5, [sp, #0]
 80089d4:	4631      	mov	r1, r6
 80089d6:	4658      	mov	r0, fp
 80089d8:	f7ff f99e 	bl	8007d18 <quorem>
 80089dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089e0:	f805 3b01 	strb.w	r3, [r5], #1
 80089e4:	9a00      	ldr	r2, [sp, #0]
 80089e6:	1aaa      	subs	r2, r5, r2
 80089e8:	4591      	cmp	r9, r2
 80089ea:	ddba      	ble.n	8008962 <_dtoa_r+0xb32>
 80089ec:	4659      	mov	r1, fp
 80089ee:	2300      	movs	r3, #0
 80089f0:	220a      	movs	r2, #10
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 faa8 	bl	8008f48 <__multadd>
 80089f8:	4683      	mov	fp, r0
 80089fa:	e7eb      	b.n	80089d4 <_dtoa_r+0xba4>
 80089fc:	08009d37 	.word	0x08009d37
 8008a00:	08009c90 	.word	0x08009c90
 8008a04:	08009cb4 	.word	0x08009cb4

08008a08 <__sflush_r>:
 8008a08:	898a      	ldrh	r2, [r1, #12]
 8008a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	4605      	mov	r5, r0
 8008a10:	0710      	lsls	r0, r2, #28
 8008a12:	460c      	mov	r4, r1
 8008a14:	d458      	bmi.n	8008ac8 <__sflush_r+0xc0>
 8008a16:	684b      	ldr	r3, [r1, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dc05      	bgt.n	8008a28 <__sflush_r+0x20>
 8008a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dc02      	bgt.n	8008a28 <__sflush_r+0x20>
 8008a22:	2000      	movs	r0, #0
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	d0f9      	beq.n	8008a22 <__sflush_r+0x1a>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a34:	682f      	ldr	r7, [r5, #0]
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	d032      	beq.n	8008aa0 <__sflush_r+0x98>
 8008a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	075a      	lsls	r2, r3, #29
 8008a40:	d505      	bpl.n	8008a4e <__sflush_r+0x46>
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	1ac0      	subs	r0, r0, r3
 8008a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a48:	b10b      	cbz	r3, 8008a4e <__sflush_r+0x46>
 8008a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a4c:	1ac0      	subs	r0, r0, r3
 8008a4e:	2300      	movs	r3, #0
 8008a50:	4602      	mov	r2, r0
 8008a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a54:	6a21      	ldr	r1, [r4, #32]
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b0      	blx	r6
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	d106      	bne.n	8008a6e <__sflush_r+0x66>
 8008a60:	6829      	ldr	r1, [r5, #0]
 8008a62:	291d      	cmp	r1, #29
 8008a64:	d82c      	bhi.n	8008ac0 <__sflush_r+0xb8>
 8008a66:	4a2a      	ldr	r2, [pc, #168]	; (8008b10 <__sflush_r+0x108>)
 8008a68:	40ca      	lsrs	r2, r1
 8008a6a:	07d6      	lsls	r6, r2, #31
 8008a6c:	d528      	bpl.n	8008ac0 <__sflush_r+0xb8>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	6062      	str	r2, [r4, #4]
 8008a72:	04d9      	lsls	r1, r3, #19
 8008a74:	6922      	ldr	r2, [r4, #16]
 8008a76:	6022      	str	r2, [r4, #0]
 8008a78:	d504      	bpl.n	8008a84 <__sflush_r+0x7c>
 8008a7a:	1c42      	adds	r2, r0, #1
 8008a7c:	d101      	bne.n	8008a82 <__sflush_r+0x7a>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	b903      	cbnz	r3, 8008a84 <__sflush_r+0x7c>
 8008a82:	6560      	str	r0, [r4, #84]	; 0x54
 8008a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a86:	602f      	str	r7, [r5, #0]
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	d0ca      	beq.n	8008a22 <__sflush_r+0x1a>
 8008a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a90:	4299      	cmp	r1, r3
 8008a92:	d002      	beq.n	8008a9a <__sflush_r+0x92>
 8008a94:	4628      	mov	r0, r5
 8008a96:	f7fe fa89 	bl	8006fac <_free_r>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a9e:	e7c1      	b.n	8008a24 <__sflush_r+0x1c>
 8008aa0:	6a21      	ldr	r1, [r4, #32]
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b0      	blx	r6
 8008aa8:	1c41      	adds	r1, r0, #1
 8008aaa:	d1c7      	bne.n	8008a3c <__sflush_r+0x34>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0c4      	beq.n	8008a3c <__sflush_r+0x34>
 8008ab2:	2b1d      	cmp	r3, #29
 8008ab4:	d001      	beq.n	8008aba <__sflush_r+0xb2>
 8008ab6:	2b16      	cmp	r3, #22
 8008ab8:	d101      	bne.n	8008abe <__sflush_r+0xb6>
 8008aba:	602f      	str	r7, [r5, #0]
 8008abc:	e7b1      	b.n	8008a22 <__sflush_r+0x1a>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	e7ad      	b.n	8008a24 <__sflush_r+0x1c>
 8008ac8:	690f      	ldr	r7, [r1, #16]
 8008aca:	2f00      	cmp	r7, #0
 8008acc:	d0a9      	beq.n	8008a22 <__sflush_r+0x1a>
 8008ace:	0793      	lsls	r3, r2, #30
 8008ad0:	680e      	ldr	r6, [r1, #0]
 8008ad2:	bf08      	it	eq
 8008ad4:	694b      	ldreq	r3, [r1, #20]
 8008ad6:	600f      	str	r7, [r1, #0]
 8008ad8:	bf18      	it	ne
 8008ada:	2300      	movne	r3, #0
 8008adc:	eba6 0807 	sub.w	r8, r6, r7
 8008ae0:	608b      	str	r3, [r1, #8]
 8008ae2:	f1b8 0f00 	cmp.w	r8, #0
 8008ae6:	dd9c      	ble.n	8008a22 <__sflush_r+0x1a>
 8008ae8:	6a21      	ldr	r1, [r4, #32]
 8008aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008aec:	4643      	mov	r3, r8
 8008aee:	463a      	mov	r2, r7
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b0      	blx	r6
 8008af4:	2800      	cmp	r0, #0
 8008af6:	dc06      	bgt.n	8008b06 <__sflush_r+0xfe>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b04:	e78e      	b.n	8008a24 <__sflush_r+0x1c>
 8008b06:	4407      	add	r7, r0
 8008b08:	eba8 0800 	sub.w	r8, r8, r0
 8008b0c:	e7e9      	b.n	8008ae2 <__sflush_r+0xda>
 8008b0e:	bf00      	nop
 8008b10:	20400001 	.word	0x20400001

08008b14 <_fflush_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	690b      	ldr	r3, [r1, #16]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	b913      	cbnz	r3, 8008b24 <_fflush_r+0x10>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	4628      	mov	r0, r5
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	b118      	cbz	r0, 8008b2e <_fflush_r+0x1a>
 8008b26:	6983      	ldr	r3, [r0, #24]
 8008b28:	b90b      	cbnz	r3, 8008b2e <_fflush_r+0x1a>
 8008b2a:	f000 f887 	bl	8008c3c <__sinit>
 8008b2e:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <_fflush_r+0x6c>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	d11b      	bne.n	8008b6c <_fflush_r+0x58>
 8008b34:	686c      	ldr	r4, [r5, #4]
 8008b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0ef      	beq.n	8008b1e <_fflush_r+0xa>
 8008b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b40:	07d0      	lsls	r0, r2, #31
 8008b42:	d404      	bmi.n	8008b4e <_fflush_r+0x3a>
 8008b44:	0599      	lsls	r1, r3, #22
 8008b46:	d402      	bmi.n	8008b4e <_fflush_r+0x3a>
 8008b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4a:	f000 f91a 	bl	8008d82 <__retarget_lock_acquire_recursive>
 8008b4e:	4628      	mov	r0, r5
 8008b50:	4621      	mov	r1, r4
 8008b52:	f7ff ff59 	bl	8008a08 <__sflush_r>
 8008b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b58:	07da      	lsls	r2, r3, #31
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	d4e0      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b5e:	89a3      	ldrh	r3, [r4, #12]
 8008b60:	059b      	lsls	r3, r3, #22
 8008b62:	d4dd      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b66:	f000 f90d 	bl	8008d84 <__retarget_lock_release_recursive>
 8008b6a:	e7d9      	b.n	8008b20 <_fflush_r+0xc>
 8008b6c:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <_fflush_r+0x70>)
 8008b6e:	429c      	cmp	r4, r3
 8008b70:	d101      	bne.n	8008b76 <_fflush_r+0x62>
 8008b72:	68ac      	ldr	r4, [r5, #8]
 8008b74:	e7df      	b.n	8008b36 <_fflush_r+0x22>
 8008b76:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <_fflush_r+0x74>)
 8008b78:	429c      	cmp	r4, r3
 8008b7a:	bf08      	it	eq
 8008b7c:	68ec      	ldreq	r4, [r5, #12]
 8008b7e:	e7da      	b.n	8008b36 <_fflush_r+0x22>
 8008b80:	08009d68 	.word	0x08009d68
 8008b84:	08009d88 	.word	0x08009d88
 8008b88:	08009d48 	.word	0x08009d48

08008b8c <std>:
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	b510      	push	{r4, lr}
 8008b90:	4604      	mov	r4, r0
 8008b92:	e9c0 3300 	strd	r3, r3, [r0]
 8008b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b9a:	6083      	str	r3, [r0, #8]
 8008b9c:	8181      	strh	r1, [r0, #12]
 8008b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8008ba0:	81c2      	strh	r2, [r0, #14]
 8008ba2:	6183      	str	r3, [r0, #24]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	2208      	movs	r2, #8
 8008ba8:	305c      	adds	r0, #92	; 0x5c
 8008baa:	f7fe f9f7 	bl	8006f9c <memset>
 8008bae:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <std+0x38>)
 8008bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8008bb2:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <std+0x3c>)
 8008bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bb6:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <std+0x40>)
 8008bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <std+0x44>)
 8008bbc:	6224      	str	r4, [r4, #32]
 8008bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	bf00      	nop
 8008bc4:	08009851 	.word	0x08009851
 8008bc8:	08009873 	.word	0x08009873
 8008bcc:	080098ab 	.word	0x080098ab
 8008bd0:	080098cf 	.word	0x080098cf

08008bd4 <_cleanup_r>:
 8008bd4:	4901      	ldr	r1, [pc, #4]	; (8008bdc <_cleanup_r+0x8>)
 8008bd6:	f000 b8af 	b.w	8008d38 <_fwalk_reent>
 8008bda:	bf00      	nop
 8008bdc:	08008b15 	.word	0x08008b15

08008be0 <__sfmoreglue>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	1e4a      	subs	r2, r1, #1
 8008be4:	2568      	movs	r5, #104	; 0x68
 8008be6:	4355      	muls	r5, r2
 8008be8:	460e      	mov	r6, r1
 8008bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bee:	f7fe fa2d 	bl	800704c <_malloc_r>
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	b140      	cbz	r0, 8008c08 <__sfmoreglue+0x28>
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8008bfc:	300c      	adds	r0, #12
 8008bfe:	60a0      	str	r0, [r4, #8]
 8008c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c04:	f7fe f9ca 	bl	8006f9c <memset>
 8008c08:	4620      	mov	r0, r4
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}

08008c0c <__sfp_lock_acquire>:
 8008c0c:	4801      	ldr	r0, [pc, #4]	; (8008c14 <__sfp_lock_acquire+0x8>)
 8008c0e:	f000 b8b8 	b.w	8008d82 <__retarget_lock_acquire_recursive>
 8008c12:	bf00      	nop
 8008c14:	20000348 	.word	0x20000348

08008c18 <__sfp_lock_release>:
 8008c18:	4801      	ldr	r0, [pc, #4]	; (8008c20 <__sfp_lock_release+0x8>)
 8008c1a:	f000 b8b3 	b.w	8008d84 <__retarget_lock_release_recursive>
 8008c1e:	bf00      	nop
 8008c20:	20000348 	.word	0x20000348

08008c24 <__sinit_lock_acquire>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__sinit_lock_acquire+0x8>)
 8008c26:	f000 b8ac 	b.w	8008d82 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20000343 	.word	0x20000343

08008c30 <__sinit_lock_release>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__sinit_lock_release+0x8>)
 8008c32:	f000 b8a7 	b.w	8008d84 <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	20000343 	.word	0x20000343

08008c3c <__sinit>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	4604      	mov	r4, r0
 8008c40:	f7ff fff0 	bl	8008c24 <__sinit_lock_acquire>
 8008c44:	69a3      	ldr	r3, [r4, #24]
 8008c46:	b11b      	cbz	r3, 8008c50 <__sinit+0x14>
 8008c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4c:	f7ff bff0 	b.w	8008c30 <__sinit_lock_release>
 8008c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c54:	6523      	str	r3, [r4, #80]	; 0x50
 8008c56:	4b13      	ldr	r3, [pc, #76]	; (8008ca4 <__sinit+0x68>)
 8008c58:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <__sinit+0x6c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	bf04      	itt	eq
 8008c62:	2301      	moveq	r3, #1
 8008c64:	61a3      	streq	r3, [r4, #24]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 f820 	bl	8008cac <__sfp>
 8008c6c:	6060      	str	r0, [r4, #4]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 f81c 	bl	8008cac <__sfp>
 8008c74:	60a0      	str	r0, [r4, #8]
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 f818 	bl	8008cac <__sfp>
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	60e0      	str	r0, [r4, #12]
 8008c80:	2104      	movs	r1, #4
 8008c82:	6860      	ldr	r0, [r4, #4]
 8008c84:	f7ff ff82 	bl	8008b8c <std>
 8008c88:	68a0      	ldr	r0, [r4, #8]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	2109      	movs	r1, #9
 8008c8e:	f7ff ff7d 	bl	8008b8c <std>
 8008c92:	68e0      	ldr	r0, [r4, #12]
 8008c94:	2202      	movs	r2, #2
 8008c96:	2112      	movs	r1, #18
 8008c98:	f7ff ff78 	bl	8008b8c <std>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	61a3      	str	r3, [r4, #24]
 8008ca0:	e7d2      	b.n	8008c48 <__sinit+0xc>
 8008ca2:	bf00      	nop
 8008ca4:	08009c7c 	.word	0x08009c7c
 8008ca8:	08008bd5 	.word	0x08008bd5

08008cac <__sfp>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	4607      	mov	r7, r0
 8008cb0:	f7ff ffac 	bl	8008c0c <__sfp_lock_acquire>
 8008cb4:	4b1e      	ldr	r3, [pc, #120]	; (8008d30 <__sfp+0x84>)
 8008cb6:	681e      	ldr	r6, [r3, #0]
 8008cb8:	69b3      	ldr	r3, [r6, #24]
 8008cba:	b913      	cbnz	r3, 8008cc2 <__sfp+0x16>
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff ffbd 	bl	8008c3c <__sinit>
 8008cc2:	3648      	adds	r6, #72	; 0x48
 8008cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	d503      	bpl.n	8008cd4 <__sfp+0x28>
 8008ccc:	6833      	ldr	r3, [r6, #0]
 8008cce:	b30b      	cbz	r3, 8008d14 <__sfp+0x68>
 8008cd0:	6836      	ldr	r6, [r6, #0]
 8008cd2:	e7f7      	b.n	8008cc4 <__sfp+0x18>
 8008cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd8:	b9d5      	cbnz	r5, 8008d10 <__sfp+0x64>
 8008cda:	4b16      	ldr	r3, [pc, #88]	; (8008d34 <__sfp+0x88>)
 8008cdc:	60e3      	str	r3, [r4, #12]
 8008cde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ce4:	f000 f84c 	bl	8008d80 <__retarget_lock_init_recursive>
 8008ce8:	f7ff ff96 	bl	8008c18 <__sfp_lock_release>
 8008cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cf4:	6025      	str	r5, [r4, #0]
 8008cf6:	61a5      	str	r5, [r4, #24]
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d00:	f7fe f94c 	bl	8006f9c <memset>
 8008d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d10:	3468      	adds	r4, #104	; 0x68
 8008d12:	e7d9      	b.n	8008cc8 <__sfp+0x1c>
 8008d14:	2104      	movs	r1, #4
 8008d16:	4638      	mov	r0, r7
 8008d18:	f7ff ff62 	bl	8008be0 <__sfmoreglue>
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	6030      	str	r0, [r6, #0]
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1d5      	bne.n	8008cd0 <__sfp+0x24>
 8008d24:	f7ff ff78 	bl	8008c18 <__sfp_lock_release>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	e7ee      	b.n	8008d0c <__sfp+0x60>
 8008d2e:	bf00      	nop
 8008d30:	08009c7c 	.word	0x08009c7c
 8008d34:	ffff0001 	.word	0xffff0001

08008d38 <_fwalk_reent>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	4688      	mov	r8, r1
 8008d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d44:	2700      	movs	r7, #0
 8008d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8008d4e:	d505      	bpl.n	8008d5c <_fwalk_reent+0x24>
 8008d50:	6824      	ldr	r4, [r4, #0]
 8008d52:	2c00      	cmp	r4, #0
 8008d54:	d1f7      	bne.n	8008d46 <_fwalk_reent+0xe>
 8008d56:	4638      	mov	r0, r7
 8008d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5c:	89ab      	ldrh	r3, [r5, #12]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d907      	bls.n	8008d72 <_fwalk_reent+0x3a>
 8008d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d66:	3301      	adds	r3, #1
 8008d68:	d003      	beq.n	8008d72 <_fwalk_reent+0x3a>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	47c0      	blx	r8
 8008d70:	4307      	orrs	r7, r0
 8008d72:	3568      	adds	r5, #104	; 0x68
 8008d74:	e7e9      	b.n	8008d4a <_fwalk_reent+0x12>
	...

08008d78 <_localeconv_r>:
 8008d78:	4800      	ldr	r0, [pc, #0]	; (8008d7c <_localeconv_r+0x4>)
 8008d7a:	4770      	bx	lr
 8008d7c:	20000178 	.word	0x20000178

08008d80 <__retarget_lock_init_recursive>:
 8008d80:	4770      	bx	lr

08008d82 <__retarget_lock_acquire_recursive>:
 8008d82:	4770      	bx	lr

08008d84 <__retarget_lock_release_recursive>:
 8008d84:	4770      	bx	lr

08008d86 <__swhatbuf_r>:
 8008d86:	b570      	push	{r4, r5, r6, lr}
 8008d88:	460e      	mov	r6, r1
 8008d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8e:	2900      	cmp	r1, #0
 8008d90:	b096      	sub	sp, #88	; 0x58
 8008d92:	4614      	mov	r4, r2
 8008d94:	461d      	mov	r5, r3
 8008d96:	da07      	bge.n	8008da8 <__swhatbuf_r+0x22>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	89b3      	ldrh	r3, [r6, #12]
 8008d9e:	061a      	lsls	r2, r3, #24
 8008da0:	d410      	bmi.n	8008dc4 <__swhatbuf_r+0x3e>
 8008da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da6:	e00e      	b.n	8008dc6 <__swhatbuf_r+0x40>
 8008da8:	466a      	mov	r2, sp
 8008daa:	f000 fde7 	bl	800997c <_fstat_r>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	dbf2      	blt.n	8008d98 <__swhatbuf_r+0x12>
 8008db2:	9a01      	ldr	r2, [sp, #4]
 8008db4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008db8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dbc:	425a      	negs	r2, r3
 8008dbe:	415a      	adcs	r2, r3
 8008dc0:	602a      	str	r2, [r5, #0]
 8008dc2:	e7ee      	b.n	8008da2 <__swhatbuf_r+0x1c>
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	b016      	add	sp, #88	; 0x58
 8008dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dd0 <__smakebuf_r>:
 8008dd0:	898b      	ldrh	r3, [r1, #12]
 8008dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dd4:	079d      	lsls	r5, r3, #30
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	d507      	bpl.n	8008dec <__smakebuf_r+0x1c>
 8008ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	2301      	movs	r3, #1
 8008de6:	6163      	str	r3, [r4, #20]
 8008de8:	b002      	add	sp, #8
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	ab01      	add	r3, sp, #4
 8008dee:	466a      	mov	r2, sp
 8008df0:	f7ff ffc9 	bl	8008d86 <__swhatbuf_r>
 8008df4:	9900      	ldr	r1, [sp, #0]
 8008df6:	4605      	mov	r5, r0
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7fe f927 	bl	800704c <_malloc_r>
 8008dfe:	b948      	cbnz	r0, 8008e14 <__smakebuf_r+0x44>
 8008e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e04:	059a      	lsls	r2, r3, #22
 8008e06:	d4ef      	bmi.n	8008de8 <__smakebuf_r+0x18>
 8008e08:	f023 0303 	bic.w	r3, r3, #3
 8008e0c:	f043 0302 	orr.w	r3, r3, #2
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	e7e3      	b.n	8008ddc <__smakebuf_r+0xc>
 8008e14:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <__smakebuf_r+0x7c>)
 8008e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	6020      	str	r0, [r4, #0]
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	9b00      	ldr	r3, [sp, #0]
 8008e24:	6163      	str	r3, [r4, #20]
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	6120      	str	r0, [r4, #16]
 8008e2a:	b15b      	cbz	r3, 8008e44 <__smakebuf_r+0x74>
 8008e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 fdb5 	bl	80099a0 <_isatty_r>
 8008e36:	b128      	cbz	r0, 8008e44 <__smakebuf_r+0x74>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	89a0      	ldrh	r0, [r4, #12]
 8008e46:	4305      	orrs	r5, r0
 8008e48:	81a5      	strh	r5, [r4, #12]
 8008e4a:	e7cd      	b.n	8008de8 <__smakebuf_r+0x18>
 8008e4c:	08008bd5 	.word	0x08008bd5

08008e50 <memcpy>:
 8008e50:	440a      	add	r2, r1
 8008e52:	4291      	cmp	r1, r2
 8008e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e58:	d100      	bne.n	8008e5c <memcpy+0xc>
 8008e5a:	4770      	bx	lr
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e66:	4291      	cmp	r1, r2
 8008e68:	d1f9      	bne.n	8008e5e <memcpy+0xe>
 8008e6a:	bd10      	pop	{r4, pc}

08008e6c <__malloc_lock>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__malloc_lock+0x8>)
 8008e6e:	f7ff bf88 	b.w	8008d82 <__retarget_lock_acquire_recursive>
 8008e72:	bf00      	nop
 8008e74:	20000344 	.word	0x20000344

08008e78 <__malloc_unlock>:
 8008e78:	4801      	ldr	r0, [pc, #4]	; (8008e80 <__malloc_unlock+0x8>)
 8008e7a:	f7ff bf83 	b.w	8008d84 <__retarget_lock_release_recursive>
 8008e7e:	bf00      	nop
 8008e80:	20000344 	.word	0x20000344

08008e84 <_Balloc>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	b976      	cbnz	r6, 8008eac <_Balloc+0x28>
 8008e8e:	2010      	movs	r0, #16
 8008e90:	f7fe f87c 	bl	8006f8c <malloc>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6260      	str	r0, [r4, #36]	; 0x24
 8008e98:	b920      	cbnz	r0, 8008ea4 <_Balloc+0x20>
 8008e9a:	4b18      	ldr	r3, [pc, #96]	; (8008efc <_Balloc+0x78>)
 8008e9c:	4818      	ldr	r0, [pc, #96]	; (8008f00 <_Balloc+0x7c>)
 8008e9e:	2166      	movs	r1, #102	; 0x66
 8008ea0:	f000 fd2c 	bl	80098fc <__assert_func>
 8008ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ea8:	6006      	str	r6, [r0, #0]
 8008eaa:	60c6      	str	r6, [r0, #12]
 8008eac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008eae:	68f3      	ldr	r3, [r6, #12]
 8008eb0:	b183      	cbz	r3, 8008ed4 <_Balloc+0x50>
 8008eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008eba:	b9b8      	cbnz	r0, 8008eec <_Balloc+0x68>
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	fa01 f605 	lsl.w	r6, r1, r5
 8008ec2:	1d72      	adds	r2, r6, #5
 8008ec4:	0092      	lsls	r2, r2, #2
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fb5a 	bl	8009580 <_calloc_r>
 8008ecc:	b160      	cbz	r0, 8008ee8 <_Balloc+0x64>
 8008ece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ed2:	e00e      	b.n	8008ef2 <_Balloc+0x6e>
 8008ed4:	2221      	movs	r2, #33	; 0x21
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fb51 	bl	8009580 <_calloc_r>
 8008ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ee0:	60f0      	str	r0, [r6, #12]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e4      	bne.n	8008eb2 <_Balloc+0x2e>
 8008ee8:	2000      	movs	r0, #0
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	6802      	ldr	r2, [r0, #0]
 8008eee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ef8:	e7f7      	b.n	8008eea <_Balloc+0x66>
 8008efa:	bf00      	nop
 8008efc:	08009cc1 	.word	0x08009cc1
 8008f00:	08009da8 	.word	0x08009da8

08008f04 <_Bfree>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f08:	4605      	mov	r5, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b976      	cbnz	r6, 8008f2c <_Bfree+0x28>
 8008f0e:	2010      	movs	r0, #16
 8008f10:	f7fe f83c 	bl	8006f8c <malloc>
 8008f14:	4602      	mov	r2, r0
 8008f16:	6268      	str	r0, [r5, #36]	; 0x24
 8008f18:	b920      	cbnz	r0, 8008f24 <_Bfree+0x20>
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <_Bfree+0x3c>)
 8008f1c:	4809      	ldr	r0, [pc, #36]	; (8008f44 <_Bfree+0x40>)
 8008f1e:	218a      	movs	r1, #138	; 0x8a
 8008f20:	f000 fcec 	bl	80098fc <__assert_func>
 8008f24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f28:	6006      	str	r6, [r0, #0]
 8008f2a:	60c6      	str	r6, [r0, #12]
 8008f2c:	b13c      	cbz	r4, 8008f3e <_Bfree+0x3a>
 8008f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f30:	6862      	ldr	r2, [r4, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f38:	6021      	str	r1, [r4, #0]
 8008f3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	08009cc1 	.word	0x08009cc1
 8008f44:	08009da8 	.word	0x08009da8

08008f48 <__multadd>:
 8008f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	690e      	ldr	r6, [r1, #16]
 8008f4e:	4607      	mov	r7, r0
 8008f50:	4698      	mov	r8, r3
 8008f52:	460c      	mov	r4, r1
 8008f54:	f101 0014 	add.w	r0, r1, #20
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6805      	ldr	r5, [r0, #0]
 8008f5c:	b2a9      	uxth	r1, r5
 8008f5e:	fb02 8101 	mla	r1, r2, r1, r8
 8008f62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008f66:	0c2d      	lsrs	r5, r5, #16
 8008f68:	fb02 c505 	mla	r5, r2, r5, ip
 8008f6c:	b289      	uxth	r1, r1
 8008f6e:	3301      	adds	r3, #1
 8008f70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008f74:	429e      	cmp	r6, r3
 8008f76:	f840 1b04 	str.w	r1, [r0], #4
 8008f7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008f7e:	dcec      	bgt.n	8008f5a <__multadd+0x12>
 8008f80:	f1b8 0f00 	cmp.w	r8, #0
 8008f84:	d022      	beq.n	8008fcc <__multadd+0x84>
 8008f86:	68a3      	ldr	r3, [r4, #8]
 8008f88:	42b3      	cmp	r3, r6
 8008f8a:	dc19      	bgt.n	8008fc0 <__multadd+0x78>
 8008f8c:	6861      	ldr	r1, [r4, #4]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	3101      	adds	r1, #1
 8008f92:	f7ff ff77 	bl	8008e84 <_Balloc>
 8008f96:	4605      	mov	r5, r0
 8008f98:	b928      	cbnz	r0, 8008fa6 <__multadd+0x5e>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <__multadd+0x8c>)
 8008f9e:	480e      	ldr	r0, [pc, #56]	; (8008fd8 <__multadd+0x90>)
 8008fa0:	21b5      	movs	r1, #181	; 0xb5
 8008fa2:	f000 fcab 	bl	80098fc <__assert_func>
 8008fa6:	6922      	ldr	r2, [r4, #16]
 8008fa8:	3202      	adds	r2, #2
 8008faa:	f104 010c 	add.w	r1, r4, #12
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	300c      	adds	r0, #12
 8008fb2:	f7ff ff4d 	bl	8008e50 <memcpy>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff ffa3 	bl	8008f04 <_Bfree>
 8008fbe:	462c      	mov	r4, r5
 8008fc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	f8c3 8014 	str.w	r8, [r3, #20]
 8008fca:	6126      	str	r6, [r4, #16]
 8008fcc:	4620      	mov	r0, r4
 8008fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd2:	bf00      	nop
 8008fd4:	08009d37 	.word	0x08009d37
 8008fd8:	08009da8 	.word	0x08009da8

08008fdc <__hi0bits>:
 8008fdc:	0c03      	lsrs	r3, r0, #16
 8008fde:	041b      	lsls	r3, r3, #16
 8008fe0:	b9d3      	cbnz	r3, 8009018 <__hi0bits+0x3c>
 8008fe2:	0400      	lsls	r0, r0, #16
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fea:	bf04      	itt	eq
 8008fec:	0200      	lsleq	r0, r0, #8
 8008fee:	3308      	addeq	r3, #8
 8008ff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ff4:	bf04      	itt	eq
 8008ff6:	0100      	lsleq	r0, r0, #4
 8008ff8:	3304      	addeq	r3, #4
 8008ffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ffe:	bf04      	itt	eq
 8009000:	0080      	lsleq	r0, r0, #2
 8009002:	3302      	addeq	r3, #2
 8009004:	2800      	cmp	r0, #0
 8009006:	db05      	blt.n	8009014 <__hi0bits+0x38>
 8009008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800900c:	f103 0301 	add.w	r3, r3, #1
 8009010:	bf08      	it	eq
 8009012:	2320      	moveq	r3, #32
 8009014:	4618      	mov	r0, r3
 8009016:	4770      	bx	lr
 8009018:	2300      	movs	r3, #0
 800901a:	e7e4      	b.n	8008fe6 <__hi0bits+0xa>

0800901c <__lo0bits>:
 800901c:	6803      	ldr	r3, [r0, #0]
 800901e:	f013 0207 	ands.w	r2, r3, #7
 8009022:	4601      	mov	r1, r0
 8009024:	d00b      	beq.n	800903e <__lo0bits+0x22>
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d424      	bmi.n	8009074 <__lo0bits+0x58>
 800902a:	0798      	lsls	r0, r3, #30
 800902c:	bf49      	itett	mi
 800902e:	085b      	lsrmi	r3, r3, #1
 8009030:	089b      	lsrpl	r3, r3, #2
 8009032:	2001      	movmi	r0, #1
 8009034:	600b      	strmi	r3, [r1, #0]
 8009036:	bf5c      	itt	pl
 8009038:	600b      	strpl	r3, [r1, #0]
 800903a:	2002      	movpl	r0, #2
 800903c:	4770      	bx	lr
 800903e:	b298      	uxth	r0, r3
 8009040:	b9b0      	cbnz	r0, 8009070 <__lo0bits+0x54>
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	2010      	movs	r0, #16
 8009046:	f013 0fff 	tst.w	r3, #255	; 0xff
 800904a:	bf04      	itt	eq
 800904c:	0a1b      	lsreq	r3, r3, #8
 800904e:	3008      	addeq	r0, #8
 8009050:	071a      	lsls	r2, r3, #28
 8009052:	bf04      	itt	eq
 8009054:	091b      	lsreq	r3, r3, #4
 8009056:	3004      	addeq	r0, #4
 8009058:	079a      	lsls	r2, r3, #30
 800905a:	bf04      	itt	eq
 800905c:	089b      	lsreq	r3, r3, #2
 800905e:	3002      	addeq	r0, #2
 8009060:	07da      	lsls	r2, r3, #31
 8009062:	d403      	bmi.n	800906c <__lo0bits+0x50>
 8009064:	085b      	lsrs	r3, r3, #1
 8009066:	f100 0001 	add.w	r0, r0, #1
 800906a:	d005      	beq.n	8009078 <__lo0bits+0x5c>
 800906c:	600b      	str	r3, [r1, #0]
 800906e:	4770      	bx	lr
 8009070:	4610      	mov	r0, r2
 8009072:	e7e8      	b.n	8009046 <__lo0bits+0x2a>
 8009074:	2000      	movs	r0, #0
 8009076:	4770      	bx	lr
 8009078:	2020      	movs	r0, #32
 800907a:	4770      	bx	lr

0800907c <__i2b>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	2101      	movs	r1, #1
 8009082:	f7ff feff 	bl	8008e84 <_Balloc>
 8009086:	4602      	mov	r2, r0
 8009088:	b928      	cbnz	r0, 8009096 <__i2b+0x1a>
 800908a:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <__i2b+0x24>)
 800908c:	4805      	ldr	r0, [pc, #20]	; (80090a4 <__i2b+0x28>)
 800908e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009092:	f000 fc33 	bl	80098fc <__assert_func>
 8009096:	2301      	movs	r3, #1
 8009098:	6144      	str	r4, [r0, #20]
 800909a:	6103      	str	r3, [r0, #16]
 800909c:	bd10      	pop	{r4, pc}
 800909e:	bf00      	nop
 80090a0:	08009d37 	.word	0x08009d37
 80090a4:	08009da8 	.word	0x08009da8

080090a8 <__multiply>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4614      	mov	r4, r2
 80090ae:	690a      	ldr	r2, [r1, #16]
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	bfb8      	it	lt
 80090b6:	460b      	movlt	r3, r1
 80090b8:	460d      	mov	r5, r1
 80090ba:	bfbc      	itt	lt
 80090bc:	4625      	movlt	r5, r4
 80090be:	461c      	movlt	r4, r3
 80090c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80090c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80090c8:	68ab      	ldr	r3, [r5, #8]
 80090ca:	6869      	ldr	r1, [r5, #4]
 80090cc:	eb0a 0709 	add.w	r7, sl, r9
 80090d0:	42bb      	cmp	r3, r7
 80090d2:	b085      	sub	sp, #20
 80090d4:	bfb8      	it	lt
 80090d6:	3101      	addlt	r1, #1
 80090d8:	f7ff fed4 	bl	8008e84 <_Balloc>
 80090dc:	b930      	cbnz	r0, 80090ec <__multiply+0x44>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b42      	ldr	r3, [pc, #264]	; (80091ec <__multiply+0x144>)
 80090e2:	4843      	ldr	r0, [pc, #268]	; (80091f0 <__multiply+0x148>)
 80090e4:	f240 115d 	movw	r1, #349	; 0x15d
 80090e8:	f000 fc08 	bl	80098fc <__assert_func>
 80090ec:	f100 0614 	add.w	r6, r0, #20
 80090f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80090f4:	4633      	mov	r3, r6
 80090f6:	2200      	movs	r2, #0
 80090f8:	4543      	cmp	r3, r8
 80090fa:	d31e      	bcc.n	800913a <__multiply+0x92>
 80090fc:	f105 0c14 	add.w	ip, r5, #20
 8009100:	f104 0314 	add.w	r3, r4, #20
 8009104:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009108:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	ebac 0205 	sub.w	r2, ip, r5
 8009112:	3a15      	subs	r2, #21
 8009114:	f022 0203 	bic.w	r2, r2, #3
 8009118:	3204      	adds	r2, #4
 800911a:	f105 0115 	add.w	r1, r5, #21
 800911e:	458c      	cmp	ip, r1
 8009120:	bf38      	it	cc
 8009122:	2204      	movcc	r2, #4
 8009124:	9201      	str	r2, [sp, #4]
 8009126:	9a02      	ldr	r2, [sp, #8]
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	429a      	cmp	r2, r3
 800912c:	d808      	bhi.n	8009140 <__multiply+0x98>
 800912e:	2f00      	cmp	r7, #0
 8009130:	dc55      	bgt.n	80091de <__multiply+0x136>
 8009132:	6107      	str	r7, [r0, #16]
 8009134:	b005      	add	sp, #20
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	f843 2b04 	str.w	r2, [r3], #4
 800913e:	e7db      	b.n	80090f8 <__multiply+0x50>
 8009140:	f8b3 a000 	ldrh.w	sl, [r3]
 8009144:	f1ba 0f00 	cmp.w	sl, #0
 8009148:	d020      	beq.n	800918c <__multiply+0xe4>
 800914a:	f105 0e14 	add.w	lr, r5, #20
 800914e:	46b1      	mov	r9, r6
 8009150:	2200      	movs	r2, #0
 8009152:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009156:	f8d9 b000 	ldr.w	fp, [r9]
 800915a:	b2a1      	uxth	r1, r4
 800915c:	fa1f fb8b 	uxth.w	fp, fp
 8009160:	fb0a b101 	mla	r1, sl, r1, fp
 8009164:	4411      	add	r1, r2
 8009166:	f8d9 2000 	ldr.w	r2, [r9]
 800916a:	0c24      	lsrs	r4, r4, #16
 800916c:	0c12      	lsrs	r2, r2, #16
 800916e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009172:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009176:	b289      	uxth	r1, r1
 8009178:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800917c:	45f4      	cmp	ip, lr
 800917e:	f849 1b04 	str.w	r1, [r9], #4
 8009182:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009186:	d8e4      	bhi.n	8009152 <__multiply+0xaa>
 8009188:	9901      	ldr	r1, [sp, #4]
 800918a:	5072      	str	r2, [r6, r1]
 800918c:	9a03      	ldr	r2, [sp, #12]
 800918e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009192:	3304      	adds	r3, #4
 8009194:	f1b9 0f00 	cmp.w	r9, #0
 8009198:	d01f      	beq.n	80091da <__multiply+0x132>
 800919a:	6834      	ldr	r4, [r6, #0]
 800919c:	f105 0114 	add.w	r1, r5, #20
 80091a0:	46b6      	mov	lr, r6
 80091a2:	f04f 0a00 	mov.w	sl, #0
 80091a6:	880a      	ldrh	r2, [r1, #0]
 80091a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80091ac:	fb09 b202 	mla	r2, r9, r2, fp
 80091b0:	4492      	add	sl, r2
 80091b2:	b2a4      	uxth	r4, r4
 80091b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80091b8:	f84e 4b04 	str.w	r4, [lr], #4
 80091bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80091c0:	f8be 2000 	ldrh.w	r2, [lr]
 80091c4:	0c24      	lsrs	r4, r4, #16
 80091c6:	fb09 2404 	mla	r4, r9, r4, r2
 80091ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80091ce:	458c      	cmp	ip, r1
 80091d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091d4:	d8e7      	bhi.n	80091a6 <__multiply+0xfe>
 80091d6:	9a01      	ldr	r2, [sp, #4]
 80091d8:	50b4      	str	r4, [r6, r2]
 80091da:	3604      	adds	r6, #4
 80091dc:	e7a3      	b.n	8009126 <__multiply+0x7e>
 80091de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1a5      	bne.n	8009132 <__multiply+0x8a>
 80091e6:	3f01      	subs	r7, #1
 80091e8:	e7a1      	b.n	800912e <__multiply+0x86>
 80091ea:	bf00      	nop
 80091ec:	08009d37 	.word	0x08009d37
 80091f0:	08009da8 	.word	0x08009da8

080091f4 <__pow5mult>:
 80091f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f8:	4615      	mov	r5, r2
 80091fa:	f012 0203 	ands.w	r2, r2, #3
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	d007      	beq.n	8009214 <__pow5mult+0x20>
 8009204:	4c25      	ldr	r4, [pc, #148]	; (800929c <__pow5mult+0xa8>)
 8009206:	3a01      	subs	r2, #1
 8009208:	2300      	movs	r3, #0
 800920a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800920e:	f7ff fe9b 	bl	8008f48 <__multadd>
 8009212:	4607      	mov	r7, r0
 8009214:	10ad      	asrs	r5, r5, #2
 8009216:	d03d      	beq.n	8009294 <__pow5mult+0xa0>
 8009218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800921a:	b97c      	cbnz	r4, 800923c <__pow5mult+0x48>
 800921c:	2010      	movs	r0, #16
 800921e:	f7fd feb5 	bl	8006f8c <malloc>
 8009222:	4602      	mov	r2, r0
 8009224:	6270      	str	r0, [r6, #36]	; 0x24
 8009226:	b928      	cbnz	r0, 8009234 <__pow5mult+0x40>
 8009228:	4b1d      	ldr	r3, [pc, #116]	; (80092a0 <__pow5mult+0xac>)
 800922a:	481e      	ldr	r0, [pc, #120]	; (80092a4 <__pow5mult+0xb0>)
 800922c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009230:	f000 fb64 	bl	80098fc <__assert_func>
 8009234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009238:	6004      	str	r4, [r0, #0]
 800923a:	60c4      	str	r4, [r0, #12]
 800923c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009244:	b94c      	cbnz	r4, 800925a <__pow5mult+0x66>
 8009246:	f240 2171 	movw	r1, #625	; 0x271
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ff16 	bl	800907c <__i2b>
 8009250:	2300      	movs	r3, #0
 8009252:	f8c8 0008 	str.w	r0, [r8, #8]
 8009256:	4604      	mov	r4, r0
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	f04f 0900 	mov.w	r9, #0
 800925e:	07eb      	lsls	r3, r5, #31
 8009260:	d50a      	bpl.n	8009278 <__pow5mult+0x84>
 8009262:	4639      	mov	r1, r7
 8009264:	4622      	mov	r2, r4
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ff1e 	bl	80090a8 <__multiply>
 800926c:	4639      	mov	r1, r7
 800926e:	4680      	mov	r8, r0
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff fe47 	bl	8008f04 <_Bfree>
 8009276:	4647      	mov	r7, r8
 8009278:	106d      	asrs	r5, r5, #1
 800927a:	d00b      	beq.n	8009294 <__pow5mult+0xa0>
 800927c:	6820      	ldr	r0, [r4, #0]
 800927e:	b938      	cbnz	r0, 8009290 <__pow5mult+0x9c>
 8009280:	4622      	mov	r2, r4
 8009282:	4621      	mov	r1, r4
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff ff0f 	bl	80090a8 <__multiply>
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	f8c0 9000 	str.w	r9, [r0]
 8009290:	4604      	mov	r4, r0
 8009292:	e7e4      	b.n	800925e <__pow5mult+0x6a>
 8009294:	4638      	mov	r0, r7
 8009296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929a:	bf00      	nop
 800929c:	08009ef8 	.word	0x08009ef8
 80092a0:	08009cc1 	.word	0x08009cc1
 80092a4:	08009da8 	.word	0x08009da8

080092a8 <__lshift>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	460c      	mov	r4, r1
 80092ae:	6849      	ldr	r1, [r1, #4]
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	4607      	mov	r7, r0
 80092ba:	4691      	mov	r9, r2
 80092bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092c0:	f108 0601 	add.w	r6, r8, #1
 80092c4:	42b3      	cmp	r3, r6
 80092c6:	db0b      	blt.n	80092e0 <__lshift+0x38>
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7ff fddb 	bl	8008e84 <_Balloc>
 80092ce:	4605      	mov	r5, r0
 80092d0:	b948      	cbnz	r0, 80092e6 <__lshift+0x3e>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b28      	ldr	r3, [pc, #160]	; (8009378 <__lshift+0xd0>)
 80092d6:	4829      	ldr	r0, [pc, #164]	; (800937c <__lshift+0xd4>)
 80092d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092dc:	f000 fb0e 	bl	80098fc <__assert_func>
 80092e0:	3101      	adds	r1, #1
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	e7ee      	b.n	80092c4 <__lshift+0x1c>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f100 0114 	add.w	r1, r0, #20
 80092ec:	f100 0210 	add.w	r2, r0, #16
 80092f0:	4618      	mov	r0, r3
 80092f2:	4553      	cmp	r3, sl
 80092f4:	db33      	blt.n	800935e <__lshift+0xb6>
 80092f6:	6920      	ldr	r0, [r4, #16]
 80092f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092fc:	f104 0314 	add.w	r3, r4, #20
 8009300:	f019 091f 	ands.w	r9, r9, #31
 8009304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800930c:	d02b      	beq.n	8009366 <__lshift+0xbe>
 800930e:	f1c9 0e20 	rsb	lr, r9, #32
 8009312:	468a      	mov	sl, r1
 8009314:	2200      	movs	r2, #0
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	fa00 f009 	lsl.w	r0, r0, r9
 800931c:	4302      	orrs	r2, r0
 800931e:	f84a 2b04 	str.w	r2, [sl], #4
 8009322:	f853 2b04 	ldr.w	r2, [r3], #4
 8009326:	459c      	cmp	ip, r3
 8009328:	fa22 f20e 	lsr.w	r2, r2, lr
 800932c:	d8f3      	bhi.n	8009316 <__lshift+0x6e>
 800932e:	ebac 0304 	sub.w	r3, ip, r4
 8009332:	3b15      	subs	r3, #21
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	3304      	adds	r3, #4
 800933a:	f104 0015 	add.w	r0, r4, #21
 800933e:	4584      	cmp	ip, r0
 8009340:	bf38      	it	cc
 8009342:	2304      	movcc	r3, #4
 8009344:	50ca      	str	r2, [r1, r3]
 8009346:	b10a      	cbz	r2, 800934c <__lshift+0xa4>
 8009348:	f108 0602 	add.w	r6, r8, #2
 800934c:	3e01      	subs	r6, #1
 800934e:	4638      	mov	r0, r7
 8009350:	612e      	str	r6, [r5, #16]
 8009352:	4621      	mov	r1, r4
 8009354:	f7ff fdd6 	bl	8008f04 <_Bfree>
 8009358:	4628      	mov	r0, r5
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009362:	3301      	adds	r3, #1
 8009364:	e7c5      	b.n	80092f2 <__lshift+0x4a>
 8009366:	3904      	subs	r1, #4
 8009368:	f853 2b04 	ldr.w	r2, [r3], #4
 800936c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009370:	459c      	cmp	ip, r3
 8009372:	d8f9      	bhi.n	8009368 <__lshift+0xc0>
 8009374:	e7ea      	b.n	800934c <__lshift+0xa4>
 8009376:	bf00      	nop
 8009378:	08009d37 	.word	0x08009d37
 800937c:	08009da8 	.word	0x08009da8

08009380 <__mcmp>:
 8009380:	b530      	push	{r4, r5, lr}
 8009382:	6902      	ldr	r2, [r0, #16]
 8009384:	690c      	ldr	r4, [r1, #16]
 8009386:	1b12      	subs	r2, r2, r4
 8009388:	d10e      	bne.n	80093a8 <__mcmp+0x28>
 800938a:	f100 0314 	add.w	r3, r0, #20
 800938e:	3114      	adds	r1, #20
 8009390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800939c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093a0:	42a5      	cmp	r5, r4
 80093a2:	d003      	beq.n	80093ac <__mcmp+0x2c>
 80093a4:	d305      	bcc.n	80093b2 <__mcmp+0x32>
 80093a6:	2201      	movs	r2, #1
 80093a8:	4610      	mov	r0, r2
 80093aa:	bd30      	pop	{r4, r5, pc}
 80093ac:	4283      	cmp	r3, r0
 80093ae:	d3f3      	bcc.n	8009398 <__mcmp+0x18>
 80093b0:	e7fa      	b.n	80093a8 <__mcmp+0x28>
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093b6:	e7f7      	b.n	80093a8 <__mcmp+0x28>

080093b8 <__mdiff>:
 80093b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	4606      	mov	r6, r0
 80093c0:	4611      	mov	r1, r2
 80093c2:	4620      	mov	r0, r4
 80093c4:	4617      	mov	r7, r2
 80093c6:	f7ff ffdb 	bl	8009380 <__mcmp>
 80093ca:	1e05      	subs	r5, r0, #0
 80093cc:	d110      	bne.n	80093f0 <__mdiff+0x38>
 80093ce:	4629      	mov	r1, r5
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff fd57 	bl	8008e84 <_Balloc>
 80093d6:	b930      	cbnz	r0, 80093e6 <__mdiff+0x2e>
 80093d8:	4b39      	ldr	r3, [pc, #228]	; (80094c0 <__mdiff+0x108>)
 80093da:	4602      	mov	r2, r0
 80093dc:	f240 2132 	movw	r1, #562	; 0x232
 80093e0:	4838      	ldr	r0, [pc, #224]	; (80094c4 <__mdiff+0x10c>)
 80093e2:	f000 fa8b 	bl	80098fc <__assert_func>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	bfa4      	itt	ge
 80093f2:	463b      	movge	r3, r7
 80093f4:	4627      	movge	r7, r4
 80093f6:	4630      	mov	r0, r6
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	bfa6      	itte	ge
 80093fc:	461c      	movge	r4, r3
 80093fe:	2500      	movge	r5, #0
 8009400:	2501      	movlt	r5, #1
 8009402:	f7ff fd3f 	bl	8008e84 <_Balloc>
 8009406:	b920      	cbnz	r0, 8009412 <__mdiff+0x5a>
 8009408:	4b2d      	ldr	r3, [pc, #180]	; (80094c0 <__mdiff+0x108>)
 800940a:	4602      	mov	r2, r0
 800940c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009410:	e7e6      	b.n	80093e0 <__mdiff+0x28>
 8009412:	693e      	ldr	r6, [r7, #16]
 8009414:	60c5      	str	r5, [r0, #12]
 8009416:	6925      	ldr	r5, [r4, #16]
 8009418:	f107 0114 	add.w	r1, r7, #20
 800941c:	f104 0914 	add.w	r9, r4, #20
 8009420:	f100 0e14 	add.w	lr, r0, #20
 8009424:	f107 0210 	add.w	r2, r7, #16
 8009428:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800942c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009430:	46f2      	mov	sl, lr
 8009432:	2700      	movs	r7, #0
 8009434:	f859 3b04 	ldr.w	r3, [r9], #4
 8009438:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800943c:	fa1f f883 	uxth.w	r8, r3
 8009440:	fa17 f78b 	uxtah	r7, r7, fp
 8009444:	0c1b      	lsrs	r3, r3, #16
 8009446:	eba7 0808 	sub.w	r8, r7, r8
 800944a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800944e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009452:	fa1f f888 	uxth.w	r8, r8
 8009456:	141f      	asrs	r7, r3, #16
 8009458:	454d      	cmp	r5, r9
 800945a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800945e:	f84a 3b04 	str.w	r3, [sl], #4
 8009462:	d8e7      	bhi.n	8009434 <__mdiff+0x7c>
 8009464:	1b2b      	subs	r3, r5, r4
 8009466:	3b15      	subs	r3, #21
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	3304      	adds	r3, #4
 800946e:	3415      	adds	r4, #21
 8009470:	42a5      	cmp	r5, r4
 8009472:	bf38      	it	cc
 8009474:	2304      	movcc	r3, #4
 8009476:	4419      	add	r1, r3
 8009478:	4473      	add	r3, lr
 800947a:	469e      	mov	lr, r3
 800947c:	460d      	mov	r5, r1
 800947e:	4565      	cmp	r5, ip
 8009480:	d30e      	bcc.n	80094a0 <__mdiff+0xe8>
 8009482:	f10c 0203 	add.w	r2, ip, #3
 8009486:	1a52      	subs	r2, r2, r1
 8009488:	f022 0203 	bic.w	r2, r2, #3
 800948c:	3903      	subs	r1, #3
 800948e:	458c      	cmp	ip, r1
 8009490:	bf38      	it	cc
 8009492:	2200      	movcc	r2, #0
 8009494:	441a      	add	r2, r3
 8009496:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800949a:	b17b      	cbz	r3, 80094bc <__mdiff+0x104>
 800949c:	6106      	str	r6, [r0, #16]
 800949e:	e7a5      	b.n	80093ec <__mdiff+0x34>
 80094a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80094a4:	fa17 f488 	uxtah	r4, r7, r8
 80094a8:	1422      	asrs	r2, r4, #16
 80094aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80094ae:	b2a4      	uxth	r4, r4
 80094b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80094b4:	f84e 4b04 	str.w	r4, [lr], #4
 80094b8:	1417      	asrs	r7, r2, #16
 80094ba:	e7e0      	b.n	800947e <__mdiff+0xc6>
 80094bc:	3e01      	subs	r6, #1
 80094be:	e7ea      	b.n	8009496 <__mdiff+0xde>
 80094c0:	08009d37 	.word	0x08009d37
 80094c4:	08009da8 	.word	0x08009da8

080094c8 <__d2b>:
 80094c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	4689      	mov	r9, r1
 80094ce:	2101      	movs	r1, #1
 80094d0:	ec57 6b10 	vmov	r6, r7, d0
 80094d4:	4690      	mov	r8, r2
 80094d6:	f7ff fcd5 	bl	8008e84 <_Balloc>
 80094da:	4604      	mov	r4, r0
 80094dc:	b930      	cbnz	r0, 80094ec <__d2b+0x24>
 80094de:	4602      	mov	r2, r0
 80094e0:	4b25      	ldr	r3, [pc, #148]	; (8009578 <__d2b+0xb0>)
 80094e2:	4826      	ldr	r0, [pc, #152]	; (800957c <__d2b+0xb4>)
 80094e4:	f240 310a 	movw	r1, #778	; 0x30a
 80094e8:	f000 fa08 	bl	80098fc <__assert_func>
 80094ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094f4:	bb35      	cbnz	r5, 8009544 <__d2b+0x7c>
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	d028      	beq.n	800954e <__d2b+0x86>
 80094fc:	4668      	mov	r0, sp
 80094fe:	9600      	str	r6, [sp, #0]
 8009500:	f7ff fd8c 	bl	800901c <__lo0bits>
 8009504:	9900      	ldr	r1, [sp, #0]
 8009506:	b300      	cbz	r0, 800954a <__d2b+0x82>
 8009508:	9a01      	ldr	r2, [sp, #4]
 800950a:	f1c0 0320 	rsb	r3, r0, #32
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	430b      	orrs	r3, r1
 8009514:	40c2      	lsrs	r2, r0
 8009516:	6163      	str	r3, [r4, #20]
 8009518:	9201      	str	r2, [sp, #4]
 800951a:	9b01      	ldr	r3, [sp, #4]
 800951c:	61a3      	str	r3, [r4, #24]
 800951e:	2b00      	cmp	r3, #0
 8009520:	bf14      	ite	ne
 8009522:	2202      	movne	r2, #2
 8009524:	2201      	moveq	r2, #1
 8009526:	6122      	str	r2, [r4, #16]
 8009528:	b1d5      	cbz	r5, 8009560 <__d2b+0x98>
 800952a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800952e:	4405      	add	r5, r0
 8009530:	f8c9 5000 	str.w	r5, [r9]
 8009534:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009538:	f8c8 0000 	str.w	r0, [r8]
 800953c:	4620      	mov	r0, r4
 800953e:	b003      	add	sp, #12
 8009540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009548:	e7d5      	b.n	80094f6 <__d2b+0x2e>
 800954a:	6161      	str	r1, [r4, #20]
 800954c:	e7e5      	b.n	800951a <__d2b+0x52>
 800954e:	a801      	add	r0, sp, #4
 8009550:	f7ff fd64 	bl	800901c <__lo0bits>
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	6163      	str	r3, [r4, #20]
 8009558:	2201      	movs	r2, #1
 800955a:	6122      	str	r2, [r4, #16]
 800955c:	3020      	adds	r0, #32
 800955e:	e7e3      	b.n	8009528 <__d2b+0x60>
 8009560:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009564:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009568:	f8c9 0000 	str.w	r0, [r9]
 800956c:	6918      	ldr	r0, [r3, #16]
 800956e:	f7ff fd35 	bl	8008fdc <__hi0bits>
 8009572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009576:	e7df      	b.n	8009538 <__d2b+0x70>
 8009578:	08009d37 	.word	0x08009d37
 800957c:	08009da8 	.word	0x08009da8

08009580 <_calloc_r>:
 8009580:	b513      	push	{r0, r1, r4, lr}
 8009582:	434a      	muls	r2, r1
 8009584:	4611      	mov	r1, r2
 8009586:	9201      	str	r2, [sp, #4]
 8009588:	f7fd fd60 	bl	800704c <_malloc_r>
 800958c:	4604      	mov	r4, r0
 800958e:	b118      	cbz	r0, 8009598 <_calloc_r+0x18>
 8009590:	9a01      	ldr	r2, [sp, #4]
 8009592:	2100      	movs	r1, #0
 8009594:	f7fd fd02 	bl	8006f9c <memset>
 8009598:	4620      	mov	r0, r4
 800959a:	b002      	add	sp, #8
 800959c:	bd10      	pop	{r4, pc}

0800959e <__sfputc_r>:
 800959e:	6893      	ldr	r3, [r2, #8]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	b410      	push	{r4}
 80095a6:	6093      	str	r3, [r2, #8]
 80095a8:	da08      	bge.n	80095bc <__sfputc_r+0x1e>
 80095aa:	6994      	ldr	r4, [r2, #24]
 80095ac:	42a3      	cmp	r3, r4
 80095ae:	db01      	blt.n	80095b4 <__sfputc_r+0x16>
 80095b0:	290a      	cmp	r1, #10
 80095b2:	d103      	bne.n	80095bc <__sfputc_r+0x1e>
 80095b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b8:	f7fe baee 	b.w	8007b98 <__swbuf_r>
 80095bc:	6813      	ldr	r3, [r2, #0]
 80095be:	1c58      	adds	r0, r3, #1
 80095c0:	6010      	str	r0, [r2, #0]
 80095c2:	7019      	strb	r1, [r3, #0]
 80095c4:	4608      	mov	r0, r1
 80095c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <__sfputs_r>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	4606      	mov	r6, r0
 80095d0:	460f      	mov	r7, r1
 80095d2:	4614      	mov	r4, r2
 80095d4:	18d5      	adds	r5, r2, r3
 80095d6:	42ac      	cmp	r4, r5
 80095d8:	d101      	bne.n	80095de <__sfputs_r+0x12>
 80095da:	2000      	movs	r0, #0
 80095dc:	e007      	b.n	80095ee <__sfputs_r+0x22>
 80095de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e2:	463a      	mov	r2, r7
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7ff ffda 	bl	800959e <__sfputc_r>
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	d1f3      	bne.n	80095d6 <__sfputs_r+0xa>
 80095ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095f0 <_vfiprintf_r>:
 80095f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f4:	460d      	mov	r5, r1
 80095f6:	b09d      	sub	sp, #116	; 0x74
 80095f8:	4614      	mov	r4, r2
 80095fa:	4698      	mov	r8, r3
 80095fc:	4606      	mov	r6, r0
 80095fe:	b118      	cbz	r0, 8009608 <_vfiprintf_r+0x18>
 8009600:	6983      	ldr	r3, [r0, #24]
 8009602:	b90b      	cbnz	r3, 8009608 <_vfiprintf_r+0x18>
 8009604:	f7ff fb1a 	bl	8008c3c <__sinit>
 8009608:	4b89      	ldr	r3, [pc, #548]	; (8009830 <_vfiprintf_r+0x240>)
 800960a:	429d      	cmp	r5, r3
 800960c:	d11b      	bne.n	8009646 <_vfiprintf_r+0x56>
 800960e:	6875      	ldr	r5, [r6, #4]
 8009610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009612:	07d9      	lsls	r1, r3, #31
 8009614:	d405      	bmi.n	8009622 <_vfiprintf_r+0x32>
 8009616:	89ab      	ldrh	r3, [r5, #12]
 8009618:	059a      	lsls	r2, r3, #22
 800961a:	d402      	bmi.n	8009622 <_vfiprintf_r+0x32>
 800961c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800961e:	f7ff fbb0 	bl	8008d82 <__retarget_lock_acquire_recursive>
 8009622:	89ab      	ldrh	r3, [r5, #12]
 8009624:	071b      	lsls	r3, r3, #28
 8009626:	d501      	bpl.n	800962c <_vfiprintf_r+0x3c>
 8009628:	692b      	ldr	r3, [r5, #16]
 800962a:	b9eb      	cbnz	r3, 8009668 <_vfiprintf_r+0x78>
 800962c:	4629      	mov	r1, r5
 800962e:	4630      	mov	r0, r6
 8009630:	f7fe fb04 	bl	8007c3c <__swsetup_r>
 8009634:	b1c0      	cbz	r0, 8009668 <_vfiprintf_r+0x78>
 8009636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009638:	07dc      	lsls	r4, r3, #31
 800963a:	d50e      	bpl.n	800965a <_vfiprintf_r+0x6a>
 800963c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009640:	b01d      	add	sp, #116	; 0x74
 8009642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009646:	4b7b      	ldr	r3, [pc, #492]	; (8009834 <_vfiprintf_r+0x244>)
 8009648:	429d      	cmp	r5, r3
 800964a:	d101      	bne.n	8009650 <_vfiprintf_r+0x60>
 800964c:	68b5      	ldr	r5, [r6, #8]
 800964e:	e7df      	b.n	8009610 <_vfiprintf_r+0x20>
 8009650:	4b79      	ldr	r3, [pc, #484]	; (8009838 <_vfiprintf_r+0x248>)
 8009652:	429d      	cmp	r5, r3
 8009654:	bf08      	it	eq
 8009656:	68f5      	ldreq	r5, [r6, #12]
 8009658:	e7da      	b.n	8009610 <_vfiprintf_r+0x20>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	0598      	lsls	r0, r3, #22
 800965e:	d4ed      	bmi.n	800963c <_vfiprintf_r+0x4c>
 8009660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009662:	f7ff fb8f 	bl	8008d84 <__retarget_lock_release_recursive>
 8009666:	e7e9      	b.n	800963c <_vfiprintf_r+0x4c>
 8009668:	2300      	movs	r3, #0
 800966a:	9309      	str	r3, [sp, #36]	; 0x24
 800966c:	2320      	movs	r3, #32
 800966e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009672:	f8cd 800c 	str.w	r8, [sp, #12]
 8009676:	2330      	movs	r3, #48	; 0x30
 8009678:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800983c <_vfiprintf_r+0x24c>
 800967c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009680:	f04f 0901 	mov.w	r9, #1
 8009684:	4623      	mov	r3, r4
 8009686:	469a      	mov	sl, r3
 8009688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800968c:	b10a      	cbz	r2, 8009692 <_vfiprintf_r+0xa2>
 800968e:	2a25      	cmp	r2, #37	; 0x25
 8009690:	d1f9      	bne.n	8009686 <_vfiprintf_r+0x96>
 8009692:	ebba 0b04 	subs.w	fp, sl, r4
 8009696:	d00b      	beq.n	80096b0 <_vfiprintf_r+0xc0>
 8009698:	465b      	mov	r3, fp
 800969a:	4622      	mov	r2, r4
 800969c:	4629      	mov	r1, r5
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ff94 	bl	80095cc <__sfputs_r>
 80096a4:	3001      	adds	r0, #1
 80096a6:	f000 80aa 	beq.w	80097fe <_vfiprintf_r+0x20e>
 80096aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ac:	445a      	add	r2, fp
 80096ae:	9209      	str	r2, [sp, #36]	; 0x24
 80096b0:	f89a 3000 	ldrb.w	r3, [sl]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 80a2 	beq.w	80097fe <_vfiprintf_r+0x20e>
 80096ba:	2300      	movs	r3, #0
 80096bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096c4:	f10a 0a01 	add.w	sl, sl, #1
 80096c8:	9304      	str	r3, [sp, #16]
 80096ca:	9307      	str	r3, [sp, #28]
 80096cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096d0:	931a      	str	r3, [sp, #104]	; 0x68
 80096d2:	4654      	mov	r4, sl
 80096d4:	2205      	movs	r2, #5
 80096d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096da:	4858      	ldr	r0, [pc, #352]	; (800983c <_vfiprintf_r+0x24c>)
 80096dc:	f7f6 fd58 	bl	8000190 <memchr>
 80096e0:	9a04      	ldr	r2, [sp, #16]
 80096e2:	b9d8      	cbnz	r0, 800971c <_vfiprintf_r+0x12c>
 80096e4:	06d1      	lsls	r1, r2, #27
 80096e6:	bf44      	itt	mi
 80096e8:	2320      	movmi	r3, #32
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ee:	0713      	lsls	r3, r2, #28
 80096f0:	bf44      	itt	mi
 80096f2:	232b      	movmi	r3, #43	; 0x2b
 80096f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096f8:	f89a 3000 	ldrb.w	r3, [sl]
 80096fc:	2b2a      	cmp	r3, #42	; 0x2a
 80096fe:	d015      	beq.n	800972c <_vfiprintf_r+0x13c>
 8009700:	9a07      	ldr	r2, [sp, #28]
 8009702:	4654      	mov	r4, sl
 8009704:	2000      	movs	r0, #0
 8009706:	f04f 0c0a 	mov.w	ip, #10
 800970a:	4621      	mov	r1, r4
 800970c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009710:	3b30      	subs	r3, #48	; 0x30
 8009712:	2b09      	cmp	r3, #9
 8009714:	d94e      	bls.n	80097b4 <_vfiprintf_r+0x1c4>
 8009716:	b1b0      	cbz	r0, 8009746 <_vfiprintf_r+0x156>
 8009718:	9207      	str	r2, [sp, #28]
 800971a:	e014      	b.n	8009746 <_vfiprintf_r+0x156>
 800971c:	eba0 0308 	sub.w	r3, r0, r8
 8009720:	fa09 f303 	lsl.w	r3, r9, r3
 8009724:	4313      	orrs	r3, r2
 8009726:	9304      	str	r3, [sp, #16]
 8009728:	46a2      	mov	sl, r4
 800972a:	e7d2      	b.n	80096d2 <_vfiprintf_r+0xe2>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	1d19      	adds	r1, r3, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	9103      	str	r1, [sp, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	bfbb      	ittet	lt
 8009738:	425b      	neglt	r3, r3
 800973a:	f042 0202 	orrlt.w	r2, r2, #2
 800973e:	9307      	strge	r3, [sp, #28]
 8009740:	9307      	strlt	r3, [sp, #28]
 8009742:	bfb8      	it	lt
 8009744:	9204      	strlt	r2, [sp, #16]
 8009746:	7823      	ldrb	r3, [r4, #0]
 8009748:	2b2e      	cmp	r3, #46	; 0x2e
 800974a:	d10c      	bne.n	8009766 <_vfiprintf_r+0x176>
 800974c:	7863      	ldrb	r3, [r4, #1]
 800974e:	2b2a      	cmp	r3, #42	; 0x2a
 8009750:	d135      	bne.n	80097be <_vfiprintf_r+0x1ce>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	1d1a      	adds	r2, r3, #4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	9203      	str	r2, [sp, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	bfb8      	it	lt
 800975e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009762:	3402      	adds	r4, #2
 8009764:	9305      	str	r3, [sp, #20]
 8009766:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800984c <_vfiprintf_r+0x25c>
 800976a:	7821      	ldrb	r1, [r4, #0]
 800976c:	2203      	movs	r2, #3
 800976e:	4650      	mov	r0, sl
 8009770:	f7f6 fd0e 	bl	8000190 <memchr>
 8009774:	b140      	cbz	r0, 8009788 <_vfiprintf_r+0x198>
 8009776:	2340      	movs	r3, #64	; 0x40
 8009778:	eba0 000a 	sub.w	r0, r0, sl
 800977c:	fa03 f000 	lsl.w	r0, r3, r0
 8009780:	9b04      	ldr	r3, [sp, #16]
 8009782:	4303      	orrs	r3, r0
 8009784:	3401      	adds	r4, #1
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978c:	482c      	ldr	r0, [pc, #176]	; (8009840 <_vfiprintf_r+0x250>)
 800978e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009792:	2206      	movs	r2, #6
 8009794:	f7f6 fcfc 	bl	8000190 <memchr>
 8009798:	2800      	cmp	r0, #0
 800979a:	d03f      	beq.n	800981c <_vfiprintf_r+0x22c>
 800979c:	4b29      	ldr	r3, [pc, #164]	; (8009844 <_vfiprintf_r+0x254>)
 800979e:	bb1b      	cbnz	r3, 80097e8 <_vfiprintf_r+0x1f8>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	3307      	adds	r3, #7
 80097a4:	f023 0307 	bic.w	r3, r3, #7
 80097a8:	3308      	adds	r3, #8
 80097aa:	9303      	str	r3, [sp, #12]
 80097ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ae:	443b      	add	r3, r7
 80097b0:	9309      	str	r3, [sp, #36]	; 0x24
 80097b2:	e767      	b.n	8009684 <_vfiprintf_r+0x94>
 80097b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097b8:	460c      	mov	r4, r1
 80097ba:	2001      	movs	r0, #1
 80097bc:	e7a5      	b.n	800970a <_vfiprintf_r+0x11a>
 80097be:	2300      	movs	r3, #0
 80097c0:	3401      	adds	r4, #1
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	4619      	mov	r1, r3
 80097c6:	f04f 0c0a 	mov.w	ip, #10
 80097ca:	4620      	mov	r0, r4
 80097cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097d0:	3a30      	subs	r2, #48	; 0x30
 80097d2:	2a09      	cmp	r2, #9
 80097d4:	d903      	bls.n	80097de <_vfiprintf_r+0x1ee>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0c5      	beq.n	8009766 <_vfiprintf_r+0x176>
 80097da:	9105      	str	r1, [sp, #20]
 80097dc:	e7c3      	b.n	8009766 <_vfiprintf_r+0x176>
 80097de:	fb0c 2101 	mla	r1, ip, r1, r2
 80097e2:	4604      	mov	r4, r0
 80097e4:	2301      	movs	r3, #1
 80097e6:	e7f0      	b.n	80097ca <_vfiprintf_r+0x1da>
 80097e8:	ab03      	add	r3, sp, #12
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	462a      	mov	r2, r5
 80097ee:	4b16      	ldr	r3, [pc, #88]	; (8009848 <_vfiprintf_r+0x258>)
 80097f0:	a904      	add	r1, sp, #16
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7fd fd24 	bl	8007240 <_printf_float>
 80097f8:	4607      	mov	r7, r0
 80097fa:	1c78      	adds	r0, r7, #1
 80097fc:	d1d6      	bne.n	80097ac <_vfiprintf_r+0x1bc>
 80097fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009800:	07d9      	lsls	r1, r3, #31
 8009802:	d405      	bmi.n	8009810 <_vfiprintf_r+0x220>
 8009804:	89ab      	ldrh	r3, [r5, #12]
 8009806:	059a      	lsls	r2, r3, #22
 8009808:	d402      	bmi.n	8009810 <_vfiprintf_r+0x220>
 800980a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800980c:	f7ff faba 	bl	8008d84 <__retarget_lock_release_recursive>
 8009810:	89ab      	ldrh	r3, [r5, #12]
 8009812:	065b      	lsls	r3, r3, #25
 8009814:	f53f af12 	bmi.w	800963c <_vfiprintf_r+0x4c>
 8009818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800981a:	e711      	b.n	8009640 <_vfiprintf_r+0x50>
 800981c:	ab03      	add	r3, sp, #12
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	462a      	mov	r2, r5
 8009822:	4b09      	ldr	r3, [pc, #36]	; (8009848 <_vfiprintf_r+0x258>)
 8009824:	a904      	add	r1, sp, #16
 8009826:	4630      	mov	r0, r6
 8009828:	f7fd ffae 	bl	8007788 <_printf_i>
 800982c:	e7e4      	b.n	80097f8 <_vfiprintf_r+0x208>
 800982e:	bf00      	nop
 8009830:	08009d68 	.word	0x08009d68
 8009834:	08009d88 	.word	0x08009d88
 8009838:	08009d48 	.word	0x08009d48
 800983c:	08009f04 	.word	0x08009f04
 8009840:	08009f0e 	.word	0x08009f0e
 8009844:	08007241 	.word	0x08007241
 8009848:	080095cd 	.word	0x080095cd
 800984c:	08009f0a 	.word	0x08009f0a

08009850 <__sread>:
 8009850:	b510      	push	{r4, lr}
 8009852:	460c      	mov	r4, r1
 8009854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009858:	f000 f8d6 	bl	8009a08 <_read_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	bfab      	itete	ge
 8009860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009862:	89a3      	ldrhlt	r3, [r4, #12]
 8009864:	181b      	addge	r3, r3, r0
 8009866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800986a:	bfac      	ite	ge
 800986c:	6563      	strge	r3, [r4, #84]	; 0x54
 800986e:	81a3      	strhlt	r3, [r4, #12]
 8009870:	bd10      	pop	{r4, pc}

08009872 <__swrite>:
 8009872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	461f      	mov	r7, r3
 8009878:	898b      	ldrh	r3, [r1, #12]
 800987a:	05db      	lsls	r3, r3, #23
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	4616      	mov	r6, r2
 8009882:	d505      	bpl.n	8009890 <__swrite+0x1e>
 8009884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009888:	2302      	movs	r3, #2
 800988a:	2200      	movs	r2, #0
 800988c:	f000 f898 	bl	80099c0 <_lseek_r>
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800989a:	81a3      	strh	r3, [r4, #12]
 800989c:	4632      	mov	r2, r6
 800989e:	463b      	mov	r3, r7
 80098a0:	4628      	mov	r0, r5
 80098a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a6:	f000 b817 	b.w	80098d8 <_write_r>

080098aa <__sseek>:
 80098aa:	b510      	push	{r4, lr}
 80098ac:	460c      	mov	r4, r1
 80098ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b2:	f000 f885 	bl	80099c0 <_lseek_r>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	bf15      	itete	ne
 80098bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098c6:	81a3      	strheq	r3, [r4, #12]
 80098c8:	bf18      	it	ne
 80098ca:	81a3      	strhne	r3, [r4, #12]
 80098cc:	bd10      	pop	{r4, pc}

080098ce <__sclose>:
 80098ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d2:	f000 b831 	b.w	8009938 <_close_r>
	...

080098d8 <_write_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d07      	ldr	r5, [pc, #28]	; (80098f8 <_write_r+0x20>)
 80098dc:	4604      	mov	r4, r0
 80098de:	4608      	mov	r0, r1
 80098e0:	4611      	mov	r1, r2
 80098e2:	2200      	movs	r2, #0
 80098e4:	602a      	str	r2, [r5, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f7f8 fc0f 	bl	800210a <_write>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_write_r+0x1e>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_write_r+0x1e>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	2000034c 	.word	0x2000034c

080098fc <__assert_func>:
 80098fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098fe:	4614      	mov	r4, r2
 8009900:	461a      	mov	r2, r3
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <__assert_func+0x2c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4605      	mov	r5, r0
 8009908:	68d8      	ldr	r0, [r3, #12]
 800990a:	b14c      	cbz	r4, 8009920 <__assert_func+0x24>
 800990c:	4b07      	ldr	r3, [pc, #28]	; (800992c <__assert_func+0x30>)
 800990e:	9100      	str	r1, [sp, #0]
 8009910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009914:	4906      	ldr	r1, [pc, #24]	; (8009930 <__assert_func+0x34>)
 8009916:	462b      	mov	r3, r5
 8009918:	f000 f81e 	bl	8009958 <fiprintf>
 800991c:	f7fd fb04 	bl	8006f28 <abort>
 8009920:	4b04      	ldr	r3, [pc, #16]	; (8009934 <__assert_func+0x38>)
 8009922:	461c      	mov	r4, r3
 8009924:	e7f3      	b.n	800990e <__assert_func+0x12>
 8009926:	bf00      	nop
 8009928:	20000024 	.word	0x20000024
 800992c:	08009f15 	.word	0x08009f15
 8009930:	08009f22 	.word	0x08009f22
 8009934:	08009f50 	.word	0x08009f50

08009938 <_close_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4d06      	ldr	r5, [pc, #24]	; (8009954 <_close_r+0x1c>)
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	f7f8 fbfd 	bl	8002142 <_close>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d102      	bne.n	8009952 <_close_r+0x1a>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	b103      	cbz	r3, 8009952 <_close_r+0x1a>
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	2000034c 	.word	0x2000034c

08009958 <fiprintf>:
 8009958:	b40e      	push	{r1, r2, r3}
 800995a:	b503      	push	{r0, r1, lr}
 800995c:	4601      	mov	r1, r0
 800995e:	ab03      	add	r3, sp, #12
 8009960:	4805      	ldr	r0, [pc, #20]	; (8009978 <fiprintf+0x20>)
 8009962:	f853 2b04 	ldr.w	r2, [r3], #4
 8009966:	6800      	ldr	r0, [r0, #0]
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	f7ff fe41 	bl	80095f0 <_vfiprintf_r>
 800996e:	b002      	add	sp, #8
 8009970:	f85d eb04 	ldr.w	lr, [sp], #4
 8009974:	b003      	add	sp, #12
 8009976:	4770      	bx	lr
 8009978:	20000024 	.word	0x20000024

0800997c <_fstat_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d07      	ldr	r5, [pc, #28]	; (800999c <_fstat_r+0x20>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	602b      	str	r3, [r5, #0]
 800998a:	f7f8 fbe6 	bl	800215a <_fstat>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d102      	bne.n	8009998 <_fstat_r+0x1c>
 8009992:	682b      	ldr	r3, [r5, #0]
 8009994:	b103      	cbz	r3, 8009998 <_fstat_r+0x1c>
 8009996:	6023      	str	r3, [r4, #0]
 8009998:	bd38      	pop	{r3, r4, r5, pc}
 800999a:	bf00      	nop
 800999c:	2000034c 	.word	0x2000034c

080099a0 <_isatty_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d06      	ldr	r5, [pc, #24]	; (80099bc <_isatty_r+0x1c>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	f7f8 fbe5 	bl	800217a <_isatty>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_isatty_r+0x1a>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_isatty_r+0x1a>
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	2000034c 	.word	0x2000034c

080099c0 <_lseek_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	; (80099e0 <_lseek_r+0x20>)
 80099c4:	4604      	mov	r4, r0
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	602a      	str	r2, [r5, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7f8 fbde 	bl	8002190 <_lseek>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_lseek_r+0x1e>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_lseek_r+0x1e>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	2000034c 	.word	0x2000034c

080099e4 <__ascii_mbtowc>:
 80099e4:	b082      	sub	sp, #8
 80099e6:	b901      	cbnz	r1, 80099ea <__ascii_mbtowc+0x6>
 80099e8:	a901      	add	r1, sp, #4
 80099ea:	b142      	cbz	r2, 80099fe <__ascii_mbtowc+0x1a>
 80099ec:	b14b      	cbz	r3, 8009a02 <__ascii_mbtowc+0x1e>
 80099ee:	7813      	ldrb	r3, [r2, #0]
 80099f0:	600b      	str	r3, [r1, #0]
 80099f2:	7812      	ldrb	r2, [r2, #0]
 80099f4:	1e10      	subs	r0, r2, #0
 80099f6:	bf18      	it	ne
 80099f8:	2001      	movne	r0, #1
 80099fa:	b002      	add	sp, #8
 80099fc:	4770      	bx	lr
 80099fe:	4610      	mov	r0, r2
 8009a00:	e7fb      	b.n	80099fa <__ascii_mbtowc+0x16>
 8009a02:	f06f 0001 	mvn.w	r0, #1
 8009a06:	e7f8      	b.n	80099fa <__ascii_mbtowc+0x16>

08009a08 <_read_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_read_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f8 fb5a 	bl	80020d0 <_read>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_read_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_read_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	2000034c 	.word	0x2000034c

08009a2c <__ascii_wctomb>:
 8009a2c:	b149      	cbz	r1, 8009a42 <__ascii_wctomb+0x16>
 8009a2e:	2aff      	cmp	r2, #255	; 0xff
 8009a30:	bf85      	ittet	hi
 8009a32:	238a      	movhi	r3, #138	; 0x8a
 8009a34:	6003      	strhi	r3, [r0, #0]
 8009a36:	700a      	strbls	r2, [r1, #0]
 8009a38:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009a3c:	bf98      	it	ls
 8009a3e:	2001      	movls	r0, #1
 8009a40:	4770      	bx	lr
 8009a42:	4608      	mov	r0, r1
 8009a44:	4770      	bx	lr
	...

08009a48 <_init>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	bf00      	nop
 8009a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4e:	bc08      	pop	{r3}
 8009a50:	469e      	mov	lr, r3
 8009a52:	4770      	bx	lr

08009a54 <_fini>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	bf00      	nop
 8009a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5a:	bc08      	pop	{r3}
 8009a5c:	469e      	mov	lr, r3
 8009a5e:	4770      	bx	lr
