
store-sensor-data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800b2f0  0800b2f0  0001b2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800b9c4  0800b9c4  0001b9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b9cc  0800b9cc  0001b9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  20000004  0800b9d0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  20000204  0800bbd0  00020204  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000400  0800bbd0  00020400  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c5bd  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ae8  00000000  00000000  0003c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b08  00000000  00000000  000402e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019d8  00000000  00000000  00041de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027341  00000000  00000000  000437c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019aaf  00000000  00000000  0006ab01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000df24e  00000000  00000000  000845b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001637fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000817c  00000000  00000000  00163854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000204 	.word	0x20000204
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b2d8 	.word	0x0800b2d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000208 	.word	0x20000208
 800017c:	0800b2d8 	.word	0x0800b2d8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468c      	mov	ip, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8083 	bne.w	8000c9e <__udivmoddi4+0x116>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d947      	bls.n	8000c2e <__udivmoddi4+0xa6>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b142      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	f1c2 0020 	rsb	r0, r2, #32
 8000ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4097      	lsls	r7, r2
 8000bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc0:	fa1f fe87 	uxth.w	lr, r7
 8000bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bda:	f080 8119 	bcs.w	8000e10 <__udivmoddi4+0x288>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8116 	bls.w	8000e10 <__udivmoddi4+0x288>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	443b      	add	r3, r7
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8105 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8102 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c18:	eba4 040e 	sub.w	r4, r4, lr
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xaa>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d150      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3a:	1bcb      	subs	r3, r1, r7
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	2601      	movs	r6, #1
 8000c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4a:	0c21      	lsrs	r1, r4, #16
 8000c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb08 f30c 	mul.w	r3, r8, ip
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000c5c:	1879      	adds	r1, r7, r1
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0xe2>
 8000c64:	428b      	cmp	r3, r1
 8000c66:	f200 80e9 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x10c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x10a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80d9 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e7bf      	b.n	8000c1e <__udivmoddi4+0x96>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	f000 80b1 	beq.w	8000e0a <__udivmoddi4+0x282>
 8000ca8:	2600      	movs	r6, #0
 8000caa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cae:	4630      	mov	r0, r6
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f683 	clz	r6, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d14a      	bne.n	8000d54 <__udivmoddi4+0x1cc>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b8 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0103 	sbc.w	r1, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d0a8      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce4:	4097      	lsls	r7, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cee:	40d9      	lsrs	r1, r3
 8000cf0:	4330      	orrs	r0, r6
 8000cf2:	0c03      	lsrs	r3, r0, #16
 8000cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb06 f108 	mul.w	r1, r6, r8
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x19c>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d16:	f080 808d 	bcs.w	8000e34 <__udivmoddi4+0x2ac>
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	f240 808a 	bls.w	8000e34 <__udivmoddi4+0x2ac>
 8000d20:	3e02      	subs	r6, #2
 8000d22:	443b      	add	r3, r7
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	b281      	uxth	r1, r0
 8000d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb00 f308 	mul.w	r3, r0, r8
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d42:	d273      	bcs.n	8000e2c <__udivmoddi4+0x2a4>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d971      	bls.n	8000e2c <__udivmoddi4+0x2a4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4439      	add	r1, r7
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d52:	e778      	b.n	8000c46 <__udivmoddi4+0xbe>
 8000d54:	f1c6 0c20 	rsb	ip, r6, #32
 8000d58:	fa03 f406 	lsl.w	r4, r3, r6
 8000d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d60:	431c      	orrs	r4, r3
 8000d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d66:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d72:	431f      	orrs	r7, r3
 8000d74:	0c3b      	lsrs	r3, r7, #16
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fa1f f884 	uxth.w	r8, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d86:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d90:	fa00 f306 	lsl.w	r3, r0, r6
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x220>
 8000d96:	1861      	adds	r1, r4, r1
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d9c:	d248      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	d946      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4421      	add	r1, r4
 8000da8:	eba1 010a 	sub.w	r1, r1, sl
 8000dac:	b2bf      	uxth	r7, r7
 8000dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dba:	fb00 f808 	mul.w	r8, r0, r8
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x24a>
 8000dc2:	19e7      	adds	r7, r4, r7
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc8:	d22e      	bcs.n	8000e28 <__udivmoddi4+0x2a0>
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d92c      	bls.n	8000e28 <__udivmoddi4+0x2a0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4427      	add	r7, r4
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	eba7 0708 	sub.w	r7, r7, r8
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	454f      	cmp	r7, r9
 8000de0:	46c6      	mov	lr, r8
 8000de2:	4649      	mov	r1, r9
 8000de4:	d31a      	bcc.n	8000e1c <__udivmoddi4+0x294>
 8000de6:	d017      	beq.n	8000e18 <__udivmoddi4+0x290>
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x27a>
 8000dea:	ebb3 020e 	subs.w	r2, r3, lr
 8000dee:	eb67 0701 	sbc.w	r7, r7, r1
 8000df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df6:	40f2      	lsrs	r2, r6
 8000df8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfc:	40f7      	lsrs	r7, r6
 8000dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8000e02:	2600      	movs	r6, #0
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e70b      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6fd      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e5      	bcs.n	8000de8 <__udivmoddi4+0x260>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0104 	sbc.w	r1, r9, r4
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7df      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e7d2      	b.n	8000dd2 <__udivmoddi4+0x24a>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78d      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7b9      	b.n	8000da8 <__udivmoddi4+0x220>
 8000e34:	4666      	mov	r6, ip
 8000e36:	e775      	b.n	8000d24 <__udivmoddi4+0x19c>
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e74a      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	4439      	add	r1, r7
 8000e42:	e713      	b.n	8000c6c <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e724      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000e5a:	f107 020f 	add.w	r2, r7, #15
 8000e5e:	1df9      	adds	r1, r7, #7
 8000e60:	2364      	movs	r3, #100	; 0x64
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <W25qxx_Spi+0x28>)
 8000e68:	f006 f875 	bl	8006f56 <HAL_SPI_TransmitReceive>
	return ret;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200002f8 	.word	0x200002f8

08000e7c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2110      	movs	r1, #16
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f002 fc1b 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000e9e:	209f      	movs	r0, #159	; 0x9f
 8000ea0:	f7ff ffd6 	bl	8000e50 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000ea4:	20a5      	movs	r0, #165	; 0xa5
 8000ea6:	f7ff ffd3 	bl	8000e50 <W25qxx_Spi>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000eae:	20a5      	movs	r0, #165	; 0xa5
 8000eb0:	f7ff ffce 	bl	8000e50 <W25qxx_Spi>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000eb8:	20a5      	movs	r0, #165	; 0xa5
 8000eba:	f7ff ffc9 	bl	8000e50 <W25qxx_Spi>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f002 fc03 	bl	80036d4 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  return Temp;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f002 fbed 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8000efa:	204b      	movs	r0, #75	; 0x4b
 8000efc:	f7ff ffa8 	bl	8000e50 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	e005      	b.n	8000f12 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000f06:	20a5      	movs	r0, #165	; 0xa5
 8000f08:	f7ff ffa2 	bl	8000e50 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d9f6      	bls.n	8000f06 <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71bb      	strb	r3, [r7, #6]
 8000f1c:	e00b      	b.n	8000f36 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000f1e:	79bc      	ldrb	r4, [r7, #6]
 8000f20:	20a5      	movs	r0, #165	; 0xa5
 8000f22:	f7ff ff95 	bl	8000e50 <W25qxx_Spi>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <W25qxx_ReadUniqID+0x68>)
 8000f2c:	4423      	add	r3, r4
 8000f2e:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	3301      	adds	r3, #1
 8000f34:	71bb      	strb	r3, [r7, #6]
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	2b07      	cmp	r3, #7
 8000f3a:	d9f0      	bls.n	8000f1e <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2110      	movs	r1, #16
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f002 fbc6 	bl	80036d4 <HAL_GPIO_WritePin>
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	20000284 	.word	0x20000284

08000f54 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f002 fbb8 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8000f64:	2006      	movs	r0, #6
 8000f66:	f7ff ff73 	bl	8000e50 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f002 fbaf 	bl	80036d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f002 f83c 	bl	8002ff4 <HAL_Delay>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2110      	movs	r1, #16
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f002 fb9d 	bl	80036d4 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10c      	bne.n	8000fba <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8000fa0:	2005      	movs	r0, #5
 8000fa2:	f7ff ff55 	bl	8000e50 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000fa6:	20a5      	movs	r0, #165	; 0xa5
 8000fa8:	f7ff ff52 	bl	8000e50 <W25qxx_Spi>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000fb0:	4a15      	ldr	r2, [pc, #84]	; (8001008 <W25qxx_ReadStatusRegister+0x88>)
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000fb8:	e01b      	b.n	8000ff2 <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d10c      	bne.n	8000fda <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8000fc0:	2035      	movs	r0, #53	; 0x35
 8000fc2:	f7ff ff45 	bl	8000e50 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000fc6:	20a5      	movs	r0, #165	; 0xa5
 8000fc8:	f7ff ff42 	bl	8000e50 <W25qxx_Spi>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <W25qxx_ReadStatusRegister+0x88>)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000fd8:	e00b      	b.n	8000ff2 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000fda:	2015      	movs	r0, #21
 8000fdc:	f7ff ff38 	bl	8000e50 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000fe0:	20a5      	movs	r0, #165	; 0xa5
 8000fe2:	f7ff ff35 	bl	8000e50 <W25qxx_Spi>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <W25qxx_ReadStatusRegister+0x88>)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f002 fb6b 	bl	80036d4 <HAL_GPIO_WritePin>
	return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000284 	.word	0x20000284

0800100c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f001 ffef 	bl	8002ff4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f002 fb59 	bl	80036d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001022:	2005      	movs	r0, #5
 8001024:	f7ff ff14 	bl	8000e50 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001028:	20a5      	movs	r0, #165	; 0xa5
 800102a:	f7ff ff11 	bl	8000e50 <W25qxx_Spi>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <W25qxx_WaitForWriteEnd+0x50>)
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f001 ffdb 	bl	8002ff4 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <W25qxx_WaitForWriteEnd+0x50>)
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ed      	bne.n	8001028 <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2110      	movs	r1, #16
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f002 fb3e 	bl	80036d4 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000284 	.word	0x20000284

08001060 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;
 8001066:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <W25qxx_Init+0x188>)
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 800106e:	e002      	b.n	8001076 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f001 ffbf 	bl	8002ff4 <HAL_Delay>
	while(HAL_GetTick()<100)
 8001076:	f001 ffa5 	bl	8002fc4 <HAL_GetTick>
 800107a:	4603      	mov	r3, r0
 800107c:	2b63      	cmp	r3, #99	; 0x63
 800107e:	d9f7      	bls.n	8001070 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2110      	movs	r1, #16
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f002 fb24 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 800108c:	2064      	movs	r0, #100	; 0x64
 800108e:	f001 ffb1 	bl	8002ff4 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8001092:	f7ff fef3 	bl	8000e7c <W25qxx_ReadID>
 8001096:	6078      	str	r0, [r7, #4]

	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80010a0:	3b11      	subs	r3, #17
 80010a2:	2b09      	cmp	r3, #9
 80010a4:	d85f      	bhi.n	8001166 <W25qxx_Init+0x106>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <W25qxx_Init+0x4c>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	08001159 	.word	0x08001159
 80010b0:	0800114b 	.word	0x0800114b
 80010b4:	0800113d 	.word	0x0800113d
 80010b8:	0800112f 	.word	0x0800112f
 80010bc:	08001121 	.word	0x08001121
 80010c0:	08001113 	.word	0x08001113
 80010c4:	08001105 	.word	0x08001105
 80010c8:	080010f5 	.word	0x080010f5
 80010cc:	080010e5 	.word	0x080010e5
 80010d0:	080010d5 	.word	0x080010d5
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 80010d4:	4b44      	ldr	r3, [pc, #272]	; (80011e8 <W25qxx_Init+0x188>)
 80010d6:	220a      	movs	r2, #10
 80010d8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80010da:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <W25qxx_Init+0x188>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80010e2:	e046      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 80010e4:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <W25qxx_Init+0x188>)
 80010e6:	2209      	movs	r2, #9
 80010e8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80010ea:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <W25qxx_Init+0x188>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80010f2:	e03e      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <W25qxx_Init+0x188>)
 80010f6:	2208      	movs	r2, #8
 80010f8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <W25qxx_Init+0x188>)
 80010fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001100:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8001102:	e036      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <W25qxx_Init+0x188>)
 8001106:	2207      	movs	r2, #7
 8001108:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <W25qxx_Init+0x188>)
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8001110:	e02f      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <W25qxx_Init+0x188>)
 8001114:	2206      	movs	r2, #6
 8001116:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <W25qxx_Init+0x188>)
 800111a:	2240      	movs	r2, #64	; 0x40
 800111c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 800111e:	e028      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8001120:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <W25qxx_Init+0x188>)
 8001122:	2205      	movs	r2, #5
 8001124:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <W25qxx_Init+0x188>)
 8001128:	2220      	movs	r2, #32
 800112a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 800112c:	e021      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <W25qxx_Init+0x188>)
 8001130:	2204      	movs	r2, #4
 8001132:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <W25qxx_Init+0x188>)
 8001136:	2210      	movs	r2, #16
 8001138:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 800113a:	e01a      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <W25qxx_Init+0x188>)
 800113e:	2203      	movs	r2, #3
 8001140:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <W25qxx_Init+0x188>)
 8001144:	2208      	movs	r2, #8
 8001146:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8001148:	e013      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <W25qxx_Init+0x188>)
 800114c:	2202      	movs	r2, #2
 800114e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <W25qxx_Init+0x188>)
 8001152:	2204      	movs	r2, #4
 8001154:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8001156:	e00c      	b.n	8001172 <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <W25qxx_Init+0x188>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <W25qxx_Init+0x188>)
 8001160:	2202      	movs	r2, #2
 8001162:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8001164:	e005      	b.n	8001172 <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <W25qxx_Init+0x188>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 800116e:	2300      	movs	r3, #0
 8001170:	e036      	b.n	80011e0 <W25qxx_Init+0x180>

	}
	w25qxx.PageSize=256;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <W25qxx_Init+0x188>)
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <W25qxx_Init+0x188>)
 800117c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001180:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <W25qxx_Init+0x188>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <W25qxx_Init+0x188>)
 800118a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <W25qxx_Init+0x188>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <W25qxx_Init+0x188>)
 8001192:	6912      	ldr	r2, [r2, #16]
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <W25qxx_Init+0x188>)
 800119a:	8952      	ldrh	r2, [r2, #10]
 800119c:	fbb3 f3f2 	udiv	r3, r3, r2
 80011a0:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <W25qxx_Init+0x188>)
 80011a2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <W25qxx_Init+0x188>)
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <W25qxx_Init+0x188>)
 80011ac:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <W25qxx_Init+0x188>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <W25qxx_Init+0x188>)
 80011b4:	6912      	ldr	r2, [r2, #16]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	0a9b      	lsrs	r3, r3, #10
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <W25qxx_Init+0x188>)
 80011be:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80011c0:	f7ff fe92 	bl	8000ee8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff fedb 	bl	8000f80 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f7ff fed8 	bl	8000f80 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff fed5 	bl	8000f80 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <W25qxx_Init+0x188>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000284 	.word	0x20000284

080011ec <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 80011f4:	e002      	b.n	80011fc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f001 fefc 	bl	8002ff4 <HAL_Delay>
	while(w25qxx.Lock==1)
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <W25qxx_EraseSector+0xa4>)
 80011fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001202:	2b01      	cmp	r3, #1
 8001204:	d0f7      	beq.n	80011f6 <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <W25qxx_EraseSector+0xa4>)
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 800120e:	f7ff fefd 	bl	800100c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <W25qxx_EraseSector+0xa4>)
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 800121e:	f7ff fe99 	bl	8000f54 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2110      	movs	r1, #16
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f002 fa53 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 800122e:	2020      	movs	r0, #32
 8001230:	f7ff fe0e 	bl	8000e50 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <W25qxx_EraseSector+0xa4>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d905      	bls.n	8001248 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0e1b      	lsrs	r3, r3, #24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe04 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fdfe 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fdf8 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fdf3 	bl	8000e50 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2110      	movs	r1, #16
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f002 fa2f 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001276:	f7ff fec9 	bl	800100c <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 feba 	bl	8002ff4 <HAL_Delay>
	w25qxx.Lock=0;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <W25qxx_EraseSector+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000284 	.word	0x20000284

08001294 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <W25qxx_SectorToPage+0x28>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <W25qxx_SectorToPage+0x28>)
 80012a8:	8952      	ldrh	r2, [r2, #10]
 80012aa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000284 	.word	0x20000284

080012c0 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80012ce:	e002      	b.n	80012d6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f001 fe8f 	bl	8002ff4 <HAL_Delay>
	while(w25qxx.Lock==1)
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <W25qxx_WritePage+0xf8>)
 80012d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d0f7      	beq.n	80012d0 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <W25qxx_WritePage+0xf8>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <W25qxx_WritePage+0xf8>)
 80012f0:	8952      	ldrh	r2, [r2, #10]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d802      	bhi.n	80012fc <W25qxx_WritePage+0x3c>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d105      	bne.n	8001308 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <W25qxx_WritePage+0xf8>)
 80012fe:	895b      	ldrh	r3, [r3, #10]
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <W25qxx_WritePage+0xf8>)
 8001310:	8952      	ldrh	r2, [r2, #10]
 8001312:	4293      	cmp	r3, r2
 8001314:	d905      	bls.n	8001322 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <W25qxx_WritePage+0xf8>)
 8001318:	895b      	ldrh	r3, [r3, #10]
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	W25qxx_WaitForWriteEnd();
 8001322:	f7ff fe73 	bl	800100c <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001326:	f7ff fe15 	bl	8000f54 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2110      	movs	r1, #16
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f002 f9cf 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff fd8a 	bl	8000e50 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <W25qxx_WritePage+0xf8>)
 800133e:	895b      	ldrh	r3, [r3, #10]
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	fb03 f302 	mul.w	r3, r3, r2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <W25qxx_WritePage+0xf8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d905      	bls.n	8001362 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	0e1b      	lsrs	r3, r3, #24
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fd77 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	0c1b      	lsrs	r3, r3, #16
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fd71 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fd6b 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd66 	bl	8000e50 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b29a      	uxth	r2, r3
 8001388:	2364      	movs	r3, #100	; 0x64
 800138a:	68f9      	ldr	r1, [r7, #12]
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <W25qxx_WritePage+0xfc>)
 800138e:	f005 fb44 	bl	8006a1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2110      	movs	r1, #16
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f002 f99b 	bl	80036d4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800139e:	f7ff fe35 	bl	800100c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f001 fe26 	bl	8002ff4 <HAL_Delay>
	w25qxx.Lock=0;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <W25qxx_WritePage+0xf8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000284 	.word	0x20000284
 80013bc:	200002f8 	.word	0x200002f8

080013c0 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <W25qxx_WriteSector+0xc0>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d802      	bhi.n	80013de <W25qxx_WriteSector+0x1e>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <W25qxx_WriteSector+0xc0>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <W25qxx_WriteSector+0xc0>)
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d243      	bcs.n	8001476 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	441a      	add	r2, r3
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <W25qxx_WriteSector+0xc0>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d905      	bls.n	8001408 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <W25qxx_WriteSector+0xc0>)
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	e001      	b.n	800140c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f7ff ff41 	bl	8001294 <W25qxx_SectorToPage>
 8001412:	4602      	mov	r2, r0
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <W25qxx_WriteSector+0xc0>)
 8001416:	895b      	ldrh	r3, [r3, #10]
 8001418:	4619      	mov	r1, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001420:	4413      	add	r3, r2
 8001422:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <W25qxx_WriteSector+0xc0>)
 8001426:	895b      	ldrh	r3, [r3, #10]
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001430:	fb02 f201 	mul.w	r2, r2, r1
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	69f9      	ldr	r1, [r7, #28]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff ff3e 	bl	80012c0 <W25qxx_WritePage>
		StartPage++;
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	3301      	adds	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <W25qxx_WriteSector+0xc0>)
 800144c:	895b      	ldrh	r3, [r3, #10]
 800144e:	461a      	mov	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	1a9a      	subs	r2, r3, r2
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	4413      	add	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <W25qxx_WriteSector+0xc0>)
 800145c:	895b      	ldrh	r3, [r3, #10]
 800145e:	461a      	mov	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dce1      	bgt.n	8001438 <W25qxx_WriteSector+0x78>
 8001474:	e000      	b.n	8001478 <W25qxx_WriteSector+0xb8>
		return;
 8001476:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000284 	.word	0x20000284

08001484 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001492:	e002      	b.n	800149a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f001 fdad 	bl	8002ff4 <HAL_Delay>
	while(w25qxx.Lock==1)
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <W25qxx_ReadPage+0xec>)
 800149c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d0f7      	beq.n	8001494 <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <W25qxx_ReadPage+0xec>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <W25qxx_ReadPage+0xec>)
 80014ae:	895b      	ldrh	r3, [r3, #10]
 80014b0:	461a      	mov	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d802      	bhi.n	80014be <W25qxx_ReadPage+0x3a>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <W25qxx_ReadPage+0xec>)
 80014c0:	895b      	ldrh	r3, [r3, #10]
 80014c2:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a29      	ldr	r2, [pc, #164]	; (8001570 <W25qxx_ReadPage+0xec>)
 80014cc:	8952      	ldrh	r2, [r2, #10]
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d905      	bls.n	80014de <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <W25qxx_ReadPage+0xec>)
 80014d4:	895b      	ldrh	r3, [r3, #10]
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <W25qxx_ReadPage+0xec>)
 80014e0:	895b      	ldrh	r3, [r3, #10]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	fb03 f302 	mul.w	r3, r3, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2110      	movs	r1, #16
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f002 f8ec 	bl	80036d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 80014fc:	200b      	movs	r0, #11
 80014fe:	f7ff fca7 	bl	8000e50 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <W25qxx_ReadPage+0xec>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b08      	cmp	r3, #8
 8001508:	d905      	bls.n	8001516 <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	0e1b      	lsrs	r3, r3, #24
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc9d 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	0c1b      	lsrs	r3, r3, #16
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc97 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fc91 	bl	8000e50 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc8c 	bl	8000e50 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fc89 	bl	8000e50 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b29a      	uxth	r2, r3
 8001542:	2364      	movs	r3, #100	; 0x64
 8001544:	68f9      	ldr	r1, [r7, #12]
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <W25qxx_ReadPage+0xf0>)
 8001548:	f005 fbd5 	bl	8006cf6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2110      	movs	r1, #16
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f002 f8be 	bl	80036d4 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f001 fd4b 	bl	8002ff4 <HAL_Delay>
	w25qxx.Lock=0;
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <W25qxx_ReadPage+0xec>)
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000284 	.word	0x20000284
 8001574:	200002f8 	.word	0x200002f8

08001578 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <W25qxx_ReadSector+0xc0>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d802      	bhi.n	8001596 <W25qxx_ReadSector+0x1e>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <W25qxx_ReadSector+0xc0>)
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <W25qxx_ReadSector+0xc0>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d243      	bcs.n	800162e <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	441a      	add	r2, r3
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <W25qxx_ReadSector+0xc0>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d905      	bls.n	80015c0 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <W25qxx_ReadSector+0xc0>)
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	e001      	b.n	80015c4 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f7ff fe65 	bl	8001294 <W25qxx_SectorToPage>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <W25qxx_ReadSector+0xc0>)
 80015ce:	895b      	ldrh	r3, [r3, #10]
 80015d0:	4619      	mov	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d8:	4413      	add	r3, r2
 80015da:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <W25qxx_ReadSector+0xc0>)
 80015de:	895b      	ldrh	r3, [r3, #10]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80015e8:	fb02 f201 	mul.w	r2, r2, r1
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	69f9      	ldr	r1, [r7, #28]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff ff44 	bl	8001484 <W25qxx_ReadPage>
		StartPage++;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	3301      	adds	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <W25qxx_ReadSector+0xc0>)
 8001604:	895b      	ldrh	r3, [r3, #10]
 8001606:	461a      	mov	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1a9a      	subs	r2, r3, r2
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4413      	add	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <W25qxx_ReadSector+0xc0>)
 8001614:	895b      	ldrh	r3, [r3, #10]
 8001616:	461a      	mov	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	dce1      	bgt.n	80015f0 <W25qxx_ReadSector+0x78>
 800162c:	e000      	b.n	8001630 <W25qxx_ReadSector+0xb8>
		return;
 800162e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000284 	.word	0x20000284

0800163c <_ZN3ImuC1EP19__I2C_HandleTypeDef>:
 * @see MPU9250_DEFAULT_ADDRESS
 */

uint8_t buffer[14];

Imu::Imu(I2C_HandleTypeDef* hi2c)
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
{
	this->hi2c = hi2c;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	601a      	str	r2, [r3, #0]
	devAddr = 0xD0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	22d0      	movs	r2, #208	; 0xd0
 8001650:	711a      	strb	r2, [r3, #4]
	for (int i=0;i<15;i++){
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b0e      	cmp	r3, #14
 800165a:	dc09      	bgt.n	8001670 <_ZN3ImuC1EP19__I2C_HandleTypeDef+0x34>
		buffer[i] = 0x00;
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	3306      	adds	r3, #6
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<15;i++){
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e7f2      	b.n	8001656 <_ZN3ImuC1EP19__I2C_HandleTypeDef+0x1a>
	}
	ID = 0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	715a      	strb	r2, [r3, #5]
}
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_ZN3Imu10initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void Imu::initialize() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

    //set clock source
    setClockSource(MPU9250_CLOCK_PLL_XGYRO);
 800168c:	2101      	movs	r1, #1
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f978 	bl	8001984 <_ZN3Imu14setClockSourceEh>
    //set gyro output data rate to 1000hz
    setGyroDLPFMode(1);
 8001694:	2101      	movs	r1, #1
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f816 	bl	80016c8 <_ZN3Imu15setGyroDLPFModeEh>
    //set gyro range to 500dps.
    setFullScaleGyroRange(MPU9250_GYRO_FS_500);
 800169c:	2101      	movs	r1, #1
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f847 	bl	8001732 <_ZN3Imu21setFullScaleGyroRangeEh>
    //set accel output data rate to 1000hz
    setAccDLPFMode(1);
 80016a4:	2101      	movs	r1, #1
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8ba 	bl	8001820 <_ZN3Imu14setAccDLPFModeEh>
    //set accel range to 2g
    setFullScaleAccelRange(MPU9250_ACCEL_FS_2);
 80016ac:	2100      	movs	r1, #0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f87d 	bl	80017ae <_ZN3Imu22setFullScaleAccelRangeEh>
    //setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    //set i2c bypass enable pin to true to access magnetometer and configure interrupt
    setBypassEnableAndInterrupt();
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f9b4 	bl	8001a22 <_ZN3Imu27setBypassEnableAndInterruptEv>
    //enable interrupt
    //enableInterrupt();
    //set mag to continuous measurement mode
    setMagContMeasMode();
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa01 	bl	8001ac2 <_ZN3Imu18setMagContMeasModeEv>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZN3Imu15setGyroDLPFModeEh>:
 * @see MPU9250_DLPF_BW_256
 * @see MPU9250_RA_CONFIG
 * @see MPU9250_CFG_DLPF_CFG_BIT
 * @see MPU9250_CFG_DLPF_CFG_LENGTH
 */
void Imu::setGyroDLPFMode(uint8_t mode) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af04      	add	r7, sp, #16
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	b299      	uxth	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3306      	adds	r3, #6
 80016e2:	2264      	movs	r2, #100	; 0x64
 80016e4:	9202      	str	r2, [sp, #8]
 80016e6:	2201      	movs	r2, #1
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	221a      	movs	r2, #26
 80016f0:	f002 f9c4 	bl	8003a7c <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xF8);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	799b      	ldrb	r3, [r3, #6]
 80016f8:	f023 0307 	bic.w	r3, r3, #7
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	73fb      	strb	r3, [r7, #15]
    temp = (temp | mode);
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	4313      	orrs	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_CONFIG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	791b      	ldrb	r3, [r3, #4]
 8001712:	b299      	uxth	r1, r3
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	2301      	movs	r3, #1
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	f107 030f 	add.w	r3, r7, #15
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	221a      	movs	r2, #26
 8001726:	f002 f895 	bl	8003854 <HAL_I2C_Mem_Write>
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZN3Imu21setFullScaleGyroRangeEh>:
 * @see MPU9250_GYRO_FS_250
 * @see MPU9250_RA_GYRO_CONFIG
 * @see MPU9250_GCONFIG_FS_SEL_BIT
 * @see MPU9250_GCONFIG_FS_SEL_LENGTH
 */
void Imu::setFullScaleGyroRange(uint8_t range) {
 8001732:	b580      	push	{r7, lr}
 8001734:	b088      	sub	sp, #32
 8001736:	af04      	add	r7, sp, #16
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	791b      	ldrb	r3, [r3, #4]
 8001746:	b299      	uxth	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3306      	adds	r3, #6
 800174c:	2264      	movs	r2, #100	; 0x64
 800174e:	9202      	str	r2, [sp, #8]
 8001750:	2201      	movs	r2, #1
 8001752:	9201      	str	r2, [sp, #4]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2301      	movs	r3, #1
 8001758:	221b      	movs	r2, #27
 800175a:	f002 f98f 	bl	8003a7c <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xE7);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	799b      	ldrb	r3, [r3, #6]
 8001762:	f023 0318 	bic.w	r3, r3, #24
 8001766:	b2db      	uxtb	r3, r3
 8001768:	73fb      	strb	r3, [r7, #15]
    temp = (temp | (range<<3));
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	b25a      	sxtb	r2, r3
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	b25b      	sxtb	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b25b      	sxtb	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	73fb      	strb	r3, [r7, #15]
    //set fchoice_b to 00 as well
    temp = (temp & 0xFC);
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f023 0303 	bic.w	r3, r3, #3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_GYRO_CONFIG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	791b      	ldrb	r3, [r3, #4]
 800178e:	b299      	uxth	r1, r3
 8001790:	2364      	movs	r3, #100	; 0x64
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	2301      	movs	r3, #1
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	f107 030f 	add.w	r3, r7, #15
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	221b      	movs	r2, #27
 80017a2:	f002 f857 	bl	8003854 <HAL_I2C_Mem_Write>
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_ZN3Imu22setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void Imu::setFullScaleAccelRange(uint8_t range) {
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b088      	sub	sp, #32
 80017b2:	af04      	add	r7, sp, #16
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	791b      	ldrb	r3, [r3, #4]
 80017c2:	b299      	uxth	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3306      	adds	r3, #6
 80017c8:	2264      	movs	r2, #100	; 0x64
 80017ca:	9202      	str	r2, [sp, #8]
 80017cc:	2201      	movs	r2, #1
 80017ce:	9201      	str	r2, [sp, #4]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	221c      	movs	r2, #28
 80017d6:	f002 f951 	bl	8003a7c <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xE7);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	799b      	ldrb	r3, [r3, #6]
 80017de:	f023 0318 	bic.w	r3, r3, #24
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	73fb      	strb	r3, [r7, #15]
    temp = (temp | (range<<3));
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	b25a      	sxtb	r2, r3
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	b299      	uxth	r1, r3
 8001802:	2364      	movs	r3, #100	; 0x64
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2301      	movs	r3, #1
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f107 030f 	add.w	r3, r7, #15
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	221c      	movs	r2, #28
 8001814:	f002 f81e 	bl	8003854 <HAL_I2C_Mem_Write>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_ZN3Imu14setAccDLPFModeEh>:
uint8_t Imu::getAccDLPFMode() {
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
    return buffer[0];
}

void Imu::setAccDLPFMode(uint8_t bandwidth) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af04      	add	r7, sp, #16
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	791b      	ldrb	r3, [r3, #4]
 8001834:	b299      	uxth	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3306      	adds	r3, #6
 800183a:	2264      	movs	r2, #100	; 0x64
 800183c:	9202      	str	r2, [sp, #8]
 800183e:	2201      	movs	r2, #1
 8001840:	9201      	str	r2, [sp, #4]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	221d      	movs	r2, #29
 8001848:	f002 f918 	bl	8003a7c <HAL_I2C_Mem_Read>
    uint8_t temp = (buffer[0] & 0xF8);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	799b      	ldrb	r3, [r3, #6]
 8001850:	f023 0307 	bic.w	r3, r3, #7
 8001854:	b2db      	uxtb	r3, r3
 8001856:	73fb      	strb	r3, [r7, #15]
    temp = (temp | bandwidth);
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	4313      	orrs	r3, r2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	73fb      	strb	r3, [r7, #15]
    //set fchoice_b to 0
    temp = (temp & 0xF7);
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	f023 0308 	bic.w	r3, r3, #8
 8001868:	b2db      	uxtb	r3, r3
 800186a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_ACCEL_CONFIG2,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	b299      	uxth	r1, r3
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2301      	movs	r3, #1
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f107 030f 	add.w	r3, r7, #15
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	221d      	movs	r2, #29
 8001888:	f001 ffe4 	bl	8003854 <HAL_I2C_Mem_Write>
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZN3Imu15getAccelerationEPsS0_S0_>:
 * @param x 16-bit signed integer container for X-axis acceleration
 * @param y 16-bit signed integer container for Y-axis acceleration
 * @param z 16-bit signed integer container for Z-axis acceleration
 * @see MPU9250_RA_GYRO_XOUT_H
 */
void Imu::getAcceleration(int16_t* x, int16_t* y, int16_t* z) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_ACCEL_XOUT_H,I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	b299      	uxth	r1, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3306      	adds	r3, #6
 80018b0:	2264      	movs	r2, #100	; 0x64
 80018b2:	9202      	str	r2, [sp, #8]
 80018b4:	2206      	movs	r2, #6
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	223b      	movs	r2, #59	; 0x3b
 80018be:	f002 f8dd 	bl	8003a7c <HAL_I2C_Mem_Read>
    //I2Cdev::readBytes(devAddr, MPU9250_RA_ACCEL_XOUT_H, 6, buffer);
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	799b      	ldrb	r3, [r3, #6]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	79db      	ldrb	r3, [r3, #7]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	7a1b      	ldrb	r3, [r3, #8]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21a      	sxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	7a5b      	ldrb	r3, [r3, #9]
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	7a9b      	ldrb	r3, [r3, #10]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	7adb      	ldrb	r3, [r3, #11]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21a      	sxth	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	801a      	strh	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZN3Imu11getRotationEPsS0_S0_>:
 * @param y 16-bit signed integer container for Y-axis rotation
 * @param z 16-bit signed integer container for Z-axis rotation
 * @see getMotion6()
 * @see MPU9250_RA_GYRO_XOUT_H
 */
void Imu::getRotation(int16_t* x, int16_t* y, int16_t* z) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af04      	add	r7, sp, #16
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	b299      	uxth	r1, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3306      	adds	r3, #6
 8001928:	2264      	movs	r2, #100	; 0x64
 800192a:	9202      	str	r2, [sp, #8]
 800192c:	2206      	movs	r2, #6
 800192e:	9201      	str	r2, [sp, #4]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	2243      	movs	r2, #67	; 0x43
 8001936:	f002 f8a1 	bl	8003a7c <HAL_I2C_Mem_Read>
    //I2Cdev::readBytes(devAddr, MPU9250_RA_GYRO_XOUT_H, 6, buffer);
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	799b      	ldrb	r3, [r3, #6]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	79db      	ldrb	r3, [r3, #7]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21a      	sxth	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	7a1b      	ldrb	r3, [r3, #8]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21a      	sxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	7a5b      	ldrb	r3, [r3, #9]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	7a9b      	ldrb	r3, [r3, #10]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21a      	sxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	7adb      	ldrb	r3, [r3, #11]
 8001972:	b21b      	sxth	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b21a      	sxth	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	801a      	strh	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN3Imu14setClockSourceEh>:
 * @see getClockSource()
 * @see MPU9250_RA_PWR_MGMT_1
 * @see MPU9250_PWR1_CLKSEL_BIT
 * @see MPU9250_PWR1_CLKSEL_LENGTH
 */
void Imu::setClockSource(uint8_t source) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af04      	add	r7, sp, #16
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	791b      	ldrb	r3, [r3, #4]
 8001998:	b299      	uxth	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3306      	adds	r3, #6
 800199e:	2264      	movs	r2, #100	; 0x64
 80019a0:	9202      	str	r2, [sp, #8]
 80019a2:	2201      	movs	r2, #1
 80019a4:	9201      	str	r2, [sp, #4]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	226b      	movs	r2, #107	; 0x6b
 80019ac:	f002 f866 	bl	8003a7c <HAL_I2C_Mem_Read>
    uint8_t temp = ((buffer[0]) & (0xF8));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	799b      	ldrb	r3, [r3, #6]
 80019b4:	f023 0307 	bic.w	r3, r3, #7
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	73fb      	strb	r3, [r7, #15]
    temp = (temp | source);
 80019bc:	7bfa      	ldrb	r2, [r7, #15]
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_PWR_MGMT_1,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	791b      	ldrb	r3, [r3, #4]
 80019ce:	b299      	uxth	r1, r3
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2301      	movs	r3, #1
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	f107 030f 	add.w	r3, r7, #15
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	226b      	movs	r2, #107	; 0x6b
 80019e2:	f001 ff37 	bl	8003854 <HAL_I2C_Mem_Write>
    //I2Cdev::writeBits(devAddr, MPU9250_RA_PWR_MGMT_1, MPU9250_PWR1_CLKSEL_BIT, MPU9250_PWR1_CLKSEL_LENGTH, source);
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_ZN3Imu11getDeviceIDEv>:
 * @see MPU9250_RA_WHO_AM_I
 * @see MPU9250_WHO_AM_I_BIT
 * @see MPU9250_WHO_AM_I_LENGTH
 */

uint8_t Imu::getDeviceID(){
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af04      	add	r7, sp, #16
 80019f4:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_WHO_AM_I, I2C_MEMADD_SIZE_8BIT,&ID,1,100);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	b299      	uxth	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3305      	adds	r3, #5
 8001a04:	2264      	movs	r2, #100	; 0x64
 8001a06:	9202      	str	r2, [sp, #8]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	9201      	str	r2, [sp, #4]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2275      	movs	r2, #117	; 0x75
 8001a12:	f002 f833 	bl	8003a7c <HAL_I2C_Mem_Read>
    return ID;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	795b      	ldrb	r3, [r3, #5]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_ZN3Imu27setBypassEnableAndInterruptEv>:

void Imu::setBypassEnableAndInterrupt(){
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b088      	sub	sp, #32
 8001a26:	af04      	add	r7, sp, #16
 8001a28:	6078      	str	r0, [r7, #4]
    uint8_t temp = 0x22;
 8001a2a:	2322      	movs	r3, #34	; 0x22
 8001a2c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_INT_PIN_CFG,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	791b      	ldrb	r3, [r3, #4]
 8001a36:	b299      	uxth	r1, r3
 8001a38:	2364      	movs	r3, #100	; 0x64
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	f107 030f 	add.w	r3, r7, #15
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2301      	movs	r3, #1
 8001a48:	2237      	movs	r2, #55	; 0x37
 8001a4a:	f001 ff03 	bl	8003854 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	f001 fad0 	bl	8002ff4 <HAL_Delay>
    //I2Cdev::writeByte(0x68, MPU9250_RA_INT_PIN_CFG, 0x02);
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_ZN3Imu15enableInterruptEv>:

void Imu::enableInterrupt(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(hi2c,devAddr, MPU9250_RA_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,1,100);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	791b      	ldrb	r3, [r3, #4]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3306      	adds	r3, #6
 8001a72:	2264      	movs	r2, #100	; 0x64
 8001a74:	9202      	str	r2, [sp, #8]
 8001a76:	2201      	movs	r2, #1
 8001a78:	9201      	str	r2, [sp, #4]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	2238      	movs	r2, #56	; 0x38
 8001a80:	f001 fffc 	bl	8003a7c <HAL_I2C_Mem_Read>
    uint8_t temp = ((buffer[0]) & (0xA6)); // 0xA6 = 10100110 -> clear bits 6,4,3,0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	799b      	ldrb	r3, [r3, #6]
 8001a88:	f023 0359 	bic.w	r3, r3, #89	; 0x59
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	73fb      	strb	r3, [r7, #15]
    temp = (temp | 0x01); //set last bit to enable data ready interrupt
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,devAddr, MPU9250_RA_INT_ENABLE,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	b299      	uxth	r1, r3
 8001aa4:	2364      	movs	r3, #100	; 0x64
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	f107 030f 	add.w	r3, r7, #15
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2238      	movs	r2, #56	; 0x38
 8001ab6:	f001 fecd 	bl	8003854 <HAL_I2C_Mem_Write>
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_ZN3Imu18setMagContMeasModeEv>:

void Imu::setMagContMeasMode(){
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b088      	sub	sp, #32
 8001ac6:	af04      	add	r7, sp, #16
 8001ac8:	6078      	str	r0, [r7, #4]
    uint8_t temp = 0x06;
 8001aca:	2306      	movs	r3, #6
 8001acc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c,MPU9250_RA_MAG_ADDRESS, 0x0A,I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	f107 030f 	add.w	r3, r7, #15
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	220a      	movs	r2, #10
 8001ae4:	2118      	movs	r1, #24
 8001ae6:	f001 feb5 	bl	8003854 <HAL_I2C_Mem_Write>
    //I2C_M.writeByte(MPU9250_RA_MAG_ADDRESS, 0x0A, 0x06);
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZN3Imu10getMagDataEPsS0_S0_>:

void Imu::getMagData(int16_t* mx,int16_t* my, int16_t* mz){
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b08a      	sub	sp, #40	; 0x28
 8001af6:	af04      	add	r7, sp, #16
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
    HAL_I2C_Mem_Read(hi2c,MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_XOUT_L, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3306      	adds	r3, #6
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	9202      	str	r2, [sp, #8]
 8001b0c:	2206      	movs	r2, #6
 8001b0e:	9201      	str	r2, [sp, #4]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2301      	movs	r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	2118      	movs	r1, #24
 8001b18:	f001 ffb0 	bl	8003a7c <HAL_I2C_Mem_Read>
    //I2C_M.readBytes(MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_XOUT_L, 6, buffer_m);

    /*read ST2 register as required by magnetometer.Otherwise the data is protected and won't be updated.*/
    uint8_t temp;
    HAL_I2C_Mem_Read(hi2c,MPU9250_RA_MAG_ADDRESS, 0x09, I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	2364      	movs	r3, #100	; 0x64
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	2301      	movs	r3, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	f107 0317 	add.w	r3, r7, #23
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2209      	movs	r2, #9
 8001b32:	2118      	movs	r1, #24
 8001b34:	f001 ffa2 	bl	8003a7c <HAL_I2C_Mem_Read>
    //I2C_M.readByte(MPU9250_RA_MAG_ADDRESS, 0x09, &buffer_);

    *mx = ((int16_t)(buffer[1]) << 8) | buffer[0] ;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	79db      	ldrb	r3, [r3, #7]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	799b      	ldrb	r3, [r3, #6]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	801a      	strh	r2, [r3, #0]
    *my = ((int16_t)(buffer[3]) << 8) | buffer[2] ;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	7a5b      	ldrb	r3, [r3, #9]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	7a1b      	ldrb	r3, [r3, #8]
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	801a      	strh	r2, [r3, #0]
    *mz = ((int16_t)(buffer[5]) << 8) | buffer[4] ;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	7adb      	ldrb	r3, [r3, #11]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	7a9b      	ldrb	r3, [r3, #10]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	801a      	strh	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_ZN3Imu19getCompassDataReadyEv>:

uint8_t Imu::getCompassDataReady(){
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b088      	sub	sp, #32
 8001b86:	af04      	add	r7, sp, #16
 8001b88:	6078      	str	r0, [r7, #4]
   uint8_t temp;
   HAL_I2C_Mem_Read(hi2c,MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_ST1, I2C_MEMADD_SIZE_8BIT, &temp,1,100);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	2364      	movs	r3, #100	; 0x64
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 030f 	add.w	r3, r7, #15
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	2118      	movs	r1, #24
 8001ba2:	f001 ff6b 	bl	8003a7c <HAL_I2C_Mem_Read>
   //I2C_M.readByte(MPU9250_RA_MAG_ADDRESS, MPU9250_RA_MAG_ST1, &buffer_);
   temp = (temp & 0x01);//remove the front 7 bits.
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	73fb      	strb	r3, [r7, #15]
   return temp;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_ZN3Imu13readIntStatusEv>:

void Imu::readIntStatus(){
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af04      	add	r7, sp, #16
 8001bc0:	6078      	str	r0, [r7, #4]
   HAL_I2C_Mem_Read(hi2c,devAddr,MPU9250_RA_DMP_INT_STATUS,I2C_MEMADD_SIZE_8BIT, (uint8_t *)buffer,6,100);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	791b      	ldrb	r3, [r3, #4]
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3306      	adds	r3, #6
 8001bd0:	2264      	movs	r2, #100	; 0x64
 8001bd2:	9202      	str	r2, [sp, #8]
 8001bd4:	2206      	movs	r2, #6
 8001bd6:	9201      	str	r2, [sp, #4]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2239      	movs	r2, #57	; 0x39
 8001bde:	f001 ff4d 	bl	8003a7c <HAL_I2C_Mem_Read>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c30:	2004      	movs	r0, #4
 8001c32:	f7ff ffda 	bl	8001bea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	2080      	movs	r0, #128	; 0x80
 8001c38:	f7ff ffd7 	bl	8001bea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7ff ffd4 	bl	8001bea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff ffd1 	bl	8001bea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f7ff ffce 	bl	8001bea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	2008      	movs	r0, #8
 8001c50:	f7ff ffcb 	bl	8001bea <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2110      	movs	r1, #16
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5c:	f001 fd3a 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC6 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001c60:	f64f 435f 	movw	r3, #64607	; 0xfc5f
 8001c64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c66:	2303      	movs	r3, #3
 8001c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	483f      	ldr	r0, [pc, #252]	; (8001d70 <MX_GPIO_Init+0x154>)
 8001c74:	f001 fbbe 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	483a      	ldr	r0, [pc, #232]	; (8001d74 <MX_GPIO_Init+0x158>)
 8001c8a:	f001 fbb3 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c8e:	f649 730f 	movw	r3, #40719	; 0x9f0f
 8001c92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c94:	2303      	movs	r3, #3
 8001c96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f001 fba6 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001ca8:	2310      	movs	r3, #16
 8001caa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f001 fb98 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_2_Pin;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <MX_GPIO_Init+0x15c>)
 8001cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_2_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4826      	ldr	r0, [pc, #152]	; (8001d70 <MX_GPIO_Init+0x154>)
 8001cd6:	f001 fb8d 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_1_Pin;
 8001cda:	f640 0304 	movw	r3, #2052	; 0x804
 8001cde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <MX_GPIO_Init+0x15c>)
 8001ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4823      	ldr	r0, [pc, #140]	; (8001d7c <MX_GPIO_Init+0x160>)
 8001cee:	f001 fb81 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB0 PB1 PB12
                           PB13 PB14 PB15 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12
 8001cf2:	f24f 4333 	movw	r3, #62515	; 0xf433
 8001cf6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	481d      	ldr	r0, [pc, #116]	; (8001d7c <MX_GPIO_Init+0x160>)
 8001d06:	f001 fb75 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4819      	ldr	r0, [pc, #100]	; (8001d80 <MX_GPIO_Init+0x164>)
 8001d1c:	f001 fb6a 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d20:	2303      	movs	r3, #3
 8001d22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4814      	ldr	r0, [pc, #80]	; (8001d84 <MX_GPIO_Init+0x168>)
 8001d32:	f001 fb5f 	bl	80033f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2008      	movs	r0, #8
 8001d3c:	f001 fa59 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d40:	2008      	movs	r0, #8
 8001d42:	f001 fa70 	bl	8003226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2017      	movs	r0, #23
 8001d4c:	f001 fa51 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d50:	2017      	movs	r0, #23
 8001d52:	f001 fa68 	bl	8003226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2028      	movs	r0, #40	; 0x28
 8001d5c:	f001 fa49 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d60:	2028      	movs	r0, #40	; 0x28
 8001d62:	f001 fa60 	bl	8003226 <HAL_NVIC_EnableIRQ>

}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48001c00 	.word	0x48001c00
 8001d78:	10110000 	.word	0x10110000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48001000 	.word	0x48001000
 8001d84:	48000c00 	.word	0x48000c00

08001d88 <LL_AHB2_GRP1_EnableClock>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <MX_I2C1_Init+0x78>)
 8001df4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <MX_I2C1_Init+0x7c>)
 8001dfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e28:	f001 fc84 	bl	8003734 <HAL_I2C_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e32:	f000 fd0b 	bl	800284c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e36:	2100      	movs	r1, #0
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e3a:	f002 fec9 	bl	8004bd0 <HAL_I2CEx_ConfigAnalogFilter>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e44:	f000 fd02 	bl	800284c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_I2C1_Init+0x74>)
 8001e4c:	f002 ff0b 	bl	8004c66 <HAL_I2CEx_ConfigDigitalFilter>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e56:	f000 fcf9 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200002ac 	.word	0x200002ac
 8001e64:	40005400 	.word	0x40005400
 8001e68:	10707dbc 	.word	0x10707dbc

08001e6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_I2C_MspInit+0x7c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d127      	bne.n	8001ede <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7ff ff7a 	bl	8001d88 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9a:	2312      	movs	r3, #18
 8001e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480e      	ldr	r0, [pc, #56]	; (8001eec <HAL_I2C_MspInit+0x80>)
 8001eb2:	f001 fa9f 	bl	80033f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001eba:	f7ff ff7e 	bl	8001dba <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	201e      	movs	r0, #30
 8001ec4:	f001 f995 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ec8:	201e      	movs	r0, #30
 8001eca:	f001 f9ac 	bl	8003226 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	201f      	movs	r0, #31
 8001ed4:	f001 f98d 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ed8:	201f      	movs	r0, #31
 8001eda:	f001 f9a4 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ede:	bf00      	nop
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	48000400 	.word	0x48000400

08001ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef6:	f000 fff7 	bl	8002ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efa:	f000 f8ef 	bl	80020dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efe:	f7ff fe8d 	bl	8001c1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f02:	f7ff ff73 	bl	8001dec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f06:	f000 ff33 	bl	8002d70 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001f0a:	f000 fd13 	bl	8002934 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //  -====
  //  -====
  uint8_t deviceID;
  deviceID = myMPU->getDeviceID();
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <main+0x188>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fd6b 	bl	80019ee <_ZN3Imu11getDeviceIDEv>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if (deviceID == 0x71)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b71      	cmp	r3, #113	; 0x71
 8001f20:	d10c      	bne.n	8001f3c <main+0x4c>
  {
	  myMPU->initialize();//initialize
 8001f22:	4b55      	ldr	r3, [pc, #340]	; (8002078 <main+0x188>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fbac 	bl	8001684 <_ZN3Imu10initializeEv>
  {
	  printf("ID wrong");
	  return 0;
  }

  printf("Device OK, reading data \r\n");
 8001f2c:	4853      	ldr	r0, [pc, #332]	; (800207c <main+0x18c>)
 8001f2e:	f007 fa1f 	bl	8009370 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //  -====
  //  -====
  if(magCalibrateFlag)
 8001f32:	4b53      	ldr	r3, [pc, #332]	; (8002080 <main+0x190>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d011      	beq.n	8001f5e <main+0x6e>
 8001f3a:	e004      	b.n	8001f46 <main+0x56>
	  printf("ID wrong");
 8001f3c:	4851      	ldr	r0, [pc, #324]	; (8002084 <main+0x194>)
 8001f3e:	f007 f991 	bl	8009264 <iprintf>
	  return 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e094      	b.n	8002070 <main+0x180>
  {
	  calibrateMag();
 8001f46:	f000 fbd7 	bl	80026f8 <_Z12calibrateMagv>
	  printf("Mag Calibration done! \r\n");
 8001f4a:	484f      	ldr	r0, [pc, #316]	; (8002088 <main+0x198>)
 8001f4c:	f007 fa10 	bl	8009370 <puts>
	  HAL_Delay(4000);
 8001f50:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001f54:	f001 f84e 	bl	8002ff4 <HAL_Delay>
	  printf("Put the device to rest!! \r\n");
 8001f58:	484c      	ldr	r0, [pc, #304]	; (800208c <main+0x19c>)
 8001f5a:	f007 fa09 	bl	8009370 <puts>
  }

//  HAL_Delay(4000);

  printf("MPU enable \n");
 8001f5e:	484c      	ldr	r0, [pc, #304]	; (8002090 <main+0x1a0>)
 8001f60:	f007 fa06 	bl	8009370 <puts>

  //enable interrupt
  myMPU->enableInterrupt();
 8001f64:	4b44      	ldr	r3, [pc, #272]	; (8002078 <main+0x188>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fd77 	bl	8001a5c <_ZN3Imu15enableInterruptEv>
  myMPU->readIntStatus();
 8001f6e:	4b42      	ldr	r3, [pc, #264]	; (8002078 <main+0x188>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fe21 	bl	8001bba <_ZN3Imu13readIntStatusEv>



  printf("Init FLASH \n");
 8001f78:	4846      	ldr	r0, [pc, #280]	; (8002094 <main+0x1a4>)
 8001f7a:	f007 f9f9 	bl	8009370 <puts>
  W25qxx_Init();
 8001f7e:	f7ff f86f 	bl	8001060 <W25qxx_Init>

  printf("--WHILE-- \n");
 8001f82:	4845      	ldr	r0, [pc, #276]	; (8002098 <main+0x1a8>)
 8001f84:	f007 f9f4 	bl	8009370 <puts>

  while (1)
  {
	  if(counter_1 < (btn_delay + 1))
 8001f88:	4b44      	ldr	r3, [pc, #272]	; (800209c <main+0x1ac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <main+0x1b0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d904      	bls.n	8001fa0 <main+0xb0>
	  {
		  ++counter_1;
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <main+0x1b0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <main+0x1b0>)
 8001f9e:	6013      	str	r3, [r2, #0]
	  }
	  if(counter_2 < (btn_delay + 1))
 8001fa0:	4b3e      	ldr	r3, [pc, #248]	; (800209c <main+0x1ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <main+0x1b4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d904      	bls.n	8001fb8 <main+0xc8>
	  {
		  ++counter_2;
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <main+0x1b4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <main+0x1b4>)
 8001fb6:	6013      	str	r3, [r2, #0]
	  }
	  if(counter_3 < (btn_delay + 1))
 8001fb8:	4b38      	ldr	r3, [pc, #224]	; (800209c <main+0x1ac>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <main+0x1b8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d904      	bls.n	8001fd0 <main+0xe0>
	  {
		  ++counter_3;
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <main+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <main+0x1b8>)
 8001fce:	6013      	str	r3, [r2, #0]
	  }

	  if(write_to_flash)
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <main+0x1bc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01d      	beq.n	8002014 <main+0x124>
	  {
		  write_to_flash = false;
 8001fd8:	4b34      	ldr	r3, [pc, #208]	; (80020ac <main+0x1bc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]

		  printf("erase flash \n");
 8001fde:	4834      	ldr	r0, [pc, #208]	; (80020b0 <main+0x1c0>)
 8001fe0:	f007 f9c6 	bl	8009370 <puts>
		  W25qxx_EraseSector(1);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff f901 	bl	80011ec <W25qxx_EraseSector>
		  printf("write to flash \n");
 8001fea:	4832      	ldr	r0, [pc, #200]	; (80020b4 <main+0x1c4>)
 8001fec:	f007 f9c0 	bl	8009370 <puts>
		  W25qxx_WriteSector(write_buffer, 1, 0, 8);
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4830      	ldr	r0, [pc, #192]	; (80020b8 <main+0x1c8>)
 8001ff8:	f7ff f9e2 	bl	80013c0 <W25qxx_WriteSector>
		  printf("data written to flash \n");
 8001ffc:	482f      	ldr	r0, [pc, #188]	; (80020bc <main+0x1cc>)
 8001ffe:	f007 f9b7 	bl	8009370 <puts>
		  W25qxx_WriteSector(write_buffer_2, 1, 8, 8);
 8002002:	2308      	movs	r3, #8
 8002004:	2208      	movs	r2, #8
 8002006:	2101      	movs	r1, #1
 8002008:	482d      	ldr	r0, [pc, #180]	; (80020c0 <main+0x1d0>)
 800200a:	f7ff f9d9 	bl	80013c0 <W25qxx_WriteSector>
		  printf("data written to flash 2 \n");
 800200e:	482d      	ldr	r0, [pc, #180]	; (80020c4 <main+0x1d4>)
 8002010:	f007 f9ae 	bl	8009370 <puts>
	  }

	  if(read_from_flash)
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <main+0x1d8>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0b5      	beq.n	8001f88 <main+0x98>
	  {
		  read_from_flash = false;
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <main+0x1d8>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]

		  printf("read from flash \n");
 8002022:	482a      	ldr	r0, [pc, #168]	; (80020cc <main+0x1dc>)
 8002024:	f007 f9a4 	bl	8009370 <puts>
		  W25qxx_ReadSector(read_buffer, 1, 0, 16);
 8002028:	2310      	movs	r3, #16
 800202a:	2200      	movs	r2, #0
 800202c:	2101      	movs	r1, #1
 800202e:	4828      	ldr	r0, [pc, #160]	; (80020d0 <main+0x1e0>)
 8002030:	f7ff faa2 	bl	8001578 <W25qxx_ReadSector>
		  printf("data read \n");
 8002034:	4827      	ldr	r0, [pc, #156]	; (80020d4 <main+0x1e4>)
 8002036:	f007 f99b 	bl	8009370 <puts>
		  printf("r0 = %d,r1 = %d,r7 = %d,r8 = %d,r9 = %d,r15 = %d, \n", read_buffer[0], read_buffer[1], read_buffer[7], read_buffer[8], read_buffer[9], read_buffer[15]);
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <main+0x1e0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <main+0x1e0>)
 8002042:	785b      	ldrb	r3, [r3, #1]
 8002044:	461c      	mov	r4, r3
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <main+0x1e0>)
 8002048:	79db      	ldrb	r3, [r3, #7]
 800204a:	461d      	mov	r5, r3
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <main+0x1e0>)
 800204e:	7a1b      	ldrb	r3, [r3, #8]
 8002050:	461a      	mov	r2, r3
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <main+0x1e0>)
 8002054:	7a5b      	ldrb	r3, [r3, #9]
 8002056:	4619      	mov	r1, r3
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <main+0x1e0>)
 800205a:	7bdb      	ldrb	r3, [r3, #15]
 800205c:	9302      	str	r3, [sp, #8]
 800205e:	9101      	str	r1, [sp, #4]
 8002060:	9200      	str	r2, [sp, #0]
 8002062:	462b      	mov	r3, r5
 8002064:	4622      	mov	r2, r4
 8002066:	4601      	mov	r1, r0
 8002068:	481b      	ldr	r0, [pc, #108]	; (80020d8 <main+0x1e8>)
 800206a:	f007 f8fb 	bl	8009264 <iprintf>
	  if(counter_1 < (btn_delay + 1))
 800206e:	e78b      	b.n	8001f88 <main+0x98>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bdb0      	pop	{r4, r5, r7, pc}
 8002078:	20000270 	.word	0x20000270
 800207c:	0800b2fc 	.word	0x0800b2fc
 8002080:	20000014 	.word	0x20000014
 8002084:	0800b2f0 	.word	0x0800b2f0
 8002088:	0800b318 	.word	0x0800b318
 800208c:	0800b330 	.word	0x0800b330
 8002090:	0800b34c 	.word	0x0800b34c
 8002094:	0800b358 	.word	0x0800b358
 8002098:	0800b364 	.word	0x0800b364
 800209c:	20000004 	.word	0x20000004
 80020a0:	20000008 	.word	0x20000008
 80020a4:	2000000c 	.word	0x2000000c
 80020a8:	20000010 	.word	0x20000010
 80020ac:	2000026c 	.word	0x2000026c
 80020b0:	0800b370 	.word	0x0800b370
 80020b4:	0800b380 	.word	0x0800b380
 80020b8:	20000018 	.word	0x20000018
 80020bc:	0800b390 	.word	0x0800b390
 80020c0:	20000020 	.word	0x20000020
 80020c4:	0800b3a8 	.word	0x0800b3a8
 80020c8:	2000026d 	.word	0x2000026d
 80020cc:	0800b3c4 	.word	0x0800b3c4
 80020d0:	2000025c 	.word	0x2000025c
 80020d4:	0800b3d8 	.word	0x0800b3d8
 80020d8:	0800b3e4 	.word	0x0800b3e4

080020dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0ae      	sub	sp, #184	; 0xb8
 80020e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020e6:	2248      	movs	r2, #72	; 0x48
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fb9e 	bl	800882c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2250      	movs	r2, #80	; 0x50
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f006 fb8e 	bl	800882c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002110:	4b40      	ldr	r3, [pc, #256]	; (8002214 <_Z18SystemClock_Configv+0x138>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002118:	4a3e      	ldr	r2, [pc, #248]	; (8002214 <_Z18SystemClock_Configv+0x138>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <_Z18SystemClock_Configv+0x138>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800212c:	2322      	movs	r3, #34	; 0x22
 800212e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002134:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002136:	2301      	movs	r3, #1
 8002138:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800213c:	2340      	movs	r3, #64	; 0x40
 800213e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002148:	2360      	movs	r3, #96	; 0x60
 800214a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002154:	2301      	movs	r3, #1
 8002156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002160:	2320      	movs	r3, #32
 8002162:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800216e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002182:	4618      	mov	r0, r3
 8002184:	f003 f950 	bl	8005428 <HAL_RCC_OscConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8002198:	f000 fb58 	bl	800284c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800219c:	236f      	movs	r3, #111	; 0x6f
 800219e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a0:	2303      	movs	r3, #3
 80021a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021bc:	2103      	movs	r1, #3
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fcbe 	bl	8005b40 <HAL_RCC_ClockConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 80021d4:	f000 fb3a 	bl	800284c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80021d8:	f242 0305 	movw	r3, #8197	; 0x2005
 80021dc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021e2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80021e8:	2300      	movs	r3, #0
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80021ec:	2310      	movs	r3, #16
 80021ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 f8e7 	bl	80063c6 <HAL_RCCEx_PeriphCLKConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <_Z18SystemClock_Configv+0x130>
  {
    Error_Handler();
 8002208:	f000 fb20 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800220c:	bf00      	nop
 800220e:	37b8      	adds	r7, #184	; 0xb8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	58000400 	.word	0x58000400

08002218 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221c:	b09c      	sub	sp, #112	; 0x70
 800221e:	af10      	add	r7, sp, #64	; 0x40
 8002220:	4603      	mov	r3, r0
 8002222:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if(GPIO_Pin == BTN_1_Pin)
 8002224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800222a:	d170      	bne.n	800230e <HAL_GPIO_EXTI_Callback+0xf6>
	{
		if(counter_1 > btn_delay)
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_GPIO_EXTI_Callback+0x144>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_GPIO_EXTI_Callback+0x148>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d96a      	bls.n	800230e <HAL_GPIO_EXTI_Callback+0xf6>
		{
			counter_1 = 0;
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_GPIO_EXTI_Callback+0x144>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
			printf("BTN 1 \n");
 800223e:	4849      	ldr	r0, [pc, #292]	; (8002364 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002240:	f007 f896 	bl	8009370 <puts>

			getGyroData();
 8002244:	f000 f8a4 	bl	8002390 <_Z11getGyroDatav>
			getAccelData();
 8002248:	f000 f934 	bl	80024b4 <_Z12getAccelDatav>
			getCompassData();
 800224c:	f000 f96e 	bl	800252c <_Z14getCompassDatav>

			write_to_flash = true;
 8002250:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_GPIO_EXTI_Callback+0x150>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]

			printf("GYRO: %f %f %f Accel: %f %f %f Compass: %f %f %f \n",Gxyz[0],Gxyz[1],Gxyz[2],Axyz[0],Axyz[1],Axyz[2],Mxyz[0],Mxyz[1],Mxyz[2]);
 8002256:	4b45      	ldr	r3, [pc, #276]	; (800236c <HAL_GPIO_EXTI_Callback+0x154>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f94c 	bl	80004f8 <__aeabi_f2d>
 8002260:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002264:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_GPIO_EXTI_Callback+0x154>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f945 	bl	80004f8 <__aeabi_f2d>
 800226e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_GPIO_EXTI_Callback+0x154>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f93e 	bl	80004f8 <__aeabi_f2d>
 800227c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_GPIO_EXTI_Callback+0x158>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f937 	bl	80004f8 <__aeabi_f2d>
 800228a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800228e:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_GPIO_EXTI_Callback+0x158>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f930 	bl	80004f8 <__aeabi_f2d>
 8002298:	e9c7 0100 	strd	r0, r1, [r7]
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_GPIO_EXTI_Callback+0x158>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f929 	bl	80004f8 <__aeabi_f2d>
 80022a6:	4682      	mov	sl, r0
 80022a8:	468b      	mov	fp, r1
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_GPIO_EXTI_Callback+0x15c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f922 	bl	80004f8 <__aeabi_f2d>
 80022b4:	4680      	mov	r8, r0
 80022b6:	4689      	mov	r9, r1
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_GPIO_EXTI_Callback+0x15c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f91b 	bl	80004f8 <__aeabi_f2d>
 80022c2:	4604      	mov	r4, r0
 80022c4:	460d      	mov	r5, r1
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_GPIO_EXTI_Callback+0x15c>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f914 	bl	80004f8 <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80022d8:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80022dc:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80022e0:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80022e4:	ed97 7b00 	vldr	d7, [r7]
 80022e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80022ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80022f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80022f4:	ed97 7b04 	vldr	d7, [r7, #16]
 80022f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80022fc:	ed97 7b06 	vldr	d7, [r7, #24]
 8002300:	ed8d 7b00 	vstr	d7, [sp]
 8002304:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002308:	481b      	ldr	r0, [pc, #108]	; (8002378 <HAL_GPIO_EXTI_Callback+0x160>)
 800230a:	f006 ffab 	bl	8009264 <iprintf>
		}
	}
	if(GPIO_Pin == BTN_2_Pin)
 800230e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002310:	2b20      	cmp	r3, #32
 8002312:	d10b      	bne.n	800232c <HAL_GPIO_EXTI_Callback+0x114>
	{
		if(counter_2 > btn_delay)
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_GPIO_EXTI_Callback+0x164>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_GPIO_EXTI_Callback+0x148>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d905      	bls.n	800232c <HAL_GPIO_EXTI_Callback+0x114>
		{
			counter_2 = 0;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_GPIO_EXTI_Callback+0x164>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
			printf("BTN 2 \n");
 8002326:	4816      	ldr	r0, [pc, #88]	; (8002380 <HAL_GPIO_EXTI_Callback+0x168>)
 8002328:	f007 f822 	bl	8009370 <puts>
		}
	}
	if(GPIO_Pin == BTN_3_Pin)
 800232c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800232e:	2b04      	cmp	r3, #4
 8002330:	d10e      	bne.n	8002350 <HAL_GPIO_EXTI_Callback+0x138>
	{
		if(counter_3 > btn_delay)
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_GPIO_EXTI_Callback+0x148>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d908      	bls.n	8002350 <HAL_GPIO_EXTI_Callback+0x138>
		{
			counter_3 = 0;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
			printf("BTN 3 \n");
 8002344:	4810      	ldr	r0, [pc, #64]	; (8002388 <HAL_GPIO_EXTI_Callback+0x170>)
 8002346:	f007 f813 	bl	8009370 <puts>

			read_from_flash = true;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_GPIO_EXTI_Callback+0x174>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002350:	bf00      	nop
 8002352:	3730      	adds	r7, #48	; 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008
 8002360:	20000004 	.word	0x20000004
 8002364:	0800b418 	.word	0x0800b418
 8002368:	2000026c 	.word	0x2000026c
 800236c:	20000238 	.word	0x20000238
 8002370:	2000022c 	.word	0x2000022c
 8002374:	20000244 	.word	0x20000244
 8002378:	0800b420 	.word	0x0800b420
 800237c:	2000000c 	.word	0x2000000c
 8002380:	0800b454 	.word	0x0800b454
 8002384:	20000010 	.word	0x20000010
 8002388:	0800b45c 	.word	0x0800b45c
 800238c:	2000026d 	.word	0x2000026d

08002390 <_Z11getGyroDatav>:
void getGyroData()
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
  int16_t gx, gy, gz;
  myMPU->getRotation(&gx, &gy, &gz);
 8002396:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <_Z11getGyroDatav+0x110>)
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	1dbb      	adds	r3, r7, #6
 800239c:	f107 0208 	add.w	r2, r7, #8
 80023a0:	f107 010a 	add.w	r1, r7, #10
 80023a4:	f7ff fab2 	bl	800190c <_ZN3Imu11getRotationEPsS0_S0_>
  Gxyz[0] = (float) gx * 500 / 32768;//131 LSB(??/s)
 80023a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80024a4 <_Z11getGyroDatav+0x114>
 80023b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023bc:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80024a8 <_Z11getGyroDatav+0x118>
 80023c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023c4:	4b39      	ldr	r3, [pc, #228]	; (80024ac <_Z11getGyroDatav+0x11c>)
 80023c6:	edc3 7a00 	vstr	s15, [r3]
  Gxyz[1] = (float) gy * 500 / 32768;
 80023ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80024a4 <_Z11getGyroDatav+0x114>
 80023da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023de:	eddf 6a32 	vldr	s13, [pc, #200]	; 80024a8 <_Z11getGyroDatav+0x118>
 80023e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <_Z11getGyroDatav+0x11c>)
 80023e8:	edc3 7a01 	vstr	s15, [r3, #4]
  Gxyz[2] = (float) gz * 500 / 32768;
 80023ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80024a4 <_Z11getGyroDatav+0x114>
 80023fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002400:	eddf 6a29 	vldr	s13, [pc, #164]	; 80024a8 <_Z11getGyroDatav+0x118>
 8002404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <_Z11getGyroDatav+0x11c>)
 800240a:	edc3 7a02 	vstr	s15, [r3, #8]
  Gxyz[0] = Gxyz[0] - gyroBias[0];
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <_Z11getGyroDatav+0x11c>)
 8002410:	ed93 7a00 	vldr	s14, [r3]
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <_Z11getGyroDatav+0x120>)
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <_Z11getGyroDatav+0x11c>)
 8002420:	edc3 7a00 	vstr	s15, [r3]
  Gxyz[1] = Gxyz[1] - gyroBias[1];
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <_Z11getGyroDatav+0x11c>)
 8002426:	ed93 7a01 	vldr	s14, [r3, #4]
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <_Z11getGyroDatav+0x120>)
 800242c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <_Z11getGyroDatav+0x11c>)
 8002436:	edc3 7a01 	vstr	s15, [r3, #4]
  Gxyz[2] = Gxyz[1] - gyroBias[2];
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <_Z11getGyroDatav+0x11c>)
 800243c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <_Z11getGyroDatav+0x120>)
 8002442:	edd3 7a02 	vldr	s15, [r3, #8]
 8002446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <_Z11getGyroDatav+0x11c>)
 800244c:	edc3 7a02 	vstr	s15, [r3, #8]
  //High Pass Filter -> remove all values that are less than 0.05dps.
  for (int i=0;i<3;i++){
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b02      	cmp	r3, #2
 8002458:	dc1a      	bgt.n	8002490 <_Z11getGyroDatav+0x100>
    if(Gxyz[i]<0.05){
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <_Z11getGyroDatav+0x11c>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f847 	bl	80004f8 <__aeabi_f2d>
 800246a:	a30b      	add	r3, pc, #44	; (adr r3, 8002498 <_Z11getGyroDatav+0x108>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe fb0c 	bl	8000a8c <__aeabi_dcmplt>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <_Z11getGyroDatav+0xf8>
      Gxyz[i]=0;
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <_Z11getGyroDatav+0x11c>)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  for (int i=0;i<3;i++){
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e7e1      	b.n	8002454 <_Z11getGyroDatav+0xc4>
    }
  }
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	9999999a 	.word	0x9999999a
 800249c:	3fa99999 	.word	0x3fa99999
 80024a0:	20000270 	.word	0x20000270
 80024a4:	43fa0000 	.word	0x43fa0000
 80024a8:	47000000 	.word	0x47000000
 80024ac:	20000238 	.word	0x20000238
 80024b0:	20000250 	.word	0x20000250

080024b4 <_Z12getAccelDatav>:
	Gxyz[0] = (float) gx * 500 / 32768;//131 LSB(??/s)
	Gxyz[1] = (float) gy * 500 / 32768;
	Gxyz[2] = (float) gz * 500 / 32768;
}

void getAccelData(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
	int16_t ax, ay, az;
	myMPU->getAcceleration(&ax,&ay,&az);
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <_Z12getAccelDatav+0x6c>)
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	1cbb      	adds	r3, r7, #2
 80024c0:	1d3a      	adds	r2, r7, #4
 80024c2:	1db9      	adds	r1, r7, #6
 80024c4:	f7ff f9e6 	bl	8001894 <_ZN3Imu15getAccelerationEPsS0_S0_>
	Axyz[0] = (float) ax / 16384;//16384  LSB/g
 80024c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024d4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002524 <_Z12getAccelDatav+0x70>
 80024d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <_Z12getAccelDatav+0x74>)
 80024de:	edc3 7a00 	vstr	s15, [r3]
	Axyz[1] = (float) ay / 16384;
 80024e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ee:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002524 <_Z12getAccelDatav+0x70>
 80024f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <_Z12getAccelDatav+0x74>)
 80024f8:	edc3 7a01 	vstr	s15, [r3, #4]
	Axyz[2] = (float) az / 16384;
 80024fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002508:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002524 <_Z12getAccelDatav+0x70>
 800250c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <_Z12getAccelDatav+0x74>)
 8002512:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000270 	.word	0x20000270
 8002524:	46800000 	.word	0x46800000
 8002528:	2000022c 	.word	0x2000022c

0800252c <_Z14getCompassDatav>:

void getCompassData(){
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
	uint8_t dataReady = myMPU->getCompassDataReady();
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <_Z14getCompassDatav+0xfc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fb23 	bl	8001b82 <_ZN3Imu19getCompassDataReadyEv>
 800253c:	4603      	mov	r3, r0
 800253e:	73fb      	strb	r3, [r7, #15]
	if (dataReady == 1){
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d16c      	bne.n	8002620 <_Z14getCompassDatav+0xf4>
		int16_t mx, my, mz;
		myMPU->getMagData(&mx,&my,&mz);
 8002546:	4b38      	ldr	r3, [pc, #224]	; (8002628 <_Z14getCompassDatav+0xfc>)
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	1cbb      	adds	r3, r7, #2
 800254c:	1d3a      	adds	r2, r7, #4
 800254e:	1db9      	adds	r1, r7, #6
 8002550:	f7ff facf 	bl	8001af2 <_ZN3Imu10getMagDataEPsS0_S0_>
		//14 bit output.
		Mxyz[0] = (float) mx * 4912 / 8192;
 8002554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002560:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800262c <_Z14getCompassDatav+0x100>
 8002564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002568:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002630 <_Z14getCompassDatav+0x104>
 800256c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <_Z14getCompassDatav+0x108>)
 8002572:	edc3 7a00 	vstr	s15, [r3]
		Mxyz[1] = (float) my * 4912 / 8192;
 8002576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002582:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800262c <_Z14getCompassDatav+0x100>
 8002586:	ee27 7a87 	vmul.f32	s14, s15, s14
 800258a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002630 <_Z14getCompassDatav+0x104>
 800258e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <_Z14getCompassDatav+0x108>)
 8002594:	edc3 7a01 	vstr	s15, [r3, #4]
		Mxyz[2] = (float) mz * 4912 / 8192;
 8002598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800262c <_Z14getCompassDatav+0x100>
 80025a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025ac:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002630 <_Z14getCompassDatav+0x104>
 80025b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025b6:	edc3 7a02 	vstr	s15, [r3, #8]
		Mxyz[0] = Mxyz[0] - mx_centre;
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025bc:	ed93 7a00 	vldr	s14, [r3]
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <_Z14getCompassDatav+0x10c>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025cc:	edc3 7a00 	vstr	s15, [r3]
		Mxyz[1] = Mxyz[1] - my_centre;
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <_Z14getCompassDatav+0x110>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025e2:	edc3 7a01 	vstr	s15, [r3, #4]
		Mxyz[2] = Mxyz[2] - mz_centre;
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <_Z14getCompassDatav+0x114>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025f8:	edc3 7a02 	vstr	s15, [r3, #8]

		/*frame transformation -> coz mag is mounted on different axies with gyro and accel*/
		float temp = Mxyz[0];
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <_Z14getCompassDatav+0x108>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60bb      	str	r3, [r7, #8]
		Mxyz[0] = Mxyz[1];
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <_Z14getCompassDatav+0x108>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <_Z14getCompassDatav+0x108>)
 8002608:	6013      	str	r3, [r2, #0]
		Mxyz[1] = temp;
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <_Z14getCompassDatav+0x108>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6053      	str	r3, [r2, #4]
		Mxyz[2] = Mxyz[2]*(-1);
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <_Z14getCompassDatav+0x108>)
 8002612:	edd3 7a02 	vldr	s15, [r3, #8]
 8002616:	eef1 7a67 	vneg.f32	s15, s15
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <_Z14getCompassDatav+0x108>)
 800261c:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000270 	.word	0x20000270
 800262c:	45998000 	.word	0x45998000
 8002630:	46000000 	.word	0x46000000
 8002634:	20000244 	.word	0x20000244
 8002638:	20000220 	.word	0x20000220
 800263c:	20000224 	.word	0x20000224
 8002640:	20000228 	.word	0x20000228

08002644 <_Z17getRawCompassDatav>:

void getRawCompassData(){
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
	uint8_t dataReady = myMPU->getCompassDataReady();
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <_Z17getRawCompassDatav+0xa0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fa97 	bl	8001b82 <_ZN3Imu19getCompassDataReadyEv>
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
	if (dataReady == 1){
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d13a      	bne.n	80026d4 <_Z17getRawCompassDatav+0x90>
		int16_t mx, my, mz;
		myMPU->getMagData(&mx,&my,&mz);
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <_Z17getRawCompassDatav+0xa0>)
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	463b      	mov	r3, r7
 8002664:	1cba      	adds	r2, r7, #2
 8002666:	1d39      	adds	r1, r7, #4
 8002668:	f7ff fa43 	bl	8001af2 <_ZN3Imu10getMagDataEPsS0_S0_>
		//14 bit output.
		Mxyz[0] = (float) mx * 4912 / 8192;
 800266c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002678:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026e8 <_Z17getRawCompassDatav+0xa4>
 800267c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002680:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80026ec <_Z17getRawCompassDatav+0xa8>
 8002684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <_Z17getRawCompassDatav+0xac>)
 800268a:	edc3 7a00 	vstr	s15, [r3]
		Mxyz[1] = (float) my * 4912 / 8192;
 800268e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80026e8 <_Z17getRawCompassDatav+0xa4>
 800269e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026a2:	eddf 6a12 	vldr	s13, [pc, #72]	; 80026ec <_Z17getRawCompassDatav+0xa8>
 80026a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <_Z17getRawCompassDatav+0xac>)
 80026ac:	edc3 7a01 	vstr	s15, [r3, #4]
		Mxyz[2] = (float) mz * 4912 / 8192;
 80026b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026bc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80026e8 <_Z17getRawCompassDatav+0xa4>
 80026c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026c4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80026ec <_Z17getRawCompassDatav+0xa8>
 80026c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <_Z17getRawCompassDatav+0xac>)
 80026ce:	edc3 7a02 	vstr	s15, [r3, #8]
	}else{
		printf("Mag data not ready, using original data");
	}
}
 80026d2:	e002      	b.n	80026da <_Z17getRawCompassDatav+0x96>
		printf("Mag data not ready, using original data");
 80026d4:	4807      	ldr	r0, [pc, #28]	; (80026f4 <_Z17getRawCompassDatav+0xb0>)
 80026d6:	f006 fdc5 	bl	8009264 <iprintf>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000270 	.word	0x20000270
 80026e8:	45998000 	.word	0x45998000
 80026ec:	46000000 	.word	0x46000000
 80026f0:	20000244 	.word	0x20000244
 80026f4:	0800b464 	.word	0x0800b464

080026f8 <_Z12calibrateMagv>:

void calibrateMag(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
  uint16_t ii = 0, sample_count = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002702:	2300      	movs	r3, #0
 8002704:	83fb      	strh	r3, [r7, #30]
  float mag_max[3] = {1,1,1};
 8002706:	4a4a      	ldr	r2, [pc, #296]	; (8002830 <_Z12calibrateMagv+0x138>)
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	ca07      	ldmia	r2, {r0, r1, r2}
 800270e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float mag_min[3] = {-1,-1,-1};
 8002712:	4a48      	ldr	r2, [pc, #288]	; (8002834 <_Z12calibrateMagv+0x13c>)
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	ca07      	ldmia	r2, {r0, r1, r2}
 8002718:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  printf("Mag Calibration: Wave device in a figure eight until done! \r\n");
 800271c:	4846      	ldr	r0, [pc, #280]	; (8002838 <_Z12calibrateMagv+0x140>)
 800271e:	f006 fe27 	bl	8009370 <puts>
  HAL_Delay(2000);
 8002722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002726:	f000 fc65 	bl	8002ff4 <HAL_Delay>

  sample_count = 100;
 800272a:	2364      	movs	r3, #100	; 0x64
 800272c:	83fb      	strh	r3, [r7, #30]
  for(ii = 0; ii < sample_count; ii++) {
 800272e:	2300      	movs	r3, #0
 8002730:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002732:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002734:	8bfb      	ldrh	r3, [r7, #30]
 8002736:	429a      	cmp	r2, r3
 8002738:	d24f      	bcs.n	80027da <_Z12calibrateMagv+0xe2>
    getRawCompassData();  // Read the mag data
 800273a:	f7ff ff83 	bl	8002644 <_Z17getRawCompassDatav>
    for (int jj = 0; jj < 3; jj++) {
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b02      	cmp	r3, #2
 8002746:	dc41      	bgt.n	80027cc <_Z12calibrateMagv+0xd4>
      if(Mxyz[jj] > mag_max[jj]) mag_max[jj] = Mxyz[jj];
 8002748:	4a3c      	ldr	r2, [pc, #240]	; (800283c <_Z12calibrateMagv+0x144>)
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800275c:	4413      	add	r3, r2
 800275e:	3b18      	subs	r3, #24
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	dd0b      	ble.n	8002786 <_Z12calibrateMagv+0x8e>
 800276e:	4a33      	ldr	r2, [pc, #204]	; (800283c <_Z12calibrateMagv+0x144>)
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002780:	440b      	add	r3, r1
 8002782:	3b18      	subs	r3, #24
 8002784:	601a      	str	r2, [r3, #0]
      if(Mxyz[jj] < mag_min[jj]) mag_min[jj] = Mxyz[jj];
 8002786:	4a2d      	ldr	r2, [pc, #180]	; (800283c <_Z12calibrateMagv+0x144>)
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	ed93 7a00 	vldr	s14, [r3]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800279a:	4413      	add	r3, r2
 800279c:	3b24      	subs	r3, #36	; 0x24
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	d50b      	bpl.n	80027c4 <_Z12calibrateMagv+0xcc>
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <_Z12calibrateMagv+0x144>)
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027be:	440b      	add	r3, r1
 80027c0:	3b24      	subs	r3, #36	; 0x24
 80027c2:	601a      	str	r2, [r3, #0]
    for (int jj = 0; jj < 3; jj++) {
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	3301      	adds	r3, #1
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	e7ba      	b.n	8002742 <_Z12calibrateMagv+0x4a>
    }
    HAL_Delay(200);
 80027cc:	20c8      	movs	r0, #200	; 0xc8
 80027ce:	f000 fc11 	bl	8002ff4 <HAL_Delay>
  for(ii = 0; ii < sample_count; ii++) {
 80027d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027d4:	3301      	adds	r3, #1
 80027d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80027d8:	e7ab      	b.n	8002732 <_Z12calibrateMagv+0x3a>
  }

  // Get hard iron correction
  mx_centre  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80027da:	ed97 7a04 	vldr	s14, [r7, #16]
 80027de:	edd7 7a01 	vldr	s15, [r7, #4]
 80027e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <_Z12calibrateMagv+0x148>)
 80027f0:	edc3 7a00 	vstr	s15, [r3]
  my_centre  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80027f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80027f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002800:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <_Z12calibrateMagv+0x14c>)
 800280a:	edc3 7a00 	vstr	s15, [r3]
  mz_centre  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 800280e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002812:	edd7 7a03 	vldr	s15, [r7, #12]
 8002816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800281e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <_Z12calibrateMagv+0x150>)
 8002824:	edc3 7a00 	vstr	s15, [r3]
  avg_rad /= 3.0;
  dest2[0] = avg_rad/((float)mag_scale[0]);
  dest2[1] = avg_rad/((float)mag_scale[1]);
  dest2[2] = avg_rad/((float)mag_scale[2]);
  */
}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0800b4cc 	.word	0x0800b4cc
 8002834:	0800b4d8 	.word	0x0800b4d8
 8002838:	0800b48c 	.word	0x0800b48c
 800283c:	20000244 	.word	0x20000244
 8002840:	20000220 	.word	0x20000220
 8002844:	20000224 	.word	0x20000224
 8002848:	20000228 	.word	0x20000228

0800284c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002850:	b672      	cpsid	i
}
 8002852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002854:	e7fe      	b.n	8002854 <Error_Handler+0x8>
	...

08002858 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10f      	bne.n	8002888 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286e:	4293      	cmp	r3, r2
 8002870:	d10a      	bne.n	8002888 <_Z41__static_initialization_and_destruction_0ii+0x30>
Imu *myMPU = new Imu (&hi2c1);
 8002872:	2014      	movs	r0, #20
 8002874:	f005 ff86 	bl	8008784 <_Znwj>
 8002878:	4603      	mov	r3, r0
 800287a:	461c      	mov	r4, r3
 800287c:	4904      	ldr	r1, [pc, #16]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800287e:	4620      	mov	r0, r4
 8002880:	f7fe fedc 	bl	800163c <_ZN3ImuC1EP19__I2C_HandleTypeDef>
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002886:	601c      	str	r4, [r3, #0]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	200002ac 	.word	0x200002ac
 8002894:	20000270 	.word	0x20000270

08002898 <_GLOBAL__sub_I__Z12__io_putcharc>:
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
 800289c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7ff ffd9 	bl	8002858 <_Z41__static_initialization_and_destruction_0ii>
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <__io_putchar>:
#define __PRINTF_TO_UART_H__

#include "usart.h"

int __io_putchar(char ch)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 80028b2:	1df9      	adds	r1, r7, #7
 80028b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b8:	2201      	movs	r2, #1
 80028ba:	4804      	ldr	r0, [pc, #16]	; (80028cc <__io_putchar+0x24>)
 80028bc:	f004 ff82 	bl	80077c4 <HAL_UART_Transmit>
	return ch;
 80028c0:	79fb      	ldrb	r3, [r7, #7]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000035c 	.word	0x2000035c

080028d0 <LL_AHB2_GRP1_EnableClock>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4313      	orrs	r3, r2
 8002918:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <MX_SPI1_Init+0x74>)
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <MX_SPI1_Init+0x78>)
 800293c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <MX_SPI1_Init+0x74>)
 800294e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002952:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <MX_SPI1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <MX_SPI1_Init+0x74>)
 800296a:	2228      	movs	r2, #40	; 0x28
 800296c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002976:	2200      	movs	r2, #0
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <MX_SPI1_Init+0x74>)
 800297c:	2200      	movs	r2, #0
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002982:	2207      	movs	r2, #7
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <MX_SPI1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_SPI1_Init+0x74>)
 8002994:	f003 ff9e 	bl	80068d4 <HAL_SPI_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800299e:	f7ff ff55 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200002f8 	.word	0x200002f8
 80029ac:	40013000 	.word	0x40013000

080029b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_SPI_MspInit+0x5c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d117      	bne.n	8002a02 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029d6:	f7ff ff94 	bl	8002902 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff ff78 	bl	80028d0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029e0:	23e0      	movs	r3, #224	; 0xe0
 80029e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029f0:	2305      	movs	r3, #5
 80029f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	4619      	mov	r1, r3
 80029fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029fe:	f000 fcf9 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a02:	bf00      	nop
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40013000 	.word	0x40013000

08002a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <NMI_Handler+0x4>

08002a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <HardFault_Handler+0x4>

08002a2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <MemManage_Handler+0x4>

08002a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <BusFault_Handler+0x4>

08002a36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <UsageFault_Handler+0x4>

08002a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a6a:	f000 fa97 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a76:	2004      	movs	r0, #4
 8002a78:	f000 fe44 	bl	8003704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002a84:	2020      	movs	r0, #32
 8002a86:	f000 fe3d 	bl	8003704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <I2C1_EV_IRQHandler+0x10>)
 8002a96:	f001 f90b 	bl	8003cb0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200002ac 	.word	0x200002ac

08002aa4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <I2C1_ER_IRQHandler+0x10>)
 8002aaa:	f001 f91b 	bl	8003ce4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200002ac 	.word	0x200002ac

08002ab8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <USART1_IRQHandler+0x10>)
 8002abe:	f004 ff17 	bl	80078f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000035c 	.word	0x2000035c

08002acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002ad0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ad4:	f000 fe16 	bl	8003704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
	return 1;
 8002ae0:	2301      	movs	r3, #1
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_kill>:

int _kill(int pid, int sig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002af6:	f005 fe67 	bl	80087c8 <__errno>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2216      	movs	r2, #22
 8002afe:	601a      	str	r2, [r3, #0]
	return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_exit>:

void _exit (int status)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffe7 	bl	8002aec <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b1e:	e7fe      	b.n	8002b1e <_exit+0x12>

08002b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e00a      	b.n	8002b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b32:	f3af 8000 	nop.w
 8002b36:	4601      	mov	r1, r0
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	60ba      	str	r2, [r7, #8]
 8002b3e:	b2ca      	uxtb	r2, r1
 8002b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3301      	adds	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	dbf0      	blt.n	8002b32 <_read+0x12>
	}

return len;
 8002b50:	687b      	ldr	r3, [r7, #4]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e009      	b.n	8002b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	60ba      	str	r2, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe97 	bl	80028a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dbf1      	blt.n	8002b6c <_write+0x12>
	}
	return len;
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_close>:

int _close(int file)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bba:	605a      	str	r2, [r3, #4]
	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_isatty>:

int _isatty(int file)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	return 0;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f005 fdcc 	bl	80087c8 <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20030000 	.word	0x20030000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	20000274 	.word	0x20000274
 8002c64:	20000400 	.word	0x20000400

08002c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <SystemInit+0x98>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <SystemInit+0x98>)
 8002c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002c94:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <SystemInit+0x9c>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb2:	f023 0305 	bic.w	r3, r3, #5
 8002cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <SystemInit+0xa0>)
 8002cd4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <SystemInit+0xa0>)
 8002cdc:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	faf6fefb 	.word	0xfaf6fefb
 8002d08:	22041000 	.word	0x22041000

08002d0c <LL_AHB2_GRP1_EnableClock>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_APB2_GRP1_EnableClock>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002d76:	4a23      	ldr	r2, [pc, #140]	; (8002e04 <MX_USART1_UART_Init+0x94>)
 8002d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d7a:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da0:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002db8:	4811      	ldr	r0, [pc, #68]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002dba:	f004 fcb3 	bl	8007724 <HAL_UART_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002dc4:	f7ff fd42 	bl	800284c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	480d      	ldr	r0, [pc, #52]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002dcc:	f005 fc10 	bl	80085f0 <HAL_UARTEx_SetTxFifoThreshold>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002dd6:	f7ff fd39 	bl	800284c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4808      	ldr	r0, [pc, #32]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002dde:	f005 fc45 	bl	800866c <HAL_UARTEx_SetRxFifoThreshold>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002de8:	f7ff fd30 	bl	800284c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dec:	4804      	ldr	r0, [pc, #16]	; (8002e00 <MX_USART1_UART_Init+0x90>)
 8002dee:	f005 fbc6 	bl	800857e <HAL_UARTEx_DisableFifoMode>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002df8:	f7ff fd28 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	2000035c 	.word	0x2000035c
 8002e04:	40013800 	.word	0x40013800

08002e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <HAL_UART_MspInit+0x68>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d11e      	bne.n	8002e68 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e2e:	f7ff ff86 	bl	8002d3e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	2002      	movs	r0, #2
 8002e34:	f7ff ff6a 	bl	8002d0c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e38:	23c0      	movs	r3, #192	; 0xc0
 8002e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e40:	2301      	movs	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e48:	2307      	movs	r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	4808      	ldr	r0, [pc, #32]	; (8002e74 <HAL_UART_MspInit+0x6c>)
 8002e54:	f000 face 	bl	80033f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2024      	movs	r0, #36	; 0x24
 8002e5e:	f000 f9c8 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e62:	2024      	movs	r0, #36	; 0x24
 8002e64:	f000 f9df 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40013800 	.word	0x40013800
 8002e74:	48000400 	.word	0x48000400

08002e78 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002e78:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7c:	3304      	adds	r3, #4

08002e7e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e7e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e80:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002e82:	d3f9      	bcc.n	8002e78 <CopyDataInit>
  bx lr
 8002e84:	4770      	bx	lr

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002e86:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002e88:	3004      	adds	r0, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002e8a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>
  bx lr
 8002e8e:	4770      	bx	lr

08002e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002e92:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e94:	f7ff fee8 	bl	8002c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002e98:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <LoopForever+0x8>)
 8002e9a:	490c      	ldr	r1, [pc, #48]	; (8002ecc <LoopForever+0xc>)
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <LoopForever+0x10>)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f7ff ffed 	bl	8002e7e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002ea4:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <LoopForever+0x14>)
 8002ea6:	490c      	ldr	r1, [pc, #48]	; (8002ed8 <LoopForever+0x18>)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f7ff ffee 	bl	8002e8a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002eae:	480b      	ldr	r0, [pc, #44]	; (8002edc <LoopForever+0x1c>)
 8002eb0:	490b      	ldr	r1, [pc, #44]	; (8002ee0 <LoopForever+0x20>)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f7ff ffe9 	bl	8002e8a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eb8:	f005 fc8c 	bl	80087d4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002ebc:	f7ff f818 	bl	8001ef0 <main>

08002ec0 <LoopForever>:

LoopForever:
  b LoopForever
 8002ec0:	e7fe      	b.n	8002ec0 <LoopForever>
 8002ec2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002ec4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	20000204 	.word	0x20000204
 8002ed0:	0800b9d0 	.word	0x0800b9d0
  INIT_BSS _sbss, _ebss
 8002ed4:	20000204 	.word	0x20000204
 8002ed8:	20000400 	.word	0x20000400
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002edc:	20030000 	.word	0x20030000
 8002ee0:	20030000 	.word	0x20030000

08002ee4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ee4:	e7fe      	b.n	8002ee4 <ADC1_IRQHandler>
	...

08002ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <HAL_Init+0x3c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <HAL_Init+0x3c>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efe:	2003      	movs	r0, #3
 8002f00:	f000 f96c 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f04:	2000      	movs	r0, #0
 8002f06:	f000 f80f 	bl	8002f28 <HAL_InitTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	e001      	b.n	8002f1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f16:	f7ff fd7b 	bl	8002a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	58004000 	.word	0x58004000

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_InitTick+0x6c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d024      	beq.n	8002f86 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f3c:	f002 ffae 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_InitTick+0x6c>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f974 	bl	8003242 <HAL_SYSTICK_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b0f      	cmp	r3, #15
 8002f64:	d809      	bhi.n	8002f7a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f66:	2200      	movs	r2, #0
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f6e:	f000 f940 	bl	80031f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_InitTick+0x70>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e007      	b.n	8002f8a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e004      	b.n	8002f8a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e001      	b.n	8002f8a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000030 	.word	0x20000030
 8002f98:	2000002c 	.word	0x2000002c

08002f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x20>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000030 	.word	0x20000030
 8002fc0:	200003ec 	.word	0x200003ec

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	200003ec 	.word	0x200003ec

08002fdc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_GetTickPrio+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000002c 	.word	0x2000002c

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff ffe2 	bl	8002fc4 <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800300c:	d005      	beq.n	800301a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_Delay+0x44>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800301a:	bf00      	nop
 800301c:	f7ff ffd2 	bl	8002fc4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	429a      	cmp	r2, r3
 800302a:	d8f7      	bhi.n	800301c <HAL_Delay+0x28>
    {
    }
  }
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000030 	.word	0x20000030

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	; (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a8:	d301      	bcc.n	80031ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00f      	b.n	80031ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <SysTick_Config+0x40>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b6:	210f      	movs	r1, #15
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031bc:	f7ff ff8e 	bl	80030dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SysTick_Config+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <SysTick_Config+0x40>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000e010 	.word	0xe000e010

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff29 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003200:	f7ff ff40 	bl	8003084 <__NVIC_GetPriorityGrouping>
 8003204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f7ff ff90 	bl	8003130 <NVIC_EncodePriority>
 8003210:	4602      	mov	r2, r0
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff5f 	bl	80030dc <__NVIC_SetPriority>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff33 	bl	80030a0 <__NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffa4 	bl	8003198 <SysTick_Config>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e04f      	b.n	800330c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d008      	beq.n	800328a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2204      	movs	r2, #4
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e040      	b.n	800330c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 020e 	bic.w	r2, r2, #14
 8003298:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f003 021c 	and.w	r2, r3, #28
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d005      	beq.n	800333c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2204      	movs	r2, #4
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e047      	b.n	80033cc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 020e 	bic.w	r2, r2, #14
 800334a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f003 021c 	and.w	r2, r3, #28
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003388:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00c      	beq.n	80033ac <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
    }
  }
  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033e4:	b2db      	uxtb	r3, r3
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003402:	e14c      	b.n	800369e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 813e 	beq.w	8003698 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d00b      	beq.n	800343c <HAL_GPIO_Init+0x48>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d007      	beq.n	800343c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003430:	2b11      	cmp	r3, #17
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b12      	cmp	r3, #18
 800343a:	d130      	bne.n	800349e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003472:	2201      	movs	r2, #1
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 0201 	and.w	r2, r3, #1
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	2203      	movs	r2, #3
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0xea>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b12      	cmp	r3, #18
 80034dc:	d123      	bne.n	8003526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8098 	beq.w	8003698 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003568:	4a54      	ldr	r2, [pc, #336]	; (80036bc <HAL_GPIO_Init+0x2c8>)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003592:	d019      	beq.n	80035c8 <HAL_GPIO_Init+0x1d4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <HAL_GPIO_Init+0x2cc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <HAL_GPIO_Init+0x1d0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00d      	beq.n	80035c0 <HAL_GPIO_Init+0x1cc>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a48      	ldr	r2, [pc, #288]	; (80036c8 <HAL_GPIO_Init+0x2d4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <HAL_GPIO_Init+0x1c8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a47      	ldr	r2, [pc, #284]	; (80036cc <HAL_GPIO_Init+0x2d8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_GPIO_Init+0x1c4>
 80035b4:	2304      	movs	r3, #4
 80035b6:	e008      	b.n	80035ca <HAL_GPIO_Init+0x1d6>
 80035b8:	2307      	movs	r3, #7
 80035ba:	e006      	b.n	80035ca <HAL_GPIO_Init+0x1d6>
 80035bc:	2303      	movs	r3, #3
 80035be:	e004      	b.n	80035ca <HAL_GPIO_Init+0x1d6>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e002      	b.n	80035ca <HAL_GPIO_Init+0x1d6>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_GPIO_Init+0x1d6>
 80035c8:	2300      	movs	r3, #0
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	f002 0203 	and.w	r2, r2, #3
 80035d0:	0092      	lsls	r2, r2, #2
 80035d2:	4093      	lsls	r3, r2
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035da:	4938      	ldr	r1, [pc, #224]	; (80036bc <HAL_GPIO_Init+0x2c8>)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3302      	adds	r3, #2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035e8:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800360e:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003616:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800363c:	4a24      	ldr	r2, [pc, #144]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800366e:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003692:	4a0f      	ldr	r2, [pc, #60]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f47f aeab 	bne.w	8003404 <HAL_GPIO_Init+0x10>
  }
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40010000 	.word	0x40010000
 80036c0:	48000400 	.word	0x48000400
 80036c4:	48000800 	.word	0x48000800
 80036c8:	48000c00 	.word	0x48000c00
 80036cc:	48001000 	.word	0x48001000
 80036d0:	58000800 	.word	0x58000800

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036f0:	e002      	b.n	80036f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800371a:	4a05      	ldr	r2, [pc, #20]	; (8003730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fd78 	bl	8002218 <HAL_GPIO_EXTI_Callback>
  }
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	58000800 	.word	0x58000800

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e081      	b.n	800384a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fb86 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	e006      	b.n	80037bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d104      	bne.n	80037ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	ea42 0103 	orr.w	r1, r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	021a      	lsls	r2, r3, #8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	f040 80f9 	bne.w	8003a6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_I2C_Mem_Write+0x34>
 8003882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ed      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Mem_Write+0x4e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0e6      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038aa:	f7ff fb8b 	bl	8002fc4 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2319      	movs	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 ffd8 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d1      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2221      	movs	r2, #33	; 0x21
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f4:	88f8      	ldrh	r0, [r7, #6]
 80038f6:	893a      	ldrh	r2, [r7, #8]
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4603      	mov	r3, r0
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fb91 	bl	800402c <I2C_RequestMemoryWrite>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0a9      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2bff      	cmp	r3, #255	; 0xff
 8003924:	d90e      	bls.n	8003944 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	; 0xff
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	b2da      	uxtb	r2, r3
 8003932:	8979      	ldrh	r1, [r7, #10]
 8003934:	2300      	movs	r3, #0
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f001 f8bb 	bl	8004ab8 <I2C_TransferConfig>
 8003942:	e00f      	b.n	8003964 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	b2da      	uxtb	r2, r3
 8003954:	8979      	ldrh	r1, [r7, #10]
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f001 f8aa 	bl	8004ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 ffc2 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e07b      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d034      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d130      	bne.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 ff54 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04d      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2bff      	cmp	r3, #255	; 0xff
 80039dc:	d90e      	bls.n	80039fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	22ff      	movs	r2, #255	; 0xff
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	8979      	ldrh	r1, [r7, #10]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f001 f85f 	bl	8004ab8 <I2C_TransferConfig>
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f001 f84e 	bl	8004ab8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d19e      	bne.n	8003964 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 ffa1 	bl	8004972 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01a      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_I2C_Mem_Write+0x224>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	fe00e800 	.word	0xfe00e800

08003a7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	f040 80fd 	bne.w	8003c9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x34>
 8003aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0f1      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_I2C_Mem_Read+0x4e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0ea      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ad2:	f7ff fa77 	bl	8002fc4 <HAL_GetTick>
 8003ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2319      	movs	r3, #25
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fec4 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d5      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2222      	movs	r2, #34	; 0x22
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	; 0x40
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1c:	88f8      	ldrh	r0, [r7, #6]
 8003b1e:	893a      	ldrh	r2, [r7, #8]
 8003b20:	8979      	ldrh	r1, [r7, #10]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fad1 	bl	80040d4 <I2C_RequestMemoryRead>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0ad      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2bff      	cmp	r3, #255	; 0xff
 8003b4c:	d90e      	bls.n	8003b6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	22ff      	movs	r2, #255	; 0xff
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b52      	ldr	r3, [pc, #328]	; (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 ffa7 	bl	8004ab8 <I2C_TransferConfig>
 8003b6a:	e00f      	b.n	8003b8c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 ff96 	bl	8004ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	2200      	movs	r2, #0
 8003b94:	2104      	movs	r1, #4
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fe6b 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07c      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d034      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d130      	bne.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fe3c 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e04d      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2bff      	cmp	r3, #255	; 0xff
 8003c0c:	d90e      	bls.n	8003c2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 ff47 	bl	8004ab8 <I2C_TransferConfig>
 8003c2a:	e00f      	b.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 ff36 	bl	8004ab8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d19a      	bne.n	8003b8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fe89 	bl	8004972 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01a      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_I2C_Mem_Read+0x230>)
 8003c7e:	400b      	ands	r3, r1
 8003c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	80002400 	.word	0x80002400
 8003cac:	fe00e800 	.word	0xfe00e800

08003cb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_I2C_ER_IRQHandler+0x46>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	09db      	lsrs	r3, r3, #7
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f043 0201 	orr.w	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d28:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	0a9b      	lsrs	r3, r3, #10
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d010      	beq.n	8003d58 <HAL_I2C_ER_IRQHandler+0x74>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f043 0208 	orr.w	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d56:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	0a5b      	lsrs	r3, r3, #9
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d010      	beq.n	8003d86 <HAL_I2C_ER_IRQHandler+0xa2>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	09db      	lsrs	r3, r3, #7
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	f043 0202 	orr.w	r2, r3, #2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d84:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 030b 	and.w	r3, r3, #11
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fc31 	bl	8004600 <I2C_ITError>
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	70fb      	strb	r3, [r7, #3]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <I2C_Slave_ISR_IT+0x24>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0ec      	b.n	8004024 <I2C_Slave_ISR_IT+0x1fe>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <I2C_Slave_ISR_IT+0x4c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e6a:	6939      	ldr	r1, [r7, #16]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fa67 	bl	8004340 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04d      	beq.n	8003f1a <I2C_Slave_ISR_IT+0xf4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d047      	beq.n	8003f1a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d128      	bne.n	8003ee6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b28      	cmp	r3, #40	; 0x28
 8003e9e:	d108      	bne.n	8003eb2 <I2C_Slave_ISR_IT+0x8c>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ea6:	d104      	bne.n	8003eb2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fb52 	bl	8004554 <I2C_ITListenCplt>
 8003eb0:	e032      	b.n	8003f18 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b29      	cmp	r3, #41	; 0x29
 8003ebc:	d10e      	bne.n	8003edc <I2C_Slave_ISR_IT+0xb6>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec4:	d00a      	beq.n	8003edc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2210      	movs	r2, #16
 8003ecc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fc8d 	bl	80047ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f9d5 	bl	8004284 <I2C_ITSlaveSeqCplt>
 8003eda:	e01d      	b.n	8003f18 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ee4:	e096      	b.n	8004014 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2210      	movs	r2, #16
 8003eec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <I2C_Slave_ISR_IT+0xe4>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f06:	f040 8085 	bne.w	8004014 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb75 	bl	8004600 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f16:	e07d      	b.n	8004014 <I2C_Slave_ISR_IT+0x1ee>
 8003f18:	e07c      	b.n	8004014 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d030      	beq.n	8003f88 <I2C_Slave_ISR_IT+0x162>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d02a      	beq.n	8003f88 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d018      	beq.n	8003f6e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d14f      	bne.n	8004018 <I2C_Slave_ISR_IT+0x1f2>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f7e:	d04b      	beq.n	8004018 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f97f 	bl	8004284 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f86:	e047      	b.n	8004018 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	08db      	lsrs	r3, r3, #3
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <I2C_Slave_ISR_IT+0x184>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	08db      	lsrs	r3, r3, #3
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003fa0:	6939      	ldr	r1, [r7, #16]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f8ea 	bl	800417c <I2C_ITAddrCplt>
 8003fa8:	e037      	b.n	800401a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d031      	beq.n	800401a <I2C_Slave_ISR_IT+0x1f4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02b      	beq.n	800401a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d018      	beq.n	8003ffe <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
 8003ffc:	e00d      	b.n	800401a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004004:	d002      	beq.n	800400c <I2C_Slave_ISR_IT+0x1e6>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f939 	bl	8004284 <I2C_ITSlaveSeqCplt>
 8004012:	e002      	b.n	800401a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004018:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
 800403a:	4603      	mov	r3, r0
 800403c:	817b      	strh	r3, [r7, #10]
 800403e:	460b      	mov	r3, r1
 8004040:	813b      	strh	r3, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	8979      	ldrh	r1, [r7, #10]
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <I2C_RequestMemoryWrite+0xa4>)
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fd2f 	bl	8004ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fc47 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e02c      	b.n	80040c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004074:	893b      	ldrh	r3, [r7, #8]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	629a      	str	r2, [r3, #40]	; 0x28
 800407e:	e015      	b.n	80040ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b29b      	uxth	r3, r3
 8004086:	b2da      	uxtb	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fc2d 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e012      	b.n	80040c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a2:	893b      	ldrh	r3, [r7, #8]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fbdb 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	80002000 	.word	0x80002000

080040d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	817b      	strh	r3, [r7, #10]
 80040e6:	460b      	mov	r3, r1
 80040e8:	813b      	strh	r3, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	4b20      	ldr	r3, [pc, #128]	; (8004178 <I2C_RequestMemoryRead+0xa4>)
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fcdc 	bl	8004ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fbf4 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e02c      	b.n	800416e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d105      	bne.n	8004126 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800411a:	893b      	ldrh	r3, [r7, #8]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
 8004124:	e015      	b.n	8004152 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	b29b      	uxth	r3, r3
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fbda 	bl	80048f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e012      	b.n	800416e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004148:	893b      	ldrh	r3, [r7, #8]
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2200      	movs	r2, #0
 800415a:	2140      	movs	r1, #64	; 0x40
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fb88 	bl	8004872 <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	80002000 	.word	0x80002000

0800417c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004192:	2b28      	cmp	r3, #40	; 0x28
 8004194:	d16a      	bne.n	800426c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80041b4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80041d0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d138      	bne.n	800424c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80041da:	897b      	ldrh	r3, [r7, #10]
 80041dc:	09db      	lsrs	r3, r3, #7
 80041de:	b29a      	uxth	r2, r3
 80041e0:	89bb      	ldrh	r3, [r7, #12]
 80041e2:	4053      	eors	r3, r2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f003 0306 	and.w	r3, r3, #6
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11c      	bne.n	8004228 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80041ee:	897b      	ldrh	r3, [r7, #10]
 80041f0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004200:	2b02      	cmp	r3, #2
 8004202:	d13b      	bne.n	800427c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800421a:	89ba      	ldrh	r2, [r7, #12]
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fdd4 	bl	8003dce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004226:	e029      	b.n	800427c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004228:	893b      	ldrh	r3, [r7, #8]
 800422a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800422c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fc6f 	bl	8004b14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800423e:	89ba      	ldrh	r2, [r7, #12]
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fdc2 	bl	8003dce <HAL_I2C_AddrCallback>
}
 800424a:	e017      	b.n	800427c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800424c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fc5f 	bl	8004b14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800425e:	89ba      	ldrh	r2, [r7, #12]
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fdb2 	bl	8003dce <HAL_I2C_AddrCallback>
}
 800426a:	e007      	b.n	800427c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2208      	movs	r2, #8
 8004272:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	0b9b      	lsrs	r3, r3, #14
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e00d      	b.n	80042d6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	0bdb      	lsrs	r3, r3, #15
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b29      	cmp	r3, #41	; 0x29
 80042e0:	d112      	bne.n	8004308 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2228      	movs	r2, #40	; 0x28
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2221      	movs	r2, #33	; 0x21
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042f0:	2101      	movs	r1, #1
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fc0e 	bl	8004b14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fd50 	bl	8003da6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004306:	e017      	b.n	8004338 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b2a      	cmp	r3, #42	; 0x2a
 8004312:	d111      	bne.n	8004338 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2228      	movs	r2, #40	; 0x28
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2222      	movs	r2, #34	; 0x22
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004322:	2102      	movs	r1, #2
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fbf5 	bl	8004b14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff fd41 	bl	8003dba <HAL_I2C_SlaveRxCpltCallback>
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2220      	movs	r2, #32
 8004364:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b21      	cmp	r3, #33	; 0x21
 800436a:	d002      	beq.n	8004372 <I2C_ITSlaveCplt+0x32>
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b29      	cmp	r3, #41	; 0x29
 8004370:	d108      	bne.n	8004384 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004372:	f248 0101 	movw	r1, #32769	; 0x8001
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fbcc 	bl	8004b14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
 8004382:	e00d      	b.n	80043a0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b22      	cmp	r3, #34	; 0x22
 8004388:	d002      	beq.n	8004390 <I2C_ITSlaveCplt+0x50>
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b2a      	cmp	r3, #42	; 0x2a
 800438e:	d107      	bne.n	80043a0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004390:	f248 0102 	movw	r1, #32770	; 0x8002
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fbbd 	bl	8004b14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2222      	movs	r2, #34	; 0x22
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b64      	ldr	r3, [pc, #400]	; (800454c <I2C_ITSlaveCplt+0x20c>)
 80043bc:	400b      	ands	r3, r1
 80043be:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa14 	bl	80047ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	0b9b      	lsrs	r3, r3, #14
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d013      	beq.n	80043fa <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043f8:	e018      	b.n	800442c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	0bdb      	lsrs	r3, r3, #15
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d012      	beq.n	800442c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004414:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d006      	beq.n	800442c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	b29a      	uxth	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0304 	bic.w	r3, r3, #4
 800443e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00c      	beq.n	800447a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	f043 0204 	orr.w	r2, r3, #4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d010      	beq.n	80044c8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f8a7 	bl	8004600 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b28      	cmp	r3, #40	; 0x28
 80044bc:	d141      	bne.n	8004542 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80044be:	6979      	ldr	r1, [r7, #20]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f847 	bl	8004554 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044c6:	e03c      	b.n	8004542 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d0:	d014      	beq.n	80044fc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fed6 	bl	8004284 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <I2C_ITSlaveCplt+0x210>)
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fc78 	bl	8003dea <HAL_I2C_ListenCpltCallback>
}
 80044fa:	e022      	b.n	8004542 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b22      	cmp	r3, #34	; 0x22
 8004506:	d10e      	bne.n	8004526 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fc4b 	bl	8003dba <HAL_I2C_SlaveRxCpltCallback>
}
 8004524:	e00d      	b.n	8004542 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fc32 	bl	8003da6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004542:	bf00      	nop
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	fe00e800 	.word	0xfe00e800
 8004550:	ffff0000 	.word	0xffff0000

08004554 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a26      	ldr	r2, [pc, #152]	; (80045fc <I2C_ITListenCplt+0xa8>)
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d022      	beq.n	80045d2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d012      	beq.n	80045d2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f043 0204 	orr.w	r2, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045d2:	f248 0103 	movw	r1, #32771	; 0x8003
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa9c 	bl	8004b14 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2210      	movs	r2, #16
 80045e2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fbfc 	bl	8003dea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	ffff0000 	.word	0xffff0000

08004600 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a5d      	ldr	r2, [pc, #372]	; (8004794 <I2C_ITError+0x194>)
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	2b28      	cmp	r3, #40	; 0x28
 8004636:	d005      	beq.n	8004644 <I2C_ITError+0x44>
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b29      	cmp	r3, #41	; 0x29
 800463c:	d002      	beq.n	8004644 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b2a      	cmp	r3, #42	; 0x2a
 8004642:	d10b      	bne.n	800465c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004644:	2103      	movs	r1, #3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa64 	bl	8004b14 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2228      	movs	r2, #40	; 0x28
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a50      	ldr	r2, [pc, #320]	; (8004798 <I2C_ITError+0x198>)
 8004658:	635a      	str	r2, [r3, #52]	; 0x34
 800465a:	e011      	b.n	8004680 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800465c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fa57 	bl	8004b14 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b60      	cmp	r3, #96	; 0x60
 8004670:	d003      	beq.n	800467a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d039      	beq.n	8004702 <I2C_ITError+0x102>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b11      	cmp	r3, #17
 8004692:	d002      	beq.n	800469a <I2C_ITError+0x9a>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b21      	cmp	r3, #33	; 0x21
 8004698:	d133      	bne.n	8004702 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a8:	d107      	bne.n	80046ba <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046b8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fe89 	bl	80033d6 <HAL_DMA_GetState>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d017      	beq.n	80046fa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4a33      	ldr	r2, [pc, #204]	; (800479c <I2C_ITError+0x19c>)
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fe1a 	bl	8003318 <HAL_DMA_Abort_IT>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d04d      	beq.n	8004786 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046f4:	4610      	mov	r0, r2
 80046f6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046f8:	e045      	b.n	8004786 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f850 	bl	80047a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004700:	e041      	b.n	8004786 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d039      	beq.n	800477e <I2C_ITError+0x17e>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b12      	cmp	r3, #18
 800470e:	d002      	beq.n	8004716 <I2C_ITError+0x116>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b22      	cmp	r3, #34	; 0x22
 8004714:	d133      	bne.n	800477e <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d107      	bne.n	8004736 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004734:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe fe4b 	bl	80033d6 <HAL_DMA_GetState>
 8004740:	4603      	mov	r3, r0
 8004742:	2b01      	cmp	r3, #1
 8004744:	d017      	beq.n	8004776 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	4a14      	ldr	r2, [pc, #80]	; (800479c <I2C_ITError+0x19c>)
 800474c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fddc 	bl	8003318 <HAL_DMA_Abort_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004770:	4610      	mov	r0, r2
 8004772:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004774:	e009      	b.n	800478a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f812 	bl	80047a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800477c:	e005      	b.n	800478a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f80e 	bl	80047a0 <I2C_TreatErrorCallback>
  }
}
 8004784:	e002      	b.n	800478c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800478a:	bf00      	nop
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffff0000 	.word	0xffff0000
 8004798:	08003e27 	.word	0x08003e27
 800479c:	08004837 	.word	0x08004837

080047a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b60      	cmp	r3, #96	; 0x60
 80047b2:	d10e      	bne.n	80047d2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fb21 	bl	8003e12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047d0:	e009      	b.n	80047e6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fb0c 	bl	8003dfe <HAL_I2C_ErrorCallback>
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d103      	bne.n	800480c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d007      	beq.n	800482a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	619a      	str	r2, [r3, #24]
  }
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	2200      	movs	r2, #0
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	2200      	movs	r2, #0
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff ff9b 	bl	80047a0 <I2C_TreatErrorCallback>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004882:	e022      	b.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488a:	d01e      	beq.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488c:	f7fe fb9a 	bl	8002fc4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d113      	bne.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d0cd      	beq.n	8004884 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048fe:	e02c      	b.n	800495a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f871 	bl	80049ec <I2C_IsAcknowledgeFailed>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e02a      	b.n	800496a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800491a:	d01e      	beq.n	800495a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491c:	f7fe fb52 	bl	8002fc4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d113      	bne.n	800495a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e007      	b.n	800496a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d1cb      	bne.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800497e:	e028      	b.n	80049d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f831 	bl	80049ec <I2C_IsAcknowledgeFailed>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e026      	b.n	80049e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004994:	f7fe fb16 	bl	8002fc4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e007      	b.n	80049e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d1cf      	bne.n	8004980 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b10      	cmp	r3, #16
 8004a04:	d151      	bne.n	8004aaa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a06:	e022      	b.n	8004a4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a0e:	d01e      	beq.n	8004a4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	f7fe fad8 	bl	8002fc4 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <I2C_IsAcknowledgeFailed+0x3a>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d113      	bne.n	8004a4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e02e      	b.n	8004aac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d1d5      	bne.n	8004a08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2210      	movs	r2, #16
 8004a62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff febe 	bl	80047ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <I2C_IsAcknowledgeFailed+0xc8>)
 8004a7e:	400b      	ands	r3, r1
 8004a80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	fe00e800 	.word	0xfe00e800

08004ab8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	817b      	strh	r3, [r7, #10]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	0d5b      	lsrs	r3, r3, #21
 8004ad4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <I2C_TransferConfig+0x58>)
 8004ada:	430b      	orrs	r3, r1
 8004adc:	43db      	mvns	r3, r3
 8004ade:	ea02 0103 	and.w	r1, r2, r3
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ae8:	7a7b      	ldrb	r3, [r7, #9]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	03ff63ff 	.word	0x03ff63ff

08004b14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b24:	887b      	ldrh	r3, [r7, #2]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00f      	beq.n	8004b4e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004b34:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b42:	2b28      	cmp	r3, #40	; 0x28
 8004b44:	d003      	beq.n	8004b4e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004b4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00f      	beq.n	8004b78 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004b5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b6c:	2b28      	cmp	r3, #40	; 0x28
 8004b6e:	d003      	beq.n	8004b78 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004b76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da03      	bge.n	8004b88 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d103      	bne.n	8004b96 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d103      	bne.n	8004ba4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f043 0320 	orr.w	r3, r3, #32
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d103      	bne.n	8004bb2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6819      	ldr	r1, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d138      	bne.n	8004c58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e032      	b.n	8004c5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0201 	bic.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e000      	b.n	8004c5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
  }
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d139      	bne.n	8004cf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e033      	b.n	8004cf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2224      	movs	r2, #36	; 0x24
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	58000400 	.word	0x58000400

08004d20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	58000400 	.word	0x58000400

08004d3c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d101      	bne.n	8004d54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
}
 8004d92:	bf00      	nop
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dae:	d101      	bne.n	8004db4 <LL_RCC_HSE_IsReady+0x18>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <LL_RCC_HSE_IsReady+0x1a>
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df0:	6013      	str	r3, [r2, #0]
}
 8004df2:	bf00      	nop
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0e:	d101      	bne.n	8004e14 <LL_RCC_HSI_IsReady+0x18>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <LL_RCC_HSI_IsReady+0x1a>
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e62:	bf00      	nop
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d101      	bne.n	8004ea6 <LL_RCC_HSI48_IsReady+0x18>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <LL_RCC_HSI48_IsReady+0x1a>
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f06:	f043 0304 	orr.w	r3, r3, #4
 8004f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f0e:	bf00      	nop
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f28:	f023 0304 	bic.w	r3, r3, #4
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d101      	bne.n	8004f52 <LL_RCC_LSE_IsReady+0x18>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <LL_RCC_LSE_IsReady+0x1a>
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d101      	bne.n	8004fba <LL_RCC_LSI1_IsReady+0x18>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <LL_RCC_LSI1_IsReady+0x1a>
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd6:	f043 0304 	orr.w	r3, r3, #4
 8004fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff8:	f023 0304 	bic.w	r3, r3, #4
 8004ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005000:	bf00      	nop
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800500e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	d101      	bne.n	8005022 <LL_RCC_LSI2_IsReady+0x18>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <LL_RCC_LSI2_IsReady+0x1a>
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800507a:	b480      	push	{r7}
 800507c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	6013      	str	r3, [r2, #0]
}
 800508e:	bf00      	nop
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d101      	bne.n	80050ae <LL_RCC_MSI_IsReady+0x16>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <LL_RCC_MSI_IsReady+0x18>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2bb0      	cmp	r3, #176	; 0xb0
 80050f8:	d901      	bls.n	80050fe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80050fa:	23b0      	movs	r3, #176	; 0xb0
 80050fc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80050fe:	687b      	ldr	r3, [r7, #4]
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f023 0203 	bic.w	r2, r3, #3
 8005148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800515e:	b480      	push	{r7}
 8005160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 030c 	and.w	r3, r3, #12
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051da:	f023 020f 	bic.w	r2, r3, #15
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800520a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4313      	orrs	r3, r2
 8005212:	608b      	str	r3, [r1, #8]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4313      	orrs	r3, r2
 800523a:	608b      	str	r3, [r1, #8]
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	bf00      	nop
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80052ca:	b480      	push	{r7}
 80052cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052dc:	6013      	str	r3, [r2, #0]
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052fa:	d101      	bne.n	8005300 <LL_RCC_PLL_IsReady+0x18>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <LL_RCC_PLL_IsReady+0x1a>
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005356:	b480      	push	{r7}
 8005358:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0303 	and.w	r3, r3, #3
}
 8005364:	4618      	mov	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800536e:	b480      	push	{r7}
 8005370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d101      	bne.n	8005386 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005392:	b480      	push	{r7}
 8005394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053a6:	d101      	bne.n	80053ac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	d101      	bne.n	80053d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f0:	d101      	bne.n	80053f6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005402:	b480      	push	{r7}
 8005404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005414:	d101      	bne.n	800541a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b08d      	sub	sp, #52	; 0x34
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e37e      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8092 	beq.w	800556c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005448:	f7ff fe89 	bl	800515e <LL_RCC_GetSysClkSource>
 800544c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800544e:	f7ff ff82 	bl	8005356 <LL_RCC_PLL_GetMainSource>
 8005452:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_RCC_OscConfig+0x3e>
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	2b0c      	cmp	r3, #12
 800545e:	d14c      	bne.n	80054fa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	2b01      	cmp	r3, #1
 8005464:	d149      	bne.n	80054fa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005466:	f7ff fe17 	bl	8005098 <LL_RCC_MSI_IsReady>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCC_OscConfig+0x54>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e35d      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005480:	f7ff fe2f 	bl	80050e2 <LL_RCC_MSI_GetRange>
 8005484:	4603      	mov	r3, r0
 8005486:	429c      	cmp	r4, r3
 8005488:	d914      	bls.n	80054b4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fd44 	bl	8005f1c <RCC_SetFlashLatencyFromMSIRange>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e34c      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fe09 	bl	80050ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff fe2d 	bl	800510c <LL_RCC_MSI_SetCalibTrimming>
 80054b2:	e013      	b.n	80054dc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fdfe 	bl	80050ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fe22 	bl	800510c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fd25 	bl	8005f1c <RCC_SetFlashLatencyFromMSIRange>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e32d      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054dc:	f000 fcde 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4ab3      	ldr	r2, [pc, #716]	; (80057b0 <HAL_RCC_OscConfig+0x388>)
 80054e4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054e6:	4bb3      	ldr	r3, [pc, #716]	; (80057b4 <HAL_RCC_OscConfig+0x38c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fd fd1c 	bl	8002f28 <HAL_InitTick>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d039      	beq.n	800556a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e31e      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01e      	beq.n	8005540 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005502:	f7ff fdab 	bl	800505c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005506:	f7fd fd5d 	bl	8002fc4 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800550e:	f7fd fd59 	bl	8002fc4 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e30b      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005520:	f7ff fdba 	bl	8005098 <LL_RCC_MSI_IsReady>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f1      	beq.n	800550e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fdc3 	bl	80050ba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fde7 	bl	800510c <LL_RCC_MSI_SetCalibTrimming>
 800553e:	e015      	b.n	800556c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005540:	f7ff fd9b 	bl	800507a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005544:	f7fd fd3e 	bl	8002fc4 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800554c:	f7fd fd3a 	bl	8002fc4 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e2ec      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800555e:	f7ff fd9b 	bl	8005098 <LL_RCC_MSI_IsReady>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f1      	bne.n	800554c <HAL_RCC_OscConfig+0x124>
 8005568:	e000      	b.n	800556c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800556a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d04e      	beq.n	8005616 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005578:	f7ff fdf1 	bl	800515e <LL_RCC_GetSysClkSource>
 800557c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800557e:	f7ff feea 	bl	8005356 <LL_RCC_PLL_GetMainSource>
 8005582:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2b08      	cmp	r3, #8
 8005588:	d005      	beq.n	8005596 <HAL_RCC_OscConfig+0x16e>
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d10d      	bne.n	80055ac <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b03      	cmp	r3, #3
 8005594:	d10a      	bne.n	80055ac <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005596:	f7ff fc01 	bl	8004d9c <LL_RCC_HSE_IsReady>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d039      	beq.n	8005614 <HAL_RCC_OscConfig+0x1ec>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d135      	bne.n	8005614 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e2c5      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d102      	bne.n	80055bc <HAL_RCC_OscConfig+0x194>
 80055b6:	f7ff fbd3 	bl	8004d60 <LL_RCC_HSE_Enable>
 80055ba:	e001      	b.n	80055c0 <HAL_RCC_OscConfig+0x198>
 80055bc:	f7ff fbdf 	bl	8004d7e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d012      	beq.n	80055ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fd fcfc 	bl	8002fc4 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fd fcf8 	bl	8002fc4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e2aa      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80055e2:	f7ff fbdb 	bl	8004d9c <LL_RCC_HSE_IsReady>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0f1      	beq.n	80055d0 <HAL_RCC_OscConfig+0x1a8>
 80055ec:	e013      	b.n	8005616 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fd fce9 	bl	8002fc4 <HAL_GetTick>
 80055f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f6:	f7fd fce5 	bl	8002fc4 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b64      	cmp	r3, #100	; 0x64
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e297      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005608:	f7ff fbc8 	bl	8004d9c <LL_RCC_HSE_IsReady>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f1      	bne.n	80055f6 <HAL_RCC_OscConfig+0x1ce>
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d051      	beq.n	80056c6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005622:	f7ff fd9c 	bl	800515e <LL_RCC_GetSysClkSource>
 8005626:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005628:	f7ff fe95 	bl	8005356 <LL_RCC_PLL_GetMainSource>
 800562c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d005      	beq.n	8005640 <HAL_RCC_OscConfig+0x218>
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	2b0c      	cmp	r3, #12
 8005638:	d113      	bne.n	8005662 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d110      	bne.n	8005662 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005640:	f7ff fbdc 	bl	8004dfc <LL_RCC_HSI_IsReady>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_RCC_OscConfig+0x22e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e270      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fbe0 	bl	8004e20 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005660:	e031      	b.n	80056c6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d019      	beq.n	800569e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800566a:	f7ff fba9 	bl	8004dc0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566e:	f7fd fca9 	bl	8002fc4 <HAL_GetTick>
 8005672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005676:	f7fd fca5 	bl	8002fc4 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e257      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005688:	f7ff fbb8 	bl	8004dfc <LL_RCC_HSI_IsReady>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f1      	beq.n	8005676 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fbc2 	bl	8004e20 <LL_RCC_HSI_SetCalibTrimming>
 800569c:	e013      	b.n	80056c6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569e:	f7ff fb9e 	bl	8004dde <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fd fc8f 	bl	8002fc4 <HAL_GetTick>
 80056a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056aa:	f7fd fc8b 	bl	8002fc4 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e23d      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80056bc:	f7ff fb9e 	bl	8004dfc <LL_RCC_HSI_IsReady>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f1      	bne.n	80056aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80a3 	beq.w	8005826 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d076      	beq.n	80057d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d046      	beq.n	8005782 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80056f4:	f7ff fc55 	bl	8004fa2 <LL_RCC_LSI1_IsReady>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d113      	bne.n	8005726 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80056fe:	f7ff fc2e 	bl	8004f5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005702:	f7fd fc5f 	bl	8002fc4 <HAL_GetTick>
 8005706:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800570a:	f7fd fc5b 	bl	8002fc4 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e20d      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800571c:	f7ff fc41 	bl	8004fa2 <LL_RCC_LSI1_IsReady>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f1      	beq.n	800570a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005726:	f7ff fc4e 	bl	8004fc6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fd fc4b 	bl	8002fc4 <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005732:	f7fd fc47 	bl	8002fc4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b03      	cmp	r3, #3
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1f9      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005744:	f7ff fc61 	bl	800500a <LL_RCC_LSI2_IsReady>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f1      	beq.n	8005732 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fc6b 	bl	800502e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005758:	f7ff fc12 	bl	8004f80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd fc32 	bl	8002fc4 <HAL_GetTick>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005764:	f7fd fc2e 	bl	8002fc4 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e1e0      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005776:	f7ff fc14 	bl	8004fa2 <LL_RCC_LSI1_IsReady>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f1      	bne.n	8005764 <HAL_RCC_OscConfig+0x33c>
 8005780:	e051      	b.n	8005826 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005782:	f7ff fbec 	bl	8004f5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005786:	f7fd fc1d 	bl	8002fc4 <HAL_GetTick>
 800578a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800578e:	f7fd fc19 	bl	8002fc4 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e1cb      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057a0:	f7ff fbff 	bl	8004fa2 <LL_RCC_LSI1_IsReady>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f1      	beq.n	800578e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80057aa:	f7ff fc1d 	bl	8004fe8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057ae:	e00c      	b.n	80057ca <HAL_RCC_OscConfig+0x3a2>
 80057b0:	20000028 	.word	0x20000028
 80057b4:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057b8:	f7fd fc04 	bl	8002fc4 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1b6      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057ca:	f7ff fc1e 	bl	800500a <LL_RCC_LSI2_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f1      	bne.n	80057b8 <HAL_RCC_OscConfig+0x390>
 80057d4:	e027      	b.n	8005826 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80057d6:	f7ff fc07 	bl	8004fe8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057da:	f7fd fbf3 	bl	8002fc4 <HAL_GetTick>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057e2:	f7fd fbef 	bl	8002fc4 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e1a1      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80057f4:	f7ff fc09 	bl	800500a <LL_RCC_LSI2_IsReady>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f1      	bne.n	80057e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80057fe:	f7ff fbbf 	bl	8004f80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005802:	f7fd fbdf 	bl	8002fc4 <HAL_GetTick>
 8005806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800580a:	f7fd fbdb 	bl	8002fc4 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e18d      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800581c:	f7ff fbc1 	bl	8004fa2 <LL_RCC_LSI1_IsReady>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f1      	bne.n	800580a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d05b      	beq.n	80058ea <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005832:	4bb5      	ldr	r3, [pc, #724]	; (8005b08 <HAL_RCC_OscConfig+0x6e0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d114      	bne.n	8005868 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800583e:	f7ff fa5f 	bl	8004d00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005842:	f7fd fbbf 	bl	8002fc4 <HAL_GetTick>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584a:	f7fd fbbb 	bl	8002fc4 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e16d      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585c:	4baa      	ldr	r3, [pc, #680]	; (8005b08 <HAL_RCC_OscConfig+0x6e0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f0      	beq.n	800584a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d102      	bne.n	8005876 <HAL_RCC_OscConfig+0x44e>
 8005870:	f7ff fb1f 	bl	8004eb2 <LL_RCC_LSE_Enable>
 8005874:	e00c      	b.n	8005890 <HAL_RCC_OscConfig+0x468>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b05      	cmp	r3, #5
 800587c:	d104      	bne.n	8005888 <HAL_RCC_OscConfig+0x460>
 800587e:	f7ff fb3a 	bl	8004ef6 <LL_RCC_LSE_EnableBypass>
 8005882:	f7ff fb16 	bl	8004eb2 <LL_RCC_LSE_Enable>
 8005886:	e003      	b.n	8005890 <HAL_RCC_OscConfig+0x468>
 8005888:	f7ff fb24 	bl	8004ed4 <LL_RCC_LSE_Disable>
 800588c:	f7ff fb44 	bl	8004f18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d014      	beq.n	80058c2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fd fb94 	bl	8002fc4 <HAL_GetTick>
 800589c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fd fb90 	bl	8002fc4 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e140      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058b6:	f7ff fb40 	bl	8004f3a <LL_RCC_LSE_IsReady>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <HAL_RCC_OscConfig+0x478>
 80058c0:	e013      	b.n	80058ea <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fd fb7f 	bl	8002fc4 <HAL_GetTick>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fd fb7b 	bl	8002fc4 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e12b      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80058e0:	f7ff fb2b 	bl	8004f3a <LL_RCC_LSE_IsReady>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ef      	bne.n	80058ca <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02c      	beq.n	8005950 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d014      	beq.n	8005928 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058fe:	f7ff faa4 	bl	8004e4a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005902:	f7fd fb5f 	bl	8002fc4 <HAL_GetTick>
 8005906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800590a:	f7fd fb5b 	bl	8002fc4 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e10d      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800591c:	f7ff fab7 	bl	8004e8e <LL_RCC_HSI48_IsReady>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f1      	beq.n	800590a <HAL_RCC_OscConfig+0x4e2>
 8005926:	e013      	b.n	8005950 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005928:	f7ff faa0 	bl	8004e6c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592c:	f7fd fb4a 	bl	8002fc4 <HAL_GetTick>
 8005930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005934:	f7fd fb46 	bl	8002fc4 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0f8      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005946:	f7ff faa2 	bl	8004e8e <LL_RCC_HSI48_IsReady>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f1      	bne.n	8005934 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80ee 	beq.w	8005b36 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800595a:	f7ff fc00 	bl	800515e <LL_RCC_GetSysClkSource>
 800595e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2b02      	cmp	r3, #2
 800596e:	f040 80af 	bne.w	8005ad0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0203 	and.w	r2, r3, #3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	429a      	cmp	r2, r3
 800597e:	d123      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d11c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d114      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d10d      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d106      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d05d      	beq.n	8005a84 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d058      	beq.n	8005a80 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0ab      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059e0:	f7ff fc73 	bl	80052ca <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059e4:	f7fd faee 	bl	8002fc4 <HAL_GetTick>
 80059e8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fd faea 	bl	8002fc4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e09c      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1ef      	bne.n	80059ec <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <HAL_RCC_OscConfig+0x6e4>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a24:	0212      	lsls	r2, r2, #8
 8005a26:	4311      	orrs	r1, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a32:	4311      	orrs	r1, r2
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a42:	f7ff fc33 	bl	80052ac <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a54:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a56:	f7fd fab5 	bl	8002fc4 <HAL_GetTick>
 8005a5a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5e:	f7fd fab1 	bl	8002fc4 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e063      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ef      	beq.n	8005a5e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a7e:	e05a      	b.n	8005b36 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e059      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d151      	bne.n	8005b36 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a92:	f7ff fc0b 	bl	80052ac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005aa6:	f7fd fa8d 	bl	8002fc4 <HAL_GetTick>
 8005aaa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aae:	f7fd fa89 	bl	8002fc4 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e03b      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0ef      	beq.n	8005aae <HAL_RCC_OscConfig+0x686>
 8005ace:	e032      	b.n	8005b36 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d02d      	beq.n	8005b32 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad6:	f7ff fbf8 	bl	80052ca <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae4:	f023 0303 	bic.w	r3, r3, #3
 8005ae8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afe:	f7fd fa61 	bl	8002fc4 <HAL_GetTick>
 8005b02:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b04:	e00d      	b.n	8005b22 <HAL_RCC_OscConfig+0x6fa>
 8005b06:	bf00      	nop
 8005b08:	58000400 	.word	0x58000400
 8005b0c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fd fa58 	bl	8002fc4 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e00a      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1ef      	bne.n	8005b10 <HAL_RCC_OscConfig+0x6e8>
 8005b30:	e001      	b.n	8005b36 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3734      	adds	r7, #52	; 0x34
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd90      	pop	{r4, r7, pc}

08005b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e12d      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4b98      	ldr	r3, [pc, #608]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d91b      	bls.n	8005b9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b95      	ldr	r3, [pc, #596]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 0207 	bic.w	r2, r3, #7
 8005b6a:	4993      	ldr	r1, [pc, #588]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b72:	f7fd fa27 	bl	8002fc4 <HAL_GetTick>
 8005b76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b7a:	f7fd fa23 	bl	8002fc4 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e111      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8c:	4b8a      	ldr	r3, [pc, #552]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d1ef      	bne.n	8005b7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fae3 	bl	8005176 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bb0:	f7fd fa08 	bl	8002fc4 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bb8:	f7fd fa04 	bl	8002fc4 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e0f2      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bca:	f7ff fbd0 	bl	800536e <LL_RCC_IsActiveFlag_HPRE>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f1      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d016      	beq.n	8005c0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fada 	bl	800519e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bea:	f7fd f9eb 	bl	8002fc4 <HAL_GetTick>
 8005bee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bf2:	f7fd f9e7 	bl	8002fc4 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0d5      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c04:	f7ff fbc5 	bl	8005392 <LL_RCC_IsActiveFlag_C2HPRE>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f1      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff fad3 	bl	80051ca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c24:	f7fd f9ce 	bl	8002fc4 <HAL_GetTick>
 8005c28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c2c:	f7fd f9ca 	bl	8002fc4 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0b8      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c3e:	f7ff fbbb 	bl	80053b8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f1      	beq.n	8005c2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d016      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff facd 	bl	80051f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c5e:	f7fd f9b1 	bl	8002fc4 <HAL_GetTick>
 8005c62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c66:	f7fd f9ad 	bl	8002fc4 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e09b      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c78:	f7ff fbb1 	bl	80053de <LL_RCC_IsActiveFlag_PPRE1>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f1      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d017      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fac3 	bl	8005220 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c9a:	f7fd f993 	bl	8002fc4 <HAL_GetTick>
 8005c9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ca2:	f7fd f98f 	bl	8002fc4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e07d      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cb4:	f7ff fba5 	bl	8005402 <LL_RCC_IsActiveFlag_PPRE2>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f1      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d043      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005cd2:	f7ff f863 	bl	8004d9c <LL_RCC_HSE_IsReady>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11e      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e067      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d106      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005ce8:	f7ff fafe 	bl	80052e8 <LL_RCC_PLL_IsReady>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d113      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e05c      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005cfe:	f7ff f9cb 	bl	8005098 <LL_RCC_MSI_IsReady>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d108      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e051      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005d0c:	f7ff f876 	bl	8004dfc <LL_RCC_HSI_IsReady>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e04a      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fa09 	bl	8005136 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d24:	f7fd f94e 	bl	8002fc4 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2c:	f7fd f94a 	bl	8002fc4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e036      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d42:	f7ff fa0c 	bl	800515e <LL_RCC_GetSysClkSource>
 8005d46:	4602      	mov	r2, r0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d1ec      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d21b      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 0207 	bic.w	r2, r3, #7
 8005d68:	4913      	ldr	r1, [pc, #76]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d70:	f7fd f928 	bl	8002fc4 <HAL_GetTick>
 8005d74:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d78:	f7fd f924 	bl	8002fc4 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e012      	b.n	8005db0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <HAL_RCC_ClockConfig+0x278>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1ef      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d98:	f000 f880 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	4a07      	ldr	r2, [pc, #28]	; (8005dbc <HAL_RCC_ClockConfig+0x27c>)
 8005da0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005da2:	f7fd f91b 	bl	8002fdc <HAL_GetTickPrio>
 8005da6:	4603      	mov	r3, r0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd f8bd 	bl	8002f28 <HAL_InitTick>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	58004000 	.word	0x58004000
 8005dbc:	20000028 	.word	0x20000028

08005dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc6:	f7ff f9ca 	bl	800515e <LL_RCC_GetSysClkSource>
 8005dca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dd2:	f7ff f986 	bl	80050e2 <LL_RCC_MSI_GetRange>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	4a2b      	ldr	r2, [pc, #172]	; (8005e8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e04b      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d102      	bne.n	8005df4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dee:	4b28      	ldr	r3, [pc, #160]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e045      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d10a      	bne.n	8005e10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005dfa:	f7fe ff9f 	bl	8004d3c <LL_RCC_HSE_IsEnabledDiv2>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d102      	bne.n	8005e0a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e04:	4b23      	ldr	r3, [pc, #140]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e03a      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e0a:	4b23      	ldr	r3, [pc, #140]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e037      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e10:	f7ff faa1 	bl	8005356 <LL_RCC_PLL_GetMainSource>
 8005e14:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d003      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0x64>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d003      	beq.n	8005e2a <HAL_RCC_GetSysClockFreq+0x6a>
 8005e22:	e00d      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e24:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e26:	60bb      	str	r3, [r7, #8]
        break;
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e2a:	f7fe ff87 	bl	8004d3c <LL_RCC_HSE_IsEnabledDiv2>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d102      	bne.n	8005e3a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e34:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e36:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e38:	e00d      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005e3c:	60bb      	str	r3, [r7, #8]
        break;
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e40:	f7ff f94f 	bl	80050e2 <LL_RCC_MSI_GetRange>
 8005e44:	4603      	mov	r3, r0
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	4a0f      	ldr	r2, [pc, #60]	; (8005e8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e52:	60bb      	str	r3, [r7, #8]
        break;
 8005e54:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005e56:	f7ff fa59 	bl	800530c <LL_RCC_PLL_GetN>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	fb03 f402 	mul.w	r4, r3, r2
 8005e62:	f7ff fa6c 	bl	800533e <LL_RCC_PLL_GetDivider>
 8005e66:	4603      	mov	r3, r0
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e70:	f7ff fa59 	bl	8005326 <LL_RCC_PLL_GetR>
 8005e74:	4603      	mov	r3, r0
 8005e76:	0f5b      	lsrs	r3, r3, #29
 8005e78:	3301      	adds	r3, #1
 8005e7a:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005e80:	68fb      	ldr	r3, [r7, #12]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	0800b570 	.word	0x0800b570
 8005e90:	00f42400 	.word	0x00f42400
 8005e94:	003d0900 	.word	0x003d0900
 8005e98:	007a1200 	.word	0x007a1200

08005e9c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e9c:	b598      	push	{r3, r4, r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ea0:	f7ff ff8e 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	f7ff f9cf 	bl	8005248 <LL_RCC_GetAHBPrescaler>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	4a03      	ldr	r2, [pc, #12]	; (8005ec0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd98      	pop	{r3, r4, r7, pc}
 8005ec0:	0800b510 	.word	0x0800b510

08005ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec4:	b598      	push	{r3, r4, r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ec8:	f7ff ffe8 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8005ecc:	4604      	mov	r4, r0
 8005ece:	f7ff f9d5 	bl	800527c <LL_RCC_GetAPB1Prescaler>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	4a04      	ldr	r2, [pc, #16]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd98      	pop	{r3, r4, r7, pc}
 8005eec:	0800b550 	.word	0x0800b550

08005ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef0:	b598      	push	{r3, r4, r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ef4:	f7ff ffd2 	bl	8005e9c <HAL_RCC_GetHCLKFreq>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	f7ff f9cb 	bl	8005294 <LL_RCC_GetAPB2Prescaler>
 8005efe:	4603      	mov	r3, r0
 8005f00:	0adb      	lsrs	r3, r3, #11
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd98      	pop	{r3, r4, r7, pc}
 8005f18:	0800b550 	.word	0x0800b550

08005f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2bb0      	cmp	r3, #176	; 0xb0
 8005f28:	d903      	bls.n	8005f32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005f2a:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e007      	b.n	8005f42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	4a11      	ldr	r2, [pc, #68]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005f42:	f7ff f98d 	bl	8005260 <LL_RCC_GetAHB4Prescaler>
 8005f46:	4603      	mov	r3, r0
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	4a0d      	ldr	r2, [pc, #52]	; (8005f84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4a0a      	ldr	r2, [pc, #40]	; (8005f88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	0c9c      	lsrs	r4, r3, #18
 8005f66:	f7fe fedb 	bl	8004d20 <HAL_PWREx_GetVoltageRange>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 f80c 	bl	8005f8c <RCC_SetFlashLatency>
 8005f74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd90      	pop	{r4, r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	0800b570 	.word	0x0800b570
 8005f84:	0800b510 	.word	0x0800b510
 8005f88:	431bde83 	.word	0x431bde83

08005f8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b093      	sub	sp, #76	; 0x4c
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005f96:	4b39      	ldr	r3, [pc, #228]	; (800607c <RCC_SetFlashLatency+0xf0>)
 8005f98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005fa2:	4a37      	ldr	r2, [pc, #220]	; (8006080 <RCC_SetFlashLatency+0xf4>)
 8005fa4:	f107 031c 	add.w	r3, r7, #28
 8005fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005fae:	4b35      	ldr	r3, [pc, #212]	; (8006084 <RCC_SetFlashLatency+0xf8>)
 8005fb0:	f107 040c 	add.w	r4, r7, #12
 8005fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005fba:	2300      	movs	r3, #0
 8005fbc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc4:	d11c      	bne.n	8006000 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fca:	e015      	b.n	8005ff8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d808      	bhi.n	8005ff2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005fe8:	4413      	add	r3, r2
 8005fea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005ff0:	e022      	b.n	8006038 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d9e6      	bls.n	8005fcc <RCC_SetFlashLatency+0x40>
 8005ffe:	e01b      	b.n	8006038 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006000:	2300      	movs	r3, #0
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006004:	e015      	b.n	8006032 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800600e:	4413      	add	r3, r2
 8006010:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	429a      	cmp	r2, r3
 8006018:	d808      	bhi.n	800602c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006022:	4413      	add	r3, r2
 8006024:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800602a:	e005      	b.n	8006038 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800602c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602e:	3301      	adds	r3, #1
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006034:	2b02      	cmp	r3, #2
 8006036:	d9e6      	bls.n	8006006 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006038:	4b13      	ldr	r3, [pc, #76]	; (8006088 <RCC_SetFlashLatency+0xfc>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f023 0207 	bic.w	r2, r3, #7
 8006040:	4911      	ldr	r1, [pc, #68]	; (8006088 <RCC_SetFlashLatency+0xfc>)
 8006042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006044:	4313      	orrs	r3, r2
 8006046:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006048:	f7fc ffbc 	bl	8002fc4 <HAL_GetTick>
 800604c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800604e:	e008      	b.n	8006062 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006050:	f7fc ffb8 	bl	8002fc4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e007      	b.n	8006072 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <RCC_SetFlashLatency+0xfc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800606c:	429a      	cmp	r2, r3
 800606e:	d1ef      	bne.n	8006050 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	374c      	adds	r7, #76	; 0x4c
 8006076:	46bd      	mov	sp, r7
 8006078:	bd90      	pop	{r4, r7, pc}
 800607a:	bf00      	nop
 800607c:	0800b4e4 	.word	0x0800b4e4
 8006080:	0800b4f4 	.word	0x0800b4f4
 8006084:	0800b500 	.word	0x0800b500
 8006088:	58004000 	.word	0x58004000

0800608c <LL_RCC_LSE_IsEnabled>:
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <LL_RCC_LSE_IsEnabled+0x18>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_RCC_LSE_IsReady>:
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d101      	bne.n	80060c8 <LL_RCC_LSE_IsReady+0x18>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <LL_RCC_LSE_IsReady+0x1a>
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_RCC_SetRFWKPClockSource>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80060dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_RCC_SetSMPSClockSource>:
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	f023 0203 	bic.w	r2, r3, #3
 8006112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4313      	orrs	r3, r2
 800611a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <LL_RCC_SetSMPSPrescaler>:
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800613a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4313      	orrs	r3, r2
 8006142:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_RCC_SetUSARTClockSource>:
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f023 0203 	bic.w	r2, r3, #3
 8006164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <LL_RCC_SetLPUARTClockSource>:
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <LL_RCC_SetI2CClockSource>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061c0:	43db      	mvns	r3, r3
 80061c2:	401a      	ands	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <LL_RCC_SetLPTIMClockSource>:
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	43db      	mvns	r3, r3
 80061fa:	401a      	ands	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_RCC_SetSAIClockSource>:
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800621e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800622a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <LL_RCC_SetRNGClockSource>:
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800624a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <LL_RCC_SetCLK48ClockSource>:
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <LL_RCC_SetUSBClockSource>:
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ffe3 	bl	800626e <LL_RCC_SetCLK48ClockSource>
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <LL_RCC_SetADCClockSource>:
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80062b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <LL_RCC_SetRTCClockSource>:
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <LL_RCC_GetRTCClockSource>:
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800630c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <LL_RCC_ForceBackupDomainReset>:
{
 8006322:	b480      	push	{r7}
 8006324:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800635c:	bf00      	nop
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_RCC_PLLSAI1_Enable>:
{
 8006366:	b480      	push	{r7}
 8006368:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006378:	6013      	str	r3, [r2, #0]
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <LL_RCC_PLLSAI1_Disable>:
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006396:	6013      	str	r3, [r2, #0]
}
 8006398:	bf00      	nop
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <LL_RCC_PLLSAI1_IsReady>:
{
 80063a2:	b480      	push	{r7}
 80063a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80063a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b4:	d101      	bne.n	80063ba <LL_RCC_PLLSAI1_IsReady+0x18>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b088      	sub	sp, #32
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80063ce:	2300      	movs	r3, #0
 80063d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063d2:	2300      	movs	r3, #0
 80063d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d034      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063ea:	d021      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80063ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063f0:	d81b      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063f6:	d01d      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80063f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063fc:	d815      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006406:	d110      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006416:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006418:	e00d      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3304      	adds	r3, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f947 	bl	80066b2 <RCCEx_PLLSAI1_ConfigNP>
 8006424:	4603      	mov	r3, r0
 8006426:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006428:	e005      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	77fb      	strb	r3, [r7, #31]
        break;
 800642e:	e002      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006436:	7ffb      	ldrb	r3, [r7, #31]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d105      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff fee8 	bl	8006216 <LL_RCC_SetSAIClockSource>
 8006446:	e001      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7ffb      	ldrb	r3, [r7, #31]
 800644a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006454:	2b00      	cmp	r3, #0
 8006456:	d046      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006458:	f7ff ff56 	bl	8006308 <LL_RCC_GetRTCClockSource>
 800645c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	429a      	cmp	r2, r3
 8006466:	d03c      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006468:	f7fe fc4a 	bl	8004d00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ff30 	bl	80062dc <LL_RCC_SetRTCClockSource>
 800647c:	e02e      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006486:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006488:	f7ff ff4b 	bl	8006322 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800648c:	f7ff ff5a 	bl	8006344 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800649e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80064a8:	f7ff fdf0 	bl	800608c <LL_RCC_LSE_IsEnabled>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d114      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064b2:	f7fc fd87 	bl	8002fc4 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80064b8:	e00b      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ba:	f7fc fd83 	bl	8002fc4 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d902      	bls.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	77fb      	strb	r3, [r7, #31]
              break;
 80064d0:	e004      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80064d2:	f7ff fded 	bl	80060b0 <LL_RCC_LSE_IsReady>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d1ee      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80064dc:	7ffb      	ldrb	r3, [r7, #31]
 80064de:	77bb      	strb	r3, [r7, #30]
 80064e0:	e001      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	7ffb      	ldrb	r3, [r7, #31]
 80064e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fe2a 	bl	8006150 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fe35 	bl	800617c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	d004      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fe5d 	bl	80061e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fe52 	bl	80061e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fe2a 	bl	80061a8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fe1f 	bl	80061a8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d022      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fe8d 	bl	800629a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006588:	d107      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800658a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006598:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065a2:	d10b      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f8dd 	bl	8006768 <RCCEx_PLLSAI1_ConfigNQ>
 80065ae:	4603      	mov	r3, r0
 80065b0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80065b2:	7ffb      	ldrb	r3, [r7, #31]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80065b8:	7ffb      	ldrb	r3, [r7, #31]
 80065ba:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d02b      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d008      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065da:	d003      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff fe2a 	bl	8006242 <LL_RCC_SetRNGClockSource>
 80065ee:	e00a      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	2000      	movs	r0, #0
 80065fc:	f7ff fe21 	bl	8006242 <LL_RCC_SetRNGClockSource>
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff fe34 	bl	800626e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800660e:	d107      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800661a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800661e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006628:	2b00      	cmp	r3, #0
 800662a:	d022      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fe3d 	bl	80062b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800663e:	d107      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800664a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006658:	d10b      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f8dd 	bl	800681e <RCCEx_PLLSAI1_ConfigNR>
 8006664:	4603      	mov	r3, r0
 8006666:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006668:	7ffb      	ldrb	r3, [r7, #31]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800666e:	7ffb      	ldrb	r3, [r7, #31]
 8006670:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fd26 	bl	80060d4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fd45 	bl	8006128 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fd2c 	bl	8006100 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80066a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066be:	f7ff fe61 	bl	8006384 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066c2:	f7fc fc7f 	bl	8002fc4 <HAL_GetTick>
 80066c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066c8:	e009      	b.n	80066de <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066ca:	f7fc fc7b 	bl	8002fc4 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d902      	bls.n	80066de <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	73fb      	strb	r3, [r7, #15]
      break;
 80066dc:	e004      	b.n	80066e8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066de:	f7ff fe60 	bl	80063a2 <LL_RCC_PLLSAI1_IsReady>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f0      	bne.n	80066ca <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d137      	bne.n	800675e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006702:	4313      	orrs	r3, r2
 8006704:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006718:	4313      	orrs	r3, r2
 800671a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800671c:	f7ff fe23 	bl	8006366 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006720:	f7fc fc50 	bl	8002fc4 <HAL_GetTick>
 8006724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006726:	e009      	b.n	800673c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006728:	f7fc fc4c 	bl	8002fc4 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d902      	bls.n	800673c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	73fb      	strb	r3, [r7, #15]
        break;
 800673a:	e004      	b.n	8006746 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800673c:	f7ff fe31 	bl	80063a2 <LL_RCC_PLLSAI1_IsReady>
 8006740:	4603      	mov	r3, r0
 8006742:	2b01      	cmp	r3, #1
 8006744:	d1f0      	bne.n	8006728 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d108      	bne.n	800675e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800674c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800675a:	4313      	orrs	r3, r2
 800675c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006774:	f7ff fe06 	bl	8006384 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006778:	f7fc fc24 	bl	8002fc4 <HAL_GetTick>
 800677c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800677e:	e009      	b.n	8006794 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006780:	f7fc fc20 	bl	8002fc4 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d902      	bls.n	8006794 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	73fb      	strb	r3, [r7, #15]
      break;
 8006792:	e004      	b.n	800679e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006794:	f7ff fe05 	bl	80063a2 <LL_RCC_PLLSAI1_IsReady>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d137      	bne.n	8006814 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80067a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b8:	4313      	orrs	r3, r2
 80067ba:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067ce:	4313      	orrs	r3, r2
 80067d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067d2:	f7ff fdc8 	bl	8006366 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d6:	f7fc fbf5 	bl	8002fc4 <HAL_GetTick>
 80067da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067dc:	e009      	b.n	80067f2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067de:	f7fc fbf1 	bl	8002fc4 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d902      	bls.n	80067f2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	73fb      	strb	r3, [r7, #15]
        break;
 80067f0:	e004      	b.n	80067fc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067f2:	f7ff fdd6 	bl	80063a2 <LL_RCC_PLLSAI1_IsReady>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d1f0      	bne.n	80067de <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d108      	bne.n	8006814 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006810:	4313      	orrs	r3, r2
 8006812:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800682a:	f7ff fdab 	bl	8006384 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800682e:	f7fc fbc9 	bl	8002fc4 <HAL_GetTick>
 8006832:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006834:	e009      	b.n	800684a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006836:	f7fc fbc5 	bl	8002fc4 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d902      	bls.n	800684a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	73fb      	strb	r3, [r7, #15]
      break;
 8006848:	e004      	b.n	8006854 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800684a:	f7ff fdaa 	bl	80063a2 <LL_RCC_PLLSAI1_IsReady>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f0      	bne.n	8006836 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d137      	bne.n	80068ca <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800685a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800686e:	4313      	orrs	r3, r2
 8006870:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006884:	4313      	orrs	r3, r2
 8006886:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006888:	f7ff fd6d 	bl	8006366 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688c:	f7fc fb9a 	bl	8002fc4 <HAL_GetTick>
 8006890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006892:	e009      	b.n	80068a8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006894:	f7fc fb96 	bl	8002fc4 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d902      	bls.n	80068a8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	73fb      	strb	r3, [r7, #15]
        break;
 80068a6:	e004      	b.n	80068b2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068a8:	f7ff fd7b 	bl	80063a2 <LL_RCC_PLLSAI1_IsReady>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d1f0      	bne.n	8006894 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80068b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e095      	b.n	8006a12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d009      	beq.n	800690c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
 80068fe:	e005      	b.n	800690c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fc f842 	bl	80029b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006942:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800694c:	d902      	bls.n	8006954 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e002      	b.n	800695a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006958:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006962:	d007      	beq.n	8006974 <HAL_SPI_Init+0xa0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800696c:	d002      	beq.n	8006974 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	ea42 0103 	orr.w	r1, r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	f003 0204 	and.w	r2, r3, #4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80069f0:	ea42 0103 	orr.w	r1, r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b088      	sub	sp, #32
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	603b      	str	r3, [r7, #0]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_SPI_Transmit+0x22>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e158      	b.n	8006cee <HAL_SPI_Transmit+0x2d4>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a44:	f7fc fabe 	bl	8002fc4 <HAL_GetTick>
 8006a48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d002      	beq.n	8006a60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a5e:	e13d      	b.n	8006cdc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_SPI_Transmit+0x52>
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a70:	e134      	b.n	8006cdc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2203      	movs	r2, #3
 8006a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006abc:	d10f      	bne.n	8006ade <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b40      	cmp	r3, #64	; 0x40
 8006aea:	d007      	beq.n	8006afc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b04:	d94b      	bls.n	8006b9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_SPI_Transmit+0xfa>
 8006b0e:	8afb      	ldrh	r3, [r7, #22]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d13e      	bne.n	8006b92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	881a      	ldrh	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	1c9a      	adds	r2, r3, #2
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b38:	e02b      	b.n	8006b92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d112      	bne.n	8006b6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	881a      	ldrh	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	1c9a      	adds	r2, r3, #2
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b6c:	e011      	b.n	8006b92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b6e:	f7fc fa29 	bl	8002fc4 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d803      	bhi.n	8006b86 <HAL_SPI_Transmit+0x16c>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b84:	d102      	bne.n	8006b8c <HAL_SPI_Transmit+0x172>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b90:	e0a4      	b.n	8006cdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1ce      	bne.n	8006b3a <HAL_SPI_Transmit+0x120>
 8006b9c:	e07c      	b.n	8006c98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_SPI_Transmit+0x192>
 8006ba6:	8afb      	ldrh	r3, [r7, #22]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d170      	bne.n	8006c8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d912      	bls.n	8006bdc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	881a      	ldrh	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	1c9a      	adds	r2, r3, #2
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b02      	subs	r3, #2
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bda:	e058      	b.n	8006c8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c02:	e044      	b.n	8006c8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d12b      	bne.n	8006c6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d912      	bls.n	8006c42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	881a      	ldrh	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	1c9a      	adds	r2, r3, #2
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b02      	subs	r3, #2
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c40:	e025      	b.n	8006c8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	7812      	ldrb	r2, [r2, #0]
 8006c4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c68:	e011      	b.n	8006c8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c6a:	f7fc f9ab 	bl	8002fc4 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d803      	bhi.n	8006c82 <HAL_SPI_Transmit+0x268>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c80:	d102      	bne.n	8006c88 <HAL_SPI_Transmit+0x26e>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c8c:	e026      	b.n	8006cdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1b5      	bne.n	8006c04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fcdb 	bl	8007658 <SPI_EndRxTxTransaction>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e000      	b.n	8006cdc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b088      	sub	sp, #32
 8006cfa:	af02      	add	r7, sp, #8
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	4613      	mov	r3, r2
 8006d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d12:	d112      	bne.n	8006d3a <HAL_SPI_Receive+0x44>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10e      	bne.n	8006d3a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d24:	88fa      	ldrh	r2, [r7, #6]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 f910 	bl	8006f56 <HAL_SPI_TransmitReceive>
 8006d36:	4603      	mov	r3, r0
 8006d38:	e109      	b.n	8006f4e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_SPI_Receive+0x52>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e102      	b.n	8006f4e <HAL_SPI_Receive+0x258>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d50:	f7fc f938 	bl	8002fc4 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d002      	beq.n	8006d68 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
 8006d64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d66:	e0e9      	b.n	8006f3c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_SPI_Receive+0x7e>
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d78:	e0e0      	b.n	8006f3c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	88fa      	ldrh	r2, [r7, #6]
 8006d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	88fa      	ldrh	r2, [r7, #6]
 8006d9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dc4:	d908      	bls.n	8006dd8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	e007      	b.n	8006de8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df0:	d10f      	bne.n	8006e12 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d007      	beq.n	8006e30 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e38:	d867      	bhi.n	8006f0a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e3a:	e030      	b.n	8006e9e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d117      	bne.n	8006e7a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f103 020c 	add.w	r2, r3, #12
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006e78:	e011      	b.n	8006e9e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7a:	f7fc f8a3 	bl	8002fc4 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d803      	bhi.n	8006e92 <HAL_SPI_Receive+0x19c>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e90:	d102      	bne.n	8006e98 <HAL_SPI_Receive+0x1a2>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e9c:	e04e      	b.n	8006f3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1c8      	bne.n	8006e3c <HAL_SPI_Receive+0x146>
 8006eaa:	e034      	b.n	8006f16 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d115      	bne.n	8006ee6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	b292      	uxth	r2, r2
 8006ec6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	1c9a      	adds	r2, r3, #2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006ee4:	e011      	b.n	8006f0a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee6:	f7fc f86d 	bl	8002fc4 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d803      	bhi.n	8006efe <HAL_SPI_Receive+0x208>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006efc:	d102      	bne.n	8006f04 <HAL_SPI_Receive+0x20e>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f08:	e018      	b.n	8006f3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ca      	bne.n	8006eac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fb44 	bl	80075a8 <SPI_EndRxTransaction>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
 8006f38:	e000      	b.n	8006f3c <HAL_SPI_Receive+0x246>
  }

error :
 8006f3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b08a      	sub	sp, #40	; 0x28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f64:	2301      	movs	r3, #1
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x26>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e1fb      	b.n	8007374 <HAL_SPI_TransmitReceive+0x41e>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f84:	f7fc f81e 	bl	8002fc4 <HAL_GetTick>
 8006f88:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f90:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f98:	887b      	ldrh	r3, [r7, #2]
 8006f9a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f9c:	887b      	ldrh	r3, [r7, #2]
 8006f9e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fa0:	7efb      	ldrb	r3, [r7, #27]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d00e      	beq.n	8006fc4 <HAL_SPI_TransmitReceive+0x6e>
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fac:	d106      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x66>
 8006fb6:	7efb      	ldrb	r3, [r7, #27]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d003      	beq.n	8006fc4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006fc2:	e1cd      	b.n	8007360 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0x80>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0x80>
 8006fd0:	887b      	ldrh	r3, [r7, #2]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d103      	bne.n	8006fde <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006fdc:	e1c0      	b.n	8007360 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d003      	beq.n	8006ff2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2205      	movs	r2, #5
 8006fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	887a      	ldrh	r2, [r7, #2]
 8007002:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	887a      	ldrh	r2, [r7, #2]
 800700a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	887a      	ldrh	r2, [r7, #2]
 800701e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007034:	d802      	bhi.n	800703c <HAL_SPI_TransmitReceive+0xe6>
 8007036:	8a3b      	ldrh	r3, [r7, #16]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d908      	bls.n	800704e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800704a:	605a      	str	r2, [r3, #4]
 800704c:	e007      	b.n	800705e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800705c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b40      	cmp	r3, #64	; 0x40
 800706a:	d007      	beq.n	800707c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800707a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007084:	d97c      	bls.n	8007180 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_SPI_TransmitReceive+0x13e>
 800708e:	8a7b      	ldrh	r3, [r7, #18]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d169      	bne.n	8007168 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	881a      	ldrh	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	1c9a      	adds	r2, r3, #2
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b8:	e056      	b.n	8007168 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d11b      	bne.n	8007100 <HAL_SPI_TransmitReceive+0x1aa>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d016      	beq.n	8007100 <HAL_SPI_TransmitReceive+0x1aa>
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d113      	bne.n	8007100 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	881a      	ldrh	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	1c9a      	adds	r2, r3, #2
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b01      	cmp	r3, #1
 800710c:	d11c      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x1f2>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d016      	beq.n	8007148 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	b292      	uxth	r2, r2
 8007126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007144:	2301      	movs	r3, #1
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007148:	f7fb ff3c 	bl	8002fc4 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007154:	429a      	cmp	r2, r3
 8007156:	d807      	bhi.n	8007168 <HAL_SPI_TransmitReceive+0x212>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800715e:	d003      	beq.n	8007168 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007166:	e0fb      	b.n	8007360 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1a3      	bne.n	80070ba <HAL_SPI_TransmitReceive+0x164>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d19d      	bne.n	80070ba <HAL_SPI_TransmitReceive+0x164>
 800717e:	e0df      	b.n	8007340 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_SPI_TransmitReceive+0x23a>
 8007188:	8a7b      	ldrh	r3, [r7, #18]
 800718a:	2b01      	cmp	r3, #1
 800718c:	f040 80cb 	bne.w	8007326 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	d912      	bls.n	80071c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	1c9a      	adds	r2, r3, #2
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b02      	subs	r3, #2
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071be:	e0b2      	b.n	8007326 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e6:	e09e      	b.n	8007326 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d134      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d02f      	beq.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	2b01      	cmp	r3, #1
 8007204:	d12c      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d912      	bls.n	8007236 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	881a      	ldrh	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	1c9a      	adds	r2, r3, #2
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b02      	subs	r3, #2
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007234:	e012      	b.n	800725c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d148      	bne.n	8007300 <HAL_SPI_TransmitReceive+0x3aa>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d042      	beq.n	8007300 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b01      	cmp	r3, #1
 8007284:	d923      	bls.n	80072ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007290:	b292      	uxth	r2, r2
 8007292:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b02      	subs	r3, #2
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d81f      	bhi.n	80072fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072ca:	605a      	str	r2, [r3, #4]
 80072cc:	e016      	b.n	80072fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f103 020c 	add.w	r2, r3, #12
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072fc:	2301      	movs	r3, #1
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007300:	f7fb fe60 	bl	8002fc4 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730c:	429a      	cmp	r2, r3
 800730e:	d803      	bhi.n	8007318 <HAL_SPI_TransmitReceive+0x3c2>
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007316:	d102      	bne.n	800731e <HAL_SPI_TransmitReceive+0x3c8>
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007324:	e01c      	b.n	8007360 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	f47f af5b 	bne.w	80071e8 <HAL_SPI_TransmitReceive+0x292>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	f47f af54 	bne.w	80071e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f987 	bl	8007658 <SPI_EndRxTxTransaction>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d006      	beq.n	800735e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	661a      	str	r2, [r3, #96]	; 0x60
 800735c:	e000      	b.n	8007360 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800735e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007374:	4618      	mov	r0, r3
 8007376:	3728      	adds	r7, #40	; 0x28
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800738c:	f7fb fe1a 	bl	8002fc4 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4413      	add	r3, r2
 800739a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800739c:	f7fb fe12 	bl	8002fc4 <HAL_GetTick>
 80073a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073a2:	4b39      	ldr	r3, [pc, #228]	; (8007488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	015b      	lsls	r3, r3, #5
 80073a8:	0d1b      	lsrs	r3, r3, #20
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073b2:	e054      	b.n	800745e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ba:	d050      	beq.n	800745e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073bc:	f7fb fe02 	bl	8002fc4 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d902      	bls.n	80073d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d13d      	bne.n	800744e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ea:	d111      	bne.n	8007410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f4:	d004      	beq.n	8007400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fe:	d107      	bne.n	8007410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007418:	d10f      	bne.n	800743a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e017      	b.n	800747e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	3b01      	subs	r3, #1
 800745c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	429a      	cmp	r2, r3
 800747a:	d19b      	bne.n	80073b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000028 	.word	0x20000028

0800748c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800749a:	f7fb fd93 	bl	8002fc4 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074aa:	f7fb fd8b 	bl	8002fc4 <HAL_GetTick>
 80074ae:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80074b0:	4b3c      	ldr	r3, [pc, #240]	; (80075a4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	00da      	lsls	r2, r3, #3
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	0d1b      	lsrs	r3, r3, #20
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
 80074c6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80074c8:	e05f      	b.n	800758a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80074d0:	d106      	bne.n	80074e0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	330c      	adds	r3, #12
 80074de:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e6:	d050      	beq.n	800758a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074e8:	f7fb fd6c 	bl	8002fc4 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d902      	bls.n	80074fe <SPI_WaitFifoStateUntilTimeout+0x72>
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d13d      	bne.n	800757a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800750c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007516:	d111      	bne.n	800753c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007520:	d004      	beq.n	800752c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752a:	d107      	bne.n	800753c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800753a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007544:	d10f      	bne.n	8007566 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e010      	b.n	800759c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3b01      	subs	r3, #1
 8007588:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4013      	ands	r3, r2
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d197      	bne.n	80074ca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20000028 	.word	0x20000028

080075a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075bc:	d111      	bne.n	80075e2 <SPI_EndRxTransaction+0x3a>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c6:	d004      	beq.n	80075d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d107      	bne.n	80075e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2200      	movs	r2, #0
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7ff fec5 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e023      	b.n	8007650 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007610:	d11d      	bne.n	800764e <SPI_EndRxTransaction+0xa6>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761a:	d004      	beq.n	8007626 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007624:	d113      	bne.n	800764e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff ff2a 	bl	800748c <SPI_WaitFifoStateUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007642:	f043 0220 	orr.w	r2, r3, #32
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e000      	b.n	8007650 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff ff0b 	bl	800748c <SPI_WaitFifoStateUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007680:	f043 0220 	orr.w	r2, r3, #32
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e027      	b.n	80076dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	2180      	movs	r1, #128	; 0x80
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff fe70 	bl	800737c <SPI_WaitFlagStateUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a6:	f043 0220 	orr.w	r2, r3, #32
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e014      	b.n	80076dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fee4 	bl	800748c <SPI_WaitFifoStateUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e000      	b.n	80076dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <LL_RCC_GetUSARTClockSource>:
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80076ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4013      	ands	r3, r2
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <LL_RCC_GetLPUARTClockSource>:
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800770c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007710:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4013      	ands	r3, r2
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e042      	b.n	80077bc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fb fb5d 	bl	8002e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2224      	movs	r2, #36	; 0x24
 8007752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fb16 	bl	8007d98 <UART_SetConfig>
 800776c:	4603      	mov	r3, r0
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e022      	b.n	80077bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fd10 	bl	80081a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fd97 	bl	80082e8 <UART_CheckIdleState>
 80077ba:	4603      	mov	r3, r0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077da:	2b20      	cmp	r3, #32
 80077dc:	f040 8083 	bne.w	80078e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Transmit+0x28>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e07b      	b.n	80078e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Transmit+0x3a>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e074      	b.n	80078e8 <HAL_UART_Transmit+0x124>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2221      	movs	r2, #33	; 0x21
 8007812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007816:	f7fb fbd5 	bl	8002fc4 <HAL_GetTick>
 800781a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	88fa      	ldrh	r2, [r7, #6]
 8007820:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007834:	d108      	bne.n	8007848 <HAL_UART_Transmit+0x84>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	e003      	b.n	8007850 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007858:	e02c      	b.n	80078b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2200      	movs	r2, #0
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 fd8a 	bl	800837e <UART_WaitOnFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e039      	b.n	80078e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007888:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	3302      	adds	r3, #2
 800788e:	61bb      	str	r3, [r7, #24]
 8007890:	e007      	b.n	80078a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	3301      	adds	r3, #1
 80078a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1cc      	bne.n	800785a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2200      	movs	r2, #0
 80078c8:	2140      	movs	r1, #64	; 0x40
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fd57 	bl	800837e <UART_WaitOnFlagUntilTimeout>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e006      	b.n	80078e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	e000      	b.n	80078e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078e6:	2302      	movs	r3, #2
  }
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	f640 030f 	movw	r3, #2063	; 0x80f
 8007916:	4013      	ands	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d118      	bne.n	8007952 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f003 0320 	and.w	r3, r3, #32
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 81fb 	beq.w	8007d3e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
      }
      return;
 8007950:	e1f5      	b.n	8007d3e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80ef 	beq.w	8007b38 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4b73      	ldr	r3, [pc, #460]	; (8007b2c <HAL_UART_IRQHandler+0x23c>)
 800795e:	4013      	ands	r3, r2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d105      	bne.n	8007970 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4b72      	ldr	r3, [pc, #456]	; (8007b30 <HAL_UART_IRQHandler+0x240>)
 8007968:	4013      	ands	r3, r2
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80e4 	beq.w	8007b38 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d010      	beq.n	800799c <HAL_UART_IRQHandler+0xac>
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2201      	movs	r2, #1
 800798a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007992:	f043 0201 	orr.w	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d010      	beq.n	80079c8 <HAL_UART_IRQHandler+0xd8>
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2202      	movs	r2, #2
 80079b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079be:	f043 0204 	orr.w	r2, r3, #4
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <HAL_UART_IRQHandler+0x104>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2204      	movs	r2, #4
 80079e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d015      	beq.n	8007a2a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4b48      	ldr	r3, [pc, #288]	; (8007b2c <HAL_UART_IRQHandler+0x23c>)
 8007a0c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2208      	movs	r2, #8
 8007a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	f043 0208 	orr.w	r2, r3, #8
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d011      	beq.n	8007a58 <HAL_UART_IRQHandler+0x168>
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a4e:	f043 0220 	orr.w	r2, r3, #32
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 816f 	beq.w	8007d42 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d011      	beq.n	8007a92 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a98:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b40      	cmp	r3, #64	; 0x40
 8007aa6:	d004      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d031      	beq.n	8007b16 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fce3 	bl	800847e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d123      	bne.n	8007b0e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ad4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d013      	beq.n	8007b06 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae2:	4a14      	ldr	r2, [pc, #80]	; (8007b34 <HAL_UART_IRQHandler+0x244>)
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fb fc14 	bl	8003318 <HAL_DMA_Abort_IT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d017      	beq.n	8007b26 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	e00f      	b.n	8007b26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f930 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	e00b      	b.n	8007b26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f92c 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b14:	e007      	b.n	8007b26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f928 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007b24:	e10d      	b.n	8007d42 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b26:	bf00      	nop
    return;
 8007b28:	e10b      	b.n	8007d42 <HAL_UART_IRQHandler+0x452>
 8007b2a:	bf00      	nop
 8007b2c:	10000001 	.word	0x10000001
 8007b30:	04000120 	.word	0x04000120
 8007b34:	080084e3 	.word	0x080084e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	f040 80ab 	bne.w	8007c98 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80a5 	beq.w	8007c98 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 809f 	beq.w	8007c98 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	d155      	bne.n	8007c1c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007b7a:	893b      	ldrh	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80e2 	beq.w	8007d46 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b88:	893a      	ldrh	r2, [r7, #8]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	f080 80db 	bcs.w	8007d46 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	893a      	ldrh	r2, [r7, #8]
 8007b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d12b      	bne.n	8007c00 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bb6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0210 	bic.w	r2, r2, #16
 8007bf4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fb fb2d 	bl	800325a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8b3 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c1a:	e094      	b.n	8007d46 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8087 	beq.w	8007d4a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8007c3c:	897b      	ldrh	r3, [r7, #10]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 8083 	beq.w	8007d4a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c52:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0210 	bic.w	r2, r2, #16
 8007c8a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c8c:	897b      	ldrh	r3, [r7, #10]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f875 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c96:	e058      	b.n	8007d4a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00d      	beq.n	8007cbe <HAL_UART_IRQHandler+0x3ce>
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d008      	beq.n	8007cbe <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fc43 	bl	8008542 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cbc:	e048      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d012      	beq.n	8007cee <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d104      	bne.n	8007cdc <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d034      	beq.n	8007d4e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	4798      	blx	r3
    }
    return;
 8007cec:	e02f      	b.n	8007d4e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_UART_IRQHandler+0x41a>
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fc03 	bl	800850e <UART_EndTransmit_IT>
    return;
 8007d08:	e022      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_UART_IRQHandler+0x436>
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fc23 	bl	800856a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d24:	e014      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00f      	beq.n	8007d50 <HAL_UART_IRQHandler+0x460>
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	da0c      	bge.n	8007d50 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fc0d 	bl	8008556 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d3c:	e008      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
      return;
 8007d3e:	bf00      	nop
 8007d40:	e006      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
    return;
 8007d42:	bf00      	nop
 8007d44:	e004      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
      return;
 8007d46:	bf00      	nop
 8007d48:	e002      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
      return;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <HAL_UART_IRQHandler+0x460>
    return;
 8007d4e:	bf00      	nop
  }
}
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop

08007d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d98:	b5b0      	push	{r4, r5, r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4ba3      	ldr	r3, [pc, #652]	; (8008050 <UART_SetConfig+0x2b8>)
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	69f9      	ldr	r1, [r7, #28]
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a98      	ldr	r2, [pc, #608]	; (8008054 <UART_SetConfig+0x2bc>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d004      	beq.n	8007e00 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	69f9      	ldr	r1, [r7, #28]
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	f023 010f 	bic.w	r1, r3, #15
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a89      	ldr	r2, [pc, #548]	; (8008058 <UART_SetConfig+0x2c0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d120      	bne.n	8007e7a <UART_SetConfig+0xe2>
 8007e38:	2003      	movs	r0, #3
 8007e3a:	f7ff fc53 	bl	80076e4 <LL_RCC_GetUSARTClockSource>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d817      	bhi.n	8007e74 <UART_SetConfig+0xdc>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <UART_SetConfig+0xb4>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e63 	.word	0x08007e63
 8007e58:	08007e6f 	.word	0x08007e6f
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	76fb      	strb	r3, [r7, #27]
 8007e60:	e038      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007e62:	2302      	movs	r3, #2
 8007e64:	76fb      	strb	r3, [r7, #27]
 8007e66:	e035      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	76fb      	strb	r3, [r7, #27]
 8007e6c:	e032      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007e6e:	2308      	movs	r3, #8
 8007e70:	76fb      	strb	r3, [r7, #27]
 8007e72:	e02f      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007e74:	2310      	movs	r3, #16
 8007e76:	76fb      	strb	r3, [r7, #27]
 8007e78:	e02c      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a75      	ldr	r2, [pc, #468]	; (8008054 <UART_SetConfig+0x2bc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d125      	bne.n	8007ed0 <UART_SetConfig+0x138>
 8007e84:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007e88:	f7ff fc3c 	bl	8007704 <LL_RCC_GetLPUARTClockSource>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e92:	d017      	beq.n	8007ec4 <UART_SetConfig+0x12c>
 8007e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e98:	d817      	bhi.n	8007eca <UART_SetConfig+0x132>
 8007e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e9e:	d00b      	beq.n	8007eb8 <UART_SetConfig+0x120>
 8007ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea4:	d811      	bhi.n	8007eca <UART_SetConfig+0x132>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <UART_SetConfig+0x11a>
 8007eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eae:	d006      	beq.n	8007ebe <UART_SetConfig+0x126>
 8007eb0:	e00b      	b.n	8007eca <UART_SetConfig+0x132>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	76fb      	strb	r3, [r7, #27]
 8007eb6:	e00d      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	76fb      	strb	r3, [r7, #27]
 8007ebc:	e00a      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	76fb      	strb	r3, [r7, #27]
 8007ec2:	e007      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	76fb      	strb	r3, [r7, #27]
 8007ec8:	e004      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007eca:	2310      	movs	r3, #16
 8007ecc:	76fb      	strb	r3, [r7, #27]
 8007ece:	e001      	b.n	8007ed4 <UART_SetConfig+0x13c>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5e      	ldr	r2, [pc, #376]	; (8008054 <UART_SetConfig+0x2bc>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	f040 808b 	bne.w	8007ff6 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ee0:	7efb      	ldrb	r3, [r7, #27]
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d823      	bhi.n	8007f2e <UART_SetConfig+0x196>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <UART_SetConfig+0x154>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f2f 	.word	0x08007f2f
 8007ef4:	08007f19 	.word	0x08007f19
 8007ef8:	08007f2f 	.word	0x08007f2f
 8007efc:	08007f1f 	.word	0x08007f1f
 8007f00:	08007f2f 	.word	0x08007f2f
 8007f04:	08007f2f 	.word	0x08007f2f
 8007f08:	08007f2f 	.word	0x08007f2f
 8007f0c:	08007f27 	.word	0x08007f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f10:	f7fd ffd8 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 8007f14:	6178      	str	r0, [r7, #20]
        break;
 8007f16:	e00f      	b.n	8007f38 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f18:	4b50      	ldr	r3, [pc, #320]	; (800805c <UART_SetConfig+0x2c4>)
 8007f1a:	617b      	str	r3, [r7, #20]
        break;
 8007f1c:	e00c      	b.n	8007f38 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1e:	f7fd ff4f 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 8007f22:	6178      	str	r0, [r7, #20]
        break;
 8007f24:	e008      	b.n	8007f38 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f2a:	617b      	str	r3, [r7, #20]
        break;
 8007f2c:	e004      	b.n	8007f38 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	76bb      	strb	r3, [r7, #26]
        break;
 8007f36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 811a 	beq.w	8008174 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	4a46      	ldr	r2, [pc, #280]	; (8008060 <UART_SetConfig+0x2c8>)
 8007f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f52:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	4413      	add	r3, r2
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d305      	bcc.n	8007f70 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d902      	bls.n	8007f76 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	76bb      	strb	r3, [r7, #26]
 8007f74:	e0fe      	b.n	8008174 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f04f 0100 	mov.w	r1, #0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	4a37      	ldr	r2, [pc, #220]	; (8008060 <UART_SetConfig+0x2c8>)
 8007f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	f7f8 fde3 	bl	8000b58 <__aeabi_uldivmod>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4610      	mov	r0, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	020b      	lsls	r3, r1, #8
 8007fa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fa8:	0202      	lsls	r2, r0, #8
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	6849      	ldr	r1, [r1, #4]
 8007fae:	0849      	lsrs	r1, r1, #1
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	f04f 0100 	mov.w	r1, #0
 8007fb6:	1814      	adds	r4, r2, r0
 8007fb8:	eb43 0501 	adc.w	r5, r3, r1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f7f8 fdc5 	bl	8000b58 <__aeabi_uldivmod>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fdc:	d308      	bcc.n	8007ff0 <UART_SetConfig+0x258>
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe4:	d204      	bcs.n	8007ff0 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	60da      	str	r2, [r3, #12]
 8007fee:	e0c1      	b.n	8008174 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	76bb      	strb	r3, [r7, #26]
 8007ff4:	e0be      	b.n	8008174 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffe:	d16a      	bne.n	80080d6 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008000:	7efb      	ldrb	r3, [r7, #27]
 8008002:	3b01      	subs	r3, #1
 8008004:	2b07      	cmp	r3, #7
 8008006:	d82d      	bhi.n	8008064 <UART_SetConfig+0x2cc>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <UART_SetConfig+0x278>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008031 	.word	0x08008031
 8008014:	08008039 	.word	0x08008039
 8008018:	08008065 	.word	0x08008065
 800801c:	0800803f 	.word	0x0800803f
 8008020:	08008065 	.word	0x08008065
 8008024:	08008065 	.word	0x08008065
 8008028:	08008065 	.word	0x08008065
 800802c:	08008047 	.word	0x08008047
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008030:	f7fd ff5e 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 8008034:	6178      	str	r0, [r7, #20]
        break;
 8008036:	e01a      	b.n	800806e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008038:	4b08      	ldr	r3, [pc, #32]	; (800805c <UART_SetConfig+0x2c4>)
 800803a:	617b      	str	r3, [r7, #20]
        break;
 800803c:	e017      	b.n	800806e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803e:	f7fd febf 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 8008042:	6178      	str	r0, [r7, #20]
        break;
 8008044:	e013      	b.n	800806e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804a:	617b      	str	r3, [r7, #20]
        break;
 800804c:	e00f      	b.n	800806e <UART_SetConfig+0x2d6>
 800804e:	bf00      	nop
 8008050:	cfff69f3 	.word	0xcfff69f3
 8008054:	40008000 	.word	0x40008000
 8008058:	40013800 	.word	0x40013800
 800805c:	00f42400 	.word	0x00f42400
 8008060:	0800b5b0 	.word	0x0800b5b0
      default:
        pclk = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	76bb      	strb	r3, [r7, #26]
        break;
 800806c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d07f      	beq.n	8008174 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	4a48      	ldr	r2, [pc, #288]	; (800819c <UART_SetConfig+0x404>)
 800807a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800807e:	461a      	mov	r2, r3
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	fbb3 f3f2 	udiv	r3, r3, r2
 8008086:	005a      	lsls	r2, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	085b      	lsrs	r3, r3, #1
 800808e:	441a      	add	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	fbb2 f3f3 	udiv	r3, r2, r3
 8008098:	b29b      	uxth	r3, r3
 800809a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d916      	bls.n	80080d0 <UART_SetConfig+0x338>
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a8:	d212      	bcs.n	80080d0 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f023 030f 	bic.w	r3, r3, #15
 80080b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	b29a      	uxth	r2, r3
 80080c0:	89fb      	ldrh	r3, [r7, #14]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	89fa      	ldrh	r2, [r7, #14]
 80080cc:	60da      	str	r2, [r3, #12]
 80080ce:	e051      	b.n	8008174 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	76bb      	strb	r3, [r7, #26]
 80080d4:	e04e      	b.n	8008174 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d6:	7efb      	ldrb	r3, [r7, #27]
 80080d8:	3b01      	subs	r3, #1
 80080da:	2b07      	cmp	r3, #7
 80080dc:	d821      	bhi.n	8008122 <UART_SetConfig+0x38a>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x34c>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008105 	.word	0x08008105
 80080e8:	0800810d 	.word	0x0800810d
 80080ec:	08008123 	.word	0x08008123
 80080f0:	08008113 	.word	0x08008113
 80080f4:	08008123 	.word	0x08008123
 80080f8:	08008123 	.word	0x08008123
 80080fc:	08008123 	.word	0x08008123
 8008100:	0800811b 	.word	0x0800811b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008104:	f7fd fef4 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 8008108:	6178      	str	r0, [r7, #20]
        break;
 800810a:	e00f      	b.n	800812c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800810c:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <UART_SetConfig+0x408>)
 800810e:	617b      	str	r3, [r7, #20]
        break;
 8008110:	e00c      	b.n	800812c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008112:	f7fd fe55 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 8008116:	6178      	str	r0, [r7, #20]
        break;
 8008118:	e008      	b.n	800812c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800811a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800811e:	617b      	str	r3, [r7, #20]
        break;
 8008120:	e004      	b.n	800812c <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	76bb      	strb	r3, [r7, #26]
        break;
 800812a:	bf00      	nop
    }

    if (pclk != 0U)
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d020      	beq.n	8008174 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	4a19      	ldr	r2, [pc, #100]	; (800819c <UART_SetConfig+0x404>)
 8008138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800813c:	461a      	mov	r2, r3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	fbb3 f2f2 	udiv	r2, r3, r2
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	085b      	lsrs	r3, r3, #1
 800814a:	441a      	add	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	fbb2 f3f3 	udiv	r3, r2, r3
 8008154:	b29b      	uxth	r3, r3
 8008156:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b0f      	cmp	r3, #15
 800815c:	d908      	bls.n	8008170 <UART_SetConfig+0x3d8>
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d204      	bcs.n	8008170 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	60da      	str	r2, [r3, #12]
 800816e:	e001      	b.n	8008174 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008190:	7ebb      	ldrb	r3, [r7, #26]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bdb0      	pop	{r4, r5, r7, pc}
 800819a:	bf00      	nop
 800819c:	0800b5b0 	.word	0x0800b5b0
 80081a0:	00f42400 	.word	0x00f42400

080081a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01a      	beq.n	80082ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a2:	d10a      	bne.n	80082ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	605a      	str	r2, [r3, #4]
  }
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082f8:	f7fa fe64 	bl	8002fc4 <HAL_GetTick>
 80082fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b08      	cmp	r3, #8
 800830a:	d10e      	bne.n	800832a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800830c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f82f 	bl	800837e <UART_WaitOnFlagUntilTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e025      	b.n	8008376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b04      	cmp	r3, #4
 8008336:	d10e      	bne.n	8008356 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f819 	bl	800837e <UART_WaitOnFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e00f      	b.n	8008376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2220      	movs	r2, #32
 8008362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	603b      	str	r3, [r7, #0]
 800838a:	4613      	mov	r3, r2
 800838c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800838e:	e062      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008396:	d05e      	beq.n	8008456 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008398:	f7fa fe14 	bl	8002fc4 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d302      	bcc.n	80083ae <UART_WaitOnFlagUntilTimeout+0x30>
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d11d      	bne.n	80083ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e045      	b.n	8008476 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d02e      	beq.n	8008456 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008406:	d126      	bne.n	8008456 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008410:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008420:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e00f      	b.n	8008476 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4013      	ands	r3, r2
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	429a      	cmp	r2, r3
 8008472:	d08d      	beq.n	8008390 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008494:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084a4:	f023 0301 	bic.w	r3, r3, #1
 80084a8:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d107      	bne.n	80084c2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0210 	bic.w	r2, r2, #16
 80084c0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fc33 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008524:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff fc0f 	bl	8007d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800855e:	bf00      	nop
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_UARTEx_DisableFifoMode+0x16>
 8008590:	2302      	movs	r3, #2
 8008592:	e027      	b.n	80085e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2224      	movs	r2, #36	; 0x24
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0201 	bic.w	r2, r2, #1
 80085ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80085c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008604:	2302      	movs	r3, #2
 8008606:	e02d      	b.n	8008664 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2224      	movs	r2, #36	; 0x24
 8008614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0201 	bic.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f84f 	bl	80086e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2220      	movs	r2, #32
 8008656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008680:	2302      	movs	r3, #2
 8008682:	e02d      	b.n	80086e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2224      	movs	r2, #36	; 0x24
 8008690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0201 	bic.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f811 	bl	80086e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d108      	bne.n	800870a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008708:	e031      	b.n	800876e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800870a:	2308      	movs	r3, #8
 800870c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800870e:	2308      	movs	r3, #8
 8008710:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	0e5b      	lsrs	r3, r3, #25
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	0f5b      	lsrs	r3, r3, #29
 800872a:	b2db      	uxtb	r3, r3
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	7b3a      	ldrb	r2, [r7, #12]
 8008736:	4911      	ldr	r1, [pc, #68]	; (800877c <UARTEx_SetNbDataToProcess+0x94>)
 8008738:	5c8a      	ldrb	r2, [r1, r2]
 800873a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800873e:	7b3a      	ldrb	r2, [r7, #12]
 8008740:	490f      	ldr	r1, [pc, #60]	; (8008780 <UARTEx_SetNbDataToProcess+0x98>)
 8008742:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008744:	fb93 f3f2 	sdiv	r3, r3, r2
 8008748:	b29a      	uxth	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	7b7a      	ldrb	r2, [r7, #13]
 8008754:	4909      	ldr	r1, [pc, #36]	; (800877c <UARTEx_SetNbDataToProcess+0x94>)
 8008756:	5c8a      	ldrb	r2, [r1, r2]
 8008758:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800875c:	7b7a      	ldrb	r2, [r7, #13]
 800875e:	4908      	ldr	r1, [pc, #32]	; (8008780 <UARTEx_SetNbDataToProcess+0x98>)
 8008760:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008762:	fb93 f3f2 	sdiv	r3, r3, r2
 8008766:	b29a      	uxth	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800876e:	bf00      	nop
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	0800b5c8 	.word	0x0800b5c8
 8008780:	0800b5d0 	.word	0x0800b5d0

08008784 <_Znwj>:
 8008784:	2801      	cmp	r0, #1
 8008786:	bf38      	it	cc
 8008788:	2001      	movcc	r0, #1
 800878a:	b510      	push	{r4, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	4620      	mov	r0, r4
 8008790:	f000 f844 	bl	800881c <malloc>
 8008794:	b930      	cbnz	r0, 80087a4 <_Znwj+0x20>
 8008796:	f000 f807 	bl	80087a8 <_ZSt15get_new_handlerv>
 800879a:	b908      	cbnz	r0, 80087a0 <_Znwj+0x1c>
 800879c:	f000 f80c 	bl	80087b8 <abort>
 80087a0:	4780      	blx	r0
 80087a2:	e7f4      	b.n	800878e <_Znwj+0xa>
 80087a4:	bd10      	pop	{r4, pc}
	...

080087a8 <_ZSt15get_new_handlerv>:
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <_ZSt15get_new_handlerv+0xc>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	f3bf 8f5b 	dmb	ish
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000278 	.word	0x20000278

080087b8 <abort>:
 80087b8:	b508      	push	{r3, lr}
 80087ba:	2006      	movs	r0, #6
 80087bc:	f000 fe18 	bl	80093f0 <raise>
 80087c0:	2001      	movs	r0, #1
 80087c2:	f7fa f9a3 	bl	8002b0c <_exit>
	...

080087c8 <__errno>:
 80087c8:	4b01      	ldr	r3, [pc, #4]	; (80087d0 <__errno+0x8>)
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000034 	.word	0x20000034

080087d4 <__libc_init_array>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4d0d      	ldr	r5, [pc, #52]	; (800880c <__libc_init_array+0x38>)
 80087d8:	4c0d      	ldr	r4, [pc, #52]	; (8008810 <__libc_init_array+0x3c>)
 80087da:	1b64      	subs	r4, r4, r5
 80087dc:	10a4      	asrs	r4, r4, #2
 80087de:	2600      	movs	r6, #0
 80087e0:	42a6      	cmp	r6, r4
 80087e2:	d109      	bne.n	80087f8 <__libc_init_array+0x24>
 80087e4:	4d0b      	ldr	r5, [pc, #44]	; (8008814 <__libc_init_array+0x40>)
 80087e6:	4c0c      	ldr	r4, [pc, #48]	; (8008818 <__libc_init_array+0x44>)
 80087e8:	f002 fd76 	bl	800b2d8 <_init>
 80087ec:	1b64      	subs	r4, r4, r5
 80087ee:	10a4      	asrs	r4, r4, #2
 80087f0:	2600      	movs	r6, #0
 80087f2:	42a6      	cmp	r6, r4
 80087f4:	d105      	bne.n	8008802 <__libc_init_array+0x2e>
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fc:	4798      	blx	r3
 80087fe:	3601      	adds	r6, #1
 8008800:	e7ee      	b.n	80087e0 <__libc_init_array+0xc>
 8008802:	f855 3b04 	ldr.w	r3, [r5], #4
 8008806:	4798      	blx	r3
 8008808:	3601      	adds	r6, #1
 800880a:	e7f2      	b.n	80087f2 <__libc_init_array+0x1e>
 800880c:	0800b9c4 	.word	0x0800b9c4
 8008810:	0800b9c4 	.word	0x0800b9c4
 8008814:	0800b9c4 	.word	0x0800b9c4
 8008818:	0800b9cc 	.word	0x0800b9cc

0800881c <malloc>:
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <malloc+0xc>)
 800881e:	4601      	mov	r1, r0
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	f000 b85b 	b.w	80088dc <_malloc_r>
 8008826:	bf00      	nop
 8008828:	20000034 	.word	0x20000034

0800882c <memset>:
 800882c:	4402      	add	r2, r0
 800882e:	4603      	mov	r3, r0
 8008830:	4293      	cmp	r3, r2
 8008832:	d100      	bne.n	8008836 <memset+0xa>
 8008834:	4770      	bx	lr
 8008836:	f803 1b01 	strb.w	r1, [r3], #1
 800883a:	e7f9      	b.n	8008830 <memset+0x4>

0800883c <_free_r>:
 800883c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800883e:	2900      	cmp	r1, #0
 8008840:	d048      	beq.n	80088d4 <_free_r+0x98>
 8008842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008846:	9001      	str	r0, [sp, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f1a1 0404 	sub.w	r4, r1, #4
 800884e:	bfb8      	it	lt
 8008850:	18e4      	addlt	r4, r4, r3
 8008852:	f001 ff53 	bl	800a6fc <__malloc_lock>
 8008856:	4a20      	ldr	r2, [pc, #128]	; (80088d8 <_free_r+0x9c>)
 8008858:	9801      	ldr	r0, [sp, #4]
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	4615      	mov	r5, r2
 800885e:	b933      	cbnz	r3, 800886e <_free_r+0x32>
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	6014      	str	r4, [r2, #0]
 8008864:	b003      	add	sp, #12
 8008866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800886a:	f001 bf4d 	b.w	800a708 <__malloc_unlock>
 800886e:	42a3      	cmp	r3, r4
 8008870:	d90b      	bls.n	800888a <_free_r+0x4e>
 8008872:	6821      	ldr	r1, [r4, #0]
 8008874:	1862      	adds	r2, r4, r1
 8008876:	4293      	cmp	r3, r2
 8008878:	bf04      	itt	eq
 800887a:	681a      	ldreq	r2, [r3, #0]
 800887c:	685b      	ldreq	r3, [r3, #4]
 800887e:	6063      	str	r3, [r4, #4]
 8008880:	bf04      	itt	eq
 8008882:	1852      	addeq	r2, r2, r1
 8008884:	6022      	streq	r2, [r4, #0]
 8008886:	602c      	str	r4, [r5, #0]
 8008888:	e7ec      	b.n	8008864 <_free_r+0x28>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x58>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x4e>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1855      	adds	r5, r2, r1
 8008898:	42a5      	cmp	r5, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x78>
 800889c:	6824      	ldr	r4, [r4, #0]
 800889e:	4421      	add	r1, r4
 80088a0:	1854      	adds	r4, r2, r1
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1dd      	bne.n	8008864 <_free_r+0x28>
 80088a8:	681c      	ldr	r4, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6053      	str	r3, [r2, #4]
 80088ae:	4421      	add	r1, r4
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	e7d7      	b.n	8008864 <_free_r+0x28>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x80>
 80088b6:	230c      	movs	r3, #12
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	e7d3      	b.n	8008864 <_free_r+0x28>
 80088bc:	6825      	ldr	r5, [r4, #0]
 80088be:	1961      	adds	r1, r4, r5
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf04      	itt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	6063      	str	r3, [r4, #4]
 80088ca:	bf04      	itt	eq
 80088cc:	1949      	addeq	r1, r1, r5
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	6054      	str	r4, [r2, #4]
 80088d2:	e7c7      	b.n	8008864 <_free_r+0x28>
 80088d4:	b003      	add	sp, #12
 80088d6:	bd30      	pop	{r4, r5, pc}
 80088d8:	2000027c 	.word	0x2000027c

080088dc <_malloc_r>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	1ccd      	adds	r5, r1, #3
 80088e0:	f025 0503 	bic.w	r5, r5, #3
 80088e4:	3508      	adds	r5, #8
 80088e6:	2d0c      	cmp	r5, #12
 80088e8:	bf38      	it	cc
 80088ea:	250c      	movcc	r5, #12
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	4606      	mov	r6, r0
 80088f0:	db01      	blt.n	80088f6 <_malloc_r+0x1a>
 80088f2:	42a9      	cmp	r1, r5
 80088f4:	d903      	bls.n	80088fe <_malloc_r+0x22>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	2000      	movs	r0, #0
 80088fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fe:	f001 fefd 	bl	800a6fc <__malloc_lock>
 8008902:	4921      	ldr	r1, [pc, #132]	; (8008988 <_malloc_r+0xac>)
 8008904:	680a      	ldr	r2, [r1, #0]
 8008906:	4614      	mov	r4, r2
 8008908:	b99c      	cbnz	r4, 8008932 <_malloc_r+0x56>
 800890a:	4f20      	ldr	r7, [pc, #128]	; (800898c <_malloc_r+0xb0>)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	b923      	cbnz	r3, 800891a <_malloc_r+0x3e>
 8008910:	4621      	mov	r1, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f000 fd34 	bl	8009380 <_sbrk_r>
 8008918:	6038      	str	r0, [r7, #0]
 800891a:	4629      	mov	r1, r5
 800891c:	4630      	mov	r0, r6
 800891e:	f000 fd2f 	bl	8009380 <_sbrk_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d123      	bne.n	800896e <_malloc_r+0x92>
 8008926:	230c      	movs	r3, #12
 8008928:	6033      	str	r3, [r6, #0]
 800892a:	4630      	mov	r0, r6
 800892c:	f001 feec 	bl	800a708 <__malloc_unlock>
 8008930:	e7e3      	b.n	80088fa <_malloc_r+0x1e>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	1b5b      	subs	r3, r3, r5
 8008936:	d417      	bmi.n	8008968 <_malloc_r+0x8c>
 8008938:	2b0b      	cmp	r3, #11
 800893a:	d903      	bls.n	8008944 <_malloc_r+0x68>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	441c      	add	r4, r3
 8008940:	6025      	str	r5, [r4, #0]
 8008942:	e004      	b.n	800894e <_malloc_r+0x72>
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	42a2      	cmp	r2, r4
 8008948:	bf0c      	ite	eq
 800894a:	600b      	streq	r3, [r1, #0]
 800894c:	6053      	strne	r3, [r2, #4]
 800894e:	4630      	mov	r0, r6
 8008950:	f001 feda 	bl	800a708 <__malloc_unlock>
 8008954:	f104 000b 	add.w	r0, r4, #11
 8008958:	1d23      	adds	r3, r4, #4
 800895a:	f020 0007 	bic.w	r0, r0, #7
 800895e:	1ac2      	subs	r2, r0, r3
 8008960:	d0cc      	beq.n	80088fc <_malloc_r+0x20>
 8008962:	1a1b      	subs	r3, r3, r0
 8008964:	50a3      	str	r3, [r4, r2]
 8008966:	e7c9      	b.n	80088fc <_malloc_r+0x20>
 8008968:	4622      	mov	r2, r4
 800896a:	6864      	ldr	r4, [r4, #4]
 800896c:	e7cc      	b.n	8008908 <_malloc_r+0x2c>
 800896e:	1cc4      	adds	r4, r0, #3
 8008970:	f024 0403 	bic.w	r4, r4, #3
 8008974:	42a0      	cmp	r0, r4
 8008976:	d0e3      	beq.n	8008940 <_malloc_r+0x64>
 8008978:	1a21      	subs	r1, r4, r0
 800897a:	4630      	mov	r0, r6
 800897c:	f000 fd00 	bl	8009380 <_sbrk_r>
 8008980:	3001      	adds	r0, #1
 8008982:	d1dd      	bne.n	8008940 <_malloc_r+0x64>
 8008984:	e7cf      	b.n	8008926 <_malloc_r+0x4a>
 8008986:	bf00      	nop
 8008988:	2000027c 	.word	0x2000027c
 800898c:	20000280 	.word	0x20000280

08008990 <__cvt>:
 8008990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	ec55 4b10 	vmov	r4, r5, d0
 8008998:	2d00      	cmp	r5, #0
 800899a:	460e      	mov	r6, r1
 800899c:	4619      	mov	r1, r3
 800899e:	462b      	mov	r3, r5
 80089a0:	bfbb      	ittet	lt
 80089a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089a6:	461d      	movlt	r5, r3
 80089a8:	2300      	movge	r3, #0
 80089aa:	232d      	movlt	r3, #45	; 0x2d
 80089ac:	700b      	strb	r3, [r1, #0]
 80089ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089b4:	4691      	mov	r9, r2
 80089b6:	f023 0820 	bic.w	r8, r3, #32
 80089ba:	bfbc      	itt	lt
 80089bc:	4622      	movlt	r2, r4
 80089be:	4614      	movlt	r4, r2
 80089c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089c4:	d005      	beq.n	80089d2 <__cvt+0x42>
 80089c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80089ca:	d100      	bne.n	80089ce <__cvt+0x3e>
 80089cc:	3601      	adds	r6, #1
 80089ce:	2102      	movs	r1, #2
 80089d0:	e000      	b.n	80089d4 <__cvt+0x44>
 80089d2:	2103      	movs	r1, #3
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	ab02      	add	r3, sp, #8
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	ec45 4b10 	vmov	d0, r4, r5
 80089e0:	4653      	mov	r3, sl
 80089e2:	4632      	mov	r2, r6
 80089e4:	f000 fe6c 	bl	80096c0 <_dtoa_r>
 80089e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80089ec:	4607      	mov	r7, r0
 80089ee:	d102      	bne.n	80089f6 <__cvt+0x66>
 80089f0:	f019 0f01 	tst.w	r9, #1
 80089f4:	d022      	beq.n	8008a3c <__cvt+0xac>
 80089f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089fa:	eb07 0906 	add.w	r9, r7, r6
 80089fe:	d110      	bne.n	8008a22 <__cvt+0x92>
 8008a00:	783b      	ldrb	r3, [r7, #0]
 8008a02:	2b30      	cmp	r3, #48	; 0x30
 8008a04:	d10a      	bne.n	8008a1c <__cvt+0x8c>
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7f8 f833 	bl	8000a78 <__aeabi_dcmpeq>
 8008a12:	b918      	cbnz	r0, 8008a1c <__cvt+0x8c>
 8008a14:	f1c6 0601 	rsb	r6, r6, #1
 8008a18:	f8ca 6000 	str.w	r6, [sl]
 8008a1c:	f8da 3000 	ldr.w	r3, [sl]
 8008a20:	4499      	add	r9, r3
 8008a22:	2200      	movs	r2, #0
 8008a24:	2300      	movs	r3, #0
 8008a26:	4620      	mov	r0, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7f8 f825 	bl	8000a78 <__aeabi_dcmpeq>
 8008a2e:	b108      	cbz	r0, 8008a34 <__cvt+0xa4>
 8008a30:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a34:	2230      	movs	r2, #48	; 0x30
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	454b      	cmp	r3, r9
 8008a3a:	d307      	bcc.n	8008a4c <__cvt+0xbc>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a40:	1bdb      	subs	r3, r3, r7
 8008a42:	4638      	mov	r0, r7
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	b004      	add	sp, #16
 8008a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4c:	1c59      	adds	r1, r3, #1
 8008a4e:	9103      	str	r1, [sp, #12]
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	e7f0      	b.n	8008a36 <__cvt+0xa6>

08008a54 <__exponent>:
 8008a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a56:	4603      	mov	r3, r0
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	bfb8      	it	lt
 8008a5c:	4249      	neglt	r1, r1
 8008a5e:	f803 2b02 	strb.w	r2, [r3], #2
 8008a62:	bfb4      	ite	lt
 8008a64:	222d      	movlt	r2, #45	; 0x2d
 8008a66:	222b      	movge	r2, #43	; 0x2b
 8008a68:	2909      	cmp	r1, #9
 8008a6a:	7042      	strb	r2, [r0, #1]
 8008a6c:	dd2a      	ble.n	8008ac4 <__exponent+0x70>
 8008a6e:	f10d 0407 	add.w	r4, sp, #7
 8008a72:	46a4      	mov	ip, r4
 8008a74:	270a      	movs	r7, #10
 8008a76:	46a6      	mov	lr, r4
 8008a78:	460a      	mov	r2, r1
 8008a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a7e:	fb07 1516 	mls	r5, r7, r6, r1
 8008a82:	3530      	adds	r5, #48	; 0x30
 8008a84:	2a63      	cmp	r2, #99	; 0x63
 8008a86:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008a8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a8e:	4631      	mov	r1, r6
 8008a90:	dcf1      	bgt.n	8008a76 <__exponent+0x22>
 8008a92:	3130      	adds	r1, #48	; 0x30
 8008a94:	f1ae 0502 	sub.w	r5, lr, #2
 8008a98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a9c:	1c44      	adds	r4, r0, #1
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4561      	cmp	r1, ip
 8008aa2:	d30a      	bcc.n	8008aba <__exponent+0x66>
 8008aa4:	f10d 0209 	add.w	r2, sp, #9
 8008aa8:	eba2 020e 	sub.w	r2, r2, lr
 8008aac:	4565      	cmp	r5, ip
 8008aae:	bf88      	it	hi
 8008ab0:	2200      	movhi	r2, #0
 8008ab2:	4413      	add	r3, r2
 8008ab4:	1a18      	subs	r0, r3, r0
 8008ab6:	b003      	add	sp, #12
 8008ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008abe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ac2:	e7ed      	b.n	8008aa0 <__exponent+0x4c>
 8008ac4:	2330      	movs	r3, #48	; 0x30
 8008ac6:	3130      	adds	r1, #48	; 0x30
 8008ac8:	7083      	strb	r3, [r0, #2]
 8008aca:	70c1      	strb	r1, [r0, #3]
 8008acc:	1d03      	adds	r3, r0, #4
 8008ace:	e7f1      	b.n	8008ab4 <__exponent+0x60>

08008ad0 <_printf_float>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	ed2d 8b02 	vpush	{d8}
 8008ad8:	b08d      	sub	sp, #52	; 0x34
 8008ada:	460c      	mov	r4, r1
 8008adc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ae0:	4616      	mov	r6, r2
 8008ae2:	461f      	mov	r7, r3
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	f001 fd8f 	bl	800a608 <_localeconv_r>
 8008aea:	f8d0 a000 	ldr.w	sl, [r0]
 8008aee:	4650      	mov	r0, sl
 8008af0:	f7f7 fb46 	bl	8000180 <strlen>
 8008af4:	2300      	movs	r3, #0
 8008af6:	930a      	str	r3, [sp, #40]	; 0x28
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	9305      	str	r3, [sp, #20]
 8008afc:	f8d8 3000 	ldr.w	r3, [r8]
 8008b00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b04:	3307      	adds	r3, #7
 8008b06:	f023 0307 	bic.w	r3, r3, #7
 8008b0a:	f103 0208 	add.w	r2, r3, #8
 8008b0e:	f8c8 2000 	str.w	r2, [r8]
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b28:	ee08 0a10 	vmov	s16, r0
 8008b2c:	4b9f      	ldr	r3, [pc, #636]	; (8008dac <_printf_float+0x2dc>)
 8008b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b36:	f7f7 ffd1 	bl	8000adc <__aeabi_dcmpun>
 8008b3a:	bb88      	cbnz	r0, 8008ba0 <_printf_float+0xd0>
 8008b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b40:	4b9a      	ldr	r3, [pc, #616]	; (8008dac <_printf_float+0x2dc>)
 8008b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b46:	f7f7 ffab 	bl	8000aa0 <__aeabi_dcmple>
 8008b4a:	bb48      	cbnz	r0, 8008ba0 <_printf_float+0xd0>
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4640      	mov	r0, r8
 8008b52:	4649      	mov	r1, r9
 8008b54:	f7f7 ff9a 	bl	8000a8c <__aeabi_dcmplt>
 8008b58:	b110      	cbz	r0, 8008b60 <_printf_float+0x90>
 8008b5a:	232d      	movs	r3, #45	; 0x2d
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b60:	4b93      	ldr	r3, [pc, #588]	; (8008db0 <_printf_float+0x2e0>)
 8008b62:	4894      	ldr	r0, [pc, #592]	; (8008db4 <_printf_float+0x2e4>)
 8008b64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b68:	bf94      	ite	ls
 8008b6a:	4698      	movls	r8, r3
 8008b6c:	4680      	movhi	r8, r0
 8008b6e:	2303      	movs	r3, #3
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	f023 0204 	bic.w	r2, r3, #4
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	f04f 0900 	mov.w	r9, #0
 8008b7e:	9700      	str	r7, [sp, #0]
 8008b80:	4633      	mov	r3, r6
 8008b82:	aa0b      	add	r2, sp, #44	; 0x2c
 8008b84:	4621      	mov	r1, r4
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 f9d8 	bl	8008f3c <_printf_common>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f040 8090 	bne.w	8008cb2 <_printf_float+0x1e2>
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b96:	b00d      	add	sp, #52	; 0x34
 8008b98:	ecbd 8b02 	vpop	{d8}
 8008b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 ff98 	bl	8000adc <__aeabi_dcmpun>
 8008bac:	b140      	cbz	r0, 8008bc0 <_printf_float+0xf0>
 8008bae:	464b      	mov	r3, r9
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfbc      	itt	lt
 8008bb4:	232d      	movlt	r3, #45	; 0x2d
 8008bb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bba:	487f      	ldr	r0, [pc, #508]	; (8008db8 <_printf_float+0x2e8>)
 8008bbc:	4b7f      	ldr	r3, [pc, #508]	; (8008dbc <_printf_float+0x2ec>)
 8008bbe:	e7d1      	b.n	8008b64 <_printf_float+0x94>
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008bc6:	9206      	str	r2, [sp, #24]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	d13f      	bne.n	8008c4c <_printf_float+0x17c>
 8008bcc:	2306      	movs	r3, #6
 8008bce:	6063      	str	r3, [r4, #4]
 8008bd0:	9b05      	ldr	r3, [sp, #20]
 8008bd2:	6861      	ldr	r1, [r4, #4]
 8008bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008bd8:	2300      	movs	r3, #0
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	ab0a      	add	r3, sp, #40	; 0x28
 8008bde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008be2:	ab09      	add	r3, sp, #36	; 0x24
 8008be4:	ec49 8b10 	vmov	d0, r8, r9
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7ff fecd 	bl	8008990 <__cvt>
 8008bf6:	9b06      	ldr	r3, [sp, #24]
 8008bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bfa:	2b47      	cmp	r3, #71	; 0x47
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	d108      	bne.n	8008c12 <_printf_float+0x142>
 8008c00:	1cc8      	adds	r0, r1, #3
 8008c02:	db02      	blt.n	8008c0a <_printf_float+0x13a>
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	4299      	cmp	r1, r3
 8008c08:	dd41      	ble.n	8008c8e <_printf_float+0x1be>
 8008c0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c0e:	fa5f fb8b 	uxtb.w	fp, fp
 8008c12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c16:	d820      	bhi.n	8008c5a <_printf_float+0x18a>
 8008c18:	3901      	subs	r1, #1
 8008c1a:	465a      	mov	r2, fp
 8008c1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c20:	9109      	str	r1, [sp, #36]	; 0x24
 8008c22:	f7ff ff17 	bl	8008a54 <__exponent>
 8008c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c28:	1813      	adds	r3, r2, r0
 8008c2a:	2a01      	cmp	r2, #1
 8008c2c:	4681      	mov	r9, r0
 8008c2e:	6123      	str	r3, [r4, #16]
 8008c30:	dc02      	bgt.n	8008c38 <_printf_float+0x168>
 8008c32:	6822      	ldr	r2, [r4, #0]
 8008c34:	07d2      	lsls	r2, r2, #31
 8008c36:	d501      	bpl.n	8008c3c <_printf_float+0x16c>
 8008c38:	3301      	adds	r3, #1
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d09c      	beq.n	8008b7e <_printf_float+0xae>
 8008c44:	232d      	movs	r3, #45	; 0x2d
 8008c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4a:	e798      	b.n	8008b7e <_printf_float+0xae>
 8008c4c:	9a06      	ldr	r2, [sp, #24]
 8008c4e:	2a47      	cmp	r2, #71	; 0x47
 8008c50:	d1be      	bne.n	8008bd0 <_printf_float+0x100>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1bc      	bne.n	8008bd0 <_printf_float+0x100>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e7b9      	b.n	8008bce <_printf_float+0xfe>
 8008c5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c5e:	d118      	bne.n	8008c92 <_printf_float+0x1c2>
 8008c60:	2900      	cmp	r1, #0
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	dd0b      	ble.n	8008c7e <_printf_float+0x1ae>
 8008c66:	6121      	str	r1, [r4, #16]
 8008c68:	b913      	cbnz	r3, 8008c70 <_printf_float+0x1a0>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	07d0      	lsls	r0, r2, #31
 8008c6e:	d502      	bpl.n	8008c76 <_printf_float+0x1a6>
 8008c70:	3301      	adds	r3, #1
 8008c72:	440b      	add	r3, r1
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c78:	f04f 0900 	mov.w	r9, #0
 8008c7c:	e7de      	b.n	8008c3c <_printf_float+0x16c>
 8008c7e:	b913      	cbnz	r3, 8008c86 <_printf_float+0x1b6>
 8008c80:	6822      	ldr	r2, [r4, #0]
 8008c82:	07d2      	lsls	r2, r2, #31
 8008c84:	d501      	bpl.n	8008c8a <_printf_float+0x1ba>
 8008c86:	3302      	adds	r3, #2
 8008c88:	e7f4      	b.n	8008c74 <_printf_float+0x1a4>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e7f2      	b.n	8008c74 <_printf_float+0x1a4>
 8008c8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c94:	4299      	cmp	r1, r3
 8008c96:	db05      	blt.n	8008ca4 <_printf_float+0x1d4>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	6121      	str	r1, [r4, #16]
 8008c9c:	07d8      	lsls	r0, r3, #31
 8008c9e:	d5ea      	bpl.n	8008c76 <_printf_float+0x1a6>
 8008ca0:	1c4b      	adds	r3, r1, #1
 8008ca2:	e7e7      	b.n	8008c74 <_printf_float+0x1a4>
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	bfd4      	ite	le
 8008ca8:	f1c1 0202 	rsble	r2, r1, #2
 8008cac:	2201      	movgt	r2, #1
 8008cae:	4413      	add	r3, r2
 8008cb0:	e7e0      	b.n	8008c74 <_printf_float+0x1a4>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	055a      	lsls	r2, r3, #21
 8008cb6:	d407      	bmi.n	8008cc8 <_printf_float+0x1f8>
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	4642      	mov	r2, r8
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d12c      	bne.n	8008d20 <_printf_float+0x250>
 8008cc6:	e764      	b.n	8008b92 <_printf_float+0xc2>
 8008cc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ccc:	f240 80e0 	bls.w	8008e90 <_printf_float+0x3c0>
 8008cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f7f7 fece 	bl	8000a78 <__aeabi_dcmpeq>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d034      	beq.n	8008d4a <_printf_float+0x27a>
 8008ce0:	4a37      	ldr	r2, [pc, #220]	; (8008dc0 <_printf_float+0x2f0>)
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b8      	blx	r7
 8008cea:	3001      	adds	r0, #1
 8008cec:	f43f af51 	beq.w	8008b92 <_printf_float+0xc2>
 8008cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	db02      	blt.n	8008cfe <_printf_float+0x22e>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	07d8      	lsls	r0, r3, #31
 8008cfc:	d510      	bpl.n	8008d20 <_printf_float+0x250>
 8008cfe:	ee18 3a10 	vmov	r3, s16
 8008d02:	4652      	mov	r2, sl
 8008d04:	4631      	mov	r1, r6
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b8      	blx	r7
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	f43f af41 	beq.w	8008b92 <_printf_float+0xc2>
 8008d10:	f04f 0800 	mov.w	r8, #0
 8008d14:	f104 091a 	add.w	r9, r4, #26
 8008d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	4543      	cmp	r3, r8
 8008d1e:	dc09      	bgt.n	8008d34 <_printf_float+0x264>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	079b      	lsls	r3, r3, #30
 8008d24:	f100 8105 	bmi.w	8008f32 <_printf_float+0x462>
 8008d28:	68e0      	ldr	r0, [r4, #12]
 8008d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d2c:	4298      	cmp	r0, r3
 8008d2e:	bfb8      	it	lt
 8008d30:	4618      	movlt	r0, r3
 8008d32:	e730      	b.n	8008b96 <_printf_float+0xc6>
 8008d34:	2301      	movs	r3, #1
 8008d36:	464a      	mov	r2, r9
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f43f af27 	beq.w	8008b92 <_printf_float+0xc2>
 8008d44:	f108 0801 	add.w	r8, r8, #1
 8008d48:	e7e6      	b.n	8008d18 <_printf_float+0x248>
 8008d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dc39      	bgt.n	8008dc4 <_printf_float+0x2f4>
 8008d50:	4a1b      	ldr	r2, [pc, #108]	; (8008dc0 <_printf_float+0x2f0>)
 8008d52:	2301      	movs	r3, #1
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f af19 	beq.w	8008b92 <_printf_float+0xc2>
 8008d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d64:	4313      	orrs	r3, r2
 8008d66:	d102      	bne.n	8008d6e <_printf_float+0x29e>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	07d9      	lsls	r1, r3, #31
 8008d6c:	d5d8      	bpl.n	8008d20 <_printf_float+0x250>
 8008d6e:	ee18 3a10 	vmov	r3, s16
 8008d72:	4652      	mov	r2, sl
 8008d74:	4631      	mov	r1, r6
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f43f af09 	beq.w	8008b92 <_printf_float+0xc2>
 8008d80:	f04f 0900 	mov.w	r9, #0
 8008d84:	f104 0a1a 	add.w	sl, r4, #26
 8008d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8a:	425b      	negs	r3, r3
 8008d8c:	454b      	cmp	r3, r9
 8008d8e:	dc01      	bgt.n	8008d94 <_printf_float+0x2c4>
 8008d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d92:	e792      	b.n	8008cba <_printf_float+0x1ea>
 8008d94:	2301      	movs	r3, #1
 8008d96:	4652      	mov	r2, sl
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f aef7 	beq.w	8008b92 <_printf_float+0xc2>
 8008da4:	f109 0901 	add.w	r9, r9, #1
 8008da8:	e7ee      	b.n	8008d88 <_printf_float+0x2b8>
 8008daa:	bf00      	nop
 8008dac:	7fefffff 	.word	0x7fefffff
 8008db0:	0800b5dc 	.word	0x0800b5dc
 8008db4:	0800b5e0 	.word	0x0800b5e0
 8008db8:	0800b5e8 	.word	0x0800b5e8
 8008dbc:	0800b5e4 	.word	0x0800b5e4
 8008dc0:	0800b5ec 	.word	0x0800b5ec
 8008dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	bfa8      	it	ge
 8008dcc:	461a      	movge	r2, r3
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	4691      	mov	r9, r2
 8008dd2:	dc37      	bgt.n	8008e44 <_printf_float+0x374>
 8008dd4:	f04f 0b00 	mov.w	fp, #0
 8008dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ddc:	f104 021a 	add.w	r2, r4, #26
 8008de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	eba3 0309 	sub.w	r3, r3, r9
 8008de8:	455b      	cmp	r3, fp
 8008dea:	dc33      	bgt.n	8008e54 <_printf_float+0x384>
 8008dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008df0:	429a      	cmp	r2, r3
 8008df2:	db3b      	blt.n	8008e6c <_printf_float+0x39c>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	07da      	lsls	r2, r3, #31
 8008df8:	d438      	bmi.n	8008e6c <_printf_float+0x39c>
 8008dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dfc:	9b05      	ldr	r3, [sp, #20]
 8008dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	eba2 0901 	sub.w	r9, r2, r1
 8008e06:	4599      	cmp	r9, r3
 8008e08:	bfa8      	it	ge
 8008e0a:	4699      	movge	r9, r3
 8008e0c:	f1b9 0f00 	cmp.w	r9, #0
 8008e10:	dc35      	bgt.n	8008e7e <_printf_float+0x3ae>
 8008e12:	f04f 0800 	mov.w	r8, #0
 8008e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e1a:	f104 0a1a 	add.w	sl, r4, #26
 8008e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	eba3 0309 	sub.w	r3, r3, r9
 8008e28:	4543      	cmp	r3, r8
 8008e2a:	f77f af79 	ble.w	8008d20 <_printf_float+0x250>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4652      	mov	r2, sl
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f43f aeaa 	beq.w	8008b92 <_printf_float+0xc2>
 8008e3e:	f108 0801 	add.w	r8, r8, #1
 8008e42:	e7ec      	b.n	8008e1e <_printf_float+0x34e>
 8008e44:	4613      	mov	r3, r2
 8008e46:	4631      	mov	r1, r6
 8008e48:	4642      	mov	r2, r8
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d1c0      	bne.n	8008dd4 <_printf_float+0x304>
 8008e52:	e69e      	b.n	8008b92 <_printf_float+0xc2>
 8008e54:	2301      	movs	r3, #1
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	9205      	str	r2, [sp, #20]
 8008e5c:	47b8      	blx	r7
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f43f ae97 	beq.w	8008b92 <_printf_float+0xc2>
 8008e64:	9a05      	ldr	r2, [sp, #20]
 8008e66:	f10b 0b01 	add.w	fp, fp, #1
 8008e6a:	e7b9      	b.n	8008de0 <_printf_float+0x310>
 8008e6c:	ee18 3a10 	vmov	r3, s16
 8008e70:	4652      	mov	r2, sl
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d1be      	bne.n	8008dfa <_printf_float+0x32a>
 8008e7c:	e689      	b.n	8008b92 <_printf_float+0xc2>
 8008e7e:	9a05      	ldr	r2, [sp, #20]
 8008e80:	464b      	mov	r3, r9
 8008e82:	4442      	add	r2, r8
 8008e84:	4631      	mov	r1, r6
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b8      	blx	r7
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d1c1      	bne.n	8008e12 <_printf_float+0x342>
 8008e8e:	e680      	b.n	8008b92 <_printf_float+0xc2>
 8008e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e92:	2a01      	cmp	r2, #1
 8008e94:	dc01      	bgt.n	8008e9a <_printf_float+0x3ca>
 8008e96:	07db      	lsls	r3, r3, #31
 8008e98:	d538      	bpl.n	8008f0c <_printf_float+0x43c>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b8      	blx	r7
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f43f ae74 	beq.w	8008b92 <_printf_float+0xc2>
 8008eaa:	ee18 3a10 	vmov	r3, s16
 8008eae:	4652      	mov	r2, sl
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f ae6b 	beq.w	8008b92 <_printf_float+0xc2>
 8008ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f7f7 fdd8 	bl	8000a78 <__aeabi_dcmpeq>
 8008ec8:	b9d8      	cbnz	r0, 8008f02 <_printf_float+0x432>
 8008eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ecc:	f108 0201 	add.w	r2, r8, #1
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b8      	blx	r7
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d10e      	bne.n	8008efa <_printf_float+0x42a>
 8008edc:	e659      	b.n	8008b92 <_printf_float+0xc2>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b8      	blx	r7
 8008ee8:	3001      	adds	r0, #1
 8008eea:	f43f ae52 	beq.w	8008b92 <_printf_float+0xc2>
 8008eee:	f108 0801 	add.w	r8, r8, #1
 8008ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	4543      	cmp	r3, r8
 8008ef8:	dcf1      	bgt.n	8008ede <_printf_float+0x40e>
 8008efa:	464b      	mov	r3, r9
 8008efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f00:	e6dc      	b.n	8008cbc <_printf_float+0x1ec>
 8008f02:	f04f 0800 	mov.w	r8, #0
 8008f06:	f104 0a1a 	add.w	sl, r4, #26
 8008f0a:	e7f2      	b.n	8008ef2 <_printf_float+0x422>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	4642      	mov	r2, r8
 8008f10:	e7df      	b.n	8008ed2 <_printf_float+0x402>
 8008f12:	2301      	movs	r3, #1
 8008f14:	464a      	mov	r2, r9
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	f43f ae38 	beq.w	8008b92 <_printf_float+0xc2>
 8008f22:	f108 0801 	add.w	r8, r8, #1
 8008f26:	68e3      	ldr	r3, [r4, #12]
 8008f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f2a:	1a5b      	subs	r3, r3, r1
 8008f2c:	4543      	cmp	r3, r8
 8008f2e:	dcf0      	bgt.n	8008f12 <_printf_float+0x442>
 8008f30:	e6fa      	b.n	8008d28 <_printf_float+0x258>
 8008f32:	f04f 0800 	mov.w	r8, #0
 8008f36:	f104 0919 	add.w	r9, r4, #25
 8008f3a:	e7f4      	b.n	8008f26 <_printf_float+0x456>

08008f3c <_printf_common>:
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	4616      	mov	r6, r2
 8008f42:	4699      	mov	r9, r3
 8008f44:	688a      	ldr	r2, [r1, #8]
 8008f46:	690b      	ldr	r3, [r1, #16]
 8008f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	bfb8      	it	lt
 8008f50:	4613      	movlt	r3, r2
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f58:	4607      	mov	r7, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b10a      	cbz	r2, 8008f62 <_printf_common+0x26>
 8008f5e:	3301      	adds	r3, #1
 8008f60:	6033      	str	r3, [r6, #0]
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	0699      	lsls	r1, r3, #26
 8008f66:	bf42      	ittt	mi
 8008f68:	6833      	ldrmi	r3, [r6, #0]
 8008f6a:	3302      	addmi	r3, #2
 8008f6c:	6033      	strmi	r3, [r6, #0]
 8008f6e:	6825      	ldr	r5, [r4, #0]
 8008f70:	f015 0506 	ands.w	r5, r5, #6
 8008f74:	d106      	bne.n	8008f84 <_printf_common+0x48>
 8008f76:	f104 0a19 	add.w	sl, r4, #25
 8008f7a:	68e3      	ldr	r3, [r4, #12]
 8008f7c:	6832      	ldr	r2, [r6, #0]
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	dc26      	bgt.n	8008fd2 <_printf_common+0x96>
 8008f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f88:	1e13      	subs	r3, r2, #0
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	bf18      	it	ne
 8008f8e:	2301      	movne	r3, #1
 8008f90:	0692      	lsls	r2, r2, #26
 8008f92:	d42b      	bmi.n	8008fec <_printf_common+0xb0>
 8008f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	47c0      	blx	r8
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d01e      	beq.n	8008fe0 <_printf_common+0xa4>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	68e5      	ldr	r5, [r4, #12]
 8008fa6:	6832      	ldr	r2, [r6, #0]
 8008fa8:	f003 0306 	and.w	r3, r3, #6
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	bf08      	it	eq
 8008fb0:	1aad      	subeq	r5, r5, r2
 8008fb2:	68a3      	ldr	r3, [r4, #8]
 8008fb4:	6922      	ldr	r2, [r4, #16]
 8008fb6:	bf0c      	ite	eq
 8008fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fbc:	2500      	movne	r5, #0
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	bfc4      	itt	gt
 8008fc2:	1a9b      	subgt	r3, r3, r2
 8008fc4:	18ed      	addgt	r5, r5, r3
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	341a      	adds	r4, #26
 8008fca:	42b5      	cmp	r5, r6
 8008fcc:	d11a      	bne.n	8009004 <_printf_common+0xc8>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e008      	b.n	8008fe4 <_printf_common+0xa8>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	4638      	mov	r0, r7
 8008fda:	47c0      	blx	r8
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d103      	bne.n	8008fe8 <_printf_common+0xac>
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe8:	3501      	adds	r5, #1
 8008fea:	e7c6      	b.n	8008f7a <_printf_common+0x3e>
 8008fec:	18e1      	adds	r1, r4, r3
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	2030      	movs	r0, #48	; 0x30
 8008ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ff6:	4422      	add	r2, r4
 8008ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009000:	3302      	adds	r3, #2
 8009002:	e7c7      	b.n	8008f94 <_printf_common+0x58>
 8009004:	2301      	movs	r3, #1
 8009006:	4622      	mov	r2, r4
 8009008:	4649      	mov	r1, r9
 800900a:	4638      	mov	r0, r7
 800900c:	47c0      	blx	r8
 800900e:	3001      	adds	r0, #1
 8009010:	d0e6      	beq.n	8008fe0 <_printf_common+0xa4>
 8009012:	3601      	adds	r6, #1
 8009014:	e7d9      	b.n	8008fca <_printf_common+0x8e>
	...

08009018 <_printf_i>:
 8009018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	460c      	mov	r4, r1
 800901e:	4691      	mov	r9, r2
 8009020:	7e27      	ldrb	r7, [r4, #24]
 8009022:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009024:	2f78      	cmp	r7, #120	; 0x78
 8009026:	4680      	mov	r8, r0
 8009028:	469a      	mov	sl, r3
 800902a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800902e:	d807      	bhi.n	8009040 <_printf_i+0x28>
 8009030:	2f62      	cmp	r7, #98	; 0x62
 8009032:	d80a      	bhi.n	800904a <_printf_i+0x32>
 8009034:	2f00      	cmp	r7, #0
 8009036:	f000 80d8 	beq.w	80091ea <_printf_i+0x1d2>
 800903a:	2f58      	cmp	r7, #88	; 0x58
 800903c:	f000 80a3 	beq.w	8009186 <_printf_i+0x16e>
 8009040:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009048:	e03a      	b.n	80090c0 <_printf_i+0xa8>
 800904a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800904e:	2b15      	cmp	r3, #21
 8009050:	d8f6      	bhi.n	8009040 <_printf_i+0x28>
 8009052:	a001      	add	r0, pc, #4	; (adr r0, 8009058 <_printf_i+0x40>)
 8009054:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009058:	080090b1 	.word	0x080090b1
 800905c:	080090c5 	.word	0x080090c5
 8009060:	08009041 	.word	0x08009041
 8009064:	08009041 	.word	0x08009041
 8009068:	08009041 	.word	0x08009041
 800906c:	08009041 	.word	0x08009041
 8009070:	080090c5 	.word	0x080090c5
 8009074:	08009041 	.word	0x08009041
 8009078:	08009041 	.word	0x08009041
 800907c:	08009041 	.word	0x08009041
 8009080:	08009041 	.word	0x08009041
 8009084:	080091d1 	.word	0x080091d1
 8009088:	080090f5 	.word	0x080090f5
 800908c:	080091b3 	.word	0x080091b3
 8009090:	08009041 	.word	0x08009041
 8009094:	08009041 	.word	0x08009041
 8009098:	080091f3 	.word	0x080091f3
 800909c:	08009041 	.word	0x08009041
 80090a0:	080090f5 	.word	0x080090f5
 80090a4:	08009041 	.word	0x08009041
 80090a8:	08009041 	.word	0x08009041
 80090ac:	080091bb 	.word	0x080091bb
 80090b0:	680b      	ldr	r3, [r1, #0]
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	600a      	str	r2, [r1, #0]
 80090b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0a3      	b.n	800920c <_printf_i+0x1f4>
 80090c4:	6825      	ldr	r5, [r4, #0]
 80090c6:	6808      	ldr	r0, [r1, #0]
 80090c8:	062e      	lsls	r6, r5, #24
 80090ca:	f100 0304 	add.w	r3, r0, #4
 80090ce:	d50a      	bpl.n	80090e6 <_printf_i+0xce>
 80090d0:	6805      	ldr	r5, [r0, #0]
 80090d2:	600b      	str	r3, [r1, #0]
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	da03      	bge.n	80090e0 <_printf_i+0xc8>
 80090d8:	232d      	movs	r3, #45	; 0x2d
 80090da:	426d      	negs	r5, r5
 80090dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e0:	485e      	ldr	r0, [pc, #376]	; (800925c <_printf_i+0x244>)
 80090e2:	230a      	movs	r3, #10
 80090e4:	e019      	b.n	800911a <_printf_i+0x102>
 80090e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090ea:	6805      	ldr	r5, [r0, #0]
 80090ec:	600b      	str	r3, [r1, #0]
 80090ee:	bf18      	it	ne
 80090f0:	b22d      	sxthne	r5, r5
 80090f2:	e7ef      	b.n	80090d4 <_printf_i+0xbc>
 80090f4:	680b      	ldr	r3, [r1, #0]
 80090f6:	6825      	ldr	r5, [r4, #0]
 80090f8:	1d18      	adds	r0, r3, #4
 80090fa:	6008      	str	r0, [r1, #0]
 80090fc:	0628      	lsls	r0, r5, #24
 80090fe:	d501      	bpl.n	8009104 <_printf_i+0xec>
 8009100:	681d      	ldr	r5, [r3, #0]
 8009102:	e002      	b.n	800910a <_printf_i+0xf2>
 8009104:	0669      	lsls	r1, r5, #25
 8009106:	d5fb      	bpl.n	8009100 <_printf_i+0xe8>
 8009108:	881d      	ldrh	r5, [r3, #0]
 800910a:	4854      	ldr	r0, [pc, #336]	; (800925c <_printf_i+0x244>)
 800910c:	2f6f      	cmp	r7, #111	; 0x6f
 800910e:	bf0c      	ite	eq
 8009110:	2308      	moveq	r3, #8
 8009112:	230a      	movne	r3, #10
 8009114:	2100      	movs	r1, #0
 8009116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800911a:	6866      	ldr	r6, [r4, #4]
 800911c:	60a6      	str	r6, [r4, #8]
 800911e:	2e00      	cmp	r6, #0
 8009120:	bfa2      	ittt	ge
 8009122:	6821      	ldrge	r1, [r4, #0]
 8009124:	f021 0104 	bicge.w	r1, r1, #4
 8009128:	6021      	strge	r1, [r4, #0]
 800912a:	b90d      	cbnz	r5, 8009130 <_printf_i+0x118>
 800912c:	2e00      	cmp	r6, #0
 800912e:	d04d      	beq.n	80091cc <_printf_i+0x1b4>
 8009130:	4616      	mov	r6, r2
 8009132:	fbb5 f1f3 	udiv	r1, r5, r3
 8009136:	fb03 5711 	mls	r7, r3, r1, r5
 800913a:	5dc7      	ldrb	r7, [r0, r7]
 800913c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009140:	462f      	mov	r7, r5
 8009142:	42bb      	cmp	r3, r7
 8009144:	460d      	mov	r5, r1
 8009146:	d9f4      	bls.n	8009132 <_printf_i+0x11a>
 8009148:	2b08      	cmp	r3, #8
 800914a:	d10b      	bne.n	8009164 <_printf_i+0x14c>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	07df      	lsls	r7, r3, #31
 8009150:	d508      	bpl.n	8009164 <_printf_i+0x14c>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	6861      	ldr	r1, [r4, #4]
 8009156:	4299      	cmp	r1, r3
 8009158:	bfde      	ittt	le
 800915a:	2330      	movle	r3, #48	; 0x30
 800915c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009160:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009164:	1b92      	subs	r2, r2, r6
 8009166:	6122      	str	r2, [r4, #16]
 8009168:	f8cd a000 	str.w	sl, [sp]
 800916c:	464b      	mov	r3, r9
 800916e:	aa03      	add	r2, sp, #12
 8009170:	4621      	mov	r1, r4
 8009172:	4640      	mov	r0, r8
 8009174:	f7ff fee2 	bl	8008f3c <_printf_common>
 8009178:	3001      	adds	r0, #1
 800917a:	d14c      	bne.n	8009216 <_printf_i+0x1fe>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009180:	b004      	add	sp, #16
 8009182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009186:	4835      	ldr	r0, [pc, #212]	; (800925c <_printf_i+0x244>)
 8009188:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	680e      	ldr	r6, [r1, #0]
 8009190:	061f      	lsls	r7, r3, #24
 8009192:	f856 5b04 	ldr.w	r5, [r6], #4
 8009196:	600e      	str	r6, [r1, #0]
 8009198:	d514      	bpl.n	80091c4 <_printf_i+0x1ac>
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	bf44      	itt	mi
 800919e:	f043 0320 	orrmi.w	r3, r3, #32
 80091a2:	6023      	strmi	r3, [r4, #0]
 80091a4:	b91d      	cbnz	r5, 80091ae <_printf_i+0x196>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	f023 0320 	bic.w	r3, r3, #32
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	2310      	movs	r3, #16
 80091b0:	e7b0      	b.n	8009114 <_printf_i+0xfc>
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	f043 0320 	orr.w	r3, r3, #32
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	2378      	movs	r3, #120	; 0x78
 80091bc:	4828      	ldr	r0, [pc, #160]	; (8009260 <_printf_i+0x248>)
 80091be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091c2:	e7e3      	b.n	800918c <_printf_i+0x174>
 80091c4:	065e      	lsls	r6, r3, #25
 80091c6:	bf48      	it	mi
 80091c8:	b2ad      	uxthmi	r5, r5
 80091ca:	e7e6      	b.n	800919a <_printf_i+0x182>
 80091cc:	4616      	mov	r6, r2
 80091ce:	e7bb      	b.n	8009148 <_printf_i+0x130>
 80091d0:	680b      	ldr	r3, [r1, #0]
 80091d2:	6826      	ldr	r6, [r4, #0]
 80091d4:	6960      	ldr	r0, [r4, #20]
 80091d6:	1d1d      	adds	r5, r3, #4
 80091d8:	600d      	str	r5, [r1, #0]
 80091da:	0635      	lsls	r5, r6, #24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	d501      	bpl.n	80091e4 <_printf_i+0x1cc>
 80091e0:	6018      	str	r0, [r3, #0]
 80091e2:	e002      	b.n	80091ea <_printf_i+0x1d2>
 80091e4:	0671      	lsls	r1, r6, #25
 80091e6:	d5fb      	bpl.n	80091e0 <_printf_i+0x1c8>
 80091e8:	8018      	strh	r0, [r3, #0]
 80091ea:	2300      	movs	r3, #0
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	4616      	mov	r6, r2
 80091f0:	e7ba      	b.n	8009168 <_printf_i+0x150>
 80091f2:	680b      	ldr	r3, [r1, #0]
 80091f4:	1d1a      	adds	r2, r3, #4
 80091f6:	600a      	str	r2, [r1, #0]
 80091f8:	681e      	ldr	r6, [r3, #0]
 80091fa:	6862      	ldr	r2, [r4, #4]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4630      	mov	r0, r6
 8009200:	f7f6 ffc6 	bl	8000190 <memchr>
 8009204:	b108      	cbz	r0, 800920a <_printf_i+0x1f2>
 8009206:	1b80      	subs	r0, r0, r6
 8009208:	6060      	str	r0, [r4, #4]
 800920a:	6863      	ldr	r3, [r4, #4]
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	2300      	movs	r3, #0
 8009210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009214:	e7a8      	b.n	8009168 <_printf_i+0x150>
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	4632      	mov	r2, r6
 800921a:	4649      	mov	r1, r9
 800921c:	4640      	mov	r0, r8
 800921e:	47d0      	blx	sl
 8009220:	3001      	adds	r0, #1
 8009222:	d0ab      	beq.n	800917c <_printf_i+0x164>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	079b      	lsls	r3, r3, #30
 8009228:	d413      	bmi.n	8009252 <_printf_i+0x23a>
 800922a:	68e0      	ldr	r0, [r4, #12]
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	4298      	cmp	r0, r3
 8009230:	bfb8      	it	lt
 8009232:	4618      	movlt	r0, r3
 8009234:	e7a4      	b.n	8009180 <_printf_i+0x168>
 8009236:	2301      	movs	r3, #1
 8009238:	4632      	mov	r2, r6
 800923a:	4649      	mov	r1, r9
 800923c:	4640      	mov	r0, r8
 800923e:	47d0      	blx	sl
 8009240:	3001      	adds	r0, #1
 8009242:	d09b      	beq.n	800917c <_printf_i+0x164>
 8009244:	3501      	adds	r5, #1
 8009246:	68e3      	ldr	r3, [r4, #12]
 8009248:	9903      	ldr	r1, [sp, #12]
 800924a:	1a5b      	subs	r3, r3, r1
 800924c:	42ab      	cmp	r3, r5
 800924e:	dcf2      	bgt.n	8009236 <_printf_i+0x21e>
 8009250:	e7eb      	b.n	800922a <_printf_i+0x212>
 8009252:	2500      	movs	r5, #0
 8009254:	f104 0619 	add.w	r6, r4, #25
 8009258:	e7f5      	b.n	8009246 <_printf_i+0x22e>
 800925a:	bf00      	nop
 800925c:	0800b5ee 	.word	0x0800b5ee
 8009260:	0800b5ff 	.word	0x0800b5ff

08009264 <iprintf>:
 8009264:	b40f      	push	{r0, r1, r2, r3}
 8009266:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <iprintf+0x2c>)
 8009268:	b513      	push	{r0, r1, r4, lr}
 800926a:	681c      	ldr	r4, [r3, #0]
 800926c:	b124      	cbz	r4, 8009278 <iprintf+0x14>
 800926e:	69a3      	ldr	r3, [r4, #24]
 8009270:	b913      	cbnz	r3, 8009278 <iprintf+0x14>
 8009272:	4620      	mov	r0, r4
 8009274:	f001 f92a 	bl	800a4cc <__sinit>
 8009278:	ab05      	add	r3, sp, #20
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	68a1      	ldr	r1, [r4, #8]
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	4620      	mov	r0, r4
 8009282:	f001 fdfd 	bl	800ae80 <_vfiprintf_r>
 8009286:	b002      	add	sp, #8
 8009288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928c:	b004      	add	sp, #16
 800928e:	4770      	bx	lr
 8009290:	20000034 	.word	0x20000034

08009294 <_puts_r>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	460e      	mov	r6, r1
 8009298:	4605      	mov	r5, r0
 800929a:	b118      	cbz	r0, 80092a4 <_puts_r+0x10>
 800929c:	6983      	ldr	r3, [r0, #24]
 800929e:	b90b      	cbnz	r3, 80092a4 <_puts_r+0x10>
 80092a0:	f001 f914 	bl	800a4cc <__sinit>
 80092a4:	69ab      	ldr	r3, [r5, #24]
 80092a6:	68ac      	ldr	r4, [r5, #8]
 80092a8:	b913      	cbnz	r3, 80092b0 <_puts_r+0x1c>
 80092aa:	4628      	mov	r0, r5
 80092ac:	f001 f90e 	bl	800a4cc <__sinit>
 80092b0:	4b2c      	ldr	r3, [pc, #176]	; (8009364 <_puts_r+0xd0>)
 80092b2:	429c      	cmp	r4, r3
 80092b4:	d120      	bne.n	80092f8 <_puts_r+0x64>
 80092b6:	686c      	ldr	r4, [r5, #4]
 80092b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092ba:	07db      	lsls	r3, r3, #31
 80092bc:	d405      	bmi.n	80092ca <_puts_r+0x36>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	0598      	lsls	r0, r3, #22
 80092c2:	d402      	bmi.n	80092ca <_puts_r+0x36>
 80092c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092c6:	f001 f9a4 	bl	800a612 <__retarget_lock_acquire_recursive>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	0719      	lsls	r1, r3, #28
 80092ce:	d51d      	bpl.n	800930c <_puts_r+0x78>
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	b1db      	cbz	r3, 800930c <_puts_r+0x78>
 80092d4:	3e01      	subs	r6, #1
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092dc:	3b01      	subs	r3, #1
 80092de:	60a3      	str	r3, [r4, #8]
 80092e0:	bb39      	cbnz	r1, 8009332 <_puts_r+0x9e>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	da38      	bge.n	8009358 <_puts_r+0xc4>
 80092e6:	4622      	mov	r2, r4
 80092e8:	210a      	movs	r1, #10
 80092ea:	4628      	mov	r0, r5
 80092ec:	f000 f89c 	bl	8009428 <__swbuf_r>
 80092f0:	3001      	adds	r0, #1
 80092f2:	d011      	beq.n	8009318 <_puts_r+0x84>
 80092f4:	250a      	movs	r5, #10
 80092f6:	e011      	b.n	800931c <_puts_r+0x88>
 80092f8:	4b1b      	ldr	r3, [pc, #108]	; (8009368 <_puts_r+0xd4>)
 80092fa:	429c      	cmp	r4, r3
 80092fc:	d101      	bne.n	8009302 <_puts_r+0x6e>
 80092fe:	68ac      	ldr	r4, [r5, #8]
 8009300:	e7da      	b.n	80092b8 <_puts_r+0x24>
 8009302:	4b1a      	ldr	r3, [pc, #104]	; (800936c <_puts_r+0xd8>)
 8009304:	429c      	cmp	r4, r3
 8009306:	bf08      	it	eq
 8009308:	68ec      	ldreq	r4, [r5, #12]
 800930a:	e7d5      	b.n	80092b8 <_puts_r+0x24>
 800930c:	4621      	mov	r1, r4
 800930e:	4628      	mov	r0, r5
 8009310:	f000 f8dc 	bl	80094cc <__swsetup_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	d0dd      	beq.n	80092d4 <_puts_r+0x40>
 8009318:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800931c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800931e:	07da      	lsls	r2, r3, #31
 8009320:	d405      	bmi.n	800932e <_puts_r+0x9a>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	059b      	lsls	r3, r3, #22
 8009326:	d402      	bmi.n	800932e <_puts_r+0x9a>
 8009328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800932a:	f001 f973 	bl	800a614 <__retarget_lock_release_recursive>
 800932e:	4628      	mov	r0, r5
 8009330:	bd70      	pop	{r4, r5, r6, pc}
 8009332:	2b00      	cmp	r3, #0
 8009334:	da04      	bge.n	8009340 <_puts_r+0xac>
 8009336:	69a2      	ldr	r2, [r4, #24]
 8009338:	429a      	cmp	r2, r3
 800933a:	dc06      	bgt.n	800934a <_puts_r+0xb6>
 800933c:	290a      	cmp	r1, #10
 800933e:	d004      	beq.n	800934a <_puts_r+0xb6>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	6022      	str	r2, [r4, #0]
 8009346:	7019      	strb	r1, [r3, #0]
 8009348:	e7c5      	b.n	80092d6 <_puts_r+0x42>
 800934a:	4622      	mov	r2, r4
 800934c:	4628      	mov	r0, r5
 800934e:	f000 f86b 	bl	8009428 <__swbuf_r>
 8009352:	3001      	adds	r0, #1
 8009354:	d1bf      	bne.n	80092d6 <_puts_r+0x42>
 8009356:	e7df      	b.n	8009318 <_puts_r+0x84>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	250a      	movs	r5, #10
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	6022      	str	r2, [r4, #0]
 8009360:	701d      	strb	r5, [r3, #0]
 8009362:	e7db      	b.n	800931c <_puts_r+0x88>
 8009364:	0800b6c4 	.word	0x0800b6c4
 8009368:	0800b6e4 	.word	0x0800b6e4
 800936c:	0800b6a4 	.word	0x0800b6a4

08009370 <puts>:
 8009370:	4b02      	ldr	r3, [pc, #8]	; (800937c <puts+0xc>)
 8009372:	4601      	mov	r1, r0
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	f7ff bf8d 	b.w	8009294 <_puts_r>
 800937a:	bf00      	nop
 800937c:	20000034 	.word	0x20000034

08009380 <_sbrk_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d06      	ldr	r5, [pc, #24]	; (800939c <_sbrk_r+0x1c>)
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	602b      	str	r3, [r5, #0]
 800938c:	f7f9 fc36 	bl	8002bfc <_sbrk>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_sbrk_r+0x1a>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_sbrk_r+0x1a>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	200003fc 	.word	0x200003fc

080093a0 <_raise_r>:
 80093a0:	291f      	cmp	r1, #31
 80093a2:	b538      	push	{r3, r4, r5, lr}
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	d904      	bls.n	80093b4 <_raise_r+0x14>
 80093aa:	2316      	movs	r3, #22
 80093ac:	6003      	str	r3, [r0, #0]
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093b6:	b112      	cbz	r2, 80093be <_raise_r+0x1e>
 80093b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093bc:	b94b      	cbnz	r3, 80093d2 <_raise_r+0x32>
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 f830 	bl	8009424 <_getpid_r>
 80093c4:	462a      	mov	r2, r5
 80093c6:	4601      	mov	r1, r0
 80093c8:	4620      	mov	r0, r4
 80093ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ce:	f000 b817 	b.w	8009400 <_kill_r>
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d00a      	beq.n	80093ec <_raise_r+0x4c>
 80093d6:	1c59      	adds	r1, r3, #1
 80093d8:	d103      	bne.n	80093e2 <_raise_r+0x42>
 80093da:	2316      	movs	r3, #22
 80093dc:	6003      	str	r3, [r0, #0]
 80093de:	2001      	movs	r0, #1
 80093e0:	e7e7      	b.n	80093b2 <_raise_r+0x12>
 80093e2:	2400      	movs	r4, #0
 80093e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093e8:	4628      	mov	r0, r5
 80093ea:	4798      	blx	r3
 80093ec:	2000      	movs	r0, #0
 80093ee:	e7e0      	b.n	80093b2 <_raise_r+0x12>

080093f0 <raise>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <raise+0xc>)
 80093f2:	4601      	mov	r1, r0
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f7ff bfd3 	b.w	80093a0 <_raise_r>
 80093fa:	bf00      	nop
 80093fc:	20000034 	.word	0x20000034

08009400 <_kill_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_kill_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7f9 fb6d 	bl	8002aec <_kill>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_kill_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_kill_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	200003fc 	.word	0x200003fc

08009424 <_getpid_r>:
 8009424:	f7f9 bb5a 	b.w	8002adc <_getpid>

08009428 <__swbuf_r>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	460e      	mov	r6, r1
 800942c:	4614      	mov	r4, r2
 800942e:	4605      	mov	r5, r0
 8009430:	b118      	cbz	r0, 800943a <__swbuf_r+0x12>
 8009432:	6983      	ldr	r3, [r0, #24]
 8009434:	b90b      	cbnz	r3, 800943a <__swbuf_r+0x12>
 8009436:	f001 f849 	bl	800a4cc <__sinit>
 800943a:	4b21      	ldr	r3, [pc, #132]	; (80094c0 <__swbuf_r+0x98>)
 800943c:	429c      	cmp	r4, r3
 800943e:	d12b      	bne.n	8009498 <__swbuf_r+0x70>
 8009440:	686c      	ldr	r4, [r5, #4]
 8009442:	69a3      	ldr	r3, [r4, #24]
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	071a      	lsls	r2, r3, #28
 800944a:	d52f      	bpl.n	80094ac <__swbuf_r+0x84>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	b36b      	cbz	r3, 80094ac <__swbuf_r+0x84>
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	1ac0      	subs	r0, r0, r3
 8009456:	6963      	ldr	r3, [r4, #20]
 8009458:	b2f6      	uxtb	r6, r6
 800945a:	4283      	cmp	r3, r0
 800945c:	4637      	mov	r7, r6
 800945e:	dc04      	bgt.n	800946a <__swbuf_r+0x42>
 8009460:	4621      	mov	r1, r4
 8009462:	4628      	mov	r0, r5
 8009464:	f000 ff9e 	bl	800a3a4 <_fflush_r>
 8009468:	bb30      	cbnz	r0, 80094b8 <__swbuf_r+0x90>
 800946a:	68a3      	ldr	r3, [r4, #8]
 800946c:	3b01      	subs	r3, #1
 800946e:	60a3      	str	r3, [r4, #8]
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	6022      	str	r2, [r4, #0]
 8009476:	701e      	strb	r6, [r3, #0]
 8009478:	6963      	ldr	r3, [r4, #20]
 800947a:	3001      	adds	r0, #1
 800947c:	4283      	cmp	r3, r0
 800947e:	d004      	beq.n	800948a <__swbuf_r+0x62>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	07db      	lsls	r3, r3, #31
 8009484:	d506      	bpl.n	8009494 <__swbuf_r+0x6c>
 8009486:	2e0a      	cmp	r6, #10
 8009488:	d104      	bne.n	8009494 <__swbuf_r+0x6c>
 800948a:	4621      	mov	r1, r4
 800948c:	4628      	mov	r0, r5
 800948e:	f000 ff89 	bl	800a3a4 <_fflush_r>
 8009492:	b988      	cbnz	r0, 80094b8 <__swbuf_r+0x90>
 8009494:	4638      	mov	r0, r7
 8009496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <__swbuf_r+0x9c>)
 800949a:	429c      	cmp	r4, r3
 800949c:	d101      	bne.n	80094a2 <__swbuf_r+0x7a>
 800949e:	68ac      	ldr	r4, [r5, #8]
 80094a0:	e7cf      	b.n	8009442 <__swbuf_r+0x1a>
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <__swbuf_r+0xa0>)
 80094a4:	429c      	cmp	r4, r3
 80094a6:	bf08      	it	eq
 80094a8:	68ec      	ldreq	r4, [r5, #12]
 80094aa:	e7ca      	b.n	8009442 <__swbuf_r+0x1a>
 80094ac:	4621      	mov	r1, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 f80c 	bl	80094cc <__swsetup_r>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0cb      	beq.n	8009450 <__swbuf_r+0x28>
 80094b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094bc:	e7ea      	b.n	8009494 <__swbuf_r+0x6c>
 80094be:	bf00      	nop
 80094c0:	0800b6c4 	.word	0x0800b6c4
 80094c4:	0800b6e4 	.word	0x0800b6e4
 80094c8:	0800b6a4 	.word	0x0800b6a4

080094cc <__swsetup_r>:
 80094cc:	4b32      	ldr	r3, [pc, #200]	; (8009598 <__swsetup_r+0xcc>)
 80094ce:	b570      	push	{r4, r5, r6, lr}
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	4606      	mov	r6, r0
 80094d4:	460c      	mov	r4, r1
 80094d6:	b125      	cbz	r5, 80094e2 <__swsetup_r+0x16>
 80094d8:	69ab      	ldr	r3, [r5, #24]
 80094da:	b913      	cbnz	r3, 80094e2 <__swsetup_r+0x16>
 80094dc:	4628      	mov	r0, r5
 80094de:	f000 fff5 	bl	800a4cc <__sinit>
 80094e2:	4b2e      	ldr	r3, [pc, #184]	; (800959c <__swsetup_r+0xd0>)
 80094e4:	429c      	cmp	r4, r3
 80094e6:	d10f      	bne.n	8009508 <__swsetup_r+0x3c>
 80094e8:	686c      	ldr	r4, [r5, #4]
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f0:	0719      	lsls	r1, r3, #28
 80094f2:	d42c      	bmi.n	800954e <__swsetup_r+0x82>
 80094f4:	06dd      	lsls	r5, r3, #27
 80094f6:	d411      	bmi.n	800951c <__swsetup_r+0x50>
 80094f8:	2309      	movs	r3, #9
 80094fa:	6033      	str	r3, [r6, #0]
 80094fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009506:	e03e      	b.n	8009586 <__swsetup_r+0xba>
 8009508:	4b25      	ldr	r3, [pc, #148]	; (80095a0 <__swsetup_r+0xd4>)
 800950a:	429c      	cmp	r4, r3
 800950c:	d101      	bne.n	8009512 <__swsetup_r+0x46>
 800950e:	68ac      	ldr	r4, [r5, #8]
 8009510:	e7eb      	b.n	80094ea <__swsetup_r+0x1e>
 8009512:	4b24      	ldr	r3, [pc, #144]	; (80095a4 <__swsetup_r+0xd8>)
 8009514:	429c      	cmp	r4, r3
 8009516:	bf08      	it	eq
 8009518:	68ec      	ldreq	r4, [r5, #12]
 800951a:	e7e6      	b.n	80094ea <__swsetup_r+0x1e>
 800951c:	0758      	lsls	r0, r3, #29
 800951e:	d512      	bpl.n	8009546 <__swsetup_r+0x7a>
 8009520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009522:	b141      	cbz	r1, 8009536 <__swsetup_r+0x6a>
 8009524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009528:	4299      	cmp	r1, r3
 800952a:	d002      	beq.n	8009532 <__swsetup_r+0x66>
 800952c:	4630      	mov	r0, r6
 800952e:	f7ff f985 	bl	800883c <_free_r>
 8009532:	2300      	movs	r3, #0
 8009534:	6363      	str	r3, [r4, #52]	; 0x34
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	2300      	movs	r3, #0
 8009540:	6063      	str	r3, [r4, #4]
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	f043 0308 	orr.w	r3, r3, #8
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	b94b      	cbnz	r3, 8009566 <__swsetup_r+0x9a>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800955c:	d003      	beq.n	8009566 <__swsetup_r+0x9a>
 800955e:	4621      	mov	r1, r4
 8009560:	4630      	mov	r0, r6
 8009562:	f001 f87d 	bl	800a660 <__smakebuf_r>
 8009566:	89a0      	ldrh	r0, [r4, #12]
 8009568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800956c:	f010 0301 	ands.w	r3, r0, #1
 8009570:	d00a      	beq.n	8009588 <__swsetup_r+0xbc>
 8009572:	2300      	movs	r3, #0
 8009574:	60a3      	str	r3, [r4, #8]
 8009576:	6963      	ldr	r3, [r4, #20]
 8009578:	425b      	negs	r3, r3
 800957a:	61a3      	str	r3, [r4, #24]
 800957c:	6923      	ldr	r3, [r4, #16]
 800957e:	b943      	cbnz	r3, 8009592 <__swsetup_r+0xc6>
 8009580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009584:	d1ba      	bne.n	80094fc <__swsetup_r+0x30>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	0781      	lsls	r1, r0, #30
 800958a:	bf58      	it	pl
 800958c:	6963      	ldrpl	r3, [r4, #20]
 800958e:	60a3      	str	r3, [r4, #8]
 8009590:	e7f4      	b.n	800957c <__swsetup_r+0xb0>
 8009592:	2000      	movs	r0, #0
 8009594:	e7f7      	b.n	8009586 <__swsetup_r+0xba>
 8009596:	bf00      	nop
 8009598:	20000034 	.word	0x20000034
 800959c:	0800b6c4 	.word	0x0800b6c4
 80095a0:	0800b6e4 	.word	0x0800b6e4
 80095a4:	0800b6a4 	.word	0x0800b6a4

080095a8 <quorem>:
 80095a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	6903      	ldr	r3, [r0, #16]
 80095ae:	690c      	ldr	r4, [r1, #16]
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	4607      	mov	r7, r0
 80095b4:	f2c0 8081 	blt.w	80096ba <quorem+0x112>
 80095b8:	3c01      	subs	r4, #1
 80095ba:	f101 0814 	add.w	r8, r1, #20
 80095be:	f100 0514 	add.w	r5, r0, #20
 80095c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095d0:	3301      	adds	r3, #1
 80095d2:	429a      	cmp	r2, r3
 80095d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80095d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80095e0:	d331      	bcc.n	8009646 <quorem+0x9e>
 80095e2:	f04f 0e00 	mov.w	lr, #0
 80095e6:	4640      	mov	r0, r8
 80095e8:	46ac      	mov	ip, r5
 80095ea:	46f2      	mov	sl, lr
 80095ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80095f0:	b293      	uxth	r3, r2
 80095f2:	fb06 e303 	mla	r3, r6, r3, lr
 80095f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	ebaa 0303 	sub.w	r3, sl, r3
 8009600:	0c12      	lsrs	r2, r2, #16
 8009602:	f8dc a000 	ldr.w	sl, [ip]
 8009606:	fb06 e202 	mla	r2, r6, r2, lr
 800960a:	fa13 f38a 	uxtah	r3, r3, sl
 800960e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009612:	fa1f fa82 	uxth.w	sl, r2
 8009616:	f8dc 2000 	ldr.w	r2, [ip]
 800961a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800961e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009622:	b29b      	uxth	r3, r3
 8009624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009628:	4581      	cmp	r9, r0
 800962a:	f84c 3b04 	str.w	r3, [ip], #4
 800962e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009632:	d2db      	bcs.n	80095ec <quorem+0x44>
 8009634:	f855 300b 	ldr.w	r3, [r5, fp]
 8009638:	b92b      	cbnz	r3, 8009646 <quorem+0x9e>
 800963a:	9b01      	ldr	r3, [sp, #4]
 800963c:	3b04      	subs	r3, #4
 800963e:	429d      	cmp	r5, r3
 8009640:	461a      	mov	r2, r3
 8009642:	d32e      	bcc.n	80096a2 <quorem+0xfa>
 8009644:	613c      	str	r4, [r7, #16]
 8009646:	4638      	mov	r0, r7
 8009648:	f001 fae2 	bl	800ac10 <__mcmp>
 800964c:	2800      	cmp	r0, #0
 800964e:	db24      	blt.n	800969a <quorem+0xf2>
 8009650:	3601      	adds	r6, #1
 8009652:	4628      	mov	r0, r5
 8009654:	f04f 0c00 	mov.w	ip, #0
 8009658:	f858 2b04 	ldr.w	r2, [r8], #4
 800965c:	f8d0 e000 	ldr.w	lr, [r0]
 8009660:	b293      	uxth	r3, r2
 8009662:	ebac 0303 	sub.w	r3, ip, r3
 8009666:	0c12      	lsrs	r2, r2, #16
 8009668:	fa13 f38e 	uxtah	r3, r3, lr
 800966c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009670:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009674:	b29b      	uxth	r3, r3
 8009676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800967a:	45c1      	cmp	r9, r8
 800967c:	f840 3b04 	str.w	r3, [r0], #4
 8009680:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009684:	d2e8      	bcs.n	8009658 <quorem+0xb0>
 8009686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800968a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800968e:	b922      	cbnz	r2, 800969a <quorem+0xf2>
 8009690:	3b04      	subs	r3, #4
 8009692:	429d      	cmp	r5, r3
 8009694:	461a      	mov	r2, r3
 8009696:	d30a      	bcc.n	80096ae <quorem+0x106>
 8009698:	613c      	str	r4, [r7, #16]
 800969a:	4630      	mov	r0, r6
 800969c:	b003      	add	sp, #12
 800969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	3b04      	subs	r3, #4
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	d1cc      	bne.n	8009644 <quorem+0x9c>
 80096aa:	3c01      	subs	r4, #1
 80096ac:	e7c7      	b.n	800963e <quorem+0x96>
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	3b04      	subs	r3, #4
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	d1f0      	bne.n	8009698 <quorem+0xf0>
 80096b6:	3c01      	subs	r4, #1
 80096b8:	e7eb      	b.n	8009692 <quorem+0xea>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e7ee      	b.n	800969c <quorem+0xf4>
	...

080096c0 <_dtoa_r>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	ed2d 8b02 	vpush	{d8}
 80096c8:	ec57 6b10 	vmov	r6, r7, d0
 80096cc:	b095      	sub	sp, #84	; 0x54
 80096ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80096d4:	9105      	str	r1, [sp, #20]
 80096d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80096da:	4604      	mov	r4, r0
 80096dc:	9209      	str	r2, [sp, #36]	; 0x24
 80096de:	930f      	str	r3, [sp, #60]	; 0x3c
 80096e0:	b975      	cbnz	r5, 8009700 <_dtoa_r+0x40>
 80096e2:	2010      	movs	r0, #16
 80096e4:	f7ff f89a 	bl	800881c <malloc>
 80096e8:	4602      	mov	r2, r0
 80096ea:	6260      	str	r0, [r4, #36]	; 0x24
 80096ec:	b920      	cbnz	r0, 80096f8 <_dtoa_r+0x38>
 80096ee:	4bb2      	ldr	r3, [pc, #712]	; (80099b8 <_dtoa_r+0x2f8>)
 80096f0:	21ea      	movs	r1, #234	; 0xea
 80096f2:	48b2      	ldr	r0, [pc, #712]	; (80099bc <_dtoa_r+0x2fc>)
 80096f4:	f001 fd4a 	bl	800b18c <__assert_func>
 80096f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096fc:	6005      	str	r5, [r0, #0]
 80096fe:	60c5      	str	r5, [r0, #12]
 8009700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009702:	6819      	ldr	r1, [r3, #0]
 8009704:	b151      	cbz	r1, 800971c <_dtoa_r+0x5c>
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	604a      	str	r2, [r1, #4]
 800970a:	2301      	movs	r3, #1
 800970c:	4093      	lsls	r3, r2
 800970e:	608b      	str	r3, [r1, #8]
 8009710:	4620      	mov	r0, r4
 8009712:	f001 f83f 	bl	800a794 <_Bfree>
 8009716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	1e3b      	subs	r3, r7, #0
 800971e:	bfb9      	ittee	lt
 8009720:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009724:	9303      	strlt	r3, [sp, #12]
 8009726:	2300      	movge	r3, #0
 8009728:	f8c8 3000 	strge.w	r3, [r8]
 800972c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009730:	4ba3      	ldr	r3, [pc, #652]	; (80099c0 <_dtoa_r+0x300>)
 8009732:	bfbc      	itt	lt
 8009734:	2201      	movlt	r2, #1
 8009736:	f8c8 2000 	strlt.w	r2, [r8]
 800973a:	ea33 0309 	bics.w	r3, r3, r9
 800973e:	d11b      	bne.n	8009778 <_dtoa_r+0xb8>
 8009740:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009742:	f242 730f 	movw	r3, #9999	; 0x270f
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800974c:	4333      	orrs	r3, r6
 800974e:	f000 857a 	beq.w	800a246 <_dtoa_r+0xb86>
 8009752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009754:	b963      	cbnz	r3, 8009770 <_dtoa_r+0xb0>
 8009756:	4b9b      	ldr	r3, [pc, #620]	; (80099c4 <_dtoa_r+0x304>)
 8009758:	e024      	b.n	80097a4 <_dtoa_r+0xe4>
 800975a:	4b9b      	ldr	r3, [pc, #620]	; (80099c8 <_dtoa_r+0x308>)
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	9800      	ldr	r0, [sp, #0]
 8009766:	b015      	add	sp, #84	; 0x54
 8009768:	ecbd 8b02 	vpop	{d8}
 800976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009770:	4b94      	ldr	r3, [pc, #592]	; (80099c4 <_dtoa_r+0x304>)
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	3303      	adds	r3, #3
 8009776:	e7f3      	b.n	8009760 <_dtoa_r+0xa0>
 8009778:	ed9d 7b02 	vldr	d7, [sp, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	ec51 0b17 	vmov	r0, r1, d7
 8009782:	2300      	movs	r3, #0
 8009784:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009788:	f7f7 f976 	bl	8000a78 <__aeabi_dcmpeq>
 800978c:	4680      	mov	r8, r0
 800978e:	b158      	cbz	r0, 80097a8 <_dtoa_r+0xe8>
 8009790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009792:	2301      	movs	r3, #1
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 8551 	beq.w	800a240 <_dtoa_r+0xb80>
 800979e:	488b      	ldr	r0, [pc, #556]	; (80099cc <_dtoa_r+0x30c>)
 80097a0:	6018      	str	r0, [r3, #0]
 80097a2:	1e43      	subs	r3, r0, #1
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	e7dd      	b.n	8009764 <_dtoa_r+0xa4>
 80097a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80097ac:	aa12      	add	r2, sp, #72	; 0x48
 80097ae:	a913      	add	r1, sp, #76	; 0x4c
 80097b0:	4620      	mov	r0, r4
 80097b2:	f001 fad1 	bl	800ad58 <__d2b>
 80097b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097ba:	4683      	mov	fp, r0
 80097bc:	2d00      	cmp	r5, #0
 80097be:	d07c      	beq.n	80098ba <_dtoa_r+0x1fa>
 80097c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80097c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80097ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80097d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80097d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80097da:	4b7d      	ldr	r3, [pc, #500]	; (80099d0 <_dtoa_r+0x310>)
 80097dc:	2200      	movs	r2, #0
 80097de:	4630      	mov	r0, r6
 80097e0:	4639      	mov	r1, r7
 80097e2:	f7f6 fd29 	bl	8000238 <__aeabi_dsub>
 80097e6:	a36e      	add	r3, pc, #440	; (adr r3, 80099a0 <_dtoa_r+0x2e0>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	f7f6 fedc 	bl	80005a8 <__aeabi_dmul>
 80097f0:	a36d      	add	r3, pc, #436	; (adr r3, 80099a8 <_dtoa_r+0x2e8>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 fd21 	bl	800023c <__adddf3>
 80097fa:	4606      	mov	r6, r0
 80097fc:	4628      	mov	r0, r5
 80097fe:	460f      	mov	r7, r1
 8009800:	f7f6 fe68 	bl	80004d4 <__aeabi_i2d>
 8009804:	a36a      	add	r3, pc, #424	; (adr r3, 80099b0 <_dtoa_r+0x2f0>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f7f6 fecd 	bl	80005a8 <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 fd11 	bl	800023c <__adddf3>
 800981a:	4606      	mov	r6, r0
 800981c:	460f      	mov	r7, r1
 800981e:	f7f7 f973 	bl	8000b08 <__aeabi_d2iz>
 8009822:	2200      	movs	r2, #0
 8009824:	4682      	mov	sl, r0
 8009826:	2300      	movs	r3, #0
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	f7f7 f92e 	bl	8000a8c <__aeabi_dcmplt>
 8009830:	b148      	cbz	r0, 8009846 <_dtoa_r+0x186>
 8009832:	4650      	mov	r0, sl
 8009834:	f7f6 fe4e 	bl	80004d4 <__aeabi_i2d>
 8009838:	4632      	mov	r2, r6
 800983a:	463b      	mov	r3, r7
 800983c:	f7f7 f91c 	bl	8000a78 <__aeabi_dcmpeq>
 8009840:	b908      	cbnz	r0, 8009846 <_dtoa_r+0x186>
 8009842:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009846:	f1ba 0f16 	cmp.w	sl, #22
 800984a:	d854      	bhi.n	80098f6 <_dtoa_r+0x236>
 800984c:	4b61      	ldr	r3, [pc, #388]	; (80099d4 <_dtoa_r+0x314>)
 800984e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800985a:	f7f7 f917 	bl	8000a8c <__aeabi_dcmplt>
 800985e:	2800      	cmp	r0, #0
 8009860:	d04b      	beq.n	80098fa <_dtoa_r+0x23a>
 8009862:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009866:	2300      	movs	r3, #0
 8009868:	930e      	str	r3, [sp, #56]	; 0x38
 800986a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800986c:	1b5d      	subs	r5, r3, r5
 800986e:	1e6b      	subs	r3, r5, #1
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	bf43      	ittte	mi
 8009874:	2300      	movmi	r3, #0
 8009876:	f1c5 0801 	rsbmi	r8, r5, #1
 800987a:	9304      	strmi	r3, [sp, #16]
 800987c:	f04f 0800 	movpl.w	r8, #0
 8009880:	f1ba 0f00 	cmp.w	sl, #0
 8009884:	db3b      	blt.n	80098fe <_dtoa_r+0x23e>
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800988c:	4453      	add	r3, sl
 800988e:	9304      	str	r3, [sp, #16]
 8009890:	2300      	movs	r3, #0
 8009892:	9306      	str	r3, [sp, #24]
 8009894:	9b05      	ldr	r3, [sp, #20]
 8009896:	2b09      	cmp	r3, #9
 8009898:	d869      	bhi.n	800996e <_dtoa_r+0x2ae>
 800989a:	2b05      	cmp	r3, #5
 800989c:	bfc4      	itt	gt
 800989e:	3b04      	subgt	r3, #4
 80098a0:	9305      	strgt	r3, [sp, #20]
 80098a2:	9b05      	ldr	r3, [sp, #20]
 80098a4:	f1a3 0302 	sub.w	r3, r3, #2
 80098a8:	bfcc      	ite	gt
 80098aa:	2500      	movgt	r5, #0
 80098ac:	2501      	movle	r5, #1
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d869      	bhi.n	8009986 <_dtoa_r+0x2c6>
 80098b2:	e8df f003 	tbb	[pc, r3]
 80098b6:	4e2c      	.short	0x4e2c
 80098b8:	5a4c      	.short	0x5a4c
 80098ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80098be:	441d      	add	r5, r3
 80098c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	bfc1      	itttt	gt
 80098c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80098cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80098d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80098d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80098d8:	bfda      	itte	le
 80098da:	f1c3 0320 	rsble	r3, r3, #32
 80098de:	fa06 f003 	lslle.w	r0, r6, r3
 80098e2:	4318      	orrgt	r0, r3
 80098e4:	f7f6 fde6 	bl	80004b4 <__aeabi_ui2d>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4606      	mov	r6, r0
 80098ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80098f0:	3d01      	subs	r5, #1
 80098f2:	9310      	str	r3, [sp, #64]	; 0x40
 80098f4:	e771      	b.n	80097da <_dtoa_r+0x11a>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e7b6      	b.n	8009868 <_dtoa_r+0x1a8>
 80098fa:	900e      	str	r0, [sp, #56]	; 0x38
 80098fc:	e7b5      	b.n	800986a <_dtoa_r+0x1aa>
 80098fe:	f1ca 0300 	rsb	r3, sl, #0
 8009902:	9306      	str	r3, [sp, #24]
 8009904:	2300      	movs	r3, #0
 8009906:	eba8 080a 	sub.w	r8, r8, sl
 800990a:	930d      	str	r3, [sp, #52]	; 0x34
 800990c:	e7c2      	b.n	8009894 <_dtoa_r+0x1d4>
 800990e:	2300      	movs	r3, #0
 8009910:	9308      	str	r3, [sp, #32]
 8009912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	dc39      	bgt.n	800998c <_dtoa_r+0x2cc>
 8009918:	f04f 0901 	mov.w	r9, #1
 800991c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009920:	464b      	mov	r3, r9
 8009922:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009926:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009928:	2200      	movs	r2, #0
 800992a:	6042      	str	r2, [r0, #4]
 800992c:	2204      	movs	r2, #4
 800992e:	f102 0614 	add.w	r6, r2, #20
 8009932:	429e      	cmp	r6, r3
 8009934:	6841      	ldr	r1, [r0, #4]
 8009936:	d92f      	bls.n	8009998 <_dtoa_r+0x2d8>
 8009938:	4620      	mov	r0, r4
 800993a:	f000 feeb 	bl	800a714 <_Balloc>
 800993e:	9000      	str	r0, [sp, #0]
 8009940:	2800      	cmp	r0, #0
 8009942:	d14b      	bne.n	80099dc <_dtoa_r+0x31c>
 8009944:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <_dtoa_r+0x318>)
 8009946:	4602      	mov	r2, r0
 8009948:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800994c:	e6d1      	b.n	80096f2 <_dtoa_r+0x32>
 800994e:	2301      	movs	r3, #1
 8009950:	e7de      	b.n	8009910 <_dtoa_r+0x250>
 8009952:	2300      	movs	r3, #0
 8009954:	9308      	str	r3, [sp, #32]
 8009956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009958:	eb0a 0903 	add.w	r9, sl, r3
 800995c:	f109 0301 	add.w	r3, r9, #1
 8009960:	2b01      	cmp	r3, #1
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	bfb8      	it	lt
 8009966:	2301      	movlt	r3, #1
 8009968:	e7dd      	b.n	8009926 <_dtoa_r+0x266>
 800996a:	2301      	movs	r3, #1
 800996c:	e7f2      	b.n	8009954 <_dtoa_r+0x294>
 800996e:	2501      	movs	r5, #1
 8009970:	2300      	movs	r3, #0
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	9508      	str	r5, [sp, #32]
 8009976:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800997a:	2200      	movs	r2, #0
 800997c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009980:	2312      	movs	r3, #18
 8009982:	9209      	str	r2, [sp, #36]	; 0x24
 8009984:	e7cf      	b.n	8009926 <_dtoa_r+0x266>
 8009986:	2301      	movs	r3, #1
 8009988:	9308      	str	r3, [sp, #32]
 800998a:	e7f4      	b.n	8009976 <_dtoa_r+0x2b6>
 800998c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009990:	f8cd 9004 	str.w	r9, [sp, #4]
 8009994:	464b      	mov	r3, r9
 8009996:	e7c6      	b.n	8009926 <_dtoa_r+0x266>
 8009998:	3101      	adds	r1, #1
 800999a:	6041      	str	r1, [r0, #4]
 800999c:	0052      	lsls	r2, r2, #1
 800999e:	e7c6      	b.n	800992e <_dtoa_r+0x26e>
 80099a0:	636f4361 	.word	0x636f4361
 80099a4:	3fd287a7 	.word	0x3fd287a7
 80099a8:	8b60c8b3 	.word	0x8b60c8b3
 80099ac:	3fc68a28 	.word	0x3fc68a28
 80099b0:	509f79fb 	.word	0x509f79fb
 80099b4:	3fd34413 	.word	0x3fd34413
 80099b8:	0800b61d 	.word	0x0800b61d
 80099bc:	0800b634 	.word	0x0800b634
 80099c0:	7ff00000 	.word	0x7ff00000
 80099c4:	0800b619 	.word	0x0800b619
 80099c8:	0800b610 	.word	0x0800b610
 80099cc:	0800b5ed 	.word	0x0800b5ed
 80099d0:	3ff80000 	.word	0x3ff80000
 80099d4:	0800b790 	.word	0x0800b790
 80099d8:	0800b693 	.word	0x0800b693
 80099dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099de:	9a00      	ldr	r2, [sp, #0]
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	9b01      	ldr	r3, [sp, #4]
 80099e4:	2b0e      	cmp	r3, #14
 80099e6:	f200 80ad 	bhi.w	8009b44 <_dtoa_r+0x484>
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	f000 80aa 	beq.w	8009b44 <_dtoa_r+0x484>
 80099f0:	f1ba 0f00 	cmp.w	sl, #0
 80099f4:	dd36      	ble.n	8009a64 <_dtoa_r+0x3a4>
 80099f6:	4ac3      	ldr	r2, [pc, #780]	; (8009d04 <_dtoa_r+0x644>)
 80099f8:	f00a 030f 	and.w	r3, sl, #15
 80099fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a00:	ed93 7b00 	vldr	d7, [r3]
 8009a04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009a08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009a0c:	eeb0 8a47 	vmov.f32	s16, s14
 8009a10:	eef0 8a67 	vmov.f32	s17, s15
 8009a14:	d016      	beq.n	8009a44 <_dtoa_r+0x384>
 8009a16:	4bbc      	ldr	r3, [pc, #752]	; (8009d08 <_dtoa_r+0x648>)
 8009a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a20:	f7f6 feec 	bl	80007fc <__aeabi_ddiv>
 8009a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a28:	f007 070f 	and.w	r7, r7, #15
 8009a2c:	2503      	movs	r5, #3
 8009a2e:	4eb6      	ldr	r6, [pc, #728]	; (8009d08 <_dtoa_r+0x648>)
 8009a30:	b957      	cbnz	r7, 8009a48 <_dtoa_r+0x388>
 8009a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a36:	ec53 2b18 	vmov	r2, r3, d8
 8009a3a:	f7f6 fedf 	bl	80007fc <__aeabi_ddiv>
 8009a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a42:	e029      	b.n	8009a98 <_dtoa_r+0x3d8>
 8009a44:	2502      	movs	r5, #2
 8009a46:	e7f2      	b.n	8009a2e <_dtoa_r+0x36e>
 8009a48:	07f9      	lsls	r1, r7, #31
 8009a4a:	d508      	bpl.n	8009a5e <_dtoa_r+0x39e>
 8009a4c:	ec51 0b18 	vmov	r0, r1, d8
 8009a50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a54:	f7f6 fda8 	bl	80005a8 <__aeabi_dmul>
 8009a58:	ec41 0b18 	vmov	d8, r0, r1
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	107f      	asrs	r7, r7, #1
 8009a60:	3608      	adds	r6, #8
 8009a62:	e7e5      	b.n	8009a30 <_dtoa_r+0x370>
 8009a64:	f000 80a6 	beq.w	8009bb4 <_dtoa_r+0x4f4>
 8009a68:	f1ca 0600 	rsb	r6, sl, #0
 8009a6c:	4ba5      	ldr	r3, [pc, #660]	; (8009d04 <_dtoa_r+0x644>)
 8009a6e:	4fa6      	ldr	r7, [pc, #664]	; (8009d08 <_dtoa_r+0x648>)
 8009a70:	f006 020f 	and.w	r2, r6, #15
 8009a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a80:	f7f6 fd92 	bl	80005a8 <__aeabi_dmul>
 8009a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a88:	1136      	asrs	r6, r6, #4
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	2502      	movs	r5, #2
 8009a8e:	2e00      	cmp	r6, #0
 8009a90:	f040 8085 	bne.w	8009b9e <_dtoa_r+0x4de>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1d2      	bne.n	8009a3e <_dtoa_r+0x37e>
 8009a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 808c 	beq.w	8009bb8 <_dtoa_r+0x4f8>
 8009aa0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009aa4:	4b99      	ldr	r3, [pc, #612]	; (8009d0c <_dtoa_r+0x64c>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f6 ffee 	bl	8000a8c <__aeabi_dcmplt>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	f000 8081 	beq.w	8009bb8 <_dtoa_r+0x4f8>
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d07d      	beq.n	8009bb8 <_dtoa_r+0x4f8>
 8009abc:	f1b9 0f00 	cmp.w	r9, #0
 8009ac0:	dd3c      	ble.n	8009b3c <_dtoa_r+0x47c>
 8009ac2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009ac6:	9307      	str	r3, [sp, #28]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4b91      	ldr	r3, [pc, #580]	; (8009d10 <_dtoa_r+0x650>)
 8009acc:	4630      	mov	r0, r6
 8009ace:	4639      	mov	r1, r7
 8009ad0:	f7f6 fd6a 	bl	80005a8 <__aeabi_dmul>
 8009ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad8:	3501      	adds	r5, #1
 8009ada:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009ade:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f7f6 fcf6 	bl	80004d4 <__aeabi_i2d>
 8009ae8:	4632      	mov	r2, r6
 8009aea:	463b      	mov	r3, r7
 8009aec:	f7f6 fd5c 	bl	80005a8 <__aeabi_dmul>
 8009af0:	4b88      	ldr	r3, [pc, #544]	; (8009d14 <_dtoa_r+0x654>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	f7f6 fba2 	bl	800023c <__adddf3>
 8009af8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d15c      	bne.n	8009bc2 <_dtoa_r+0x502>
 8009b08:	4b83      	ldr	r3, [pc, #524]	; (8009d18 <_dtoa_r+0x658>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	4639      	mov	r1, r7
 8009b10:	f7f6 fb92 	bl	8000238 <__aeabi_dsub>
 8009b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	f7f6 ffd4 	bl	8000ac8 <__aeabi_dcmpgt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	f040 8296 	bne.w	800a052 <_dtoa_r+0x992>
 8009b26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b30:	4639      	mov	r1, r7
 8009b32:	f7f6 ffab 	bl	8000a8c <__aeabi_dcmplt>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	f040 8288 	bne.w	800a04c <_dtoa_r+0x98c>
 8009b3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f2c0 8158 	blt.w	8009dfc <_dtoa_r+0x73c>
 8009b4c:	f1ba 0f0e 	cmp.w	sl, #14
 8009b50:	f300 8154 	bgt.w	8009dfc <_dtoa_r+0x73c>
 8009b54:	4b6b      	ldr	r3, [pc, #428]	; (8009d04 <_dtoa_r+0x644>)
 8009b56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f280 80e3 	bge.w	8009d2c <_dtoa_r+0x66c>
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f300 80df 	bgt.w	8009d2c <_dtoa_r+0x66c>
 8009b6e:	f040 826d 	bne.w	800a04c <_dtoa_r+0x98c>
 8009b72:	4b69      	ldr	r3, [pc, #420]	; (8009d18 <_dtoa_r+0x658>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	4640      	mov	r0, r8
 8009b78:	4649      	mov	r1, r9
 8009b7a:	f7f6 fd15 	bl	80005a8 <__aeabi_dmul>
 8009b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b82:	f7f6 ff97 	bl	8000ab4 <__aeabi_dcmpge>
 8009b86:	9e01      	ldr	r6, [sp, #4]
 8009b88:	4637      	mov	r7, r6
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f040 8243 	bne.w	800a016 <_dtoa_r+0x956>
 8009b90:	9d00      	ldr	r5, [sp, #0]
 8009b92:	2331      	movs	r3, #49	; 0x31
 8009b94:	f805 3b01 	strb.w	r3, [r5], #1
 8009b98:	f10a 0a01 	add.w	sl, sl, #1
 8009b9c:	e23f      	b.n	800a01e <_dtoa_r+0x95e>
 8009b9e:	07f2      	lsls	r2, r6, #31
 8009ba0:	d505      	bpl.n	8009bae <_dtoa_r+0x4ee>
 8009ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba6:	f7f6 fcff 	bl	80005a8 <__aeabi_dmul>
 8009baa:	3501      	adds	r5, #1
 8009bac:	2301      	movs	r3, #1
 8009bae:	1076      	asrs	r6, r6, #1
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	e76c      	b.n	8009a8e <_dtoa_r+0x3ce>
 8009bb4:	2502      	movs	r5, #2
 8009bb6:	e76f      	b.n	8009a98 <_dtoa_r+0x3d8>
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	f8cd a01c 	str.w	sl, [sp, #28]
 8009bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8009bc0:	e78d      	b.n	8009ade <_dtoa_r+0x41e>
 8009bc2:	9900      	ldr	r1, [sp, #0]
 8009bc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bc8:	4b4e      	ldr	r3, [pc, #312]	; (8009d04 <_dtoa_r+0x644>)
 8009bca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bce:	4401      	add	r1, r0
 8009bd0:	9102      	str	r1, [sp, #8]
 8009bd2:	9908      	ldr	r1, [sp, #32]
 8009bd4:	eeb0 8a47 	vmov.f32	s16, s14
 8009bd8:	eef0 8a67 	vmov.f32	s17, s15
 8009bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009be4:	2900      	cmp	r1, #0
 8009be6:	d045      	beq.n	8009c74 <_dtoa_r+0x5b4>
 8009be8:	494c      	ldr	r1, [pc, #304]	; (8009d1c <_dtoa_r+0x65c>)
 8009bea:	2000      	movs	r0, #0
 8009bec:	f7f6 fe06 	bl	80007fc <__aeabi_ddiv>
 8009bf0:	ec53 2b18 	vmov	r2, r3, d8
 8009bf4:	f7f6 fb20 	bl	8000238 <__aeabi_dsub>
 8009bf8:	9d00      	ldr	r5, [sp, #0]
 8009bfa:	ec41 0b18 	vmov	d8, r0, r1
 8009bfe:	4639      	mov	r1, r7
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7f6 ff81 	bl	8000b08 <__aeabi_d2iz>
 8009c06:	900c      	str	r0, [sp, #48]	; 0x30
 8009c08:	f7f6 fc64 	bl	80004d4 <__aeabi_i2d>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 fb10 	bl	8000238 <__aeabi_dsub>
 8009c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1a:	3330      	adds	r3, #48	; 0x30
 8009c1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009c20:	ec53 2b18 	vmov	r2, r3, d8
 8009c24:	4606      	mov	r6, r0
 8009c26:	460f      	mov	r7, r1
 8009c28:	f7f6 ff30 	bl	8000a8c <__aeabi_dcmplt>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d165      	bne.n	8009cfc <_dtoa_r+0x63c>
 8009c30:	4632      	mov	r2, r6
 8009c32:	463b      	mov	r3, r7
 8009c34:	4935      	ldr	r1, [pc, #212]	; (8009d0c <_dtoa_r+0x64c>)
 8009c36:	2000      	movs	r0, #0
 8009c38:	f7f6 fafe 	bl	8000238 <__aeabi_dsub>
 8009c3c:	ec53 2b18 	vmov	r2, r3, d8
 8009c40:	f7f6 ff24 	bl	8000a8c <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f040 80b9 	bne.w	8009dbc <_dtoa_r+0x6fc>
 8009c4a:	9b02      	ldr	r3, [sp, #8]
 8009c4c:	429d      	cmp	r5, r3
 8009c4e:	f43f af75 	beq.w	8009b3c <_dtoa_r+0x47c>
 8009c52:	4b2f      	ldr	r3, [pc, #188]	; (8009d10 <_dtoa_r+0x650>)
 8009c54:	ec51 0b18 	vmov	r0, r1, d8
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f6 fca5 	bl	80005a8 <__aeabi_dmul>
 8009c5e:	4b2c      	ldr	r3, [pc, #176]	; (8009d10 <_dtoa_r+0x650>)
 8009c60:	ec41 0b18 	vmov	d8, r0, r1
 8009c64:	2200      	movs	r2, #0
 8009c66:	4630      	mov	r0, r6
 8009c68:	4639      	mov	r1, r7
 8009c6a:	f7f6 fc9d 	bl	80005a8 <__aeabi_dmul>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460f      	mov	r7, r1
 8009c72:	e7c4      	b.n	8009bfe <_dtoa_r+0x53e>
 8009c74:	ec51 0b17 	vmov	r0, r1, d7
 8009c78:	f7f6 fc96 	bl	80005a8 <__aeabi_dmul>
 8009c7c:	9b02      	ldr	r3, [sp, #8]
 8009c7e:	9d00      	ldr	r5, [sp, #0]
 8009c80:	930c      	str	r3, [sp, #48]	; 0x30
 8009c82:	ec41 0b18 	vmov	d8, r0, r1
 8009c86:	4639      	mov	r1, r7
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7f6 ff3d 	bl	8000b08 <__aeabi_d2iz>
 8009c8e:	9011      	str	r0, [sp, #68]	; 0x44
 8009c90:	f7f6 fc20 	bl	80004d4 <__aeabi_i2d>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f6 facc 	bl	8000238 <__aeabi_dsub>
 8009ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ca2:	3330      	adds	r3, #48	; 0x30
 8009ca4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	429d      	cmp	r5, r3
 8009cac:	4606      	mov	r6, r0
 8009cae:	460f      	mov	r7, r1
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	d134      	bne.n	8009d20 <_dtoa_r+0x660>
 8009cb6:	4b19      	ldr	r3, [pc, #100]	; (8009d1c <_dtoa_r+0x65c>)
 8009cb8:	ec51 0b18 	vmov	r0, r1, d8
 8009cbc:	f7f6 fabe 	bl	800023c <__adddf3>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	f7f6 fefe 	bl	8000ac8 <__aeabi_dcmpgt>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d175      	bne.n	8009dbc <_dtoa_r+0x6fc>
 8009cd0:	ec53 2b18 	vmov	r2, r3, d8
 8009cd4:	4911      	ldr	r1, [pc, #68]	; (8009d1c <_dtoa_r+0x65c>)
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	f7f6 faae 	bl	8000238 <__aeabi_dsub>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fed2 	bl	8000a8c <__aeabi_dcmplt>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f43f af27 	beq.w	8009b3c <_dtoa_r+0x47c>
 8009cee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cf0:	1e6b      	subs	r3, r5, #1
 8009cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8009cf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cf8:	2b30      	cmp	r3, #48	; 0x30
 8009cfa:	d0f8      	beq.n	8009cee <_dtoa_r+0x62e>
 8009cfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d00:	e04a      	b.n	8009d98 <_dtoa_r+0x6d8>
 8009d02:	bf00      	nop
 8009d04:	0800b790 	.word	0x0800b790
 8009d08:	0800b768 	.word	0x0800b768
 8009d0c:	3ff00000 	.word	0x3ff00000
 8009d10:	40240000 	.word	0x40240000
 8009d14:	401c0000 	.word	0x401c0000
 8009d18:	40140000 	.word	0x40140000
 8009d1c:	3fe00000 	.word	0x3fe00000
 8009d20:	4baf      	ldr	r3, [pc, #700]	; (8009fe0 <_dtoa_r+0x920>)
 8009d22:	f7f6 fc41 	bl	80005a8 <__aeabi_dmul>
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	e7ac      	b.n	8009c86 <_dtoa_r+0x5c6>
 8009d2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d30:	9d00      	ldr	r5, [sp, #0]
 8009d32:	4642      	mov	r2, r8
 8009d34:	464b      	mov	r3, r9
 8009d36:	4630      	mov	r0, r6
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 fd5f 	bl	80007fc <__aeabi_ddiv>
 8009d3e:	f7f6 fee3 	bl	8000b08 <__aeabi_d2iz>
 8009d42:	9002      	str	r0, [sp, #8]
 8009d44:	f7f6 fbc6 	bl	80004d4 <__aeabi_i2d>
 8009d48:	4642      	mov	r2, r8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	f7f6 fc2c 	bl	80005a8 <__aeabi_dmul>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 fa6e 	bl	8000238 <__aeabi_dsub>
 8009d5c:	9e02      	ldr	r6, [sp, #8]
 8009d5e:	9f01      	ldr	r7, [sp, #4]
 8009d60:	3630      	adds	r6, #48	; 0x30
 8009d62:	f805 6b01 	strb.w	r6, [r5], #1
 8009d66:	9e00      	ldr	r6, [sp, #0]
 8009d68:	1bae      	subs	r6, r5, r6
 8009d6a:	42b7      	cmp	r7, r6
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	d137      	bne.n	8009de2 <_dtoa_r+0x722>
 8009d72:	f7f6 fa63 	bl	800023c <__adddf3>
 8009d76:	4642      	mov	r2, r8
 8009d78:	464b      	mov	r3, r9
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	460f      	mov	r7, r1
 8009d7e:	f7f6 fea3 	bl	8000ac8 <__aeabi_dcmpgt>
 8009d82:	b9c8      	cbnz	r0, 8009db8 <_dtoa_r+0x6f8>
 8009d84:	4642      	mov	r2, r8
 8009d86:	464b      	mov	r3, r9
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 fe74 	bl	8000a78 <__aeabi_dcmpeq>
 8009d90:	b110      	cbz	r0, 8009d98 <_dtoa_r+0x6d8>
 8009d92:	9b02      	ldr	r3, [sp, #8]
 8009d94:	07d9      	lsls	r1, r3, #31
 8009d96:	d40f      	bmi.n	8009db8 <_dtoa_r+0x6f8>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	4659      	mov	r1, fp
 8009d9c:	f000 fcfa 	bl	800a794 <_Bfree>
 8009da0:	2300      	movs	r3, #0
 8009da2:	702b      	strb	r3, [r5, #0]
 8009da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009da6:	f10a 0001 	add.w	r0, sl, #1
 8009daa:	6018      	str	r0, [r3, #0]
 8009dac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f43f acd8 	beq.w	8009764 <_dtoa_r+0xa4>
 8009db4:	601d      	str	r5, [r3, #0]
 8009db6:	e4d5      	b.n	8009764 <_dtoa_r+0xa4>
 8009db8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dc4:	2a39      	cmp	r2, #57	; 0x39
 8009dc6:	d108      	bne.n	8009dda <_dtoa_r+0x71a>
 8009dc8:	9a00      	ldr	r2, [sp, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d1f7      	bne.n	8009dbe <_dtoa_r+0x6fe>
 8009dce:	9a07      	ldr	r2, [sp, #28]
 8009dd0:	9900      	ldr	r1, [sp, #0]
 8009dd2:	3201      	adds	r2, #1
 8009dd4:	9207      	str	r2, [sp, #28]
 8009dd6:	2230      	movs	r2, #48	; 0x30
 8009dd8:	700a      	strb	r2, [r1, #0]
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	3201      	adds	r2, #1
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	e78c      	b.n	8009cfc <_dtoa_r+0x63c>
 8009de2:	4b7f      	ldr	r3, [pc, #508]	; (8009fe0 <_dtoa_r+0x920>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	f7f6 fbdf 	bl	80005a8 <__aeabi_dmul>
 8009dea:	2200      	movs	r2, #0
 8009dec:	2300      	movs	r3, #0
 8009dee:	4606      	mov	r6, r0
 8009df0:	460f      	mov	r7, r1
 8009df2:	f7f6 fe41 	bl	8000a78 <__aeabi_dcmpeq>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d09b      	beq.n	8009d32 <_dtoa_r+0x672>
 8009dfa:	e7cd      	b.n	8009d98 <_dtoa_r+0x6d8>
 8009dfc:	9a08      	ldr	r2, [sp, #32]
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	f000 80c4 	beq.w	8009f8c <_dtoa_r+0x8cc>
 8009e04:	9a05      	ldr	r2, [sp, #20]
 8009e06:	2a01      	cmp	r2, #1
 8009e08:	f300 80a8 	bgt.w	8009f5c <_dtoa_r+0x89c>
 8009e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	f000 80a0 	beq.w	8009f54 <_dtoa_r+0x894>
 8009e14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e18:	9e06      	ldr	r6, [sp, #24]
 8009e1a:	4645      	mov	r5, r8
 8009e1c:	9a04      	ldr	r2, [sp, #16]
 8009e1e:	2101      	movs	r1, #1
 8009e20:	441a      	add	r2, r3
 8009e22:	4620      	mov	r0, r4
 8009e24:	4498      	add	r8, r3
 8009e26:	9204      	str	r2, [sp, #16]
 8009e28:	f000 fd70 	bl	800a90c <__i2b>
 8009e2c:	4607      	mov	r7, r0
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	dd0b      	ble.n	8009e4a <_dtoa_r+0x78a>
 8009e32:	9b04      	ldr	r3, [sp, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dd08      	ble.n	8009e4a <_dtoa_r+0x78a>
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	9a04      	ldr	r2, [sp, #16]
 8009e3c:	bfa8      	it	ge
 8009e3e:	462b      	movge	r3, r5
 8009e40:	eba8 0803 	sub.w	r8, r8, r3
 8009e44:	1aed      	subs	r5, r5, r3
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	9b06      	ldr	r3, [sp, #24]
 8009e4c:	b1fb      	cbz	r3, 8009e8e <_dtoa_r+0x7ce>
 8009e4e:	9b08      	ldr	r3, [sp, #32]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 809f 	beq.w	8009f94 <_dtoa_r+0x8d4>
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	dd11      	ble.n	8009e7e <_dtoa_r+0x7be>
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	4632      	mov	r2, r6
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 fe10 	bl	800aa84 <__pow5mult>
 8009e64:	465a      	mov	r2, fp
 8009e66:	4601      	mov	r1, r0
 8009e68:	4607      	mov	r7, r0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fd64 	bl	800a938 <__multiply>
 8009e70:	4659      	mov	r1, fp
 8009e72:	9007      	str	r0, [sp, #28]
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fc8d 	bl	800a794 <_Bfree>
 8009e7a:	9b07      	ldr	r3, [sp, #28]
 8009e7c:	469b      	mov	fp, r3
 8009e7e:	9b06      	ldr	r3, [sp, #24]
 8009e80:	1b9a      	subs	r2, r3, r6
 8009e82:	d004      	beq.n	8009e8e <_dtoa_r+0x7ce>
 8009e84:	4659      	mov	r1, fp
 8009e86:	4620      	mov	r0, r4
 8009e88:	f000 fdfc 	bl	800aa84 <__pow5mult>
 8009e8c:	4683      	mov	fp, r0
 8009e8e:	2101      	movs	r1, #1
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fd3b 	bl	800a90c <__i2b>
 8009e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	dd7c      	ble.n	8009f98 <_dtoa_r+0x8d8>
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fdee 	bl	800aa84 <__pow5mult>
 8009ea8:	9b05      	ldr	r3, [sp, #20]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	4606      	mov	r6, r0
 8009eae:	dd76      	ble.n	8009f9e <_dtoa_r+0x8de>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9306      	str	r3, [sp, #24]
 8009eb4:	6933      	ldr	r3, [r6, #16]
 8009eb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009eba:	6918      	ldr	r0, [r3, #16]
 8009ebc:	f000 fcd6 	bl	800a86c <__hi0bits>
 8009ec0:	f1c0 0020 	rsb	r0, r0, #32
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	4418      	add	r0, r3
 8009ec8:	f010 001f 	ands.w	r0, r0, #31
 8009ecc:	f000 8086 	beq.w	8009fdc <_dtoa_r+0x91c>
 8009ed0:	f1c0 0320 	rsb	r3, r0, #32
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	dd7f      	ble.n	8009fd8 <_dtoa_r+0x918>
 8009ed8:	f1c0 001c 	rsb	r0, r0, #28
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	4403      	add	r3, r0
 8009ee0:	4480      	add	r8, r0
 8009ee2:	4405      	add	r5, r0
 8009ee4:	9304      	str	r3, [sp, #16]
 8009ee6:	f1b8 0f00 	cmp.w	r8, #0
 8009eea:	dd05      	ble.n	8009ef8 <_dtoa_r+0x838>
 8009eec:	4659      	mov	r1, fp
 8009eee:	4642      	mov	r2, r8
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 fe21 	bl	800ab38 <__lshift>
 8009ef6:	4683      	mov	fp, r0
 8009ef8:	9b04      	ldr	r3, [sp, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	dd05      	ble.n	8009f0a <_dtoa_r+0x84a>
 8009efe:	4631      	mov	r1, r6
 8009f00:	461a      	mov	r2, r3
 8009f02:	4620      	mov	r0, r4
 8009f04:	f000 fe18 	bl	800ab38 <__lshift>
 8009f08:	4606      	mov	r6, r0
 8009f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d069      	beq.n	8009fe4 <_dtoa_r+0x924>
 8009f10:	4631      	mov	r1, r6
 8009f12:	4658      	mov	r0, fp
 8009f14:	f000 fe7c 	bl	800ac10 <__mcmp>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	da63      	bge.n	8009fe4 <_dtoa_r+0x924>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4659      	mov	r1, fp
 8009f20:	220a      	movs	r2, #10
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 fc58 	bl	800a7d8 <__multadd>
 8009f28:	9b08      	ldr	r3, [sp, #32]
 8009f2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009f2e:	4683      	mov	fp, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 818f 	beq.w	800a254 <_dtoa_r+0xb94>
 8009f36:	4639      	mov	r1, r7
 8009f38:	2300      	movs	r3, #0
 8009f3a:	220a      	movs	r2, #10
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fc4b 	bl	800a7d8 <__multadd>
 8009f42:	f1b9 0f00 	cmp.w	r9, #0
 8009f46:	4607      	mov	r7, r0
 8009f48:	f300 808e 	bgt.w	800a068 <_dtoa_r+0x9a8>
 8009f4c:	9b05      	ldr	r3, [sp, #20]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	dc50      	bgt.n	8009ff4 <_dtoa_r+0x934>
 8009f52:	e089      	b.n	800a068 <_dtoa_r+0x9a8>
 8009f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f5a:	e75d      	b.n	8009e18 <_dtoa_r+0x758>
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	1e5e      	subs	r6, r3, #1
 8009f60:	9b06      	ldr	r3, [sp, #24]
 8009f62:	42b3      	cmp	r3, r6
 8009f64:	bfbf      	itttt	lt
 8009f66:	9b06      	ldrlt	r3, [sp, #24]
 8009f68:	9606      	strlt	r6, [sp, #24]
 8009f6a:	1af2      	sublt	r2, r6, r3
 8009f6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009f6e:	bfb6      	itet	lt
 8009f70:	189b      	addlt	r3, r3, r2
 8009f72:	1b9e      	subge	r6, r3, r6
 8009f74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009f76:	9b01      	ldr	r3, [sp, #4]
 8009f78:	bfb8      	it	lt
 8009f7a:	2600      	movlt	r6, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfb5      	itete	lt
 8009f80:	eba8 0503 	sublt.w	r5, r8, r3
 8009f84:	9b01      	ldrge	r3, [sp, #4]
 8009f86:	2300      	movlt	r3, #0
 8009f88:	4645      	movge	r5, r8
 8009f8a:	e747      	b.n	8009e1c <_dtoa_r+0x75c>
 8009f8c:	9e06      	ldr	r6, [sp, #24]
 8009f8e:	9f08      	ldr	r7, [sp, #32]
 8009f90:	4645      	mov	r5, r8
 8009f92:	e74c      	b.n	8009e2e <_dtoa_r+0x76e>
 8009f94:	9a06      	ldr	r2, [sp, #24]
 8009f96:	e775      	b.n	8009e84 <_dtoa_r+0x7c4>
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	dc18      	bgt.n	8009fd0 <_dtoa_r+0x910>
 8009f9e:	9b02      	ldr	r3, [sp, #8]
 8009fa0:	b9b3      	cbnz	r3, 8009fd0 <_dtoa_r+0x910>
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fa8:	b9a3      	cbnz	r3, 8009fd4 <_dtoa_r+0x914>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fb0:	0d1b      	lsrs	r3, r3, #20
 8009fb2:	051b      	lsls	r3, r3, #20
 8009fb4:	b12b      	cbz	r3, 8009fc2 <_dtoa_r+0x902>
 8009fb6:	9b04      	ldr	r3, [sp, #16]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	9304      	str	r3, [sp, #16]
 8009fbc:	f108 0801 	add.w	r8, r8, #1
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	9306      	str	r3, [sp, #24]
 8009fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f47f af74 	bne.w	8009eb4 <_dtoa_r+0x7f4>
 8009fcc:	2001      	movs	r0, #1
 8009fce:	e779      	b.n	8009ec4 <_dtoa_r+0x804>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e7f6      	b.n	8009fc2 <_dtoa_r+0x902>
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	e7f4      	b.n	8009fc2 <_dtoa_r+0x902>
 8009fd8:	d085      	beq.n	8009ee6 <_dtoa_r+0x826>
 8009fda:	4618      	mov	r0, r3
 8009fdc:	301c      	adds	r0, #28
 8009fde:	e77d      	b.n	8009edc <_dtoa_r+0x81c>
 8009fe0:	40240000 	.word	0x40240000
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dc38      	bgt.n	800a05c <_dtoa_r+0x99c>
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	dd35      	ble.n	800a05c <_dtoa_r+0x99c>
 8009ff0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009ff4:	f1b9 0f00 	cmp.w	r9, #0
 8009ff8:	d10d      	bne.n	800a016 <_dtoa_r+0x956>
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	2205      	movs	r2, #5
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fbe9 	bl	800a7d8 <__multadd>
 800a006:	4601      	mov	r1, r0
 800a008:	4606      	mov	r6, r0
 800a00a:	4658      	mov	r0, fp
 800a00c:	f000 fe00 	bl	800ac10 <__mcmp>
 800a010:	2800      	cmp	r0, #0
 800a012:	f73f adbd 	bgt.w	8009b90 <_dtoa_r+0x4d0>
 800a016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a018:	9d00      	ldr	r5, [sp, #0]
 800a01a:	ea6f 0a03 	mvn.w	sl, r3
 800a01e:	f04f 0800 	mov.w	r8, #0
 800a022:	4631      	mov	r1, r6
 800a024:	4620      	mov	r0, r4
 800a026:	f000 fbb5 	bl	800a794 <_Bfree>
 800a02a:	2f00      	cmp	r7, #0
 800a02c:	f43f aeb4 	beq.w	8009d98 <_dtoa_r+0x6d8>
 800a030:	f1b8 0f00 	cmp.w	r8, #0
 800a034:	d005      	beq.n	800a042 <_dtoa_r+0x982>
 800a036:	45b8      	cmp	r8, r7
 800a038:	d003      	beq.n	800a042 <_dtoa_r+0x982>
 800a03a:	4641      	mov	r1, r8
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fba9 	bl	800a794 <_Bfree>
 800a042:	4639      	mov	r1, r7
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fba5 	bl	800a794 <_Bfree>
 800a04a:	e6a5      	b.n	8009d98 <_dtoa_r+0x6d8>
 800a04c:	2600      	movs	r6, #0
 800a04e:	4637      	mov	r7, r6
 800a050:	e7e1      	b.n	800a016 <_dtoa_r+0x956>
 800a052:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a054:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a058:	4637      	mov	r7, r6
 800a05a:	e599      	b.n	8009b90 <_dtoa_r+0x4d0>
 800a05c:	9b08      	ldr	r3, [sp, #32]
 800a05e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 80fd 	beq.w	800a262 <_dtoa_r+0xba2>
 800a068:	2d00      	cmp	r5, #0
 800a06a:	dd05      	ble.n	800a078 <_dtoa_r+0x9b8>
 800a06c:	4639      	mov	r1, r7
 800a06e:	462a      	mov	r2, r5
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fd61 	bl	800ab38 <__lshift>
 800a076:	4607      	mov	r7, r0
 800a078:	9b06      	ldr	r3, [sp, #24]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d05c      	beq.n	800a138 <_dtoa_r+0xa78>
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fb47 	bl	800a714 <_Balloc>
 800a086:	4605      	mov	r5, r0
 800a088:	b928      	cbnz	r0, 800a096 <_dtoa_r+0x9d6>
 800a08a:	4b80      	ldr	r3, [pc, #512]	; (800a28c <_dtoa_r+0xbcc>)
 800a08c:	4602      	mov	r2, r0
 800a08e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a092:	f7ff bb2e 	b.w	80096f2 <_dtoa_r+0x32>
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	3202      	adds	r2, #2
 800a09a:	0092      	lsls	r2, r2, #2
 800a09c:	f107 010c 	add.w	r1, r7, #12
 800a0a0:	300c      	adds	r0, #12
 800a0a2:	f000 fb1d 	bl	800a6e0 <memcpy>
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 fd44 	bl	800ab38 <__lshift>
 800a0b0:	9b00      	ldr	r3, [sp, #0]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	444b      	add	r3, r9
 800a0ba:	9307      	str	r3, [sp, #28]
 800a0bc:	9b02      	ldr	r3, [sp, #8]
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	46b8      	mov	r8, r7
 800a0c4:	9306      	str	r3, [sp, #24]
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	9b01      	ldr	r3, [sp, #4]
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	4658      	mov	r0, fp
 800a0d0:	9302      	str	r3, [sp, #8]
 800a0d2:	f7ff fa69 	bl	80095a8 <quorem>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	3330      	adds	r3, #48	; 0x30
 800a0da:	9004      	str	r0, [sp, #16]
 800a0dc:	4641      	mov	r1, r8
 800a0de:	4658      	mov	r0, fp
 800a0e0:	9308      	str	r3, [sp, #32]
 800a0e2:	f000 fd95 	bl	800ac10 <__mcmp>
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	4681      	mov	r9, r0
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 fdab 	bl	800ac48 <__mdiff>
 800a0f2:	68c2      	ldr	r2, [r0, #12]
 800a0f4:	9b08      	ldr	r3, [sp, #32]
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	bb02      	cbnz	r2, 800a13c <_dtoa_r+0xa7c>
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	f000 fd87 	bl	800ac10 <__mcmp>
 800a102:	9b08      	ldr	r3, [sp, #32]
 800a104:	4602      	mov	r2, r0
 800a106:	4629      	mov	r1, r5
 800a108:	4620      	mov	r0, r4
 800a10a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a10e:	f000 fb41 	bl	800a794 <_Bfree>
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a116:	9d01      	ldr	r5, [sp, #4]
 800a118:	ea43 0102 	orr.w	r1, r3, r2
 800a11c:	9b06      	ldr	r3, [sp, #24]
 800a11e:	430b      	orrs	r3, r1
 800a120:	9b08      	ldr	r3, [sp, #32]
 800a122:	d10d      	bne.n	800a140 <_dtoa_r+0xa80>
 800a124:	2b39      	cmp	r3, #57	; 0x39
 800a126:	d029      	beq.n	800a17c <_dtoa_r+0xabc>
 800a128:	f1b9 0f00 	cmp.w	r9, #0
 800a12c:	dd01      	ble.n	800a132 <_dtoa_r+0xa72>
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	3331      	adds	r3, #49	; 0x31
 800a132:	9a02      	ldr	r2, [sp, #8]
 800a134:	7013      	strb	r3, [r2, #0]
 800a136:	e774      	b.n	800a022 <_dtoa_r+0x962>
 800a138:	4638      	mov	r0, r7
 800a13a:	e7b9      	b.n	800a0b0 <_dtoa_r+0x9f0>
 800a13c:	2201      	movs	r2, #1
 800a13e:	e7e2      	b.n	800a106 <_dtoa_r+0xa46>
 800a140:	f1b9 0f00 	cmp.w	r9, #0
 800a144:	db06      	blt.n	800a154 <_dtoa_r+0xa94>
 800a146:	9905      	ldr	r1, [sp, #20]
 800a148:	ea41 0909 	orr.w	r9, r1, r9
 800a14c:	9906      	ldr	r1, [sp, #24]
 800a14e:	ea59 0101 	orrs.w	r1, r9, r1
 800a152:	d120      	bne.n	800a196 <_dtoa_r+0xad6>
 800a154:	2a00      	cmp	r2, #0
 800a156:	ddec      	ble.n	800a132 <_dtoa_r+0xa72>
 800a158:	4659      	mov	r1, fp
 800a15a:	2201      	movs	r2, #1
 800a15c:	4620      	mov	r0, r4
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	f000 fcea 	bl	800ab38 <__lshift>
 800a164:	4631      	mov	r1, r6
 800a166:	4683      	mov	fp, r0
 800a168:	f000 fd52 	bl	800ac10 <__mcmp>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	9b01      	ldr	r3, [sp, #4]
 800a170:	dc02      	bgt.n	800a178 <_dtoa_r+0xab8>
 800a172:	d1de      	bne.n	800a132 <_dtoa_r+0xa72>
 800a174:	07da      	lsls	r2, r3, #31
 800a176:	d5dc      	bpl.n	800a132 <_dtoa_r+0xa72>
 800a178:	2b39      	cmp	r3, #57	; 0x39
 800a17a:	d1d8      	bne.n	800a12e <_dtoa_r+0xa6e>
 800a17c:	9a02      	ldr	r2, [sp, #8]
 800a17e:	2339      	movs	r3, #57	; 0x39
 800a180:	7013      	strb	r3, [r2, #0]
 800a182:	462b      	mov	r3, r5
 800a184:	461d      	mov	r5, r3
 800a186:	3b01      	subs	r3, #1
 800a188:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a18c:	2a39      	cmp	r2, #57	; 0x39
 800a18e:	d050      	beq.n	800a232 <_dtoa_r+0xb72>
 800a190:	3201      	adds	r2, #1
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	e745      	b.n	800a022 <_dtoa_r+0x962>
 800a196:	2a00      	cmp	r2, #0
 800a198:	dd03      	ble.n	800a1a2 <_dtoa_r+0xae2>
 800a19a:	2b39      	cmp	r3, #57	; 0x39
 800a19c:	d0ee      	beq.n	800a17c <_dtoa_r+0xabc>
 800a19e:	3301      	adds	r3, #1
 800a1a0:	e7c7      	b.n	800a132 <_dtoa_r+0xa72>
 800a1a2:	9a01      	ldr	r2, [sp, #4]
 800a1a4:	9907      	ldr	r1, [sp, #28]
 800a1a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1aa:	428a      	cmp	r2, r1
 800a1ac:	d02a      	beq.n	800a204 <_dtoa_r+0xb44>
 800a1ae:	4659      	mov	r1, fp
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	220a      	movs	r2, #10
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 fb0f 	bl	800a7d8 <__multadd>
 800a1ba:	45b8      	cmp	r8, r7
 800a1bc:	4683      	mov	fp, r0
 800a1be:	f04f 0300 	mov.w	r3, #0
 800a1c2:	f04f 020a 	mov.w	r2, #10
 800a1c6:	4641      	mov	r1, r8
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	d107      	bne.n	800a1dc <_dtoa_r+0xb1c>
 800a1cc:	f000 fb04 	bl	800a7d8 <__multadd>
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4607      	mov	r7, r0
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	e775      	b.n	800a0c8 <_dtoa_r+0xa08>
 800a1dc:	f000 fafc 	bl	800a7d8 <__multadd>
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	220a      	movs	r2, #10
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 faf5 	bl	800a7d8 <__multadd>
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	e7f0      	b.n	800a1d4 <_dtoa_r+0xb14>
 800a1f2:	f1b9 0f00 	cmp.w	r9, #0
 800a1f6:	9a00      	ldr	r2, [sp, #0]
 800a1f8:	bfcc      	ite	gt
 800a1fa:	464d      	movgt	r5, r9
 800a1fc:	2501      	movle	r5, #1
 800a1fe:	4415      	add	r5, r2
 800a200:	f04f 0800 	mov.w	r8, #0
 800a204:	4659      	mov	r1, fp
 800a206:	2201      	movs	r2, #1
 800a208:	4620      	mov	r0, r4
 800a20a:	9301      	str	r3, [sp, #4]
 800a20c:	f000 fc94 	bl	800ab38 <__lshift>
 800a210:	4631      	mov	r1, r6
 800a212:	4683      	mov	fp, r0
 800a214:	f000 fcfc 	bl	800ac10 <__mcmp>
 800a218:	2800      	cmp	r0, #0
 800a21a:	dcb2      	bgt.n	800a182 <_dtoa_r+0xac2>
 800a21c:	d102      	bne.n	800a224 <_dtoa_r+0xb64>
 800a21e:	9b01      	ldr	r3, [sp, #4]
 800a220:	07db      	lsls	r3, r3, #31
 800a222:	d4ae      	bmi.n	800a182 <_dtoa_r+0xac2>
 800a224:	462b      	mov	r3, r5
 800a226:	461d      	mov	r5, r3
 800a228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a22c:	2a30      	cmp	r2, #48	; 0x30
 800a22e:	d0fa      	beq.n	800a226 <_dtoa_r+0xb66>
 800a230:	e6f7      	b.n	800a022 <_dtoa_r+0x962>
 800a232:	9a00      	ldr	r2, [sp, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d1a5      	bne.n	800a184 <_dtoa_r+0xac4>
 800a238:	f10a 0a01 	add.w	sl, sl, #1
 800a23c:	2331      	movs	r3, #49	; 0x31
 800a23e:	e779      	b.n	800a134 <_dtoa_r+0xa74>
 800a240:	4b13      	ldr	r3, [pc, #76]	; (800a290 <_dtoa_r+0xbd0>)
 800a242:	f7ff baaf 	b.w	80097a4 <_dtoa_r+0xe4>
 800a246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f47f aa86 	bne.w	800975a <_dtoa_r+0x9a>
 800a24e:	4b11      	ldr	r3, [pc, #68]	; (800a294 <_dtoa_r+0xbd4>)
 800a250:	f7ff baa8 	b.w	80097a4 <_dtoa_r+0xe4>
 800a254:	f1b9 0f00 	cmp.w	r9, #0
 800a258:	dc03      	bgt.n	800a262 <_dtoa_r+0xba2>
 800a25a:	9b05      	ldr	r3, [sp, #20]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	f73f aec9 	bgt.w	8009ff4 <_dtoa_r+0x934>
 800a262:	9d00      	ldr	r5, [sp, #0]
 800a264:	4631      	mov	r1, r6
 800a266:	4658      	mov	r0, fp
 800a268:	f7ff f99e 	bl	80095a8 <quorem>
 800a26c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a270:	f805 3b01 	strb.w	r3, [r5], #1
 800a274:	9a00      	ldr	r2, [sp, #0]
 800a276:	1aaa      	subs	r2, r5, r2
 800a278:	4591      	cmp	r9, r2
 800a27a:	ddba      	ble.n	800a1f2 <_dtoa_r+0xb32>
 800a27c:	4659      	mov	r1, fp
 800a27e:	2300      	movs	r3, #0
 800a280:	220a      	movs	r2, #10
 800a282:	4620      	mov	r0, r4
 800a284:	f000 faa8 	bl	800a7d8 <__multadd>
 800a288:	4683      	mov	fp, r0
 800a28a:	e7eb      	b.n	800a264 <_dtoa_r+0xba4>
 800a28c:	0800b693 	.word	0x0800b693
 800a290:	0800b5ec 	.word	0x0800b5ec
 800a294:	0800b610 	.word	0x0800b610

0800a298 <__sflush_r>:
 800a298:	898a      	ldrh	r2, [r1, #12]
 800a29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29e:	4605      	mov	r5, r0
 800a2a0:	0710      	lsls	r0, r2, #28
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	d458      	bmi.n	800a358 <__sflush_r+0xc0>
 800a2a6:	684b      	ldr	r3, [r1, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dc05      	bgt.n	800a2b8 <__sflush_r+0x20>
 800a2ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dc02      	bgt.n	800a2b8 <__sflush_r+0x20>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	d0f9      	beq.n	800a2b2 <__sflush_r+0x1a>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2c4:	682f      	ldr	r7, [r5, #0]
 800a2c6:	602b      	str	r3, [r5, #0]
 800a2c8:	d032      	beq.n	800a330 <__sflush_r+0x98>
 800a2ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	075a      	lsls	r2, r3, #29
 800a2d0:	d505      	bpl.n	800a2de <__sflush_r+0x46>
 800a2d2:	6863      	ldr	r3, [r4, #4]
 800a2d4:	1ac0      	subs	r0, r0, r3
 800a2d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2d8:	b10b      	cbz	r3, 800a2de <__sflush_r+0x46>
 800a2da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2dc:	1ac0      	subs	r0, r0, r3
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2e4:	6a21      	ldr	r1, [r4, #32]
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b0      	blx	r6
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	d106      	bne.n	800a2fe <__sflush_r+0x66>
 800a2f0:	6829      	ldr	r1, [r5, #0]
 800a2f2:	291d      	cmp	r1, #29
 800a2f4:	d82c      	bhi.n	800a350 <__sflush_r+0xb8>
 800a2f6:	4a2a      	ldr	r2, [pc, #168]	; (800a3a0 <__sflush_r+0x108>)
 800a2f8:	40ca      	lsrs	r2, r1
 800a2fa:	07d6      	lsls	r6, r2, #31
 800a2fc:	d528      	bpl.n	800a350 <__sflush_r+0xb8>
 800a2fe:	2200      	movs	r2, #0
 800a300:	6062      	str	r2, [r4, #4]
 800a302:	04d9      	lsls	r1, r3, #19
 800a304:	6922      	ldr	r2, [r4, #16]
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	d504      	bpl.n	800a314 <__sflush_r+0x7c>
 800a30a:	1c42      	adds	r2, r0, #1
 800a30c:	d101      	bne.n	800a312 <__sflush_r+0x7a>
 800a30e:	682b      	ldr	r3, [r5, #0]
 800a310:	b903      	cbnz	r3, 800a314 <__sflush_r+0x7c>
 800a312:	6560      	str	r0, [r4, #84]	; 0x54
 800a314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a316:	602f      	str	r7, [r5, #0]
 800a318:	2900      	cmp	r1, #0
 800a31a:	d0ca      	beq.n	800a2b2 <__sflush_r+0x1a>
 800a31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a320:	4299      	cmp	r1, r3
 800a322:	d002      	beq.n	800a32a <__sflush_r+0x92>
 800a324:	4628      	mov	r0, r5
 800a326:	f7fe fa89 	bl	800883c <_free_r>
 800a32a:	2000      	movs	r0, #0
 800a32c:	6360      	str	r0, [r4, #52]	; 0x34
 800a32e:	e7c1      	b.n	800a2b4 <__sflush_r+0x1c>
 800a330:	6a21      	ldr	r1, [r4, #32]
 800a332:	2301      	movs	r3, #1
 800a334:	4628      	mov	r0, r5
 800a336:	47b0      	blx	r6
 800a338:	1c41      	adds	r1, r0, #1
 800a33a:	d1c7      	bne.n	800a2cc <__sflush_r+0x34>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0c4      	beq.n	800a2cc <__sflush_r+0x34>
 800a342:	2b1d      	cmp	r3, #29
 800a344:	d001      	beq.n	800a34a <__sflush_r+0xb2>
 800a346:	2b16      	cmp	r3, #22
 800a348:	d101      	bne.n	800a34e <__sflush_r+0xb6>
 800a34a:	602f      	str	r7, [r5, #0]
 800a34c:	e7b1      	b.n	800a2b2 <__sflush_r+0x1a>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a354:	81a3      	strh	r3, [r4, #12]
 800a356:	e7ad      	b.n	800a2b4 <__sflush_r+0x1c>
 800a358:	690f      	ldr	r7, [r1, #16]
 800a35a:	2f00      	cmp	r7, #0
 800a35c:	d0a9      	beq.n	800a2b2 <__sflush_r+0x1a>
 800a35e:	0793      	lsls	r3, r2, #30
 800a360:	680e      	ldr	r6, [r1, #0]
 800a362:	bf08      	it	eq
 800a364:	694b      	ldreq	r3, [r1, #20]
 800a366:	600f      	str	r7, [r1, #0]
 800a368:	bf18      	it	ne
 800a36a:	2300      	movne	r3, #0
 800a36c:	eba6 0807 	sub.w	r8, r6, r7
 800a370:	608b      	str	r3, [r1, #8]
 800a372:	f1b8 0f00 	cmp.w	r8, #0
 800a376:	dd9c      	ble.n	800a2b2 <__sflush_r+0x1a>
 800a378:	6a21      	ldr	r1, [r4, #32]
 800a37a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a37c:	4643      	mov	r3, r8
 800a37e:	463a      	mov	r2, r7
 800a380:	4628      	mov	r0, r5
 800a382:	47b0      	blx	r6
 800a384:	2800      	cmp	r0, #0
 800a386:	dc06      	bgt.n	800a396 <__sflush_r+0xfe>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a394:	e78e      	b.n	800a2b4 <__sflush_r+0x1c>
 800a396:	4407      	add	r7, r0
 800a398:	eba8 0800 	sub.w	r8, r8, r0
 800a39c:	e7e9      	b.n	800a372 <__sflush_r+0xda>
 800a39e:	bf00      	nop
 800a3a0:	20400001 	.word	0x20400001

0800a3a4 <_fflush_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	690b      	ldr	r3, [r1, #16]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	b913      	cbnz	r3, 800a3b4 <_fflush_r+0x10>
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	b118      	cbz	r0, 800a3be <_fflush_r+0x1a>
 800a3b6:	6983      	ldr	r3, [r0, #24]
 800a3b8:	b90b      	cbnz	r3, 800a3be <_fflush_r+0x1a>
 800a3ba:	f000 f887 	bl	800a4cc <__sinit>
 800a3be:	4b14      	ldr	r3, [pc, #80]	; (800a410 <_fflush_r+0x6c>)
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	d11b      	bne.n	800a3fc <_fflush_r+0x58>
 800a3c4:	686c      	ldr	r4, [r5, #4]
 800a3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0ef      	beq.n	800a3ae <_fflush_r+0xa>
 800a3ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3d0:	07d0      	lsls	r0, r2, #31
 800a3d2:	d404      	bmi.n	800a3de <_fflush_r+0x3a>
 800a3d4:	0599      	lsls	r1, r3, #22
 800a3d6:	d402      	bmi.n	800a3de <_fflush_r+0x3a>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3da:	f000 f91a 	bl	800a612 <__retarget_lock_acquire_recursive>
 800a3de:	4628      	mov	r0, r5
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	f7ff ff59 	bl	800a298 <__sflush_r>
 800a3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3e8:	07da      	lsls	r2, r3, #31
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	d4e0      	bmi.n	800a3b0 <_fflush_r+0xc>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d4dd      	bmi.n	800a3b0 <_fflush_r+0xc>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f6:	f000 f90d 	bl	800a614 <__retarget_lock_release_recursive>
 800a3fa:	e7d9      	b.n	800a3b0 <_fflush_r+0xc>
 800a3fc:	4b05      	ldr	r3, [pc, #20]	; (800a414 <_fflush_r+0x70>)
 800a3fe:	429c      	cmp	r4, r3
 800a400:	d101      	bne.n	800a406 <_fflush_r+0x62>
 800a402:	68ac      	ldr	r4, [r5, #8]
 800a404:	e7df      	b.n	800a3c6 <_fflush_r+0x22>
 800a406:	4b04      	ldr	r3, [pc, #16]	; (800a418 <_fflush_r+0x74>)
 800a408:	429c      	cmp	r4, r3
 800a40a:	bf08      	it	eq
 800a40c:	68ec      	ldreq	r4, [r5, #12]
 800a40e:	e7da      	b.n	800a3c6 <_fflush_r+0x22>
 800a410:	0800b6c4 	.word	0x0800b6c4
 800a414:	0800b6e4 	.word	0x0800b6e4
 800a418:	0800b6a4 	.word	0x0800b6a4

0800a41c <std>:
 800a41c:	2300      	movs	r3, #0
 800a41e:	b510      	push	{r4, lr}
 800a420:	4604      	mov	r4, r0
 800a422:	e9c0 3300 	strd	r3, r3, [r0]
 800a426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a42a:	6083      	str	r3, [r0, #8]
 800a42c:	8181      	strh	r1, [r0, #12]
 800a42e:	6643      	str	r3, [r0, #100]	; 0x64
 800a430:	81c2      	strh	r2, [r0, #14]
 800a432:	6183      	str	r3, [r0, #24]
 800a434:	4619      	mov	r1, r3
 800a436:	2208      	movs	r2, #8
 800a438:	305c      	adds	r0, #92	; 0x5c
 800a43a:	f7fe f9f7 	bl	800882c <memset>
 800a43e:	4b05      	ldr	r3, [pc, #20]	; (800a454 <std+0x38>)
 800a440:	6263      	str	r3, [r4, #36]	; 0x24
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <std+0x3c>)
 800a444:	62a3      	str	r3, [r4, #40]	; 0x28
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <std+0x40>)
 800a448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a44a:	4b05      	ldr	r3, [pc, #20]	; (800a460 <std+0x44>)
 800a44c:	6224      	str	r4, [r4, #32]
 800a44e:	6323      	str	r3, [r4, #48]	; 0x30
 800a450:	bd10      	pop	{r4, pc}
 800a452:	bf00      	nop
 800a454:	0800b0e1 	.word	0x0800b0e1
 800a458:	0800b103 	.word	0x0800b103
 800a45c:	0800b13b 	.word	0x0800b13b
 800a460:	0800b15f 	.word	0x0800b15f

0800a464 <_cleanup_r>:
 800a464:	4901      	ldr	r1, [pc, #4]	; (800a46c <_cleanup_r+0x8>)
 800a466:	f000 b8af 	b.w	800a5c8 <_fwalk_reent>
 800a46a:	bf00      	nop
 800a46c:	0800a3a5 	.word	0x0800a3a5

0800a470 <__sfmoreglue>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	1e4a      	subs	r2, r1, #1
 800a474:	2568      	movs	r5, #104	; 0x68
 800a476:	4355      	muls	r5, r2
 800a478:	460e      	mov	r6, r1
 800a47a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a47e:	f7fe fa2d 	bl	80088dc <_malloc_r>
 800a482:	4604      	mov	r4, r0
 800a484:	b140      	cbz	r0, 800a498 <__sfmoreglue+0x28>
 800a486:	2100      	movs	r1, #0
 800a488:	e9c0 1600 	strd	r1, r6, [r0]
 800a48c:	300c      	adds	r0, #12
 800a48e:	60a0      	str	r0, [r4, #8]
 800a490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a494:	f7fe f9ca 	bl	800882c <memset>
 800a498:	4620      	mov	r0, r4
 800a49a:	bd70      	pop	{r4, r5, r6, pc}

0800a49c <__sfp_lock_acquire>:
 800a49c:	4801      	ldr	r0, [pc, #4]	; (800a4a4 <__sfp_lock_acquire+0x8>)
 800a49e:	f000 b8b8 	b.w	800a612 <__retarget_lock_acquire_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	200003f8 	.word	0x200003f8

0800a4a8 <__sfp_lock_release>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	; (800a4b0 <__sfp_lock_release+0x8>)
 800a4aa:	f000 b8b3 	b.w	800a614 <__retarget_lock_release_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	200003f8 	.word	0x200003f8

0800a4b4 <__sinit_lock_acquire>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	; (800a4bc <__sinit_lock_acquire+0x8>)
 800a4b6:	f000 b8ac 	b.w	800a612 <__retarget_lock_acquire_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	200003f3 	.word	0x200003f3

0800a4c0 <__sinit_lock_release>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	; (800a4c8 <__sinit_lock_release+0x8>)
 800a4c2:	f000 b8a7 	b.w	800a614 <__retarget_lock_release_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	200003f3 	.word	0x200003f3

0800a4cc <__sinit>:
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	f7ff fff0 	bl	800a4b4 <__sinit_lock_acquire>
 800a4d4:	69a3      	ldr	r3, [r4, #24]
 800a4d6:	b11b      	cbz	r3, 800a4e0 <__sinit+0x14>
 800a4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4dc:	f7ff bff0 	b.w	800a4c0 <__sinit_lock_release>
 800a4e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4e4:	6523      	str	r3, [r4, #80]	; 0x50
 800a4e6:	4b13      	ldr	r3, [pc, #76]	; (800a534 <__sinit+0x68>)
 800a4e8:	4a13      	ldr	r2, [pc, #76]	; (800a538 <__sinit+0x6c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4ee:	42a3      	cmp	r3, r4
 800a4f0:	bf04      	itt	eq
 800a4f2:	2301      	moveq	r3, #1
 800a4f4:	61a3      	streq	r3, [r4, #24]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f820 	bl	800a53c <__sfp>
 800a4fc:	6060      	str	r0, [r4, #4]
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 f81c 	bl	800a53c <__sfp>
 800a504:	60a0      	str	r0, [r4, #8]
 800a506:	4620      	mov	r0, r4
 800a508:	f000 f818 	bl	800a53c <__sfp>
 800a50c:	2200      	movs	r2, #0
 800a50e:	60e0      	str	r0, [r4, #12]
 800a510:	2104      	movs	r1, #4
 800a512:	6860      	ldr	r0, [r4, #4]
 800a514:	f7ff ff82 	bl	800a41c <std>
 800a518:	68a0      	ldr	r0, [r4, #8]
 800a51a:	2201      	movs	r2, #1
 800a51c:	2109      	movs	r1, #9
 800a51e:	f7ff ff7d 	bl	800a41c <std>
 800a522:	68e0      	ldr	r0, [r4, #12]
 800a524:	2202      	movs	r2, #2
 800a526:	2112      	movs	r1, #18
 800a528:	f7ff ff78 	bl	800a41c <std>
 800a52c:	2301      	movs	r3, #1
 800a52e:	61a3      	str	r3, [r4, #24]
 800a530:	e7d2      	b.n	800a4d8 <__sinit+0xc>
 800a532:	bf00      	nop
 800a534:	0800b5d8 	.word	0x0800b5d8
 800a538:	0800a465 	.word	0x0800a465

0800a53c <__sfp>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	4607      	mov	r7, r0
 800a540:	f7ff ffac 	bl	800a49c <__sfp_lock_acquire>
 800a544:	4b1e      	ldr	r3, [pc, #120]	; (800a5c0 <__sfp+0x84>)
 800a546:	681e      	ldr	r6, [r3, #0]
 800a548:	69b3      	ldr	r3, [r6, #24]
 800a54a:	b913      	cbnz	r3, 800a552 <__sfp+0x16>
 800a54c:	4630      	mov	r0, r6
 800a54e:	f7ff ffbd 	bl	800a4cc <__sinit>
 800a552:	3648      	adds	r6, #72	; 0x48
 800a554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a558:	3b01      	subs	r3, #1
 800a55a:	d503      	bpl.n	800a564 <__sfp+0x28>
 800a55c:	6833      	ldr	r3, [r6, #0]
 800a55e:	b30b      	cbz	r3, 800a5a4 <__sfp+0x68>
 800a560:	6836      	ldr	r6, [r6, #0]
 800a562:	e7f7      	b.n	800a554 <__sfp+0x18>
 800a564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a568:	b9d5      	cbnz	r5, 800a5a0 <__sfp+0x64>
 800a56a:	4b16      	ldr	r3, [pc, #88]	; (800a5c4 <__sfp+0x88>)
 800a56c:	60e3      	str	r3, [r4, #12]
 800a56e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a572:	6665      	str	r5, [r4, #100]	; 0x64
 800a574:	f000 f84c 	bl	800a610 <__retarget_lock_init_recursive>
 800a578:	f7ff ff96 	bl	800a4a8 <__sfp_lock_release>
 800a57c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a584:	6025      	str	r5, [r4, #0]
 800a586:	61a5      	str	r5, [r4, #24]
 800a588:	2208      	movs	r2, #8
 800a58a:	4629      	mov	r1, r5
 800a58c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a590:	f7fe f94c 	bl	800882c <memset>
 800a594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a59c:	4620      	mov	r0, r4
 800a59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a0:	3468      	adds	r4, #104	; 0x68
 800a5a2:	e7d9      	b.n	800a558 <__sfp+0x1c>
 800a5a4:	2104      	movs	r1, #4
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f7ff ff62 	bl	800a470 <__sfmoreglue>
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	6030      	str	r0, [r6, #0]
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1d5      	bne.n	800a560 <__sfp+0x24>
 800a5b4:	f7ff ff78 	bl	800a4a8 <__sfp_lock_release>
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	e7ee      	b.n	800a59c <__sfp+0x60>
 800a5be:	bf00      	nop
 800a5c0:	0800b5d8 	.word	0x0800b5d8
 800a5c4:	ffff0001 	.word	0xffff0001

0800a5c8 <_fwalk_reent>:
 800a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	4688      	mov	r8, r1
 800a5d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5d4:	2700      	movs	r7, #0
 800a5d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5da:	f1b9 0901 	subs.w	r9, r9, #1
 800a5de:	d505      	bpl.n	800a5ec <_fwalk_reent+0x24>
 800a5e0:	6824      	ldr	r4, [r4, #0]
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	d1f7      	bne.n	800a5d6 <_fwalk_reent+0xe>
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ec:	89ab      	ldrh	r3, [r5, #12]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d907      	bls.n	800a602 <_fwalk_reent+0x3a>
 800a5f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	d003      	beq.n	800a602 <_fwalk_reent+0x3a>
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	47c0      	blx	r8
 800a600:	4307      	orrs	r7, r0
 800a602:	3568      	adds	r5, #104	; 0x68
 800a604:	e7e9      	b.n	800a5da <_fwalk_reent+0x12>
	...

0800a608 <_localeconv_r>:
 800a608:	4800      	ldr	r0, [pc, #0]	; (800a60c <_localeconv_r+0x4>)
 800a60a:	4770      	bx	lr
 800a60c:	20000188 	.word	0x20000188

0800a610 <__retarget_lock_init_recursive>:
 800a610:	4770      	bx	lr

0800a612 <__retarget_lock_acquire_recursive>:
 800a612:	4770      	bx	lr

0800a614 <__retarget_lock_release_recursive>:
 800a614:	4770      	bx	lr

0800a616 <__swhatbuf_r>:
 800a616:	b570      	push	{r4, r5, r6, lr}
 800a618:	460e      	mov	r6, r1
 800a61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61e:	2900      	cmp	r1, #0
 800a620:	b096      	sub	sp, #88	; 0x58
 800a622:	4614      	mov	r4, r2
 800a624:	461d      	mov	r5, r3
 800a626:	da07      	bge.n	800a638 <__swhatbuf_r+0x22>
 800a628:	2300      	movs	r3, #0
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	89b3      	ldrh	r3, [r6, #12]
 800a62e:	061a      	lsls	r2, r3, #24
 800a630:	d410      	bmi.n	800a654 <__swhatbuf_r+0x3e>
 800a632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a636:	e00e      	b.n	800a656 <__swhatbuf_r+0x40>
 800a638:	466a      	mov	r2, sp
 800a63a:	f000 fde7 	bl	800b20c <_fstat_r>
 800a63e:	2800      	cmp	r0, #0
 800a640:	dbf2      	blt.n	800a628 <__swhatbuf_r+0x12>
 800a642:	9a01      	ldr	r2, [sp, #4]
 800a644:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a648:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a64c:	425a      	negs	r2, r3
 800a64e:	415a      	adcs	r2, r3
 800a650:	602a      	str	r2, [r5, #0]
 800a652:	e7ee      	b.n	800a632 <__swhatbuf_r+0x1c>
 800a654:	2340      	movs	r3, #64	; 0x40
 800a656:	2000      	movs	r0, #0
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	b016      	add	sp, #88	; 0x58
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a660 <__smakebuf_r>:
 800a660:	898b      	ldrh	r3, [r1, #12]
 800a662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a664:	079d      	lsls	r5, r3, #30
 800a666:	4606      	mov	r6, r0
 800a668:	460c      	mov	r4, r1
 800a66a:	d507      	bpl.n	800a67c <__smakebuf_r+0x1c>
 800a66c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	6123      	str	r3, [r4, #16]
 800a674:	2301      	movs	r3, #1
 800a676:	6163      	str	r3, [r4, #20]
 800a678:	b002      	add	sp, #8
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	ab01      	add	r3, sp, #4
 800a67e:	466a      	mov	r2, sp
 800a680:	f7ff ffc9 	bl	800a616 <__swhatbuf_r>
 800a684:	9900      	ldr	r1, [sp, #0]
 800a686:	4605      	mov	r5, r0
 800a688:	4630      	mov	r0, r6
 800a68a:	f7fe f927 	bl	80088dc <_malloc_r>
 800a68e:	b948      	cbnz	r0, 800a6a4 <__smakebuf_r+0x44>
 800a690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a694:	059a      	lsls	r2, r3, #22
 800a696:	d4ef      	bmi.n	800a678 <__smakebuf_r+0x18>
 800a698:	f023 0303 	bic.w	r3, r3, #3
 800a69c:	f043 0302 	orr.w	r3, r3, #2
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	e7e3      	b.n	800a66c <__smakebuf_r+0xc>
 800a6a4:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <__smakebuf_r+0x7c>)
 800a6a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	6020      	str	r0, [r4, #0]
 800a6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	9b00      	ldr	r3, [sp, #0]
 800a6b4:	6163      	str	r3, [r4, #20]
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	6120      	str	r0, [r4, #16]
 800a6ba:	b15b      	cbz	r3, 800a6d4 <__smakebuf_r+0x74>
 800a6bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f000 fdb5 	bl	800b230 <_isatty_r>
 800a6c6:	b128      	cbz	r0, 800a6d4 <__smakebuf_r+0x74>
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	f043 0301 	orr.w	r3, r3, #1
 800a6d2:	81a3      	strh	r3, [r4, #12]
 800a6d4:	89a0      	ldrh	r0, [r4, #12]
 800a6d6:	4305      	orrs	r5, r0
 800a6d8:	81a5      	strh	r5, [r4, #12]
 800a6da:	e7cd      	b.n	800a678 <__smakebuf_r+0x18>
 800a6dc:	0800a465 	.word	0x0800a465

0800a6e0 <memcpy>:
 800a6e0:	440a      	add	r2, r1
 800a6e2:	4291      	cmp	r1, r2
 800a6e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6e8:	d100      	bne.n	800a6ec <memcpy+0xc>
 800a6ea:	4770      	bx	lr
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6f6:	4291      	cmp	r1, r2
 800a6f8:	d1f9      	bne.n	800a6ee <memcpy+0xe>
 800a6fa:	bd10      	pop	{r4, pc}

0800a6fc <__malloc_lock>:
 800a6fc:	4801      	ldr	r0, [pc, #4]	; (800a704 <__malloc_lock+0x8>)
 800a6fe:	f7ff bf88 	b.w	800a612 <__retarget_lock_acquire_recursive>
 800a702:	bf00      	nop
 800a704:	200003f4 	.word	0x200003f4

0800a708 <__malloc_unlock>:
 800a708:	4801      	ldr	r0, [pc, #4]	; (800a710 <__malloc_unlock+0x8>)
 800a70a:	f7ff bf83 	b.w	800a614 <__retarget_lock_release_recursive>
 800a70e:	bf00      	nop
 800a710:	200003f4 	.word	0x200003f4

0800a714 <_Balloc>:
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a718:	4604      	mov	r4, r0
 800a71a:	460d      	mov	r5, r1
 800a71c:	b976      	cbnz	r6, 800a73c <_Balloc+0x28>
 800a71e:	2010      	movs	r0, #16
 800a720:	f7fe f87c 	bl	800881c <malloc>
 800a724:	4602      	mov	r2, r0
 800a726:	6260      	str	r0, [r4, #36]	; 0x24
 800a728:	b920      	cbnz	r0, 800a734 <_Balloc+0x20>
 800a72a:	4b18      	ldr	r3, [pc, #96]	; (800a78c <_Balloc+0x78>)
 800a72c:	4818      	ldr	r0, [pc, #96]	; (800a790 <_Balloc+0x7c>)
 800a72e:	2166      	movs	r1, #102	; 0x66
 800a730:	f000 fd2c 	bl	800b18c <__assert_func>
 800a734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a738:	6006      	str	r6, [r0, #0]
 800a73a:	60c6      	str	r6, [r0, #12]
 800a73c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a73e:	68f3      	ldr	r3, [r6, #12]
 800a740:	b183      	cbz	r3, 800a764 <_Balloc+0x50>
 800a742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a74a:	b9b8      	cbnz	r0, 800a77c <_Balloc+0x68>
 800a74c:	2101      	movs	r1, #1
 800a74e:	fa01 f605 	lsl.w	r6, r1, r5
 800a752:	1d72      	adds	r2, r6, #5
 800a754:	0092      	lsls	r2, r2, #2
 800a756:	4620      	mov	r0, r4
 800a758:	f000 fb5a 	bl	800ae10 <_calloc_r>
 800a75c:	b160      	cbz	r0, 800a778 <_Balloc+0x64>
 800a75e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a762:	e00e      	b.n	800a782 <_Balloc+0x6e>
 800a764:	2221      	movs	r2, #33	; 0x21
 800a766:	2104      	movs	r1, #4
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fb51 	bl	800ae10 <_calloc_r>
 800a76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a770:	60f0      	str	r0, [r6, #12]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e4      	bne.n	800a742 <_Balloc+0x2e>
 800a778:	2000      	movs	r0, #0
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	6802      	ldr	r2, [r0, #0]
 800a77e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a782:	2300      	movs	r3, #0
 800a784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a788:	e7f7      	b.n	800a77a <_Balloc+0x66>
 800a78a:	bf00      	nop
 800a78c:	0800b61d 	.word	0x0800b61d
 800a790:	0800b704 	.word	0x0800b704

0800a794 <_Bfree>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a798:	4605      	mov	r5, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b976      	cbnz	r6, 800a7bc <_Bfree+0x28>
 800a79e:	2010      	movs	r0, #16
 800a7a0:	f7fe f83c 	bl	800881c <malloc>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	6268      	str	r0, [r5, #36]	; 0x24
 800a7a8:	b920      	cbnz	r0, 800a7b4 <_Bfree+0x20>
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <_Bfree+0x3c>)
 800a7ac:	4809      	ldr	r0, [pc, #36]	; (800a7d4 <_Bfree+0x40>)
 800a7ae:	218a      	movs	r1, #138	; 0x8a
 800a7b0:	f000 fcec 	bl	800b18c <__assert_func>
 800a7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7b8:	6006      	str	r6, [r0, #0]
 800a7ba:	60c6      	str	r6, [r0, #12]
 800a7bc:	b13c      	cbz	r4, 800a7ce <_Bfree+0x3a>
 800a7be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7c0:	6862      	ldr	r2, [r4, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7c8:	6021      	str	r1, [r4, #0]
 800a7ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	0800b61d 	.word	0x0800b61d
 800a7d4:	0800b704 	.word	0x0800b704

0800a7d8 <__multadd>:
 800a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	690e      	ldr	r6, [r1, #16]
 800a7de:	4607      	mov	r7, r0
 800a7e0:	4698      	mov	r8, r3
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	f101 0014 	add.w	r0, r1, #20
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	6805      	ldr	r5, [r0, #0]
 800a7ec:	b2a9      	uxth	r1, r5
 800a7ee:	fb02 8101 	mla	r1, r2, r1, r8
 800a7f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a7f6:	0c2d      	lsrs	r5, r5, #16
 800a7f8:	fb02 c505 	mla	r5, r2, r5, ip
 800a7fc:	b289      	uxth	r1, r1
 800a7fe:	3301      	adds	r3, #1
 800a800:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a804:	429e      	cmp	r6, r3
 800a806:	f840 1b04 	str.w	r1, [r0], #4
 800a80a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a80e:	dcec      	bgt.n	800a7ea <__multadd+0x12>
 800a810:	f1b8 0f00 	cmp.w	r8, #0
 800a814:	d022      	beq.n	800a85c <__multadd+0x84>
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	42b3      	cmp	r3, r6
 800a81a:	dc19      	bgt.n	800a850 <__multadd+0x78>
 800a81c:	6861      	ldr	r1, [r4, #4]
 800a81e:	4638      	mov	r0, r7
 800a820:	3101      	adds	r1, #1
 800a822:	f7ff ff77 	bl	800a714 <_Balloc>
 800a826:	4605      	mov	r5, r0
 800a828:	b928      	cbnz	r0, 800a836 <__multadd+0x5e>
 800a82a:	4602      	mov	r2, r0
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <__multadd+0x8c>)
 800a82e:	480e      	ldr	r0, [pc, #56]	; (800a868 <__multadd+0x90>)
 800a830:	21b5      	movs	r1, #181	; 0xb5
 800a832:	f000 fcab 	bl	800b18c <__assert_func>
 800a836:	6922      	ldr	r2, [r4, #16]
 800a838:	3202      	adds	r2, #2
 800a83a:	f104 010c 	add.w	r1, r4, #12
 800a83e:	0092      	lsls	r2, r2, #2
 800a840:	300c      	adds	r0, #12
 800a842:	f7ff ff4d 	bl	800a6e0 <memcpy>
 800a846:	4621      	mov	r1, r4
 800a848:	4638      	mov	r0, r7
 800a84a:	f7ff ffa3 	bl	800a794 <_Bfree>
 800a84e:	462c      	mov	r4, r5
 800a850:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a854:	3601      	adds	r6, #1
 800a856:	f8c3 8014 	str.w	r8, [r3, #20]
 800a85a:	6126      	str	r6, [r4, #16]
 800a85c:	4620      	mov	r0, r4
 800a85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a862:	bf00      	nop
 800a864:	0800b693 	.word	0x0800b693
 800a868:	0800b704 	.word	0x0800b704

0800a86c <__hi0bits>:
 800a86c:	0c03      	lsrs	r3, r0, #16
 800a86e:	041b      	lsls	r3, r3, #16
 800a870:	b9d3      	cbnz	r3, 800a8a8 <__hi0bits+0x3c>
 800a872:	0400      	lsls	r0, r0, #16
 800a874:	2310      	movs	r3, #16
 800a876:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a87a:	bf04      	itt	eq
 800a87c:	0200      	lsleq	r0, r0, #8
 800a87e:	3308      	addeq	r3, #8
 800a880:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a884:	bf04      	itt	eq
 800a886:	0100      	lsleq	r0, r0, #4
 800a888:	3304      	addeq	r3, #4
 800a88a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a88e:	bf04      	itt	eq
 800a890:	0080      	lsleq	r0, r0, #2
 800a892:	3302      	addeq	r3, #2
 800a894:	2800      	cmp	r0, #0
 800a896:	db05      	blt.n	800a8a4 <__hi0bits+0x38>
 800a898:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a89c:	f103 0301 	add.w	r3, r3, #1
 800a8a0:	bf08      	it	eq
 800a8a2:	2320      	moveq	r3, #32
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	4770      	bx	lr
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	e7e4      	b.n	800a876 <__hi0bits+0xa>

0800a8ac <__lo0bits>:
 800a8ac:	6803      	ldr	r3, [r0, #0]
 800a8ae:	f013 0207 	ands.w	r2, r3, #7
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	d00b      	beq.n	800a8ce <__lo0bits+0x22>
 800a8b6:	07da      	lsls	r2, r3, #31
 800a8b8:	d424      	bmi.n	800a904 <__lo0bits+0x58>
 800a8ba:	0798      	lsls	r0, r3, #30
 800a8bc:	bf49      	itett	mi
 800a8be:	085b      	lsrmi	r3, r3, #1
 800a8c0:	089b      	lsrpl	r3, r3, #2
 800a8c2:	2001      	movmi	r0, #1
 800a8c4:	600b      	strmi	r3, [r1, #0]
 800a8c6:	bf5c      	itt	pl
 800a8c8:	600b      	strpl	r3, [r1, #0]
 800a8ca:	2002      	movpl	r0, #2
 800a8cc:	4770      	bx	lr
 800a8ce:	b298      	uxth	r0, r3
 800a8d0:	b9b0      	cbnz	r0, 800a900 <__lo0bits+0x54>
 800a8d2:	0c1b      	lsrs	r3, r3, #16
 800a8d4:	2010      	movs	r0, #16
 800a8d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a8da:	bf04      	itt	eq
 800a8dc:	0a1b      	lsreq	r3, r3, #8
 800a8de:	3008      	addeq	r0, #8
 800a8e0:	071a      	lsls	r2, r3, #28
 800a8e2:	bf04      	itt	eq
 800a8e4:	091b      	lsreq	r3, r3, #4
 800a8e6:	3004      	addeq	r0, #4
 800a8e8:	079a      	lsls	r2, r3, #30
 800a8ea:	bf04      	itt	eq
 800a8ec:	089b      	lsreq	r3, r3, #2
 800a8ee:	3002      	addeq	r0, #2
 800a8f0:	07da      	lsls	r2, r3, #31
 800a8f2:	d403      	bmi.n	800a8fc <__lo0bits+0x50>
 800a8f4:	085b      	lsrs	r3, r3, #1
 800a8f6:	f100 0001 	add.w	r0, r0, #1
 800a8fa:	d005      	beq.n	800a908 <__lo0bits+0x5c>
 800a8fc:	600b      	str	r3, [r1, #0]
 800a8fe:	4770      	bx	lr
 800a900:	4610      	mov	r0, r2
 800a902:	e7e8      	b.n	800a8d6 <__lo0bits+0x2a>
 800a904:	2000      	movs	r0, #0
 800a906:	4770      	bx	lr
 800a908:	2020      	movs	r0, #32
 800a90a:	4770      	bx	lr

0800a90c <__i2b>:
 800a90c:	b510      	push	{r4, lr}
 800a90e:	460c      	mov	r4, r1
 800a910:	2101      	movs	r1, #1
 800a912:	f7ff feff 	bl	800a714 <_Balloc>
 800a916:	4602      	mov	r2, r0
 800a918:	b928      	cbnz	r0, 800a926 <__i2b+0x1a>
 800a91a:	4b05      	ldr	r3, [pc, #20]	; (800a930 <__i2b+0x24>)
 800a91c:	4805      	ldr	r0, [pc, #20]	; (800a934 <__i2b+0x28>)
 800a91e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a922:	f000 fc33 	bl	800b18c <__assert_func>
 800a926:	2301      	movs	r3, #1
 800a928:	6144      	str	r4, [r0, #20]
 800a92a:	6103      	str	r3, [r0, #16]
 800a92c:	bd10      	pop	{r4, pc}
 800a92e:	bf00      	nop
 800a930:	0800b693 	.word	0x0800b693
 800a934:	0800b704 	.word	0x0800b704

0800a938 <__multiply>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	4614      	mov	r4, r2
 800a93e:	690a      	ldr	r2, [r1, #16]
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	429a      	cmp	r2, r3
 800a944:	bfb8      	it	lt
 800a946:	460b      	movlt	r3, r1
 800a948:	460d      	mov	r5, r1
 800a94a:	bfbc      	itt	lt
 800a94c:	4625      	movlt	r5, r4
 800a94e:	461c      	movlt	r4, r3
 800a950:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a954:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a958:	68ab      	ldr	r3, [r5, #8]
 800a95a:	6869      	ldr	r1, [r5, #4]
 800a95c:	eb0a 0709 	add.w	r7, sl, r9
 800a960:	42bb      	cmp	r3, r7
 800a962:	b085      	sub	sp, #20
 800a964:	bfb8      	it	lt
 800a966:	3101      	addlt	r1, #1
 800a968:	f7ff fed4 	bl	800a714 <_Balloc>
 800a96c:	b930      	cbnz	r0, 800a97c <__multiply+0x44>
 800a96e:	4602      	mov	r2, r0
 800a970:	4b42      	ldr	r3, [pc, #264]	; (800aa7c <__multiply+0x144>)
 800a972:	4843      	ldr	r0, [pc, #268]	; (800aa80 <__multiply+0x148>)
 800a974:	f240 115d 	movw	r1, #349	; 0x15d
 800a978:	f000 fc08 	bl	800b18c <__assert_func>
 800a97c:	f100 0614 	add.w	r6, r0, #20
 800a980:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a984:	4633      	mov	r3, r6
 800a986:	2200      	movs	r2, #0
 800a988:	4543      	cmp	r3, r8
 800a98a:	d31e      	bcc.n	800a9ca <__multiply+0x92>
 800a98c:	f105 0c14 	add.w	ip, r5, #20
 800a990:	f104 0314 	add.w	r3, r4, #20
 800a994:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a998:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a99c:	9202      	str	r2, [sp, #8]
 800a99e:	ebac 0205 	sub.w	r2, ip, r5
 800a9a2:	3a15      	subs	r2, #21
 800a9a4:	f022 0203 	bic.w	r2, r2, #3
 800a9a8:	3204      	adds	r2, #4
 800a9aa:	f105 0115 	add.w	r1, r5, #21
 800a9ae:	458c      	cmp	ip, r1
 800a9b0:	bf38      	it	cc
 800a9b2:	2204      	movcc	r2, #4
 800a9b4:	9201      	str	r2, [sp, #4]
 800a9b6:	9a02      	ldr	r2, [sp, #8]
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d808      	bhi.n	800a9d0 <__multiply+0x98>
 800a9be:	2f00      	cmp	r7, #0
 800a9c0:	dc55      	bgt.n	800aa6e <__multiply+0x136>
 800a9c2:	6107      	str	r7, [r0, #16]
 800a9c4:	b005      	add	sp, #20
 800a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ca:	f843 2b04 	str.w	r2, [r3], #4
 800a9ce:	e7db      	b.n	800a988 <__multiply+0x50>
 800a9d0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9d4:	f1ba 0f00 	cmp.w	sl, #0
 800a9d8:	d020      	beq.n	800aa1c <__multiply+0xe4>
 800a9da:	f105 0e14 	add.w	lr, r5, #20
 800a9de:	46b1      	mov	r9, r6
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a9e6:	f8d9 b000 	ldr.w	fp, [r9]
 800a9ea:	b2a1      	uxth	r1, r4
 800a9ec:	fa1f fb8b 	uxth.w	fp, fp
 800a9f0:	fb0a b101 	mla	r1, sl, r1, fp
 800a9f4:	4411      	add	r1, r2
 800a9f6:	f8d9 2000 	ldr.w	r2, [r9]
 800a9fa:	0c24      	lsrs	r4, r4, #16
 800a9fc:	0c12      	lsrs	r2, r2, #16
 800a9fe:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa06:	b289      	uxth	r1, r1
 800aa08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa0c:	45f4      	cmp	ip, lr
 800aa0e:	f849 1b04 	str.w	r1, [r9], #4
 800aa12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa16:	d8e4      	bhi.n	800a9e2 <__multiply+0xaa>
 800aa18:	9901      	ldr	r1, [sp, #4]
 800aa1a:	5072      	str	r2, [r6, r1]
 800aa1c:	9a03      	ldr	r2, [sp, #12]
 800aa1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa22:	3304      	adds	r3, #4
 800aa24:	f1b9 0f00 	cmp.w	r9, #0
 800aa28:	d01f      	beq.n	800aa6a <__multiply+0x132>
 800aa2a:	6834      	ldr	r4, [r6, #0]
 800aa2c:	f105 0114 	add.w	r1, r5, #20
 800aa30:	46b6      	mov	lr, r6
 800aa32:	f04f 0a00 	mov.w	sl, #0
 800aa36:	880a      	ldrh	r2, [r1, #0]
 800aa38:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa3c:	fb09 b202 	mla	r2, r9, r2, fp
 800aa40:	4492      	add	sl, r2
 800aa42:	b2a4      	uxth	r4, r4
 800aa44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aa48:	f84e 4b04 	str.w	r4, [lr], #4
 800aa4c:	f851 4b04 	ldr.w	r4, [r1], #4
 800aa50:	f8be 2000 	ldrh.w	r2, [lr]
 800aa54:	0c24      	lsrs	r4, r4, #16
 800aa56:	fb09 2404 	mla	r4, r9, r4, r2
 800aa5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aa5e:	458c      	cmp	ip, r1
 800aa60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa64:	d8e7      	bhi.n	800aa36 <__multiply+0xfe>
 800aa66:	9a01      	ldr	r2, [sp, #4]
 800aa68:	50b4      	str	r4, [r6, r2]
 800aa6a:	3604      	adds	r6, #4
 800aa6c:	e7a3      	b.n	800a9b6 <__multiply+0x7e>
 800aa6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1a5      	bne.n	800a9c2 <__multiply+0x8a>
 800aa76:	3f01      	subs	r7, #1
 800aa78:	e7a1      	b.n	800a9be <__multiply+0x86>
 800aa7a:	bf00      	nop
 800aa7c:	0800b693 	.word	0x0800b693
 800aa80:	0800b704 	.word	0x0800b704

0800aa84 <__pow5mult>:
 800aa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa88:	4615      	mov	r5, r2
 800aa8a:	f012 0203 	ands.w	r2, r2, #3
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460f      	mov	r7, r1
 800aa92:	d007      	beq.n	800aaa4 <__pow5mult+0x20>
 800aa94:	4c25      	ldr	r4, [pc, #148]	; (800ab2c <__pow5mult+0xa8>)
 800aa96:	3a01      	subs	r2, #1
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa9e:	f7ff fe9b 	bl	800a7d8 <__multadd>
 800aaa2:	4607      	mov	r7, r0
 800aaa4:	10ad      	asrs	r5, r5, #2
 800aaa6:	d03d      	beq.n	800ab24 <__pow5mult+0xa0>
 800aaa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aaaa:	b97c      	cbnz	r4, 800aacc <__pow5mult+0x48>
 800aaac:	2010      	movs	r0, #16
 800aaae:	f7fd feb5 	bl	800881c <malloc>
 800aab2:	4602      	mov	r2, r0
 800aab4:	6270      	str	r0, [r6, #36]	; 0x24
 800aab6:	b928      	cbnz	r0, 800aac4 <__pow5mult+0x40>
 800aab8:	4b1d      	ldr	r3, [pc, #116]	; (800ab30 <__pow5mult+0xac>)
 800aaba:	481e      	ldr	r0, [pc, #120]	; (800ab34 <__pow5mult+0xb0>)
 800aabc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aac0:	f000 fb64 	bl	800b18c <__assert_func>
 800aac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aac8:	6004      	str	r4, [r0, #0]
 800aaca:	60c4      	str	r4, [r0, #12]
 800aacc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aad4:	b94c      	cbnz	r4, 800aaea <__pow5mult+0x66>
 800aad6:	f240 2171 	movw	r1, #625	; 0x271
 800aada:	4630      	mov	r0, r6
 800aadc:	f7ff ff16 	bl	800a90c <__i2b>
 800aae0:	2300      	movs	r3, #0
 800aae2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aae6:	4604      	mov	r4, r0
 800aae8:	6003      	str	r3, [r0, #0]
 800aaea:	f04f 0900 	mov.w	r9, #0
 800aaee:	07eb      	lsls	r3, r5, #31
 800aaf0:	d50a      	bpl.n	800ab08 <__pow5mult+0x84>
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	4622      	mov	r2, r4
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f7ff ff1e 	bl	800a938 <__multiply>
 800aafc:	4639      	mov	r1, r7
 800aafe:	4680      	mov	r8, r0
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff fe47 	bl	800a794 <_Bfree>
 800ab06:	4647      	mov	r7, r8
 800ab08:	106d      	asrs	r5, r5, #1
 800ab0a:	d00b      	beq.n	800ab24 <__pow5mult+0xa0>
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	b938      	cbnz	r0, 800ab20 <__pow5mult+0x9c>
 800ab10:	4622      	mov	r2, r4
 800ab12:	4621      	mov	r1, r4
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7ff ff0f 	bl	800a938 <__multiply>
 800ab1a:	6020      	str	r0, [r4, #0]
 800ab1c:	f8c0 9000 	str.w	r9, [r0]
 800ab20:	4604      	mov	r4, r0
 800ab22:	e7e4      	b.n	800aaee <__pow5mult+0x6a>
 800ab24:	4638      	mov	r0, r7
 800ab26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab2a:	bf00      	nop
 800ab2c:	0800b858 	.word	0x0800b858
 800ab30:	0800b61d 	.word	0x0800b61d
 800ab34:	0800b704 	.word	0x0800b704

0800ab38 <__lshift>:
 800ab38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	6849      	ldr	r1, [r1, #4]
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	4607      	mov	r7, r0
 800ab4a:	4691      	mov	r9, r2
 800ab4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab50:	f108 0601 	add.w	r6, r8, #1
 800ab54:	42b3      	cmp	r3, r6
 800ab56:	db0b      	blt.n	800ab70 <__lshift+0x38>
 800ab58:	4638      	mov	r0, r7
 800ab5a:	f7ff fddb 	bl	800a714 <_Balloc>
 800ab5e:	4605      	mov	r5, r0
 800ab60:	b948      	cbnz	r0, 800ab76 <__lshift+0x3e>
 800ab62:	4602      	mov	r2, r0
 800ab64:	4b28      	ldr	r3, [pc, #160]	; (800ac08 <__lshift+0xd0>)
 800ab66:	4829      	ldr	r0, [pc, #164]	; (800ac0c <__lshift+0xd4>)
 800ab68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab6c:	f000 fb0e 	bl	800b18c <__assert_func>
 800ab70:	3101      	adds	r1, #1
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	e7ee      	b.n	800ab54 <__lshift+0x1c>
 800ab76:	2300      	movs	r3, #0
 800ab78:	f100 0114 	add.w	r1, r0, #20
 800ab7c:	f100 0210 	add.w	r2, r0, #16
 800ab80:	4618      	mov	r0, r3
 800ab82:	4553      	cmp	r3, sl
 800ab84:	db33      	blt.n	800abee <__lshift+0xb6>
 800ab86:	6920      	ldr	r0, [r4, #16]
 800ab88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab8c:	f104 0314 	add.w	r3, r4, #20
 800ab90:	f019 091f 	ands.w	r9, r9, #31
 800ab94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab9c:	d02b      	beq.n	800abf6 <__lshift+0xbe>
 800ab9e:	f1c9 0e20 	rsb	lr, r9, #32
 800aba2:	468a      	mov	sl, r1
 800aba4:	2200      	movs	r2, #0
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	fa00 f009 	lsl.w	r0, r0, r9
 800abac:	4302      	orrs	r2, r0
 800abae:	f84a 2b04 	str.w	r2, [sl], #4
 800abb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb6:	459c      	cmp	ip, r3
 800abb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800abbc:	d8f3      	bhi.n	800aba6 <__lshift+0x6e>
 800abbe:	ebac 0304 	sub.w	r3, ip, r4
 800abc2:	3b15      	subs	r3, #21
 800abc4:	f023 0303 	bic.w	r3, r3, #3
 800abc8:	3304      	adds	r3, #4
 800abca:	f104 0015 	add.w	r0, r4, #21
 800abce:	4584      	cmp	ip, r0
 800abd0:	bf38      	it	cc
 800abd2:	2304      	movcc	r3, #4
 800abd4:	50ca      	str	r2, [r1, r3]
 800abd6:	b10a      	cbz	r2, 800abdc <__lshift+0xa4>
 800abd8:	f108 0602 	add.w	r6, r8, #2
 800abdc:	3e01      	subs	r6, #1
 800abde:	4638      	mov	r0, r7
 800abe0:	612e      	str	r6, [r5, #16]
 800abe2:	4621      	mov	r1, r4
 800abe4:	f7ff fdd6 	bl	800a794 <_Bfree>
 800abe8:	4628      	mov	r0, r5
 800abea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abee:	f842 0f04 	str.w	r0, [r2, #4]!
 800abf2:	3301      	adds	r3, #1
 800abf4:	e7c5      	b.n	800ab82 <__lshift+0x4a>
 800abf6:	3904      	subs	r1, #4
 800abf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac00:	459c      	cmp	ip, r3
 800ac02:	d8f9      	bhi.n	800abf8 <__lshift+0xc0>
 800ac04:	e7ea      	b.n	800abdc <__lshift+0xa4>
 800ac06:	bf00      	nop
 800ac08:	0800b693 	.word	0x0800b693
 800ac0c:	0800b704 	.word	0x0800b704

0800ac10 <__mcmp>:
 800ac10:	b530      	push	{r4, r5, lr}
 800ac12:	6902      	ldr	r2, [r0, #16]
 800ac14:	690c      	ldr	r4, [r1, #16]
 800ac16:	1b12      	subs	r2, r2, r4
 800ac18:	d10e      	bne.n	800ac38 <__mcmp+0x28>
 800ac1a:	f100 0314 	add.w	r3, r0, #20
 800ac1e:	3114      	adds	r1, #20
 800ac20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac30:	42a5      	cmp	r5, r4
 800ac32:	d003      	beq.n	800ac3c <__mcmp+0x2c>
 800ac34:	d305      	bcc.n	800ac42 <__mcmp+0x32>
 800ac36:	2201      	movs	r2, #1
 800ac38:	4610      	mov	r0, r2
 800ac3a:	bd30      	pop	{r4, r5, pc}
 800ac3c:	4283      	cmp	r3, r0
 800ac3e:	d3f3      	bcc.n	800ac28 <__mcmp+0x18>
 800ac40:	e7fa      	b.n	800ac38 <__mcmp+0x28>
 800ac42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac46:	e7f7      	b.n	800ac38 <__mcmp+0x28>

0800ac48 <__mdiff>:
 800ac48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	4606      	mov	r6, r0
 800ac50:	4611      	mov	r1, r2
 800ac52:	4620      	mov	r0, r4
 800ac54:	4617      	mov	r7, r2
 800ac56:	f7ff ffdb 	bl	800ac10 <__mcmp>
 800ac5a:	1e05      	subs	r5, r0, #0
 800ac5c:	d110      	bne.n	800ac80 <__mdiff+0x38>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7ff fd57 	bl	800a714 <_Balloc>
 800ac66:	b930      	cbnz	r0, 800ac76 <__mdiff+0x2e>
 800ac68:	4b39      	ldr	r3, [pc, #228]	; (800ad50 <__mdiff+0x108>)
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	f240 2132 	movw	r1, #562	; 0x232
 800ac70:	4838      	ldr	r0, [pc, #224]	; (800ad54 <__mdiff+0x10c>)
 800ac72:	f000 fa8b 	bl	800b18c <__assert_func>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac80:	bfa4      	itt	ge
 800ac82:	463b      	movge	r3, r7
 800ac84:	4627      	movge	r7, r4
 800ac86:	4630      	mov	r0, r6
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	bfa6      	itte	ge
 800ac8c:	461c      	movge	r4, r3
 800ac8e:	2500      	movge	r5, #0
 800ac90:	2501      	movlt	r5, #1
 800ac92:	f7ff fd3f 	bl	800a714 <_Balloc>
 800ac96:	b920      	cbnz	r0, 800aca2 <__mdiff+0x5a>
 800ac98:	4b2d      	ldr	r3, [pc, #180]	; (800ad50 <__mdiff+0x108>)
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aca0:	e7e6      	b.n	800ac70 <__mdiff+0x28>
 800aca2:	693e      	ldr	r6, [r7, #16]
 800aca4:	60c5      	str	r5, [r0, #12]
 800aca6:	6925      	ldr	r5, [r4, #16]
 800aca8:	f107 0114 	add.w	r1, r7, #20
 800acac:	f104 0914 	add.w	r9, r4, #20
 800acb0:	f100 0e14 	add.w	lr, r0, #20
 800acb4:	f107 0210 	add.w	r2, r7, #16
 800acb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800acbc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800acc0:	46f2      	mov	sl, lr
 800acc2:	2700      	movs	r7, #0
 800acc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800acc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800accc:	fa1f f883 	uxth.w	r8, r3
 800acd0:	fa17 f78b 	uxtah	r7, r7, fp
 800acd4:	0c1b      	lsrs	r3, r3, #16
 800acd6:	eba7 0808 	sub.w	r8, r7, r8
 800acda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800acde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ace2:	fa1f f888 	uxth.w	r8, r8
 800ace6:	141f      	asrs	r7, r3, #16
 800ace8:	454d      	cmp	r5, r9
 800acea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acee:	f84a 3b04 	str.w	r3, [sl], #4
 800acf2:	d8e7      	bhi.n	800acc4 <__mdiff+0x7c>
 800acf4:	1b2b      	subs	r3, r5, r4
 800acf6:	3b15      	subs	r3, #21
 800acf8:	f023 0303 	bic.w	r3, r3, #3
 800acfc:	3304      	adds	r3, #4
 800acfe:	3415      	adds	r4, #21
 800ad00:	42a5      	cmp	r5, r4
 800ad02:	bf38      	it	cc
 800ad04:	2304      	movcc	r3, #4
 800ad06:	4419      	add	r1, r3
 800ad08:	4473      	add	r3, lr
 800ad0a:	469e      	mov	lr, r3
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	4565      	cmp	r5, ip
 800ad10:	d30e      	bcc.n	800ad30 <__mdiff+0xe8>
 800ad12:	f10c 0203 	add.w	r2, ip, #3
 800ad16:	1a52      	subs	r2, r2, r1
 800ad18:	f022 0203 	bic.w	r2, r2, #3
 800ad1c:	3903      	subs	r1, #3
 800ad1e:	458c      	cmp	ip, r1
 800ad20:	bf38      	it	cc
 800ad22:	2200      	movcc	r2, #0
 800ad24:	441a      	add	r2, r3
 800ad26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad2a:	b17b      	cbz	r3, 800ad4c <__mdiff+0x104>
 800ad2c:	6106      	str	r6, [r0, #16]
 800ad2e:	e7a5      	b.n	800ac7c <__mdiff+0x34>
 800ad30:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad34:	fa17 f488 	uxtah	r4, r7, r8
 800ad38:	1422      	asrs	r2, r4, #16
 800ad3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad3e:	b2a4      	uxth	r4, r4
 800ad40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad44:	f84e 4b04 	str.w	r4, [lr], #4
 800ad48:	1417      	asrs	r7, r2, #16
 800ad4a:	e7e0      	b.n	800ad0e <__mdiff+0xc6>
 800ad4c:	3e01      	subs	r6, #1
 800ad4e:	e7ea      	b.n	800ad26 <__mdiff+0xde>
 800ad50:	0800b693 	.word	0x0800b693
 800ad54:	0800b704 	.word	0x0800b704

0800ad58 <__d2b>:
 800ad58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad5c:	4689      	mov	r9, r1
 800ad5e:	2101      	movs	r1, #1
 800ad60:	ec57 6b10 	vmov	r6, r7, d0
 800ad64:	4690      	mov	r8, r2
 800ad66:	f7ff fcd5 	bl	800a714 <_Balloc>
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	b930      	cbnz	r0, 800ad7c <__d2b+0x24>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	4b25      	ldr	r3, [pc, #148]	; (800ae08 <__d2b+0xb0>)
 800ad72:	4826      	ldr	r0, [pc, #152]	; (800ae0c <__d2b+0xb4>)
 800ad74:	f240 310a 	movw	r1, #778	; 0x30a
 800ad78:	f000 fa08 	bl	800b18c <__assert_func>
 800ad7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad84:	bb35      	cbnz	r5, 800add4 <__d2b+0x7c>
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	d028      	beq.n	800adde <__d2b+0x86>
 800ad8c:	4668      	mov	r0, sp
 800ad8e:	9600      	str	r6, [sp, #0]
 800ad90:	f7ff fd8c 	bl	800a8ac <__lo0bits>
 800ad94:	9900      	ldr	r1, [sp, #0]
 800ad96:	b300      	cbz	r0, 800adda <__d2b+0x82>
 800ad98:	9a01      	ldr	r2, [sp, #4]
 800ad9a:	f1c0 0320 	rsb	r3, r0, #32
 800ad9e:	fa02 f303 	lsl.w	r3, r2, r3
 800ada2:	430b      	orrs	r3, r1
 800ada4:	40c2      	lsrs	r2, r0
 800ada6:	6163      	str	r3, [r4, #20]
 800ada8:	9201      	str	r2, [sp, #4]
 800adaa:	9b01      	ldr	r3, [sp, #4]
 800adac:	61a3      	str	r3, [r4, #24]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	bf14      	ite	ne
 800adb2:	2202      	movne	r2, #2
 800adb4:	2201      	moveq	r2, #1
 800adb6:	6122      	str	r2, [r4, #16]
 800adb8:	b1d5      	cbz	r5, 800adf0 <__d2b+0x98>
 800adba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adbe:	4405      	add	r5, r0
 800adc0:	f8c9 5000 	str.w	r5, [r9]
 800adc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adc8:	f8c8 0000 	str.w	r0, [r8]
 800adcc:	4620      	mov	r0, r4
 800adce:	b003      	add	sp, #12
 800add0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800add4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800add8:	e7d5      	b.n	800ad86 <__d2b+0x2e>
 800adda:	6161      	str	r1, [r4, #20]
 800addc:	e7e5      	b.n	800adaa <__d2b+0x52>
 800adde:	a801      	add	r0, sp, #4
 800ade0:	f7ff fd64 	bl	800a8ac <__lo0bits>
 800ade4:	9b01      	ldr	r3, [sp, #4]
 800ade6:	6163      	str	r3, [r4, #20]
 800ade8:	2201      	movs	r2, #1
 800adea:	6122      	str	r2, [r4, #16]
 800adec:	3020      	adds	r0, #32
 800adee:	e7e3      	b.n	800adb8 <__d2b+0x60>
 800adf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adf8:	f8c9 0000 	str.w	r0, [r9]
 800adfc:	6918      	ldr	r0, [r3, #16]
 800adfe:	f7ff fd35 	bl	800a86c <__hi0bits>
 800ae02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae06:	e7df      	b.n	800adc8 <__d2b+0x70>
 800ae08:	0800b693 	.word	0x0800b693
 800ae0c:	0800b704 	.word	0x0800b704

0800ae10 <_calloc_r>:
 800ae10:	b513      	push	{r0, r1, r4, lr}
 800ae12:	434a      	muls	r2, r1
 800ae14:	4611      	mov	r1, r2
 800ae16:	9201      	str	r2, [sp, #4]
 800ae18:	f7fd fd60 	bl	80088dc <_malloc_r>
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	b118      	cbz	r0, 800ae28 <_calloc_r+0x18>
 800ae20:	9a01      	ldr	r2, [sp, #4]
 800ae22:	2100      	movs	r1, #0
 800ae24:	f7fd fd02 	bl	800882c <memset>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	b002      	add	sp, #8
 800ae2c:	bd10      	pop	{r4, pc}

0800ae2e <__sfputc_r>:
 800ae2e:	6893      	ldr	r3, [r2, #8]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	b410      	push	{r4}
 800ae36:	6093      	str	r3, [r2, #8]
 800ae38:	da08      	bge.n	800ae4c <__sfputc_r+0x1e>
 800ae3a:	6994      	ldr	r4, [r2, #24]
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	db01      	blt.n	800ae44 <__sfputc_r+0x16>
 800ae40:	290a      	cmp	r1, #10
 800ae42:	d103      	bne.n	800ae4c <__sfputc_r+0x1e>
 800ae44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae48:	f7fe baee 	b.w	8009428 <__swbuf_r>
 800ae4c:	6813      	ldr	r3, [r2, #0]
 800ae4e:	1c58      	adds	r0, r3, #1
 800ae50:	6010      	str	r0, [r2, #0]
 800ae52:	7019      	strb	r1, [r3, #0]
 800ae54:	4608      	mov	r0, r1
 800ae56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <__sfputs_r>:
 800ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5e:	4606      	mov	r6, r0
 800ae60:	460f      	mov	r7, r1
 800ae62:	4614      	mov	r4, r2
 800ae64:	18d5      	adds	r5, r2, r3
 800ae66:	42ac      	cmp	r4, r5
 800ae68:	d101      	bne.n	800ae6e <__sfputs_r+0x12>
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e007      	b.n	800ae7e <__sfputs_r+0x22>
 800ae6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae72:	463a      	mov	r2, r7
 800ae74:	4630      	mov	r0, r6
 800ae76:	f7ff ffda 	bl	800ae2e <__sfputc_r>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d1f3      	bne.n	800ae66 <__sfputs_r+0xa>
 800ae7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae80 <_vfiprintf_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	460d      	mov	r5, r1
 800ae86:	b09d      	sub	sp, #116	; 0x74
 800ae88:	4614      	mov	r4, r2
 800ae8a:	4698      	mov	r8, r3
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	b118      	cbz	r0, 800ae98 <_vfiprintf_r+0x18>
 800ae90:	6983      	ldr	r3, [r0, #24]
 800ae92:	b90b      	cbnz	r3, 800ae98 <_vfiprintf_r+0x18>
 800ae94:	f7ff fb1a 	bl	800a4cc <__sinit>
 800ae98:	4b89      	ldr	r3, [pc, #548]	; (800b0c0 <_vfiprintf_r+0x240>)
 800ae9a:	429d      	cmp	r5, r3
 800ae9c:	d11b      	bne.n	800aed6 <_vfiprintf_r+0x56>
 800ae9e:	6875      	ldr	r5, [r6, #4]
 800aea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea2:	07d9      	lsls	r1, r3, #31
 800aea4:	d405      	bmi.n	800aeb2 <_vfiprintf_r+0x32>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	059a      	lsls	r2, r3, #22
 800aeaa:	d402      	bmi.n	800aeb2 <_vfiprintf_r+0x32>
 800aeac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeae:	f7ff fbb0 	bl	800a612 <__retarget_lock_acquire_recursive>
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	071b      	lsls	r3, r3, #28
 800aeb6:	d501      	bpl.n	800aebc <_vfiprintf_r+0x3c>
 800aeb8:	692b      	ldr	r3, [r5, #16]
 800aeba:	b9eb      	cbnz	r3, 800aef8 <_vfiprintf_r+0x78>
 800aebc:	4629      	mov	r1, r5
 800aebe:	4630      	mov	r0, r6
 800aec0:	f7fe fb04 	bl	80094cc <__swsetup_r>
 800aec4:	b1c0      	cbz	r0, 800aef8 <_vfiprintf_r+0x78>
 800aec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aec8:	07dc      	lsls	r4, r3, #31
 800aeca:	d50e      	bpl.n	800aeea <_vfiprintf_r+0x6a>
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aed0:	b01d      	add	sp, #116	; 0x74
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	4b7b      	ldr	r3, [pc, #492]	; (800b0c4 <_vfiprintf_r+0x244>)
 800aed8:	429d      	cmp	r5, r3
 800aeda:	d101      	bne.n	800aee0 <_vfiprintf_r+0x60>
 800aedc:	68b5      	ldr	r5, [r6, #8]
 800aede:	e7df      	b.n	800aea0 <_vfiprintf_r+0x20>
 800aee0:	4b79      	ldr	r3, [pc, #484]	; (800b0c8 <_vfiprintf_r+0x248>)
 800aee2:	429d      	cmp	r5, r3
 800aee4:	bf08      	it	eq
 800aee6:	68f5      	ldreq	r5, [r6, #12]
 800aee8:	e7da      	b.n	800aea0 <_vfiprintf_r+0x20>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	0598      	lsls	r0, r3, #22
 800aeee:	d4ed      	bmi.n	800aecc <_vfiprintf_r+0x4c>
 800aef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aef2:	f7ff fb8f 	bl	800a614 <__retarget_lock_release_recursive>
 800aef6:	e7e9      	b.n	800aecc <_vfiprintf_r+0x4c>
 800aef8:	2300      	movs	r3, #0
 800aefa:	9309      	str	r3, [sp, #36]	; 0x24
 800aefc:	2320      	movs	r3, #32
 800aefe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af02:	f8cd 800c 	str.w	r8, [sp, #12]
 800af06:	2330      	movs	r3, #48	; 0x30
 800af08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0cc <_vfiprintf_r+0x24c>
 800af0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af10:	f04f 0901 	mov.w	r9, #1
 800af14:	4623      	mov	r3, r4
 800af16:	469a      	mov	sl, r3
 800af18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af1c:	b10a      	cbz	r2, 800af22 <_vfiprintf_r+0xa2>
 800af1e:	2a25      	cmp	r2, #37	; 0x25
 800af20:	d1f9      	bne.n	800af16 <_vfiprintf_r+0x96>
 800af22:	ebba 0b04 	subs.w	fp, sl, r4
 800af26:	d00b      	beq.n	800af40 <_vfiprintf_r+0xc0>
 800af28:	465b      	mov	r3, fp
 800af2a:	4622      	mov	r2, r4
 800af2c:	4629      	mov	r1, r5
 800af2e:	4630      	mov	r0, r6
 800af30:	f7ff ff94 	bl	800ae5c <__sfputs_r>
 800af34:	3001      	adds	r0, #1
 800af36:	f000 80aa 	beq.w	800b08e <_vfiprintf_r+0x20e>
 800af3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af3c:	445a      	add	r2, fp
 800af3e:	9209      	str	r2, [sp, #36]	; 0x24
 800af40:	f89a 3000 	ldrb.w	r3, [sl]
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 80a2 	beq.w	800b08e <_vfiprintf_r+0x20e>
 800af4a:	2300      	movs	r3, #0
 800af4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af54:	f10a 0a01 	add.w	sl, sl, #1
 800af58:	9304      	str	r3, [sp, #16]
 800af5a:	9307      	str	r3, [sp, #28]
 800af5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af60:	931a      	str	r3, [sp, #104]	; 0x68
 800af62:	4654      	mov	r4, sl
 800af64:	2205      	movs	r2, #5
 800af66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af6a:	4858      	ldr	r0, [pc, #352]	; (800b0cc <_vfiprintf_r+0x24c>)
 800af6c:	f7f5 f910 	bl	8000190 <memchr>
 800af70:	9a04      	ldr	r2, [sp, #16]
 800af72:	b9d8      	cbnz	r0, 800afac <_vfiprintf_r+0x12c>
 800af74:	06d1      	lsls	r1, r2, #27
 800af76:	bf44      	itt	mi
 800af78:	2320      	movmi	r3, #32
 800af7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af7e:	0713      	lsls	r3, r2, #28
 800af80:	bf44      	itt	mi
 800af82:	232b      	movmi	r3, #43	; 0x2b
 800af84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af88:	f89a 3000 	ldrb.w	r3, [sl]
 800af8c:	2b2a      	cmp	r3, #42	; 0x2a
 800af8e:	d015      	beq.n	800afbc <_vfiprintf_r+0x13c>
 800af90:	9a07      	ldr	r2, [sp, #28]
 800af92:	4654      	mov	r4, sl
 800af94:	2000      	movs	r0, #0
 800af96:	f04f 0c0a 	mov.w	ip, #10
 800af9a:	4621      	mov	r1, r4
 800af9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa0:	3b30      	subs	r3, #48	; 0x30
 800afa2:	2b09      	cmp	r3, #9
 800afa4:	d94e      	bls.n	800b044 <_vfiprintf_r+0x1c4>
 800afa6:	b1b0      	cbz	r0, 800afd6 <_vfiprintf_r+0x156>
 800afa8:	9207      	str	r2, [sp, #28]
 800afaa:	e014      	b.n	800afd6 <_vfiprintf_r+0x156>
 800afac:	eba0 0308 	sub.w	r3, r0, r8
 800afb0:	fa09 f303 	lsl.w	r3, r9, r3
 800afb4:	4313      	orrs	r3, r2
 800afb6:	9304      	str	r3, [sp, #16]
 800afb8:	46a2      	mov	sl, r4
 800afba:	e7d2      	b.n	800af62 <_vfiprintf_r+0xe2>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1d19      	adds	r1, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	9103      	str	r1, [sp, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bfbb      	ittet	lt
 800afc8:	425b      	neglt	r3, r3
 800afca:	f042 0202 	orrlt.w	r2, r2, #2
 800afce:	9307      	strge	r3, [sp, #28]
 800afd0:	9307      	strlt	r3, [sp, #28]
 800afd2:	bfb8      	it	lt
 800afd4:	9204      	strlt	r2, [sp, #16]
 800afd6:	7823      	ldrb	r3, [r4, #0]
 800afd8:	2b2e      	cmp	r3, #46	; 0x2e
 800afda:	d10c      	bne.n	800aff6 <_vfiprintf_r+0x176>
 800afdc:	7863      	ldrb	r3, [r4, #1]
 800afde:	2b2a      	cmp	r3, #42	; 0x2a
 800afe0:	d135      	bne.n	800b04e <_vfiprintf_r+0x1ce>
 800afe2:	9b03      	ldr	r3, [sp, #12]
 800afe4:	1d1a      	adds	r2, r3, #4
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	9203      	str	r2, [sp, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	bfb8      	it	lt
 800afee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aff2:	3402      	adds	r4, #2
 800aff4:	9305      	str	r3, [sp, #20]
 800aff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0dc <_vfiprintf_r+0x25c>
 800affa:	7821      	ldrb	r1, [r4, #0]
 800affc:	2203      	movs	r2, #3
 800affe:	4650      	mov	r0, sl
 800b000:	f7f5 f8c6 	bl	8000190 <memchr>
 800b004:	b140      	cbz	r0, 800b018 <_vfiprintf_r+0x198>
 800b006:	2340      	movs	r3, #64	; 0x40
 800b008:	eba0 000a 	sub.w	r0, r0, sl
 800b00c:	fa03 f000 	lsl.w	r0, r3, r0
 800b010:	9b04      	ldr	r3, [sp, #16]
 800b012:	4303      	orrs	r3, r0
 800b014:	3401      	adds	r4, #1
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b01c:	482c      	ldr	r0, [pc, #176]	; (800b0d0 <_vfiprintf_r+0x250>)
 800b01e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b022:	2206      	movs	r2, #6
 800b024:	f7f5 f8b4 	bl	8000190 <memchr>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d03f      	beq.n	800b0ac <_vfiprintf_r+0x22c>
 800b02c:	4b29      	ldr	r3, [pc, #164]	; (800b0d4 <_vfiprintf_r+0x254>)
 800b02e:	bb1b      	cbnz	r3, 800b078 <_vfiprintf_r+0x1f8>
 800b030:	9b03      	ldr	r3, [sp, #12]
 800b032:	3307      	adds	r3, #7
 800b034:	f023 0307 	bic.w	r3, r3, #7
 800b038:	3308      	adds	r3, #8
 800b03a:	9303      	str	r3, [sp, #12]
 800b03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03e:	443b      	add	r3, r7
 800b040:	9309      	str	r3, [sp, #36]	; 0x24
 800b042:	e767      	b.n	800af14 <_vfiprintf_r+0x94>
 800b044:	fb0c 3202 	mla	r2, ip, r2, r3
 800b048:	460c      	mov	r4, r1
 800b04a:	2001      	movs	r0, #1
 800b04c:	e7a5      	b.n	800af9a <_vfiprintf_r+0x11a>
 800b04e:	2300      	movs	r3, #0
 800b050:	3401      	adds	r4, #1
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	4619      	mov	r1, r3
 800b056:	f04f 0c0a 	mov.w	ip, #10
 800b05a:	4620      	mov	r0, r4
 800b05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b060:	3a30      	subs	r2, #48	; 0x30
 800b062:	2a09      	cmp	r2, #9
 800b064:	d903      	bls.n	800b06e <_vfiprintf_r+0x1ee>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0c5      	beq.n	800aff6 <_vfiprintf_r+0x176>
 800b06a:	9105      	str	r1, [sp, #20]
 800b06c:	e7c3      	b.n	800aff6 <_vfiprintf_r+0x176>
 800b06e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b072:	4604      	mov	r4, r0
 800b074:	2301      	movs	r3, #1
 800b076:	e7f0      	b.n	800b05a <_vfiprintf_r+0x1da>
 800b078:	ab03      	add	r3, sp, #12
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	462a      	mov	r2, r5
 800b07e:	4b16      	ldr	r3, [pc, #88]	; (800b0d8 <_vfiprintf_r+0x258>)
 800b080:	a904      	add	r1, sp, #16
 800b082:	4630      	mov	r0, r6
 800b084:	f7fd fd24 	bl	8008ad0 <_printf_float>
 800b088:	4607      	mov	r7, r0
 800b08a:	1c78      	adds	r0, r7, #1
 800b08c:	d1d6      	bne.n	800b03c <_vfiprintf_r+0x1bc>
 800b08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b090:	07d9      	lsls	r1, r3, #31
 800b092:	d405      	bmi.n	800b0a0 <_vfiprintf_r+0x220>
 800b094:	89ab      	ldrh	r3, [r5, #12]
 800b096:	059a      	lsls	r2, r3, #22
 800b098:	d402      	bmi.n	800b0a0 <_vfiprintf_r+0x220>
 800b09a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b09c:	f7ff faba 	bl	800a614 <__retarget_lock_release_recursive>
 800b0a0:	89ab      	ldrh	r3, [r5, #12]
 800b0a2:	065b      	lsls	r3, r3, #25
 800b0a4:	f53f af12 	bmi.w	800aecc <_vfiprintf_r+0x4c>
 800b0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0aa:	e711      	b.n	800aed0 <_vfiprintf_r+0x50>
 800b0ac:	ab03      	add	r3, sp, #12
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	4b09      	ldr	r3, [pc, #36]	; (800b0d8 <_vfiprintf_r+0x258>)
 800b0b4:	a904      	add	r1, sp, #16
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7fd ffae 	bl	8009018 <_printf_i>
 800b0bc:	e7e4      	b.n	800b088 <_vfiprintf_r+0x208>
 800b0be:	bf00      	nop
 800b0c0:	0800b6c4 	.word	0x0800b6c4
 800b0c4:	0800b6e4 	.word	0x0800b6e4
 800b0c8:	0800b6a4 	.word	0x0800b6a4
 800b0cc:	0800b864 	.word	0x0800b864
 800b0d0:	0800b86e 	.word	0x0800b86e
 800b0d4:	08008ad1 	.word	0x08008ad1
 800b0d8:	0800ae5d 	.word	0x0800ae5d
 800b0dc:	0800b86a 	.word	0x0800b86a

0800b0e0 <__sread>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e8:	f000 f8d6 	bl	800b298 <_read_r>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	bfab      	itete	ge
 800b0f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b0f4:	181b      	addge	r3, r3, r0
 800b0f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0fa:	bfac      	ite	ge
 800b0fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0fe:	81a3      	strhlt	r3, [r4, #12]
 800b100:	bd10      	pop	{r4, pc}

0800b102 <__swrite>:
 800b102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b106:	461f      	mov	r7, r3
 800b108:	898b      	ldrh	r3, [r1, #12]
 800b10a:	05db      	lsls	r3, r3, #23
 800b10c:	4605      	mov	r5, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	4616      	mov	r6, r2
 800b112:	d505      	bpl.n	800b120 <__swrite+0x1e>
 800b114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b118:	2302      	movs	r3, #2
 800b11a:	2200      	movs	r2, #0
 800b11c:	f000 f898 	bl	800b250 <_lseek_r>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b12a:	81a3      	strh	r3, [r4, #12]
 800b12c:	4632      	mov	r2, r6
 800b12e:	463b      	mov	r3, r7
 800b130:	4628      	mov	r0, r5
 800b132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b136:	f000 b817 	b.w	800b168 <_write_r>

0800b13a <__sseek>:
 800b13a:	b510      	push	{r4, lr}
 800b13c:	460c      	mov	r4, r1
 800b13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b142:	f000 f885 	bl	800b250 <_lseek_r>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	bf15      	itete	ne
 800b14c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b156:	81a3      	strheq	r3, [r4, #12]
 800b158:	bf18      	it	ne
 800b15a:	81a3      	strhne	r3, [r4, #12]
 800b15c:	bd10      	pop	{r4, pc}

0800b15e <__sclose>:
 800b15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b162:	f000 b831 	b.w	800b1c8 <_close_r>
	...

0800b168 <_write_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d07      	ldr	r5, [pc, #28]	; (800b188 <_write_r+0x20>)
 800b16c:	4604      	mov	r4, r0
 800b16e:	4608      	mov	r0, r1
 800b170:	4611      	mov	r1, r2
 800b172:	2200      	movs	r2, #0
 800b174:	602a      	str	r2, [r5, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	f7f7 fcef 	bl	8002b5a <_write>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_write_r+0x1e>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_write_r+0x1e>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	200003fc 	.word	0x200003fc

0800b18c <__assert_func>:
 800b18c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b18e:	4614      	mov	r4, r2
 800b190:	461a      	mov	r2, r3
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <__assert_func+0x2c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4605      	mov	r5, r0
 800b198:	68d8      	ldr	r0, [r3, #12]
 800b19a:	b14c      	cbz	r4, 800b1b0 <__assert_func+0x24>
 800b19c:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <__assert_func+0x30>)
 800b19e:	9100      	str	r1, [sp, #0]
 800b1a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1a4:	4906      	ldr	r1, [pc, #24]	; (800b1c0 <__assert_func+0x34>)
 800b1a6:	462b      	mov	r3, r5
 800b1a8:	f000 f81e 	bl	800b1e8 <fiprintf>
 800b1ac:	f7fd fb04 	bl	80087b8 <abort>
 800b1b0:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <__assert_func+0x38>)
 800b1b2:	461c      	mov	r4, r3
 800b1b4:	e7f3      	b.n	800b19e <__assert_func+0x12>
 800b1b6:	bf00      	nop
 800b1b8:	20000034 	.word	0x20000034
 800b1bc:	0800b875 	.word	0x0800b875
 800b1c0:	0800b882 	.word	0x0800b882
 800b1c4:	0800b8b0 	.word	0x0800b8b0

0800b1c8 <_close_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d06      	ldr	r5, [pc, #24]	; (800b1e4 <_close_r+0x1c>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	602b      	str	r3, [r5, #0]
 800b1d4:	f7f7 fcdd 	bl	8002b92 <_close>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_close_r+0x1a>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_close_r+0x1a>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	200003fc 	.word	0x200003fc

0800b1e8 <fiprintf>:
 800b1e8:	b40e      	push	{r1, r2, r3}
 800b1ea:	b503      	push	{r0, r1, lr}
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	4805      	ldr	r0, [pc, #20]	; (800b208 <fiprintf+0x20>)
 800b1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f6:	6800      	ldr	r0, [r0, #0]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	f7ff fe41 	bl	800ae80 <_vfiprintf_r>
 800b1fe:	b002      	add	sp, #8
 800b200:	f85d eb04 	ldr.w	lr, [sp], #4
 800b204:	b003      	add	sp, #12
 800b206:	4770      	bx	lr
 800b208:	20000034 	.word	0x20000034

0800b20c <_fstat_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	; (800b22c <_fstat_r+0x20>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f7f7 fcc6 	bl	8002baa <_fstat>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d102      	bne.n	800b228 <_fstat_r+0x1c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	b103      	cbz	r3, 800b228 <_fstat_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	200003fc 	.word	0x200003fc

0800b230 <_isatty_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d06      	ldr	r5, [pc, #24]	; (800b24c <_isatty_r+0x1c>)
 800b234:	2300      	movs	r3, #0
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f7 fcc5 	bl	8002bca <_isatty>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_isatty_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_isatty_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	200003fc 	.word	0x200003fc

0800b250 <_lseek_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d07      	ldr	r5, [pc, #28]	; (800b270 <_lseek_r+0x20>)
 800b254:	4604      	mov	r4, r0
 800b256:	4608      	mov	r0, r1
 800b258:	4611      	mov	r1, r2
 800b25a:	2200      	movs	r2, #0
 800b25c:	602a      	str	r2, [r5, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	f7f7 fcbe 	bl	8002be0 <_lseek>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_lseek_r+0x1e>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_lseek_r+0x1e>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	200003fc 	.word	0x200003fc

0800b274 <__ascii_mbtowc>:
 800b274:	b082      	sub	sp, #8
 800b276:	b901      	cbnz	r1, 800b27a <__ascii_mbtowc+0x6>
 800b278:	a901      	add	r1, sp, #4
 800b27a:	b142      	cbz	r2, 800b28e <__ascii_mbtowc+0x1a>
 800b27c:	b14b      	cbz	r3, 800b292 <__ascii_mbtowc+0x1e>
 800b27e:	7813      	ldrb	r3, [r2, #0]
 800b280:	600b      	str	r3, [r1, #0]
 800b282:	7812      	ldrb	r2, [r2, #0]
 800b284:	1e10      	subs	r0, r2, #0
 800b286:	bf18      	it	ne
 800b288:	2001      	movne	r0, #1
 800b28a:	b002      	add	sp, #8
 800b28c:	4770      	bx	lr
 800b28e:	4610      	mov	r0, r2
 800b290:	e7fb      	b.n	800b28a <__ascii_mbtowc+0x16>
 800b292:	f06f 0001 	mvn.w	r0, #1
 800b296:	e7f8      	b.n	800b28a <__ascii_mbtowc+0x16>

0800b298 <_read_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d07      	ldr	r5, [pc, #28]	; (800b2b8 <_read_r+0x20>)
 800b29c:	4604      	mov	r4, r0
 800b29e:	4608      	mov	r0, r1
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	602a      	str	r2, [r5, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f7f7 fc3a 	bl	8002b20 <_read>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_read_r+0x1e>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_read_r+0x1e>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	200003fc 	.word	0x200003fc

0800b2bc <__ascii_wctomb>:
 800b2bc:	b149      	cbz	r1, 800b2d2 <__ascii_wctomb+0x16>
 800b2be:	2aff      	cmp	r2, #255	; 0xff
 800b2c0:	bf85      	ittet	hi
 800b2c2:	238a      	movhi	r3, #138	; 0x8a
 800b2c4:	6003      	strhi	r3, [r0, #0]
 800b2c6:	700a      	strbls	r2, [r1, #0]
 800b2c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b2cc:	bf98      	it	ls
 800b2ce:	2001      	movls	r0, #1
 800b2d0:	4770      	bx	lr
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <_init>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	bf00      	nop
 800b2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2de:	bc08      	pop	{r3}
 800b2e0:	469e      	mov	lr, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <_fini>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr
