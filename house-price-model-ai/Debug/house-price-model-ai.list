
house-price-model-ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006af8  080088e8  080088e8  000188e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f3e0  0800f3e0  0001f3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f3e8  0800f3e8  0001f3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f3ec  0800f3ec  0001f3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001734  20000004  0800f3f0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000210  20001738  08010b24  00021738  2**2
                  ALLOC
  8 ._user_heap_stack 00000a00  20001948  08010b24  00021948  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00021738  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001876b  00000000  00000000  00021768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003069  00000000  00000000  00039ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001958  00000000  00000000  0003cf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017c0  00000000  00000000  0003e898  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00024e7f  00000000  00000000  00040058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00012e1e  00000000  00000000  00064ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ec8c2  00000000  00000000  00077cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001645b7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007330  00000000  00000000  00164634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20001738 	.word	0x20001738
 800015c:	00000000 	.word	0x00000000
 8000160:	080088cc 	.word	0x080088cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000173c 	.word	0x2000173c
 800017c:	080088cc 	.word	0x080088cc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_CRC_Init+0x3c>)
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <MX_CRC_Init+0x40>)
 8000e94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_CRC_Init+0x3c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_CRC_Init+0x3c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_CRC_Init+0x3c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_CRC_Init+0x3c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_CRC_Init+0x3c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_CRC_Init+0x3c>)
 8000eb6:	f000 fded 	bl	8001a94 <HAL_CRC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ec0:	f000 fa10 	bl	80012e4 <Error_Handler>
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20001844 	.word	0x20001844
 8000ecc:	40023000 	.word	0x40023000

08000ed0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <HAL_CRC_MspInit+0x24>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d103      	bne.n	8000eea <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ee2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ee6:	f7ff ffb7 	bl	8000e58 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023000 	.word	0x40023000

08000ef8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f7ff ffe2 	bl	8000ef8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	2002      	movs	r0, #2
 8000f36:	f7ff ffdf 	bl	8000ef8 <LL_AHB2_GRP1_EnableClock>

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000f46:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char buf[50];
	int buf_len = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_HOUSE_PRICE_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_HOUSE_PRICE_MODEL_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle house_price_model = AI_HANDLE_NULL;
 8000f4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_HOUSE_PRICE_MODEL_IN_NUM] = AI_HOUSE_PRICE_MODEL_IN;
 8000f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5a:	4a9b      	ldr	r2, [pc, #620]	; (80011c8 <main+0x288>)
 8000f5c:	461c      	mov	r4, r3
 8000f5e:	4615      	mov	r5, r2
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f68:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_HOUSE_PRICE_MODEL_OUT_NUM] = AI_HOUSE_PRICE_MODEL_OUT;
 8000f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f70:	4a96      	ldr	r2, [pc, #600]	; (80011cc <main+0x28c>)
 8000f72:	461c      	mov	r4, r3
 8000f74:	4615      	mov	r5, r2
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f7e:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 8000f82:	463b      	mov	r3, r7
 8000f84:	4a92      	ldr	r2, [pc, #584]	; (80011d0 <main+0x290>)
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	809a      	strh	r2, [r3, #4]
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2201      	movs	r2, #1
 8000f92:	80da      	strh	r2, [r3, #6]
 8000f94:	463b      	mov	r3, r7
 8000f96:	2201      	movs	r2, #1
 8000f98:	811a      	strh	r2, [r3, #8]
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	f246 6218 	movw	r2, #26136	; 0x6618
 8000fa0:	60da      	str	r2, [r3, #12]
			AI_HOUSE_PRICE_MODEL_DATA_WEIGHTS(ai_house_price_model_data_weights_get()),
 8000fa2:	f004 fb2f 	bl	8005604 <ai_house_price_model_data_weights_get>
 8000fa6:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 8000fa8:	463b      	mov	r3, r7
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4a87      	ldr	r2, [pc, #540]	; (80011d4 <main+0x294>)
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2201      	movs	r2, #1
 8000fbc:	839a      	strh	r2, [r3, #28]
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	83da      	strh	r2, [r3, #30]
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	841a      	strh	r2, [r3, #32]
 8000fca:	463b      	mov	r3, r7
 8000fcc:	f44f 7298 	mov.w	r2, #304	; 0x130
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
			AI_HOUSE_PRICE_MODEL_DATA_ACTIVATIONS(activations)
	};

	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8000fe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fe8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ff0:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8000ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001002:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f000 fb8e 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f8f4 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f7ff ff8d 	bl	8000f2a <MX_GPIO_Init>
  MX_CRC_Init();
 8001010:	f7ff ff3c 	bl	8000e8c <MX_CRC_Init>
  MX_TIM16_Init();
 8001014:	f000 fa56 	bl	80014c4 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8001018:	f000 fac8 	bl	80015ac <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 800101c:	486e      	ldr	r0, [pc, #440]	; (80011d8 <main+0x298>)
 800101e:	f002 fe31 	bl	8003c84 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001022:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001026:	4a6d      	ldr	r2, [pc, #436]	; (80011dc <main+0x29c>)
 8001028:	461c      	mov	r4, r3
 800102a:	4615      	mov	r5, r2
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001034:	c403      	stmia	r4!, {r0, r1}
 8001036:	8022      	strh	r2, [r4, #0]
 8001038:	3402      	adds	r4, #2
 800103a:	0c13      	lsrs	r3, r2, #16
 800103c:	7023      	strb	r3, [r4, #0]
 800103e:	231a      	movs	r3, #26
 8001040:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001044:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001048:	b29a      	uxth	r2, r3
 800104a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	4863      	ldr	r0, [pc, #396]	; (80011e0 <main+0x2a0>)
 8001052:	f003 f8a1 	bl	8004198 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_house_price_model_create(&house_price_model, AI_HOUSE_PRICE_MODEL_DATA_CONFIG);
 8001056:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fa6b 	bl	8005538 <ai_house_price_model_create>
 8001062:	4603      	mov	r3, r0
 8001064:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  if (ai_err.type != AI_ERROR_NONE)
 8001068:	f897 31e4 	ldrb.w	r3, [r7, #484]	; 0x1e4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01a      	beq.n	80010a6 <main+0x166>
  {
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001070:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001074:	4a5b      	ldr	r2, [pc, #364]	; (80011e4 <main+0x2a4>)
 8001076:	461c      	mov	r4, r3
 8001078:	4615      	mov	r5, r2
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001086:	6020      	str	r0, [r4, #0]
 8001088:	3404      	adds	r4, #4
 800108a:	8021      	strh	r1, [r4, #0]
 800108c:	2325      	movs	r3, #37	; 0x25
 800108e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001092:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001096:	b29a      	uxth	r2, r3
 8001098:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 800109c:	2364      	movs	r3, #100	; 0x64
 800109e:	4850      	ldr	r0, [pc, #320]	; (80011e0 <main+0x2a0>)
 80010a0:	f003 f87a 	bl	8004198 <HAL_UART_Transmit>
	  while(1);
 80010a4:	e7fe      	b.n	80010a4 <main+0x164>
  }

  // Initialize neural network
  if (!ai_house_price_model_init(house_price_model, &ai_params))
 80010a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	463a      	mov	r2, r7
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 fa57 	bl	8005564 <ai_house_price_model_init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f083 0301 	eor.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d017      	beq.n	80010f2 <main+0x1b2>
  {
	  buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80010c2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80010c6:	4a48      	ldr	r2, [pc, #288]	; (80011e8 <main+0x2a8>)
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	7023      	strb	r3, [r4, #0]
 80010d8:	2320      	movs	r3, #32
 80010da:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80010de:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	483d      	ldr	r0, [pc, #244]	; (80011e0 <main+0x2a0>)
 80010ec:	f003 f854 	bl	8004198 <HAL_UART_Transmit>
	  while(1);
 80010f0:	e7fe      	b.n	80010f0 <main+0x1b0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Fill input buffer (use test value)
	  for (uint32_t i = 0; i < AI_HOUSE_PRICE_MODEL_IN_1_SIZE; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80010f8:	e00d      	b.n	8001116 <main+0x1d6>
	  {
		  ((ai_float *)in_data)[i] = (ai_float)2.0f;
 80010fa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001104:	4413      	add	r3, r2
 8001106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110a:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < AI_HOUSE_PRICE_MODEL_IN_1_SIZE; i++)
 800110c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001110:	3301      	adds	r3, #1
 8001112:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001116:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800111a:	2b12      	cmp	r3, #18
 800111c:	d9ed      	bls.n	80010fa <main+0x1ba>
	  }

	  // Get current timestamp
	  timestamp = htim16.Instance->CNT;
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <main+0x298>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

	  // Perform inference
	  nbatch = ai_house_price_model_run(house_price_model, &ai_input[0], &ai_output[0]);
 8001128:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001132:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fa53 	bl	80055e2 <ai_house_price_model_run>
 800113c:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	  if (nbatch != 1) {
 8001140:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001144:	2b01      	cmp	r3, #1
 8001146:	d016      	beq.n	8001176 <main+0x236>
		  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001148:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <main+0x2ac>)
 800114e:	461c      	mov	r4, r3
 8001150:	4615      	mov	r5, r2
 8001152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	7023      	strb	r3, [r4, #0]
 800115e:	2320      	movs	r3, #32
 8001160:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001164:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001168:	b29a      	uxth	r2, r3
 800116a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <main+0x2a0>)
 8001172:	f003 f811 	bl	8004198 <HAL_UART_Transmit>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 8001176:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

	  // Print output of neural network along with inference time (microseconds)
	  buf_len = sprintf(buf,
 8001180:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001184:	f7ff f9b8 	bl	80004f8 <__aeabi_f2d>
 8001188:	4604      	mov	r4, r0
 800118a:	460d      	mov	r5, r1
			  "Output: %f | Duration: %lu\r\n",
			  y_val,
			  htim16.Instance->CNT - timestamp);
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <main+0x298>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	  buf_len = sprintf(buf,
 8001192:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	4622      	mov	r2, r4
 80011a0:	462b      	mov	r3, r5
 80011a2:	4913      	ldr	r1, [pc, #76]	; (80011f0 <main+0x2b0>)
 80011a4:	f006 f87a 	bl	800729c <siprintf>
 80011a8:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80011ac:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <main+0x2a0>)
 80011ba:	f002 ffed 	bl	8004198 <HAL_UART_Transmit>

	  // Wait before doing it again
	  HAL_Delay(500);
 80011be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c2:	f000 fb35 	bl	8001830 <HAL_Delay>
	  for (uint32_t i = 0; i < AI_HOUSE_PRICE_MODEL_IN_1_SIZE; i++)
 80011c6:	e794      	b.n	80010f2 <main+0x1b2>
 80011c8:	08008994 	.word	0x08008994
 80011cc:	080089ac 	.word	0x080089ac
 80011d0:	40040440 	.word	0x40040440
 80011d4:	00040440 	.word	0x00040440
 80011d8:	20001868 	.word	0x20001868
 80011dc:	080088e8 	.word	0x080088e8
 80011e0:	200018b4 	.word	0x200018b4
 80011e4:	08008904 	.word	0x08008904
 80011e8:	0800892c 	.word	0x0800892c
 80011ec:	08008950 	.word	0x08008950
 80011f0:	08008974 	.word	0x08008974

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ae      	sub	sp, #184	; 0xb8
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011fe:	2248      	movs	r2, #72	; 0x48
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f005 fb2d 	bl	8006862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2250      	movs	r2, #80	; 0x50
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f005 fb1d 	bl	8006862 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <SystemClock_Config+0xec>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001230:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <SystemClock_Config+0xec>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <SystemClock_Config+0xec>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001244:	2322      	movs	r3, #34	; 0x22
 8001246:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001254:	2340      	movs	r3, #64	; 0x40
 8001256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fa5d 	bl	8002730 <HAL_RCC_OscConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800127c:	f000 f832 	bl	80012e4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001280:	236f      	movs	r3, #111	; 0x6f
 8001282:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001284:	2300      	movs	r3, #0
 8001286:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800129c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fdd0 	bl	8002e48 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012ae:	f000 f819 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 80012b2:	f242 0301 	movw	r3, #8193	; 0x2001
 80012b6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80012c0:	2310      	movs	r3, #16
 80012c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 f9ff 	bl	80036ca <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80012d2:	f000 f807 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80012d6:	bf00      	nop
 80012d8:	37b8      	adds	r7, #184	; 0xb8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58000400 	.word	0x58000400

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ea:	e7fe      	b.n	80012ea <Error_Handler+0x6>

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <HardFault_Handler+0x4>

08001306 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <BusFault_Handler+0x4>

08001312 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f000 fa47 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001356:	f002 fcdb 	bl	8003d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20001868 	.word	0x20001868

08001364 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <USART1_IRQHandler+0x10>)
 800136a:	f002 ffab 	bl	80042c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200018b4 	.word	0x200018b4

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f005 fa1e 	bl	80067e8 <__errno>
 80013ac:	4602      	mov	r2, r0
 80013ae:	230c      	movs	r3, #12
 80013b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20030000 	.word	0x20030000
 80013d8:	00000800 	.word	0x00000800
 80013dc:	20001754 	.word	0x20001754
 80013e0:	20001948 	.word	0x20001948

080013e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <SystemInit+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <SystemInit+0xa0>)
 80013f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f4:	4a23      	ldr	r2, [pc, #140]	; (8001484 <SystemInit+0xa0>)
 80013f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001416:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <SystemInit+0xa4>)
 8001424:	4013      	ands	r3, r2
 8001426:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001434:	f023 0305 	bic.w	r3, r3, #5
 8001438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <SystemInit+0xa8>)
 8001456:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <SystemInit+0xa8>)
 800145e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00
 8001488:	faf6fefb 	.word	0xfaf6fefb
 800148c:	22041000 	.word	0x22041000

08001490 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800149e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014b4:	68fb      	ldr	r3, [r7, #12]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_TIM16_Init+0x44>)
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <MX_TIM16_Init+0x48>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_TIM16_Init+0x44>)
 80014d0:	223f      	movs	r2, #63	; 0x3f
 80014d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_TIM16_Init+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_TIM16_Init+0x44>)
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_TIM16_Init+0x44>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_TIM16_Init+0x44>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_TIM16_Init+0x44>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_TIM16_Init+0x44>)
 80014f6:	f002 fb6e 	bl	8003bd6 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001500:	f7ff fef0 	bl	80012e4 <Error_Handler>
  }

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20001868 	.word	0x20001868
 800150c:	40014400 	.word	0x40014400

08001510 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_TIM_Base_MspInit+0x34>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10b      	bne.n	800153a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001522:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001526:	f7ff ffb3 	bl	8001490 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2019      	movs	r0, #25
 8001530:	f000 fa7b 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001534:	2019      	movs	r0, #25
 8001536:	f000 fa92 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40014400 	.word	0x40014400

08001548 <LL_AHB2_GRP1_EnableClock>:
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4313      	orrs	r3, r2
 800155e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_APB2_GRP1_EnableClock>:
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4313      	orrs	r3, r2
 8001590:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <MX_USART1_UART_Init+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_USART1_UART_Init+0x90>)
 80015f6:	f002 fd7f 	bl	80040f8 <HAL_UART_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001600:	f7ff fe70 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_USART1_UART_Init+0x90>)
 8001608:	f003 fc12 	bl	8004e30 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001612:	f7ff fe67 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_USART1_UART_Init+0x90>)
 800161a:	f003 fc47 	bl	8004eac <HAL_UARTEx_SetRxFifoThreshold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001624:	f7ff fe5e 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_USART1_UART_Init+0x90>)
 800162a:	f003 fbc8 	bl	8004dbe <HAL_UARTEx_DisableFifoMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001634:	f7ff fe56 	bl	80012e4 <Error_Handler>
  }

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200018b4 	.word	0x200018b4
 8001640:	40013800 	.word	0x40013800

08001644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <HAL_UART_MspInit+0x68>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11e      	bne.n	80016a4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001666:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800166a:	f7ff ff86 	bl	800157a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2002      	movs	r0, #2
 8001670:	f7ff ff6a 	bl	8001548 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STINK_TX_Pin;
 8001674:	23c0      	movs	r3, #192	; 0xc0
 8001676:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001684:	2307      	movs	r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	4808      	ldr	r0, [pc, #32]	; (80016b0 <HAL_UART_MspInit+0x6c>)
 8001690:	f000 fb4a 	bl	8001d28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2024      	movs	r0, #36	; 0x24
 800169a:	f000 f9c6 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800169e:	2024      	movs	r0, #36	; 0x24
 80016a0:	f000 f9dd 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40013800 	.word	0x40013800
 80016b0:	48000400 	.word	0x48000400

080016b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80016b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b8:	3304      	adds	r3, #4

080016ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80016be:	d3f9      	bcc.n	80016b4 <CopyDataInit>
  bx lr
 80016c0:	4770      	bx	lr

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80016c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80016c4:	3004      	adds	r0, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80016c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>
  bx lr
 80016ca:	4770      	bx	lr

080016cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80016ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016d0:	f7ff fe88 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <LoopForever+0x8>)
 80016d6:	490c      	ldr	r1, [pc, #48]	; (8001708 <LoopForever+0xc>)
 80016d8:	4a0c      	ldr	r2, [pc, #48]	; (800170c <LoopForever+0x10>)
 80016da:	2300      	movs	r3, #0
 80016dc:	f7ff ffed 	bl	80016ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopForever+0x14>)
 80016e2:	490c      	ldr	r1, [pc, #48]	; (8001714 <LoopForever+0x18>)
 80016e4:	2300      	movs	r3, #0
 80016e6:	f7ff ffee 	bl	80016c6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016ea:	480b      	ldr	r0, [pc, #44]	; (8001718 <LoopForever+0x1c>)
 80016ec:	490b      	ldr	r1, [pc, #44]	; (800171c <LoopForever+0x20>)
 80016ee:	2300      	movs	r3, #0
 80016f0:	f7ff ffe9 	bl	80016c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016f4:	f005 f87e 	bl	80067f4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80016f8:	f7ff fc22 	bl	8000f40 <main>

080016fc <LoopForever>:

LoopForever:
  b LoopForever
 80016fc:	e7fe      	b.n	80016fc <LoopForever>
 80016fe:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001700:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001704:	20000004 	.word	0x20000004
 8001708:	20001738 	.word	0x20001738
 800170c:	0800f3f0 	.word	0x0800f3f0
  INIT_BSS _sbss, _ebss
 8001710:	20001738 	.word	0x20001738
 8001714:	20001948 	.word	0x20001948
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001718:	20030000 	.word	0x20030000
 800171c:	20030000 	.word	0x20030000

08001720 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_Init+0x3c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <HAL_Init+0x3c>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173a:	2003      	movs	r0, #3
 800173c:	f000 f96a 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f80f 	bl	8001764 <HAL_InitTick>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	e001      	b.n	8001756 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001752:	f7ff fdcb 	bl	80012ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001756:	79fb      	ldrb	r3, [r7, #7]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	58004000 	.word	0x58004000

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_InitTick+0x6c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d024      	beq.n	80017c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001778:	f001 fd12 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_InitTick+0x6c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001788:	fbb3 f3f1 	udiv	r3, r3, r1
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f972 	bl	8001a7a <HAL_SYSTICK_Config>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10f      	bne.n	80017bc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	d809      	bhi.n	80017b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a2:	2200      	movs	r2, #0
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017aa:	f000 f93e 	bl	8001a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_InitTick+0x70>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e007      	b.n	80017c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e004      	b.n	80017c6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e001      	b.n	80017c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2000000c 	.word	0x2000000c
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	20001940 	.word	0x20001940

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20001940 	.word	0x20001940

08001818 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTickPrio+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffe2 	bl	8001800 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_Delay+0x40>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffd2 	bl	8001800 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
    {
    }
  }
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000000c 	.word	0x2000000c

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff40 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff90 	bl	8001968 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5f 	bl	8001914 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff33 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa4 	bl	80019d0 <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e054      	b.n	8001b50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7f5b      	ldrb	r3, [r3, #29]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fa0a 	bl	8000ed0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_CRC_Init+0xc4>)
 8001ad0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0218 	bic.w	r2, r2, #24
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	e00c      	b.n	8001afe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f834 	bl	8001b5c <HAL_CRCEx_Polynomial_Set>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e028      	b.n	8001b50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	795b      	ldrb	r3, [r3, #5]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	e004      	b.n	8001b1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6912      	ldr	r2, [r2, #16]
 8001b1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	04c11db7 	.word	0x04c11db7

08001b5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b6c:	231f      	movs	r3, #31
 8001b6e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b70:	bf00      	nop
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	613a      	str	r2, [r7, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d009      	beq.n	8001b90 <HAL_CRCEx_Polynomial_Set+0x34>
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b18      	cmp	r3, #24
 8001b94:	d846      	bhi.n	8001c24 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001c2b 	.word	0x08001c2b
 8001ba0:	08001c25 	.word	0x08001c25
 8001ba4:	08001c25 	.word	0x08001c25
 8001ba8:	08001c25 	.word	0x08001c25
 8001bac:	08001c25 	.word	0x08001c25
 8001bb0:	08001c25 	.word	0x08001c25
 8001bb4:	08001c25 	.word	0x08001c25
 8001bb8:	08001c25 	.word	0x08001c25
 8001bbc:	08001c19 	.word	0x08001c19
 8001bc0:	08001c25 	.word	0x08001c25
 8001bc4:	08001c25 	.word	0x08001c25
 8001bc8:	08001c25 	.word	0x08001c25
 8001bcc:	08001c25 	.word	0x08001c25
 8001bd0:	08001c25 	.word	0x08001c25
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001c25 	.word	0x08001c25
 8001bdc:	08001c0d 	.word	0x08001c0d
 8001be0:	08001c25 	.word	0x08001c25
 8001be4:	08001c25 	.word	0x08001c25
 8001be8:	08001c25 	.word	0x08001c25
 8001bec:	08001c25 	.word	0x08001c25
 8001bf0:	08001c25 	.word	0x08001c25
 8001bf4:	08001c25 	.word	0x08001c25
 8001bf8:	08001c25 	.word	0x08001c25
 8001bfc:	08001c01 	.word	0x08001c01
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d913      	bls.n	8001c2e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c0a:	e010      	b.n	8001c2e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	d90f      	bls.n	8001c32 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c16:	e00c      	b.n	8001c32 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b0f      	cmp	r3, #15
 8001c1c:	d90b      	bls.n	8001c36 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c22:	e008      	b.n	8001c36 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	75fb      	strb	r3, [r7, #23]
      break;
 8001c28:	e006      	b.n	8001c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e004      	b.n	8001c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c2e:	bf00      	nop
 8001c30:	e002      	b.n	8001c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c32:	bf00      	nop
 8001c34:	e000      	b.n	8001c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c36:	bf00      	nop
  }
  if (status == HAL_OK)
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 0118 	bic.w	r1, r3, #24
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d005      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2204      	movs	r2, #4
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e047      	b.n	8001d1c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 020e 	bic.w	r2, r2, #14
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f003 021c 	and.w	r2, r3, #28
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00c      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    }
  }
  return status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e14c      	b.n	8001fd2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 813e 	beq.w	8001fcc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d00b      	beq.n	8001d70 <HAL_GPIO_Init+0x48>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d64:	2b11      	cmp	r3, #17
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b12      	cmp	r3, #18
 8001d6e:	d130      	bne.n	8001dd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da6:	2201      	movs	r2, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0xea>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d123      	bne.n	8001e5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	6939      	ldr	r1, [r7, #16]
 8001e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0203 	and.w	r2, r3, #3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8098 	beq.w	8001fcc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e9c:	4a54      	ldr	r2, [pc, #336]	; (8001ff0 <HAL_GPIO_Init+0x2c8>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ec6:	d019      	beq.n	8001efc <HAL_GPIO_Init+0x1d4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_GPIO_Init+0x2cc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_GPIO_Init+0x1d0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_GPIO_Init+0x1cc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a48      	ldr	r2, [pc, #288]	; (8001ffc <HAL_GPIO_Init+0x2d4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <HAL_GPIO_Init+0x1c8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a47      	ldr	r2, [pc, #284]	; (8002000 <HAL_GPIO_Init+0x2d8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_GPIO_Init+0x1c4>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e008      	b.n	8001efe <HAL_GPIO_Init+0x1d6>
 8001eec:	2307      	movs	r3, #7
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1d6>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1d6>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1d6>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1d6>
 8001efc:	2300      	movs	r3, #0
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f0e:	4938      	ldr	r1, [pc, #224]	; (8001ff0 <HAL_GPIO_Init+0x2c8>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f42:	4a30      	ldr	r2, [pc, #192]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <HAL_GPIO_Init+0x2dc>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f47f aeab 	bne.w	8001d38 <HAL_GPIO_Init+0x10>
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	48000800 	.word	0x48000800
 8001ffc:	48000c00 	.word	0x48000c00
 8002000:	48001000 	.word	0x48001000
 8002004:	58000800 	.word	0x58000800

08002008 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	58000400 	.word	0x58000400

08002028 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PWREx_GetVoltageRange+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	58000400 	.word	0x58000400

08002044 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002056:	d101      	bne.n	800205c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020b6:	d101      	bne.n	80020bc <LL_RCC_HSE_IsReady+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_RCC_HSE_IsReady+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002116:	d101      	bne.n	800211c <LL_RCC_HSI_IsReady+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_RCC_HSI_IsReady+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800215e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d101      	bne.n	80021ae <LL_RCC_HSI48_IsReady+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_RCC_HSI48_IsReady+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d101      	bne.n	800225a <LL_RCC_LSE_IsReady+0x18>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_RCC_LSE_IsReady+0x1a>
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d101      	bne.n	80022c2 <LL_RCC_LSI1_IsReady+0x18>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_RCC_LSI1_IsReady+0x1a>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d101      	bne.n	800232a <LL_RCC_LSI2_IsReady+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_RCC_LSI2_IsReady+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6013      	str	r3, [r2, #0]
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d101      	bne.n	80023b6 <LL_RCC_MSI_IsReady+0x16>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_RCC_MSI_IsReady+0x18>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2bb0      	cmp	r3, #176	; 0xb0
 8002400:	d901      	bls.n	8002406 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002402:	23b0      	movs	r3, #176	; 0xb0
 8002404:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030c 	and.w	r3, r3, #12
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024e2:	f023 020f 	bic.w	r2, r3, #15
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e4:	6013      	str	r3, [r2, #0]
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002602:	d101      	bne.n	8002608 <LL_RCC_PLL_IsReady+0x18>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <LL_RCC_PLL_IsReady+0x1a>
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0303 	and.w	r3, r3, #3
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d101      	bne.n	800268e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ae:	d101      	bne.n	80026b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d101      	bne.n	80026da <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026f8:	d101      	bne.n	80026fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800271c:	d101      	bne.n	8002722 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b08d      	sub	sp, #52	; 0x34
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e37e      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8092 	beq.w	8002874 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002750:	f7ff fe89 	bl	8002466 <LL_RCC_GetSysClkSource>
 8002754:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002756:	f7ff ff82 	bl	800265e <LL_RCC_PLL_GetMainSource>
 800275a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x3e>
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d14c      	bne.n	8002802 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b01      	cmp	r3, #1
 800276c:	d149      	bne.n	8002802 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276e:	f7ff fe17 	bl	80023a0 <LL_RCC_MSI_IsReady>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_OscConfig+0x54>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e35d      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002788:	f7ff fe2f 	bl	80023ea <LL_RCC_MSI_GetRange>
 800278c:	4603      	mov	r3, r0
 800278e:	429c      	cmp	r4, r3
 8002790:	d914      	bls.n	80027bc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fd42 	bl	8003220 <RCC_SetFlashLatencyFromMSIRange>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e34c      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe09 	bl	80023c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe2d 	bl	8002414 <LL_RCC_MSI_SetCalibTrimming>
 80027ba:	e013      	b.n	80027e4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fdfe 	bl	80023c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fe22 	bl	8002414 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fd23 	bl	8003220 <RCC_SetFlashLatencyFromMSIRange>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e32d      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027e4:	f000 fcdc 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4bb3      	ldr	r3, [pc, #716]	; (8002ab8 <HAL_RCC_OscConfig+0x388>)
 80027ec:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027ee:	4bb3      	ldr	r3, [pc, #716]	; (8002abc <HAL_RCC_OscConfig+0x38c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe ffb6 	bl	8001764 <HAL_InitTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d039      	beq.n	8002872 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e31e      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01e      	beq.n	8002848 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800280a:	f7ff fdab 	bl	8002364 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800280e:	f7fe fff7 	bl	8001800 <HAL_GetTick>
 8002812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002816:	f7fe fff3 	bl	8001800 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e30b      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002828:	f7ff fdba 	bl	80023a0 <LL_RCC_MSI_IsReady>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f1      	beq.n	8002816 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fdc3 	bl	80023c2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fde7 	bl	8002414 <LL_RCC_MSI_SetCalibTrimming>
 8002846:	e015      	b.n	8002874 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002848:	f7ff fd9b 	bl	8002382 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800284c:	f7fe ffd8 	bl	8001800 <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002854:	f7fe ffd4 	bl	8001800 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e2ec      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002866:	f7ff fd9b 	bl	80023a0 <LL_RCC_MSI_IsReady>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f1      	bne.n	8002854 <HAL_RCC_OscConfig+0x124>
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002872:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d04e      	beq.n	800291e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002880:	f7ff fdf1 	bl	8002466 <LL_RCC_GetSysClkSource>
 8002884:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002886:	f7ff feea 	bl	800265e <LL_RCC_PLL_GetMainSource>
 800288a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	2b08      	cmp	r3, #8
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x16e>
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d10d      	bne.n	80028b4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d10a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	f7ff fc01 	bl	80020a4 <LL_RCC_HSE_IsReady>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d039      	beq.n	800291c <HAL_RCC_OscConfig+0x1ec>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d135      	bne.n	800291c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e2c5      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0x194>
 80028be:	f7ff fbd3 	bl	8002068 <LL_RCC_HSE_Enable>
 80028c2:	e001      	b.n	80028c8 <HAL_RCC_OscConfig+0x198>
 80028c4:	f7ff fbdf 	bl	8002086 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d012      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe ff96 	bl	8001800 <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe ff92 	bl	8001800 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e2aa      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80028ea:	f7ff fbdb 	bl	80020a4 <LL_RCC_HSE_IsReady>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f1      	beq.n	80028d8 <HAL_RCC_OscConfig+0x1a8>
 80028f4:	e013      	b.n	800291e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe ff83 	bl	8001800 <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fe:	f7fe ff7f 	bl	8001800 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e297      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002910:	f7ff fbc8 	bl	80020a4 <LL_RCC_HSE_IsReady>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f1      	bne.n	80028fe <HAL_RCC_OscConfig+0x1ce>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d051      	beq.n	80029ce <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292a:	f7ff fd9c 	bl	8002466 <LL_RCC_GetSysClkSource>
 800292e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002930:	f7ff fe95 	bl	800265e <LL_RCC_PLL_GetMainSource>
 8002934:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d005      	beq.n	8002948 <HAL_RCC_OscConfig+0x218>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d113      	bne.n	800296a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d110      	bne.n	800296a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002948:	f7ff fbdc 	bl	8002104 <LL_RCC_HSI_IsReady>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x22e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e270      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fbe0 	bl	8002128 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002968:	e031      	b.n	80029ce <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d019      	beq.n	80029a6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002972:	f7ff fba9 	bl	80020c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe ff43 	bl	8001800 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe ff3f 	bl	8001800 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e257      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002990:	f7ff fbb8 	bl	8002104 <LL_RCC_HSI_IsReady>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f1      	beq.n	800297e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fbc2 	bl	8002128 <LL_RCC_HSI_SetCalibTrimming>
 80029a4:	e013      	b.n	80029ce <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a6:	f7ff fb9e 	bl	80020e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe ff29 	bl	8001800 <HAL_GetTick>
 80029ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b2:	f7fe ff25 	bl	8001800 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e23d      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029c4:	f7ff fb9e 	bl	8002104 <LL_RCC_HSI_IsReady>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f1      	bne.n	80029b2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a3 	beq.w	8002b2e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d076      	beq.n	8002ade <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d046      	beq.n	8002a8a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80029fc:	f7ff fc55 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002a06:	f7ff fc2e 	bl	8002266 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a0a:	f7fe fef9 	bl	8001800 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a12:	f7fe fef5 	bl	8001800 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e20d      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a24:	f7ff fc41 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f1      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002a2e:	f7ff fc4e 	bl	80022ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7fe fee5 	bl	8001800 <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a3a:	f7fe fee1 	bl	8001800 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1f9      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a4c:	f7ff fc61 	bl	8002312 <LL_RCC_LSI2_IsReady>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f1      	beq.n	8002a3a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fc6b 	bl	8002336 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002a60:	f7ff fc12 	bl	8002288 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fecc 	bl	8001800 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a6c:	f7fe fec8 	bl	8001800 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1e0      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a7e:	f7ff fc14 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f1      	bne.n	8002a6c <HAL_RCC_OscConfig+0x33c>
 8002a88:	e051      	b.n	8002b2e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002a8a:	f7ff fbec 	bl	8002266 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe feb7 	bl	8001800 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a96:	f7fe feb3 	bl	8001800 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1cb      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002aa8:	f7ff fbff 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f1      	beq.n	8002a96 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002ab2:	f7ff fc1d 	bl	80022f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ab6:	e00c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3a2>
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ac0:	f7fe fe9e 	bl	8001800 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1b6      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ad2:	f7ff fc1e 	bl	8002312 <LL_RCC_LSI2_IsReady>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f1      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x390>
 8002adc:	e027      	b.n	8002b2e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002ade:	f7ff fc07 	bl	80022f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fe8d 	bl	8001800 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002aea:	f7fe fe89 	bl	8001800 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1a1      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002afc:	f7ff fc09 	bl	8002312 <LL_RCC_LSI2_IsReady>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f1      	bne.n	8002aea <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002b06:	f7ff fbbf 	bl	8002288 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fe79 	bl	8001800 <HAL_GetTick>
 8002b0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b12:	f7fe fe75 	bl	8001800 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e18d      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b24:	f7ff fbc1 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f1      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d05b      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3a:	4bb5      	ldr	r3, [pc, #724]	; (8002e10 <HAL_RCC_OscConfig+0x6e0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d114      	bne.n	8002b70 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b46:	f7ff fa5f 	bl	8002008 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fe59 	bl	8001800 <HAL_GetTick>
 8002b4e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b52:	f7fe fe55 	bl	8001800 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e16d      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b64:	4baa      	ldr	r3, [pc, #680]	; (8002e10 <HAL_RCC_OscConfig+0x6e0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_OscConfig+0x44e>
 8002b78:	f7ff fb1f 	bl	80021ba <LL_RCC_LSE_Enable>
 8002b7c:	e00c      	b.n	8002b98 <HAL_RCC_OscConfig+0x468>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d104      	bne.n	8002b90 <HAL_RCC_OscConfig+0x460>
 8002b86:	f7ff fb3a 	bl	80021fe <LL_RCC_LSE_EnableBypass>
 8002b8a:	f7ff fb16 	bl	80021ba <LL_RCC_LSE_Enable>
 8002b8e:	e003      	b.n	8002b98 <HAL_RCC_OscConfig+0x468>
 8002b90:	f7ff fb24 	bl	80021dc <LL_RCC_LSE_Disable>
 8002b94:	f7ff fb44 	bl	8002220 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d014      	beq.n	8002bca <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fe2e 	bl	8001800 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fe2a 	bl	8001800 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e140      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002bbe:	f7ff fb40 	bl	8002242 <LL_RCC_LSE_IsReady>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ef      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x478>
 8002bc8:	e013      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fe fe19 	bl	8001800 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fe15 	bl	8001800 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e12b      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002be8:	f7ff fb2b 	bl	8002242 <LL_RCC_LSE_IsReady>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ef      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d02c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d014      	beq.n	8002c30 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c06:	f7ff faa4 	bl	8002152 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fdf9 	bl	8001800 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c12:	f7fe fdf5 	bl	8001800 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e10d      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c24:	f7ff fab7 	bl	8002196 <LL_RCC_HSI48_IsReady>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f1      	beq.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c30:	f7ff faa0 	bl	8002174 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fde4 	bl	8001800 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c3c:	f7fe fde0 	bl	8001800 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0f8      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c4e:	f7ff faa2 	bl	8002196 <LL_RCC_HSI48_IsReady>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f1      	bne.n	8002c3c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80ee 	beq.w	8002e3e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c62:	f7ff fc00 	bl	8002466 <LL_RCC_GetSysClkSource>
 8002c66:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	f040 80af 	bne.w	8002dd8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d123      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d114      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d05d      	beq.n	8002d8c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d058      	beq.n	8002d88 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0ab      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ce8:	f7ff fc73 	bl	80025d2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cec:	f7fe fd88 	bl	8001800 <HAL_GetTick>
 8002cf0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fd84 	bl	8001800 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e09c      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ef      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	; (8002e14 <HAL_RCC_OscConfig+0x6e4>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d26:	4311      	orrs	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d2c:	0212      	lsls	r2, r2, #8
 8002d2e:	4311      	orrs	r1, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d40:	430a      	orrs	r2, r1
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d4a:	f7ff fc33 	bl	80025b4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d5e:	f7fe fd4f 	bl	8001800 <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fd4b 	bl	8001800 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e063      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ef      	beq.n	8002d66 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d86:	e05a      	b.n	8002e3e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e059      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d151      	bne.n	8002e3e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d9a:	f7ff fc0b 	bl	80025b4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dae:	f7fe fd27 	bl	8001800 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe fd23 	bl	8001800 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e03b      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ef      	beq.n	8002db6 <HAL_RCC_OscConfig+0x686>
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d02d      	beq.n	8002e3a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	f7ff fbf8 	bl	80025d2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dec:	f023 0303 	bic.w	r3, r3, #3
 8002df0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe fcfb 	bl	8001800 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e0c:	e00d      	b.n	8002e2a <HAL_RCC_OscConfig+0x6fa>
 8002e0e:	bf00      	nop
 8002e10:	58000400 	.word	0x58000400
 8002e14:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fcf2 	bl	8001800 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ef      	bne.n	8002e18 <HAL_RCC_OscConfig+0x6e8>
 8002e38:	e001      	b.n	8002e3e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3734      	adds	r7, #52	; 0x34
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e12d      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b98      	ldr	r3, [pc, #608]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d91b      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b95      	ldr	r3, [pc, #596]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4993      	ldr	r1, [pc, #588]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7a:	f7fe fcc1 	bl	8001800 <HAL_GetTick>
 8002e7e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e82:	f7fe fcbd 	bl	8001800 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e111      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e94:	4b8a      	ldr	r3, [pc, #552]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d1ef      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fae3 	bl	800247e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fca2 	bl	8001800 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ec0:	f7fe fc9e 	bl	8001800 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0f2      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ed2:	f7ff fbd0 	bl	8002676 <LL_RCC_IsActiveFlag_HPRE>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f1      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fada 	bl	80024a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe fc85 	bl	8001800 <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002efa:	f7fe fc81 	bl	8001800 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0d5      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f0c:	f7ff fbc5 	bl	800269a <LL_RCC_IsActiveFlag_C2HPRE>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f1      	beq.n	8002efa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fad3 	bl	80024d2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fc68 	bl	8001800 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f34:	f7fe fc64 	bl	8001800 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0b8      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f46:	f7ff fbbb 	bl	80026c0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f1      	beq.n	8002f34 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d016      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff facd 	bl	8002500 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f66:	f7fe fc4b 	bl	8001800 <HAL_GetTick>
 8002f6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f6e:	f7fe fc47 	bl	8001800 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e09b      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f80:	f7ff fbb1 	bl	80026e6 <LL_RCC_IsActiveFlag_PPRE1>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f1      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d017      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fac3 	bl	8002528 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fa2:	f7fe fc2d 	bl	8001800 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002faa:	f7fe fc29 	bl	8001800 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e07d      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fbc:	f7ff fba5 	bl	800270a <LL_RCC_IsActiveFlag_PPRE2>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f1      	beq.n	8002faa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d043      	beq.n	800305a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002fda:	f7ff f863 	bl	80020a4 <LL_RCC_HSE_IsReady>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11e      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e067      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ff0:	f7ff fafe 	bl	80025f0 <LL_RCC_PLL_IsReady>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d113      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e05c      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003006:	f7ff f9cb 	bl	80023a0 <LL_RCC_MSI_IsReady>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d108      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e051      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003014:	f7ff f876 	bl	8002104 <LL_RCC_HSI_IsReady>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e04a      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fa09 	bl	800243e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fe fbe8 	bl	8001800 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7fe fbe4 	bl	8001800 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e036      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	f7ff fa0c 	bl	8002466 <LL_RCC_GetSysClkSource>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	429a      	cmp	r2, r3
 8003058:	d1ec      	bne.n	8003034 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d21b      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 0207 	bic.w	r2, r3, #7
 8003070:	4913      	ldr	r1, [pc, #76]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fe fbc2 	bl	8001800 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	e008      	b.n	8003092 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003080:	f7fe fbbe 	bl	8001800 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e012      	b.n	80030b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x278>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d1ef      	bne.n	8003080 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030a0:	f000 f87e 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCC_ClockConfig+0x27c>)
 80030a8:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80030aa:	f7fe fbb5 	bl	8001818 <HAL_GetTickPrio>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fb57 	bl	8001764 <HAL_InitTick>
 80030b6:	4603      	mov	r3, r0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58004000 	.word	0x58004000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ce:	f7ff f9ca 	bl	8002466 <LL_RCC_GetSysClkSource>
 80030d2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030da:	f7ff f986 	bl	80023ea <LL_RCC_MSI_GetRange>
 80030de:	4603      	mov	r3, r0
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e04a      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f6:	4b27      	ldr	r3, [pc, #156]	; (8003194 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	e044      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d10a      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003102:	f7fe ff9f 	bl	8002044 <LL_RCC_HSE_IsEnabledDiv2>
 8003106:	4603      	mov	r3, r0
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_RCC_GetSysClockFreq+0xd0>)
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e039      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e036      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003118:	f7ff faa1 	bl	800265e <LL_RCC_PLL_GetMainSource>
 800311c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d002      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x62>
 8003124:	2b03      	cmp	r3, #3
 8003126:	d003      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x68>
 8003128:	e00d      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800312a:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_RCC_GetSysClockFreq+0xcc>)
 800312c:	60bb      	str	r3, [r7, #8]
        break;
 800312e:	e015      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003130:	f7fe ff88 	bl	8002044 <LL_RCC_HSE_IsEnabledDiv2>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d102      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_RCC_GetSysClockFreq+0xd0>)
 800313c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800313e:	e00d      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003142:	60bb      	str	r3, [r7, #8]
        break;
 8003144:	e00a      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003146:	f7ff f950 	bl	80023ea <LL_RCC_MSI_GetRange>
 800314a:	4603      	mov	r3, r0
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	60bb      	str	r3, [r7, #8]
        break;
 800315a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800315c:	f7ff fa5a 	bl	8002614 <LL_RCC_PLL_GetN>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	fb03 f402 	mul.w	r4, r3, r2
 8003168:	f7ff fa6d 	bl	8002646 <LL_RCC_PLL_GetDivider>
 800316c:	4603      	mov	r3, r0
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	3301      	adds	r3, #1
 8003172:	fbb4 f4f3 	udiv	r4, r4, r3
 8003176:	f7ff fa5a 	bl	800262e <LL_RCC_PLL_GetR>
 800317a:	4603      	mov	r3, r0
 800317c:	0f5b      	lsrs	r3, r3, #29
 800317e:	3301      	adds	r3, #1
 8003180:	fbb4 f3f3 	udiv	r3, r4, r3
 8003184:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003186:	68fb      	ldr	r3, [r7, #12]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	08008a64 	.word	0x08008a64
 8003194:	00f42400 	.word	0x00f42400
 8003198:	003d0900 	.word	0x003d0900
 800319c:	007a1200 	.word	0x007a1200

080031a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b598      	push	{r3, r4, r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80031a4:	f7ff ff90 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 80031a8:	4604      	mov	r4, r0
 80031aa:	f7ff f9d1 	bl	8002550 <LL_RCC_GetAHBPrescaler>
 80031ae:	4603      	mov	r3, r0
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80031b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd98      	pop	{r3, r4, r7, pc}
 80031c4:	08008a04 	.word	0x08008a04

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b598      	push	{r3, r4, r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031cc:	f7ff ffe8 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031d0:	4604      	mov	r4, r0
 80031d2:	f7ff f9d7 	bl	8002584 <LL_RCC_GetAPB1Prescaler>
 80031d6:	4603      	mov	r3, r0
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd98      	pop	{r3, r4, r7, pc}
 80031f0:	08008a44 	.word	0x08008a44

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b598      	push	{r3, r4, r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80031f8:	f7ff ffd2 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031fc:	4604      	mov	r4, r0
 80031fe:	f7ff f9cd 	bl	800259c <LL_RCC_GetAPB2Prescaler>
 8003202:	4603      	mov	r3, r0
 8003204:	0adb      	lsrs	r3, r3, #11
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	4a04      	ldr	r2, [pc, #16]	; (800321c <HAL_RCC_GetPCLK2Freq+0x28>)
 800320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd98      	pop	{r3, r4, r7, pc}
 800321c:	08008a44 	.word	0x08008a44

08003220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2bb0      	cmp	r3, #176	; 0xb0
 800322c:	d903      	bls.n	8003236 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e007      	b.n	8003246 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003246:	f7ff f98f 	bl	8002568 <LL_RCC_GetAHB4Prescaler>
 800324a:	4603      	mov	r3, r0
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	0c9c      	lsrs	r4, r3, #18
 800326a:	f7fe fedd 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 800326e:	4603      	mov	r3, r0
 8003270:	4619      	mov	r1, r3
 8003272:	4620      	mov	r0, r4
 8003274:	f000 f80c 	bl	8003290 <RCC_SetFlashLatency>
 8003278:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}
 8003282:	bf00      	nop
 8003284:	08008a64 	.word	0x08008a64
 8003288:	08008a04 	.word	0x08008a04
 800328c:	431bde83 	.word	0x431bde83

08003290 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b093      	sub	sp, #76	; 0x4c
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <RCC_SetFlashLatency+0xf0>)
 800329c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80032a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80032a6:	4a37      	ldr	r2, [pc, #220]	; (8003384 <RCC_SetFlashLatency+0xf4>)
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80032b2:	4b35      	ldr	r3, [pc, #212]	; (8003388 <RCC_SetFlashLatency+0xf8>)
 80032b4:	f107 040c 	add.w	r4, r7, #12
 80032b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80032be:	2300      	movs	r3, #0
 80032c0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c8:	d11c      	bne.n	8003304 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
 80032ce:	e015      	b.n	80032fc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032d8:	4413      	add	r3, r2
 80032da:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d808      	bhi.n	80032f6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032ec:	4413      	add	r3, r2
 80032ee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80032f4:	e022      	b.n	800333c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f8:	3301      	adds	r3, #1
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d9e6      	bls.n	80032d0 <RCC_SetFlashLatency+0x40>
 8003302:	e01b      	b.n	800333c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003304:	2300      	movs	r3, #0
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003308:	e015      	b.n	8003336 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003312:	4413      	add	r3, r2
 8003314:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	429a      	cmp	r2, r3
 800331c:	d808      	bhi.n	8003330 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003326:	4413      	add	r3, r2
 8003328:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800332e:	e005      	b.n	800333c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003332:	3301      	adds	r3, #1
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003338:	2b02      	cmp	r3, #2
 800333a:	d9e6      	bls.n	800330a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <RCC_SetFlashLatency+0xfc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 0207 	bic.w	r2, r3, #7
 8003344:	4911      	ldr	r1, [pc, #68]	; (800338c <RCC_SetFlashLatency+0xfc>)
 8003346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800334c:	f7fe fa58 	bl	8001800 <HAL_GetTick>
 8003350:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003352:	e008      	b.n	8003366 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003354:	f7fe fa54 	bl	8001800 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e007      	b.n	8003376 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <RCC_SetFlashLatency+0xfc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003370:	429a      	cmp	r2, r3
 8003372:	d1ef      	bne.n	8003354 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	374c      	adds	r7, #76	; 0x4c
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	bf00      	nop
 8003380:	080089c4 	.word	0x080089c4
 8003384:	080089d4 	.word	0x080089d4
 8003388:	080089e0 	.word	0x080089e0
 800338c:	58004000 	.word	0x58004000

08003390 <LL_RCC_LSE_IsEnabled>:
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <LL_RCC_LSE_IsEnabled+0x18>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <LL_RCC_LSE_IsEnabled+0x1a>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_RCC_LSE_IsReady>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d101      	bne.n	80033cc <LL_RCC_LSE_IsReady+0x18>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <LL_RCC_LSE_IsReady+0x1a>
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_SetRFWKPClockSource>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_RCC_SetSMPSClockSource>:
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4313      	orrs	r3, r2
 800341e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_RCC_SetSMPSPrescaler>:
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800343e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4313      	orrs	r3, r2
 8003446:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_RCC_SetUSARTClockSource>:
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f023 0203 	bic.w	r2, r3, #3
 8003468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <LL_RCC_SetLPUARTClockSource>:
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_RCC_SetI2CClockSource>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80034d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_RCC_SetLPTIMClockSource>:
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <LL_RCC_SetSAIClockSource>:
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800352e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <LL_RCC_SetRNGClockSource>:
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800354e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800355a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_RCC_SetCLK48ClockSource>:
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LL_RCC_SetUSBClockSource>:
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffe3 	bl	8003572 <LL_RCC_SetCLK48ClockSource>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <LL_RCC_SetADCClockSource>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_SetRTCClockSource>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_RCC_GetRTCClockSource>:
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_RCC_ForceBackupDomainReset>:
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800363e:	bf00      	nop
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800364c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_RCC_PLLSAI1_Enable>:
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800367c:	6013      	str	r3, [r2, #0]
}
 800367e:	bf00      	nop
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_RCC_PLLSAI1_Disable>:
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_RCC_PLLSAI1_IsReady>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80036aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b8:	d101      	bne.n	80036be <LL_RCC_PLLSAI1_IsReady+0x18>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b088      	sub	sp, #32
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80036d2:	2300      	movs	r3, #0
 80036d4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80036d6:	2300      	movs	r3, #0
 80036d8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d033      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ee:	d00c      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f4:	d802      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d010      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036fa:	e017      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x62>
 80036fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003702:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003706:	d016      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003708:	e010      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800371a:	e00d      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f947 	bl	80039b4 <RCCEx_PLLSAI1_ConfigNP>
 8003726:	4603      	mov	r3, r0
 8003728:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	77fb      	strb	r3, [r7, #31]
        break;
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003738:	7ffb      	ldrb	r3, [r7, #31]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fee9 	bl	800351a <LL_RCC_SetSAIClockSource>
 8003748:	e001      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003756:	2b00      	cmp	r3, #0
 8003758:	d046      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800375a:	f7ff ff57 	bl	800360c <LL_RCC_GetRTCClockSource>
 800375e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d03c      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800376a:	f7fe fc4d 	bl	8002008 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff31 	bl	80035e0 <LL_RCC_SetRTCClockSource>
 800377e:	e02e      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800378a:	f7ff ff4c 	bl	8003626 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800378e:	f7ff ff5b 	bl	8003648 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80037a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80037aa:	f7ff fdf1 	bl	8003390 <LL_RCC_LSE_IsEnabled>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d114      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037b4:	f7fe f824 	bl	8001800 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80037ba:	e00b      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fe f820 	bl	8001800 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d902      	bls.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	77fb      	strb	r3, [r7, #31]
              break;
 80037d2:	e004      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80037d4:	f7ff fdee 	bl	80033b4 <LL_RCC_LSE_IsReady>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d1ee      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80037de:	7ffb      	ldrb	r3, [r7, #31]
 80037e0:	77bb      	strb	r3, [r7, #30]
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7ffb      	ldrb	r3, [r7, #31]
 80037e6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fe2b 	bl	8003454 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fe36 	bl	8003480 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fe5e 	bl	80034e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fe53 	bl	80034e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fe2b 	bl	80034ac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fe20 	bl	80034ac <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fe8e 	bl	800359e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388a:	d107      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a4:	d10b      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f8dd 	bl	8003a6a <RCCEx_PLLSAI1_ConfigNQ>
 80038b0:	4603      	mov	r3, r0
 80038b2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80038b4:	7ffb      	ldrb	r3, [r7, #31]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02b      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d008      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038dc:	d003      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fe2b 	bl	8003546 <LL_RCC_SetRNGClockSource>
 80038f0:	e00a      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7ff fe22 	bl	8003546 <LL_RCC_SetRNGClockSource>
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fe35 	bl	8003572 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003910:	d107      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003920:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	2b00      	cmp	r3, #0
 800392c:	d022      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fe3e 	bl	80035b4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003940:	d107      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395a:	d10b      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f8dd 	bl	8003b20 <RCCEx_PLLSAI1_ConfigNR>
 8003966:	4603      	mov	r3, r0
 8003968:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003970:	7ffb      	ldrb	r3, [r7, #31]
 8003972:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fd27 	bl	80033d8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fd46 	bl	800342c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd2d 	bl	8003404 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80039aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039c0:	f7ff fe62 	bl	8003688 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039c4:	f7fd ff1c 	bl	8001800 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039cc:	f7fd ff18 	bl	8001800 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
      break;
 80039de:	e004      	b.n	80039ea <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039e0:	f7ff fe61 	bl	80036a6 <LL_RCC_PLLSAI1_IsReady>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d137      	bne.n	8003a60 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a1e:	f7ff fe24 	bl	800366a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a22:	f7fd feed 	bl	8001800 <HAL_GetTick>
 8003a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a28:	e009      	b.n	8003a3e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2a:	f7fd fee9 	bl	8001800 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d902      	bls.n	8003a3e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3c:	e004      	b.n	8003a48 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a3e:	f7ff fe32 	bl	80036a6 <LL_RCC_PLLSAI1_IsReady>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d1f0      	bne.n	8003a2a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a76:	f7ff fe07 	bl	8003688 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a7a:	f7fd fec1 	bl	8001800 <HAL_GetTick>
 8003a7e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a80:	e009      	b.n	8003a96 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a82:	f7fd febd 	bl	8001800 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d902      	bls.n	8003a96 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	73fb      	strb	r3, [r7, #15]
      break;
 8003a94:	e004      	b.n	8003aa0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a96:	f7ff fe06 	bl	80036a6 <LL_RCC_PLLSAI1_IsReady>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d137      	bne.n	8003b16 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ad4:	f7ff fdc9 	bl	800366a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fe92 	bl	8001800 <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ade:	e009      	b.n	8003af4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae0:	f7fd fe8e 	bl	8001800 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d902      	bls.n	8003af4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	73fb      	strb	r3, [r7, #15]
        break;
 8003af2:	e004      	b.n	8003afe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003af4:	f7ff fdd7 	bl	80036a6 <LL_RCC_PLLSAI1_IsReady>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d1f0      	bne.n	8003ae0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b2c:	f7ff fdac 	bl	8003688 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b30:	f7fd fe66 	bl	8001800 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b36:	e009      	b.n	8003b4c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b38:	f7fd fe62 	bl	8001800 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d902      	bls.n	8003b4c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4a:	e004      	b.n	8003b56 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b4c:	f7ff fdab 	bl	80036a6 <LL_RCC_PLLSAI1_IsReady>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d137      	bne.n	8003bcc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b86:	4313      	orrs	r3, r2
 8003b88:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b8a:	f7ff fd6e 	bl	800366a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8e:	f7fd fe37 	bl	8001800 <HAL_GetTick>
 8003b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b94:	e009      	b.n	8003baa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b96:	f7fd fe33 	bl	8001800 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d902      	bls.n	8003baa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba8:	e004      	b.n	8003bb4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003baa:	f7ff fd7c 	bl	80036a6 <LL_RCC_PLLSAI1_IsReady>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d1f0      	bne.n	8003b96 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d108      	bne.n	8003bcc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e049      	b.n	8003c7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd fc87 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f000 f9cd 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d001      	beq.n	8003c9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e02e      	b.n	8003cfa <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <HAL_TIM_Base_Start+0x84>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIM_Base_Start+0x34>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d115      	bne.n	8003ce4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_TIM_Base_Start+0x88>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d015      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x72>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d011      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e000      	b.n	8003cf8 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	00010007 	.word	0x00010007

08003d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d122      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d11b      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0202 	mvn.w	r2, #2
 8003d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f90f 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f901 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f912 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0204 	mvn.w	r2, #4
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8e5 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8d7 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8e8 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0208 	mvn.w	r2, #8
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2204      	movs	r2, #4
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8bb 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8ad 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f8be 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d122      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d11b      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0210 	mvn.w	r2, #16
 8003e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f891 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003e54:	e005      	b.n	8003e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f883 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f894 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10e      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d107      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0201 	mvn.w	r2, #1
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f85d 	bl	8003f4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b80      	cmp	r3, #128	; 0x80
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d107      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8e8 	bl	8004090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ece:	d10e      	bne.n	8003eee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b80      	cmp	r3, #128	; 0x80
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8db 	bl	80040a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d10e      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f842 	bl	8003f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d10e      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0220 	mvn.w	r2, #32
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f89b 	bl	800407c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <TIM_Base_SetConfig+0xbc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0x20>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d108      	bne.n	8003fe6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <TIM_Base_SetConfig+0xbc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_Base_SetConfig+0x52>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d007      	beq.n	8004006 <TIM_Base_SetConfig+0x52>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <TIM_Base_SetConfig+0xc0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_Base_SetConfig+0x52>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <TIM_Base_SetConfig+0xc4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d108      	bne.n	8004018 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <TIM_Base_SetConfig+0xbc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <TIM_Base_SetConfig+0xa0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a0b      	ldr	r2, [pc, #44]	; (8004074 <TIM_Base_SetConfig+0xc0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_Base_SetConfig+0xa0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <TIM_Base_SetConfig+0xc4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d103      	bne.n	800405c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	615a      	str	r2, [r3, #20]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_GetUSARTClockSource>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4013      	ands	r3, r2
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_GetLPUARTClockSource>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4013      	ands	r3, r2
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e042      	b.n	8004190 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fd fa91 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2224      	movs	r2, #36	; 0x24
 8004126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fa56 	bl	80045ec <UART_SetConfig>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e022      	b.n	8004190 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fc58 	bl	8004a08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fcdf 	bl	8004b4c <UART_CheckIdleState>
 800418e:	4603      	mov	r3, r0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	f040 8083 	bne.w	80042ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Transmit+0x28>
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e07b      	b.n	80042bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Transmit+0x3a>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e074      	b.n	80042bc <HAL_UART_Transmit+0x124>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2221      	movs	r2, #33	; 0x21
 80041e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041ea:	f7fd fb09 	bl	8001800 <HAL_GetTick>
 80041ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004208:	d108      	bne.n	800421c <HAL_UART_Transmit+0x84>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d104      	bne.n	800421c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	e003      	b.n	8004224 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004220:	2300      	movs	r3, #0
 8004222:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800422c:	e02c      	b.n	8004288 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2200      	movs	r2, #0
 8004236:	2180      	movs	r1, #128	; 0x80
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fccf 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e039      	b.n	80042bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	3302      	adds	r3, #2
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e007      	b.n	8004276 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3301      	adds	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1cc      	bne.n	800422e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	2140      	movs	r1, #64	; 0x40
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fc9c 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e006      	b.n	80042bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e000      	b.n	80042bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d118      	bne.n	8004326 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d013      	beq.n	8004326 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8145 	beq.w	80045a6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
      }
      return;
 8004324:	e13f      	b.n	80045a6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80e8 	beq.w	80044fe <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4ba1      	ldr	r3, [pc, #644]	; (80045b8 <HAL_UART_IRQHandler+0x2f4>)
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4ba0      	ldr	r3, [pc, #640]	; (80045bc <HAL_UART_IRQHandler+0x2f8>)
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80dd 	beq.w	80044fe <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <HAL_UART_IRQHandler+0xac>
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d010      	beq.n	800439c <HAL_UART_IRQHandler+0xd8>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2202      	movs	r2, #2
 800438a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d010      	beq.n	80043c8 <HAL_UART_IRQHandler+0x104>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2204      	movs	r2, #4
 80043b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d015      	beq.n	80043fe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_UART_IRQHandler+0x2f4>)
 80043e0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2208      	movs	r2, #8
 80043ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f043 0208 	orr.w	r2, r3, #8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004404:	2b00      	cmp	r3, #0
 8004406:	d011      	beq.n	800442c <HAL_UART_IRQHandler+0x168>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800441a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80b9 	beq.w	80045aa <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d011      	beq.n	8004466 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d004      	beq.n	8004486 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004482:	2b00      	cmp	r3, #0
 8004484:	d031      	beq.n	80044ea <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fc28 	bl	8004cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d123      	bne.n	80044e2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d013      	beq.n	80044da <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b6:	4a42      	ldr	r2, [pc, #264]	; (80045c0 <HAL_UART_IRQHandler+0x2fc>)
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fd fbd2 	bl	8001c68 <HAL_DMA_Abort_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d017      	beq.n	80044fa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	e00f      	b.n	80044fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f87c 	bl	80045d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e0:	e00b      	b.n	80044fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f878 	bl	80045d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	e007      	b.n	80044fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f874 	bl	80045d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80044f8:	e057      	b.n	80045aa <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fa:	bf00      	nop
    return;
 80044fc:	e055      	b.n	80045aa <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_UART_IRQHandler+0x260>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800451a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fc30 	bl	8004d82 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004522:	e045      	b.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d012      	beq.n	8004554 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	2b00      	cmp	r3, #0
 8004548:	d031      	beq.n	80045ae <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
    }
    return;
 8004552:	e02c      	b.n	80045ae <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_UART_IRQHandler+0x2ac>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fbf0 	bl	8004d4e <UART_EndTransmit_IT>
    return;
 800456e:	e01f      	b.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_UART_IRQHandler+0x2c8>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fc10 	bl	8004daa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800458a:	e011      	b.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	da09      	bge.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fbfa 	bl	8004d96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045a2:	bf00      	nop
 80045a4:	e004      	b.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
      return;
 80045a6:	bf00      	nop
 80045a8:	e002      	b.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80045ae:	bf00      	nop
  }
}
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	10000001 	.word	0x10000001
 80045bc:	04000120 	.word	0x04000120
 80045c0:	08004d23 	.word	0x08004d23

080045c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80045f0:	b088      	sub	sp, #32
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4313      	orrs	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	4313      	orrs	r3, r2
 800461a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4ba4      	ldr	r3, [pc, #656]	; (80048b4 <UART_SetConfig+0x2c8>)
 8004624:	4013      	ands	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	69f9      	ldr	r1, [r7, #28]
 800462c:	430b      	orrs	r3, r1
 800462e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a99      	ldr	r2, [pc, #612]	; (80048b8 <UART_SetConfig+0x2cc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	4313      	orrs	r3, r2
 800465e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800466a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	69f9      	ldr	r1, [r7, #28]
 8004674:	430b      	orrs	r3, r1
 8004676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f023 010f 	bic.w	r1, r3, #15
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a8a      	ldr	r2, [pc, #552]	; (80048bc <UART_SetConfig+0x2d0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d121      	bne.n	80046dc <UART_SetConfig+0xf0>
 8004698:	2003      	movs	r0, #3
 800469a:	f7ff fd0d 	bl	80040b8 <LL_RCC_GetUSARTClockSource>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d817      	bhi.n	80046d4 <UART_SetConfig+0xe8>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0xc0>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046c9 	.word	0x080046c9
 80046b4:	080046c3 	.word	0x080046c3
 80046b8:	080046cf 	.word	0x080046cf
 80046bc:	2301      	movs	r3, #1
 80046be:	76fb      	strb	r3, [r7, #27]
 80046c0:	e038      	b.n	8004734 <UART_SetConfig+0x148>
 80046c2:	2302      	movs	r3, #2
 80046c4:	76fb      	strb	r3, [r7, #27]
 80046c6:	e035      	b.n	8004734 <UART_SetConfig+0x148>
 80046c8:	2304      	movs	r3, #4
 80046ca:	76fb      	strb	r3, [r7, #27]
 80046cc:	e032      	b.n	8004734 <UART_SetConfig+0x148>
 80046ce:	2308      	movs	r3, #8
 80046d0:	76fb      	strb	r3, [r7, #27]
 80046d2:	e02f      	b.n	8004734 <UART_SetConfig+0x148>
 80046d4:	2310      	movs	r3, #16
 80046d6:	76fb      	strb	r3, [r7, #27]
 80046d8:	bf00      	nop
 80046da:	e02b      	b.n	8004734 <UART_SetConfig+0x148>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <UART_SetConfig+0x2cc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d124      	bne.n	8004730 <UART_SetConfig+0x144>
 80046e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80046ea:	f7ff fcf5 	bl	80040d8 <LL_RCC_GetLPUARTClockSource>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f4:	d012      	beq.n	800471c <UART_SetConfig+0x130>
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d802      	bhi.n	8004702 <UART_SetConfig+0x116>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <UART_SetConfig+0x124>
 8004700:	e012      	b.n	8004728 <UART_SetConfig+0x13c>
 8004702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004706:	d006      	beq.n	8004716 <UART_SetConfig+0x12a>
 8004708:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800470c:	d009      	beq.n	8004722 <UART_SetConfig+0x136>
 800470e:	e00b      	b.n	8004728 <UART_SetConfig+0x13c>
 8004710:	2300      	movs	r3, #0
 8004712:	76fb      	strb	r3, [r7, #27]
 8004714:	e00e      	b.n	8004734 <UART_SetConfig+0x148>
 8004716:	2302      	movs	r3, #2
 8004718:	76fb      	strb	r3, [r7, #27]
 800471a:	e00b      	b.n	8004734 <UART_SetConfig+0x148>
 800471c:	2304      	movs	r3, #4
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e008      	b.n	8004734 <UART_SetConfig+0x148>
 8004722:	2308      	movs	r3, #8
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e005      	b.n	8004734 <UART_SetConfig+0x148>
 8004728:	2310      	movs	r3, #16
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	bf00      	nop
 800472e:	e001      	b.n	8004734 <UART_SetConfig+0x148>
 8004730:	2310      	movs	r3, #16
 8004732:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a5f      	ldr	r2, [pc, #380]	; (80048b8 <UART_SetConfig+0x2cc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	f040 808e 	bne.w	800485c <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004740:	7efb      	ldrb	r3, [r7, #27]
 8004742:	2b08      	cmp	r3, #8
 8004744:	d823      	bhi.n	800478e <UART_SetConfig+0x1a2>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x160>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004771 	.word	0x08004771
 8004750:	0800478f 	.word	0x0800478f
 8004754:	08004779 	.word	0x08004779
 8004758:	0800478f 	.word	0x0800478f
 800475c:	0800477f 	.word	0x0800477f
 8004760:	0800478f 	.word	0x0800478f
 8004764:	0800478f 	.word	0x0800478f
 8004768:	0800478f 	.word	0x0800478f
 800476c:	08004787 	.word	0x08004787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe fd2a 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004774:	6178      	str	r0, [r7, #20]
        break;
 8004776:	e00f      	b.n	8004798 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004778:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <UART_SetConfig+0x2d4>)
 800477a:	617b      	str	r3, [r7, #20]
        break;
 800477c:	e00c      	b.n	8004798 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477e:	f7fe fca3 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8004782:	6178      	str	r0, [r7, #20]
        break;
 8004784:	e008      	b.n	8004798 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478a:	617b      	str	r3, [r7, #20]
        break;
 800478c:	e004      	b.n	8004798 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	76bb      	strb	r3, [r7, #26]
        break;
 8004796:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 811c 	beq.w	80049d8 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	4a47      	ldr	r2, [pc, #284]	; (80048c4 <UART_SetConfig+0x2d8>)
 80047a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047aa:	461a      	mov	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d305      	bcc.n	80047d0 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d902      	bls.n	80047d6 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	76bb      	strb	r3, [r7, #26]
 80047d4:	e100      	b.n	80049d8 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4618      	mov	r0, r3
 80047da:	f04f 0100 	mov.w	r1, #0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	4a38      	ldr	r2, [pc, #224]	; (80048c4 <UART_SetConfig+0x2d8>)
 80047e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f04f 0400 	mov.w	r4, #0
 80047ee:	461a      	mov	r2, r3
 80047f0:	4623      	mov	r3, r4
 80047f2:	f7fc f9b1 	bl	8000b58 <__aeabi_uldivmod>
 80047f6:	4603      	mov	r3, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	4619      	mov	r1, r3
 80047fc:	4622      	mov	r2, r4
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	0214      	lsls	r4, r2, #8
 8004808:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800480c:	020b      	lsls	r3, r1, #8
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6852      	ldr	r2, [r2, #4]
 8004812:	0852      	lsrs	r2, r2, #1
 8004814:	4611      	mov	r1, r2
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	eb13 0b01 	adds.w	fp, r3, r1
 800481e:	eb44 0c02 	adc.w	ip, r4, r2
 8004822:	4658      	mov	r0, fp
 8004824:	4661      	mov	r1, ip
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f04f 0400 	mov.w	r4, #0
 800482e:	461a      	mov	r2, r3
 8004830:	4623      	mov	r3, r4
 8004832:	f7fc f991 	bl	8000b58 <__aeabi_uldivmod>
 8004836:	4603      	mov	r3, r0
 8004838:	460c      	mov	r4, r1
 800483a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004842:	d308      	bcc.n	8004856 <UART_SetConfig+0x26a>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484a:	d204      	bcs.n	8004856 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e0c0      	b.n	80049d8 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	76bb      	strb	r3, [r7, #26]
 800485a:	e0bd      	b.n	80049d8 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	d169      	bne.n	800493a <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004866:	7efb      	ldrb	r3, [r7, #27]
 8004868:	3b01      	subs	r3, #1
 800486a:	2b07      	cmp	r3, #7
 800486c:	d82c      	bhi.n	80048c8 <UART_SetConfig+0x2dc>
 800486e:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0x288>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	08004895 	.word	0x08004895
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048c9 	.word	0x080048c9
 8004880:	080048a3 	.word	0x080048a3
 8004884:	080048c9 	.word	0x080048c9
 8004888:	080048c9 	.word	0x080048c9
 800488c:	080048c9 	.word	0x080048c9
 8004890:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fe fcae 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8004898:	6178      	str	r0, [r7, #20]
        break;
 800489a:	e01a      	b.n	80048d2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <UART_SetConfig+0x2d4>)
 800489e:	617b      	str	r3, [r7, #20]
        break;
 80048a0:	e017      	b.n	80048d2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7fe fc11 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 80048a6:	6178      	str	r0, [r7, #20]
        break;
 80048a8:	e013      	b.n	80048d2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	617b      	str	r3, [r7, #20]
        break;
 80048b0:	e00f      	b.n	80048d2 <UART_SetConfig+0x2e6>
 80048b2:	bf00      	nop
 80048b4:	cfff69f3 	.word	0xcfff69f3
 80048b8:	40008000 	.word	0x40008000
 80048bc:	40013800 	.word	0x40013800
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	08008aa4 	.word	0x08008aa4
      default:
        pclk = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	76bb      	strb	r3, [r7, #26]
        break;
 80048d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d07f      	beq.n	80049d8 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	4a48      	ldr	r2, [pc, #288]	; (8004a00 <UART_SetConfig+0x414>)
 80048de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e2:	461a      	mov	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ea:	005a      	lsls	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d916      	bls.n	8004934 <UART_SetConfig+0x348>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d212      	bcs.n	8004934 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f023 030f 	bic.w	r3, r3, #15
 8004916:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	b29a      	uxth	r2, r3
 8004924:	89fb      	ldrh	r3, [r7, #14]
 8004926:	4313      	orrs	r3, r2
 8004928:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	89fa      	ldrh	r2, [r7, #14]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e051      	b.n	80049d8 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	76bb      	strb	r3, [r7, #26]
 8004938:	e04e      	b.n	80049d8 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800493a:	7efb      	ldrb	r3, [r7, #27]
 800493c:	3b01      	subs	r3, #1
 800493e:	2b07      	cmp	r3, #7
 8004940:	d821      	bhi.n	8004986 <UART_SetConfig+0x39a>
 8004942:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <UART_SetConfig+0x35c>)
 8004944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004948:	08004969 	.word	0x08004969
 800494c:	08004971 	.word	0x08004971
 8004950:	08004987 	.word	0x08004987
 8004954:	08004977 	.word	0x08004977
 8004958:	08004987 	.word	0x08004987
 800495c:	08004987 	.word	0x08004987
 8004960:	08004987 	.word	0x08004987
 8004964:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7fe fc44 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 800496c:	6178      	str	r0, [r7, #20]
        break;
 800496e:	e00f      	b.n	8004990 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <UART_SetConfig+0x418>)
 8004972:	617b      	str	r3, [r7, #20]
        break;
 8004974:	e00c      	b.n	8004990 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fe fba7 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 800497a:	6178      	str	r0, [r7, #20]
        break;
 800497c:	e008      	b.n	8004990 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004982:	617b      	str	r3, [r7, #20]
        break;
 8004984:	e004      	b.n	8004990 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	76bb      	strb	r3, [r7, #26]
        break;
 800498e:	bf00      	nop
    }

    if (pclk != 0U)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <UART_SetConfig+0x414>)
 800499c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a0:	461a      	mov	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	441a      	add	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b0f      	cmp	r3, #15
 80049c0:	d908      	bls.n	80049d4 <UART_SetConfig+0x3e8>
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d204      	bcs.n	80049d4 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	e001      	b.n	80049d8 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80049f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004a00:	08008aa4 	.word	0x08008aa4
 8004a04:	00f42400 	.word	0x00f42400

08004a08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01a      	beq.n	8004b1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b06:	d10a      	bne.n	8004b1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]
  }
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b5c:	f7fc fe50 	bl	8001800 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d10e      	bne.n	8004b8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f82c 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e022      	b.n	8004bd4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d10e      	bne.n	8004bba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f816 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e00c      	b.n	8004bd4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bec:	e062      	b.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf4:	d05e      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf6:	f7fc fe03 	bl	8001800 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d11d      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c1a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e045      	b.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d02e      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c64:	d126      	bne.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c6e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c7e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e00f      	b.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d08d      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cf2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fc49 	bl	80045d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d64:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fc25 	bl	80045c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e027      	b.n	8004e24 <HAL_UARTEx_DisableFifoMode+0x66>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	; 0x24
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e02d      	b.n	8004ea4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	; 0x24
 8004e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f84f 	bl	8004f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e02d      	b.n	8004f20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f811 	bl	8004f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	; 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004f30:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <UARTEx_SetNbDataToProcess+0xc8>)
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f3a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004f3e:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <UARTEx_SetNbDataToProcess+0xcc>)
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f48:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d108      	bne.n	8004f66 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f64:	e03d      	b.n	8004fe2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f66:	2308      	movs	r3, #8
 8004f68:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	0e5b      	lsrs	r3, r3, #25
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	0f5b      	lsrs	r3, r3, #29
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004f8e:	7fbb      	ldrb	r3, [r7, #30]
 8004f90:	7f3a      	ldrb	r2, [r7, #28]
 8004f92:	f107 0120 	add.w	r1, r7, #32
 8004f96:	440a      	add	r2, r1
 8004f98:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	7f3a      	ldrb	r2, [r7, #28]
 8004fa2:	f107 0120 	add.w	r1, r7, #32
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004fb8:	7ffb      	ldrb	r3, [r7, #31]
 8004fba:	7f7a      	ldrb	r2, [r7, #29]
 8004fbc:	f107 0120 	add.w	r1, r7, #32
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	7f7a      	ldrb	r2, [r7, #29]
 8004fcc:	f107 0120 	add.w	r1, r7, #32
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fe2:	bf00      	nop
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	080089f0 	.word	0x080089f0
 8004ff4:	080089f8 	.word	0x080089f8

08004ff8 <house_price_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool house_price_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_HOUSE_PRICE_MODEL_ACTIVATIONS_ALIGNMENT));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	3303      	adds	r3, #3
 8005008:	f023 0303 	bic.w	r3, r3, #3
 800500c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    dense_73_input_output_array.data = AI_PTR(NULL);
 800500e:	4b55      	ldr	r3, [pc, #340]	; (8005164 <house_price_model_configure_activations+0x16c>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
    dense_73_input_output_array.data_start = AI_PTR(NULL);
 8005014:	4b53      	ldr	r3, [pc, #332]	; (8005164 <house_price_model_configure_activations+0x16c>)
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 76);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	334c      	adds	r3, #76	; 0x4c
 800501e:	4a52      	ldr	r2, [pc, #328]	; (8005168 <house_price_model_configure_activations+0x170>)
 8005020:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 76);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	334c      	adds	r3, #76	; 0x4c
 8005026:	4a50      	ldr	r2, [pc, #320]	; (8005168 <house_price_model_configure_activations+0x170>)
 8005028:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 76);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	334c      	adds	r3, #76	; 0x4c
 800502e:	4a4f      	ldr	r2, [pc, #316]	; (800516c <house_price_model_configure_activations+0x174>)
 8005030:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 76);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	334c      	adds	r3, #76	; 0x4c
 8005036:	4a4d      	ldr	r2, [pc, #308]	; (800516c <house_price_model_configure_activations+0x174>)
 8005038:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 152);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3398      	adds	r3, #152	; 0x98
 800503e:	4a4c      	ldr	r2, [pc, #304]	; (8005170 <house_price_model_configure_activations+0x178>)
 8005040:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 152);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3398      	adds	r3, #152	; 0x98
 8005046:	4a4a      	ldr	r2, [pc, #296]	; (8005170 <house_price_model_configure_activations+0x178>)
 8005048:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 76);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	334c      	adds	r3, #76	; 0x4c
 800504e:	4a49      	ldr	r2, [pc, #292]	; (8005174 <house_price_model_configure_activations+0x17c>)
 8005050:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 76);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	334c      	adds	r3, #76	; 0x4c
 8005056:	4a47      	ldr	r2, [pc, #284]	; (8005174 <house_price_model_configure_activations+0x17c>)
 8005058:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 152);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3398      	adds	r3, #152	; 0x98
 800505e:	4a46      	ldr	r2, [pc, #280]	; (8005178 <house_price_model_configure_activations+0x180>)
 8005060:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 152);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3398      	adds	r3, #152	; 0x98
 8005066:	4a44      	ldr	r2, [pc, #272]	; (8005178 <house_price_model_configure_activations+0x180>)
 8005068:	60d3      	str	r3, [r2, #12]
    nl_2_output_array.data = AI_PTR(activations + 152);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3398      	adds	r3, #152	; 0x98
 800506e:	4a43      	ldr	r2, [pc, #268]	; (800517c <house_price_model_configure_activations+0x184>)
 8005070:	6093      	str	r3, [r2, #8]
    nl_2_output_array.data_start = AI_PTR(activations + 152);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3398      	adds	r3, #152	; 0x98
 8005076:	4a41      	ldr	r2, [pc, #260]	; (800517c <house_price_model_configure_activations+0x184>)
 8005078:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 0);
 800507a:	4a41      	ldr	r2, [pc, #260]	; (8005180 <house_price_model_configure_activations+0x188>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 0);
 8005080:	4a3f      	ldr	r2, [pc, #252]	; (8005180 <house_price_model_configure_activations+0x188>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(activations + 152);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3398      	adds	r3, #152	; 0x98
 800508a:	4a3e      	ldr	r2, [pc, #248]	; (8005184 <house_price_model_configure_activations+0x18c>)
 800508c:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(activations + 152);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3398      	adds	r3, #152	; 0x98
 8005092:	4a3c      	ldr	r2, [pc, #240]	; (8005184 <house_price_model_configure_activations+0x18c>)
 8005094:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations + 0);
 8005096:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <house_price_model_configure_activations+0x190>)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations + 0);
 800509c:	4a3a      	ldr	r2, [pc, #232]	; (8005188 <house_price_model_configure_activations+0x190>)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	60d3      	str	r3, [r2, #12]
    nl_4_output_array.data = AI_PTR(activations + 152);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3398      	adds	r3, #152	; 0x98
 80050a6:	4a39      	ldr	r2, [pc, #228]	; (800518c <house_price_model_configure_activations+0x194>)
 80050a8:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(activations + 152);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3398      	adds	r3, #152	; 0x98
 80050ae:	4a37      	ldr	r2, [pc, #220]	; (800518c <house_price_model_configure_activations+0x194>)
 80050b0:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations + 0);
 80050b2:	4a37      	ldr	r2, [pc, #220]	; (8005190 <house_price_model_configure_activations+0x198>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations + 0);
 80050b8:	4a35      	ldr	r2, [pc, #212]	; (8005190 <house_price_model_configure_activations+0x198>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	60d3      	str	r3, [r2, #12]
    nl_5_output_array.data = AI_PTR(activations + 76);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	334c      	adds	r3, #76	; 0x4c
 80050c2:	4a34      	ldr	r2, [pc, #208]	; (8005194 <house_price_model_configure_activations+0x19c>)
 80050c4:	6093      	str	r3, [r2, #8]
    nl_5_output_array.data_start = AI_PTR(activations + 76);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	334c      	adds	r3, #76	; 0x4c
 80050ca:	4a32      	ldr	r2, [pc, #200]	; (8005194 <house_price_model_configure_activations+0x19c>)
 80050cc:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations + 0);
 80050ce:	4a32      	ldr	r2, [pc, #200]	; (8005198 <house_price_model_configure_activations+0x1a0>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations + 0);
 80050d4:	4a30      	ldr	r2, [pc, #192]	; (8005198 <house_price_model_configure_activations+0x1a0>)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	60d3      	str	r3, [r2, #12]
    nl_6_output_array.data = AI_PTR(activations + 76);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	334c      	adds	r3, #76	; 0x4c
 80050de:	4a2f      	ldr	r2, [pc, #188]	; (800519c <house_price_model_configure_activations+0x1a4>)
 80050e0:	6093      	str	r3, [r2, #8]
    nl_6_output_array.data_start = AI_PTR(activations + 76);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	334c      	adds	r3, #76	; 0x4c
 80050e6:	4a2d      	ldr	r2, [pc, #180]	; (800519c <house_price_model_configure_activations+0x1a4>)
 80050e8:	60d3      	str	r3, [r2, #12]
    dense_7_output_array.data = AI_PTR(activations + 0);
 80050ea:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <house_price_model_configure_activations+0x1a8>)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(activations + 0);
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <house_price_model_configure_activations+0x1a8>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(activations + 76);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	334c      	adds	r3, #76	; 0x4c
 80050fa:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <house_price_model_configure_activations+0x1ac>)
 80050fc:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(activations + 76);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	334c      	adds	r3, #76	; 0x4c
 8005102:	4a28      	ldr	r2, [pc, #160]	; (80051a4 <house_price_model_configure_activations+0x1ac>)
 8005104:	60d3      	str	r3, [r2, #12]
    dense_8_output_array.data = AI_PTR(activations + 0);
 8005106:	4a28      	ldr	r2, [pc, #160]	; (80051a8 <house_price_model_configure_activations+0x1b0>)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6093      	str	r3, [r2, #8]
    dense_8_output_array.data_start = AI_PTR(activations + 0);
 800510c:	4a26      	ldr	r2, [pc, #152]	; (80051a8 <house_price_model_configure_activations+0x1b0>)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	60d3      	str	r3, [r2, #12]
    nl_8_output_array.data = AI_PTR(activations + 76);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	334c      	adds	r3, #76	; 0x4c
 8005116:	4a25      	ldr	r2, [pc, #148]	; (80051ac <house_price_model_configure_activations+0x1b4>)
 8005118:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(activations + 76);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	334c      	adds	r3, #76	; 0x4c
 800511e:	4a23      	ldr	r2, [pc, #140]	; (80051ac <house_price_model_configure_activations+0x1b4>)
 8005120:	60d3      	str	r3, [r2, #12]
    dense_9_output_array.data = AI_PTR(activations + 0);
 8005122:	4a23      	ldr	r2, [pc, #140]	; (80051b0 <house_price_model_configure_activations+0x1b8>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(activations + 0);
 8005128:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <house_price_model_configure_activations+0x1b8>)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	60d3      	str	r3, [r2, #12]
    nl_9_output_array.data = AI_PTR(activations + 32);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3320      	adds	r3, #32
 8005132:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <house_price_model_configure_activations+0x1bc>)
 8005134:	6093      	str	r3, [r2, #8]
    nl_9_output_array.data_start = AI_PTR(activations + 32);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3320      	adds	r3, #32
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <house_price_model_configure_activations+0x1bc>)
 800513c:	60d3      	str	r3, [r2, #12]
    dense_10_output_array.data = AI_PTR(activations + 0);
 800513e:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <house_price_model_configure_activations+0x1c0>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(activations + 0);
 8005144:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <house_price_model_configure_activations+0x1c0>)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	60d3      	str	r3, [r2, #12]
    nl_10_output_array.data = AI_PTR(NULL);
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <house_price_model_configure_activations+0x1c4>)
 800514c:	2200      	movs	r2, #0
 800514e:	609a      	str	r2, [r3, #8]
    nl_10_output_array.data_start = AI_PTR(NULL);
 8005150:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <house_price_model_configure_activations+0x1c4>)
 8005152:	2200      	movs	r2, #0
 8005154:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8005156:	2301      	movs	r3, #1
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	200001d0 	.word	0x200001d0
 8005168:	200001e0 	.word	0x200001e0
 800516c:	200001f0 	.word	0x200001f0
 8005170:	20000200 	.word	0x20000200
 8005174:	20000210 	.word	0x20000210
 8005178:	20000220 	.word	0x20000220
 800517c:	20000230 	.word	0x20000230
 8005180:	20000240 	.word	0x20000240
 8005184:	20000250 	.word	0x20000250
 8005188:	20000260 	.word	0x20000260
 800518c:	20000270 	.word	0x20000270
 8005190:	20000280 	.word	0x20000280
 8005194:	20000290 	.word	0x20000290
 8005198:	200002a0 	.word	0x200002a0
 800519c:	200002b0 	.word	0x200002b0
 80051a0:	200002c0 	.word	0x200002c0
 80051a4:	200002d0 	.word	0x200002d0
 80051a8:	200002e0 	.word	0x200002e0
 80051ac:	200002f0 	.word	0x200002f0
 80051b0:	20000300 	.word	0x20000300
 80051b4:	20000310 	.word	0x20000310
 80051b8:	20000320 	.word	0x20000320
 80051bc:	20000330 	.word	0x20000330

080051c0 <house_price_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool house_price_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80051d0:	4ba2      	ldr	r3, [pc, #648]	; (800545c <house_price_model_configure_weights+0x29c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	4aa0      	ldr	r2, [pc, #640]	; (800545c <house_price_model_configure_weights+0x29c>)
 80051da:	6013      	str	r3, [r2, #0]
    dense_10_bias_array.data = AI_PTR(weights + 26132);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 80051e2:	3314      	adds	r3, #20
 80051e4:	4a9d      	ldr	r2, [pc, #628]	; (800545c <house_price_model_configure_weights+0x29c>)
 80051e6:	6093      	str	r3, [r2, #8]
    dense_10_bias_array.data_start = AI_PTR(weights + 26132);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 80051ee:	3314      	adds	r3, #20
 80051f0:	4a9a      	ldr	r2, [pc, #616]	; (800545c <house_price_model_configure_weights+0x29c>)
 80051f2:	60d3      	str	r3, [r2, #12]
    dense_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80051f4:	4b9a      	ldr	r3, [pc, #616]	; (8005460 <house_price_model_configure_weights+0x2a0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051fc:	4a98      	ldr	r2, [pc, #608]	; (8005460 <house_price_model_configure_weights+0x2a0>)
 80051fe:	6013      	str	r3, [r2, #0]
    dense_10_weights_array.data = AI_PTR(weights + 26100);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8005206:	3374      	adds	r3, #116	; 0x74
 8005208:	4a95      	ldr	r2, [pc, #596]	; (8005460 <house_price_model_configure_weights+0x2a0>)
 800520a:	6093      	str	r3, [r2, #8]
    dense_10_weights_array.data_start = AI_PTR(weights + 26100);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8005212:	3374      	adds	r3, #116	; 0x74
 8005214:	4a92      	ldr	r2, [pc, #584]	; (8005460 <house_price_model_configure_weights+0x2a0>)
 8005216:	60d3      	str	r3, [r2, #12]
    dense_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005218:	4b92      	ldr	r3, [pc, #584]	; (8005464 <house_price_model_configure_weights+0x2a4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005220:	4a90      	ldr	r2, [pc, #576]	; (8005464 <house_price_model_configure_weights+0x2a4>)
 8005222:	6013      	str	r3, [r2, #0]
    dense_9_bias_array.data = AI_PTR(weights + 26068);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 800522a:	3354      	adds	r3, #84	; 0x54
 800522c:	4a8d      	ldr	r2, [pc, #564]	; (8005464 <house_price_model_configure_weights+0x2a4>)
 800522e:	6093      	str	r3, [r2, #8]
    dense_9_bias_array.data_start = AI_PTR(weights + 26068);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8005236:	3354      	adds	r3, #84	; 0x54
 8005238:	4a8a      	ldr	r2, [pc, #552]	; (8005464 <house_price_model_configure_weights+0x2a4>)
 800523a:	60d3      	str	r3, [r2, #12]
    dense_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800523c:	4b8a      	ldr	r3, [pc, #552]	; (8005468 <house_price_model_configure_weights+0x2a8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005244:	4a88      	ldr	r2, [pc, #544]	; (8005468 <house_price_model_configure_weights+0x2a8>)
 8005246:	6013      	str	r3, [r2, #0]
    dense_9_weights_array.data = AI_PTR(weights + 25460);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 43c6 	add.w	r3, r3, #25344	; 0x6300
 800524e:	3374      	adds	r3, #116	; 0x74
 8005250:	4a85      	ldr	r2, [pc, #532]	; (8005468 <house_price_model_configure_weights+0x2a8>)
 8005252:	6093      	str	r3, [r2, #8]
    dense_9_weights_array.data_start = AI_PTR(weights + 25460);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 43c6 	add.w	r3, r3, #25344	; 0x6300
 800525a:	3374      	adds	r3, #116	; 0x74
 800525c:	4a82      	ldr	r2, [pc, #520]	; (8005468 <house_price_model_configure_weights+0x2a8>)
 800525e:	60d3      	str	r3, [r2, #12]
    dense_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005260:	4b82      	ldr	r3, [pc, #520]	; (800546c <house_price_model_configure_weights+0x2ac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005268:	4a80      	ldr	r2, [pc, #512]	; (800546c <house_price_model_configure_weights+0x2ac>)
 800526a:	6013      	str	r3, [r2, #0]
    dense_8_bias_array.data = AI_PTR(weights + 25384);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 43c6 	add.w	r3, r3, #25344	; 0x6300
 8005272:	3328      	adds	r3, #40	; 0x28
 8005274:	4a7d      	ldr	r2, [pc, #500]	; (800546c <house_price_model_configure_weights+0x2ac>)
 8005276:	6093      	str	r3, [r2, #8]
    dense_8_bias_array.data_start = AI_PTR(weights + 25384);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 43c6 	add.w	r3, r3, #25344	; 0x6300
 800527e:	3328      	adds	r3, #40	; 0x28
 8005280:	4a7a      	ldr	r2, [pc, #488]	; (800546c <house_price_model_configure_weights+0x2ac>)
 8005282:	60d3      	str	r3, [r2, #12]
    dense_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005284:	4b7a      	ldr	r3, [pc, #488]	; (8005470 <house_price_model_configure_weights+0x2b0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800528c:	4a78      	ldr	r2, [pc, #480]	; (8005470 <house_price_model_configure_weights+0x2b0>)
 800528e:	6013      	str	r3, [r2, #0]
    dense_8_weights_array.data = AI_PTR(weights + 23940);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8005296:	3304      	adds	r3, #4
 8005298:	4a75      	ldr	r2, [pc, #468]	; (8005470 <house_price_model_configure_weights+0x2b0>)
 800529a:	6093      	str	r3, [r2, #8]
    dense_8_weights_array.data_start = AI_PTR(weights + 23940);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80052a2:	3304      	adds	r3, #4
 80052a4:	4a72      	ldr	r2, [pc, #456]	; (8005470 <house_price_model_configure_weights+0x2b0>)
 80052a6:	60d3      	str	r3, [r2, #12]
    dense_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80052a8:	4b72      	ldr	r3, [pc, #456]	; (8005474 <house_price_model_configure_weights+0x2b4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	4a70      	ldr	r2, [pc, #448]	; (8005474 <house_price_model_configure_weights+0x2b4>)
 80052b2:	6013      	str	r3, [r2, #0]
    dense_7_bias_array.data = AI_PTR(weights + 23864);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 43ba 	add.w	r3, r3, #23808	; 0x5d00
 80052ba:	3338      	adds	r3, #56	; 0x38
 80052bc:	4a6d      	ldr	r2, [pc, #436]	; (8005474 <house_price_model_configure_weights+0x2b4>)
 80052be:	6093      	str	r3, [r2, #8]
    dense_7_bias_array.data_start = AI_PTR(weights + 23864);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 43ba 	add.w	r3, r3, #23808	; 0x5d00
 80052c6:	3338      	adds	r3, #56	; 0x38
 80052c8:	4a6a      	ldr	r2, [pc, #424]	; (8005474 <house_price_model_configure_weights+0x2b4>)
 80052ca:	60d3      	str	r3, [r2, #12]
    dense_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80052cc:	4b6a      	ldr	r3, [pc, #424]	; (8005478 <house_price_model_configure_weights+0x2b8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d4:	4a68      	ldr	r2, [pc, #416]	; (8005478 <house_price_model_configure_weights+0x2b8>)
 80052d6:	6013      	str	r3, [r2, #0]
    dense_7_weights_array.data = AI_PTR(weights + 22420);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 43af 	add.w	r3, r3, #22400	; 0x5780
 80052de:	3314      	adds	r3, #20
 80052e0:	4a65      	ldr	r2, [pc, #404]	; (8005478 <house_price_model_configure_weights+0x2b8>)
 80052e2:	6093      	str	r3, [r2, #8]
    dense_7_weights_array.data_start = AI_PTR(weights + 22420);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 43af 	add.w	r3, r3, #22400	; 0x5780
 80052ea:	3314      	adds	r3, #20
 80052ec:	4a62      	ldr	r2, [pc, #392]	; (8005478 <house_price_model_configure_weights+0x2b8>)
 80052ee:	60d3      	str	r3, [r2, #12]
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80052f0:	4b62      	ldr	r3, [pc, #392]	; (800547c <house_price_model_configure_weights+0x2bc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f8:	4a60      	ldr	r2, [pc, #384]	; (800547c <house_price_model_configure_weights+0x2bc>)
 80052fa:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights + 22344);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 43ae 	add.w	r3, r3, #22272	; 0x5700
 8005302:	3348      	adds	r3, #72	; 0x48
 8005304:	4a5d      	ldr	r2, [pc, #372]	; (800547c <house_price_model_configure_weights+0x2bc>)
 8005306:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights + 22344);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 43ae 	add.w	r3, r3, #22272	; 0x5700
 800530e:	3348      	adds	r3, #72	; 0x48
 8005310:	4a5a      	ldr	r2, [pc, #360]	; (800547c <house_price_model_configure_weights+0x2bc>)
 8005312:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005314:	4b5a      	ldr	r3, [pc, #360]	; (8005480 <house_price_model_configure_weights+0x2c0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <house_price_model_configure_weights+0x2c0>)
 800531e:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights + 20900);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8005326:	3324      	adds	r3, #36	; 0x24
 8005328:	4a55      	ldr	r2, [pc, #340]	; (8005480 <house_price_model_configure_weights+0x2c0>)
 800532a:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights + 20900);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8005332:	3324      	adds	r3, #36	; 0x24
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <house_price_model_configure_weights+0x2c0>)
 8005336:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005338:	4b52      	ldr	r3, [pc, #328]	; (8005484 <house_price_model_configure_weights+0x2c4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005340:	4a50      	ldr	r2, [pc, #320]	; (8005484 <house_price_model_configure_weights+0x2c4>)
 8005342:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights + 20824);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 800534a:	3358      	adds	r3, #88	; 0x58
 800534c:	4a4d      	ldr	r2, [pc, #308]	; (8005484 <house_price_model_configure_weights+0x2c4>)
 800534e:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights + 20824);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 8005356:	3358      	adds	r3, #88	; 0x58
 8005358:	4a4a      	ldr	r2, [pc, #296]	; (8005484 <house_price_model_configure_weights+0x2c4>)
 800535a:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800535c:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <house_price_model_configure_weights+0x2c8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005364:	4a48      	ldr	r2, [pc, #288]	; (8005488 <house_price_model_configure_weights+0x2c8>)
 8005366:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights + 17936);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 800536e:	3310      	adds	r3, #16
 8005370:	4a45      	ldr	r2, [pc, #276]	; (8005488 <house_price_model_configure_weights+0x2c8>)
 8005372:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights + 17936);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 800537a:	3310      	adds	r3, #16
 800537c:	4a42      	ldr	r2, [pc, #264]	; (8005488 <house_price_model_configure_weights+0x2c8>)
 800537e:	60d3      	str	r3, [r2, #12]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005380:	4b42      	ldr	r3, [pc, #264]	; (800548c <house_price_model_configure_weights+0x2cc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005388:	4a40      	ldr	r2, [pc, #256]	; (800548c <house_price_model_configure_weights+0x2cc>)
 800538a:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 17784);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 438a 	add.w	r3, r3, #17664	; 0x4500
 8005392:	3378      	adds	r3, #120	; 0x78
 8005394:	4a3d      	ldr	r2, [pc, #244]	; (800548c <house_price_model_configure_weights+0x2cc>)
 8005396:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 17784);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 438a 	add.w	r3, r3, #17664	; 0x4500
 800539e:	3378      	adds	r3, #120	; 0x78
 80053a0:	4a3a      	ldr	r2, [pc, #232]	; (800548c <house_price_model_configure_weights+0x2cc>)
 80053a2:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80053a4:	4b3a      	ldr	r3, [pc, #232]	; (8005490 <house_price_model_configure_weights+0x2d0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ac:	4a38      	ldr	r2, [pc, #224]	; (8005490 <house_price_model_configure_weights+0x2d0>)
 80053ae:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 12008);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80053b6:	3328      	adds	r3, #40	; 0x28
 80053b8:	4a35      	ldr	r2, [pc, #212]	; (8005490 <house_price_model_configure_weights+0x2d0>)
 80053ba:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 12008);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80053c2:	3328      	adds	r3, #40	; 0x28
 80053c4:	4a32      	ldr	r2, [pc, #200]	; (8005490 <house_price_model_configure_weights+0x2d0>)
 80053c6:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80053c8:	4b32      	ldr	r3, [pc, #200]	; (8005494 <house_price_model_configure_weights+0x2d4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d0:	4a30      	ldr	r2, [pc, #192]	; (8005494 <house_price_model_configure_weights+0x2d4>)
 80053d2:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 11856);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 5339 	add.w	r3, r3, #11840	; 0x2e40
 80053da:	3310      	adds	r3, #16
 80053dc:	4a2d      	ldr	r2, [pc, #180]	; (8005494 <house_price_model_configure_weights+0x2d4>)
 80053de:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 11856);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 5339 	add.w	r3, r3, #11840	; 0x2e40
 80053e6:	3310      	adds	r3, #16
 80053e8:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <house_price_model_configure_weights+0x2d4>)
 80053ea:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80053ec:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <house_price_model_configure_weights+0x2d8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f4:	4a28      	ldr	r2, [pc, #160]	; (8005498 <house_price_model_configure_weights+0x2d8>)
 80053f6:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 6080);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 80053fe:	4a26      	ldr	r2, [pc, #152]	; (8005498 <house_price_model_configure_weights+0x2d8>)
 8005400:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 6080);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 8005408:	4a23      	ldr	r2, [pc, #140]	; (8005498 <house_price_model_configure_weights+0x2d8>)
 800540a:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800540c:	4b23      	ldr	r3, [pc, #140]	; (800549c <house_price_model_configure_weights+0x2dc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005414:	4a21      	ldr	r2, [pc, #132]	; (800549c <house_price_model_configure_weights+0x2dc>)
 8005416:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 5928);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 53b9 	add.w	r3, r3, #5920	; 0x1720
 800541e:	3308      	adds	r3, #8
 8005420:	4a1e      	ldr	r2, [pc, #120]	; (800549c <house_price_model_configure_weights+0x2dc>)
 8005422:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 5928);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 53b9 	add.w	r3, r3, #5920	; 0x1720
 800542a:	3308      	adds	r3, #8
 800542c:	4a1b      	ldr	r2, [pc, #108]	; (800549c <house_price_model_configure_weights+0x2dc>)
 800542e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005430:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <house_price_model_configure_weights+0x2e0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005438:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <house_price_model_configure_weights+0x2e0>)
 800543a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 3040);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8005442:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <house_price_model_configure_weights+0x2e0>)
 8005444:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 3040);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 800544c:	4a14      	ldr	r2, [pc, #80]	; (80054a0 <house_price_model_configure_weights+0x2e0>)
 800544e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <house_price_model_configure_weights+0x2e4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005458:	e026      	b.n	80054a8 <house_price_model_configure_weights+0x2e8>
 800545a:	bf00      	nop
 800545c:	20000070 	.word	0x20000070
 8005460:	20000080 	.word	0x20000080
 8005464:	20000090 	.word	0x20000090
 8005468:	200000a0 	.word	0x200000a0
 800546c:	200000b0 	.word	0x200000b0
 8005470:	200000c0 	.word	0x200000c0
 8005474:	200000d0 	.word	0x200000d0
 8005478:	200000e0 	.word	0x200000e0
 800547c:	200000f0 	.word	0x200000f0
 8005480:	20000100 	.word	0x20000100
 8005484:	20000110 	.word	0x20000110
 8005488:	20000120 	.word	0x20000120
 800548c:	20000130 	.word	0x20000130
 8005490:	20000140 	.word	0x20000140
 8005494:	20000150 	.word	0x20000150
 8005498:	20000160 	.word	0x20000160
 800549c:	20000170 	.word	0x20000170
 80054a0:	20000180 	.word	0x20000180
 80054a4:	20000190 	.word	0x20000190
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <house_price_model_configure_weights+0x368>)
 80054aa:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 2964);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80054b2:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <house_price_model_configure_weights+0x368>)
 80054b4:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 2964);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80054bc:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <house_price_model_configure_weights+0x368>)
 80054be:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80054c0:	4b1a      	ldr	r3, [pc, #104]	; (800552c <house_price_model_configure_weights+0x36c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c8:	4a18      	ldr	r2, [pc, #96]	; (800552c <house_price_model_configure_weights+0x36c>)
 80054ca:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 1520);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 80054d2:	4a16      	ldr	r2, [pc, #88]	; (800552c <house_price_model_configure_weights+0x36c>)
 80054d4:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 1520);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 80054dc:	4a13      	ldr	r2, [pc, #76]	; (800552c <house_price_model_configure_weights+0x36c>)
 80054de:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80054e0:	4b13      	ldr	r3, [pc, #76]	; (8005530 <house_price_model_configure_weights+0x370>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e8:	4a11      	ldr	r2, [pc, #68]	; (8005530 <house_price_model_configure_weights+0x370>)
 80054ea:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 1444);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 80054f2:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <house_price_model_configure_weights+0x370>)
 80054f4:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 1444);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 80054fc:	4a0c      	ldr	r2, [pc, #48]	; (8005530 <house_price_model_configure_weights+0x370>)
 80054fe:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005500:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <house_price_model_configure_weights+0x374>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005508:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <house_price_model_configure_weights+0x374>)
 800550a:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <house_price_model_configure_weights+0x374>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8005512:	4a08      	ldr	r2, [pc, #32]	; (8005534 <house_price_model_configure_weights+0x374>)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8005518:	2301      	movs	r3, #1
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000190 	.word	0x20000190
 800552c:	200001a0 	.word	0x200001a0
 8005530:	200001b0 	.word	0x200001b0
 8005534:	200001c0 	.word	0x200001c0

08005538 <ai_house_price_model_create>:
}

AI_API_ENTRY
ai_error ai_house_price_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005542:	2300      	movs	r3, #0
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	2303      	movs	r3, #3
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2301      	movs	r3, #1
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <ai_house_price_model_create+0x28>)
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f881 	bl	8005658 <ai_platform_network_create>
 8005556:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000010 	.word	0x20000010

08005564 <ai_house_price_model_init>:
}

AI_API_ENTRY
ai_bool ai_house_price_model_init(
  ai_handle network, const ai_network_params* params)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8c9 	bl	8005708 <ai_platform_network_init>
 8005576:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <ai_house_price_model_init+0x1e>
 800557e:	2300      	movs	r3, #0
 8005580:	e02b      	b.n	80055da <ai_house_price_model_init+0x76>

  ai_bool ok = true;
 8005582:	2301      	movs	r3, #1
 8005584:	72fb      	strb	r3, [r7, #11]
  ok &= house_price_model_configure_weights(net_ctx, &params->params);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	4619      	mov	r1, r3
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff fe18 	bl	80051c0 <house_price_model_configure_weights>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	7afb      	ldrb	r3, [r7, #11]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	72fb      	strb	r3, [r7, #11]
  ok &= house_price_model_configure_activations(net_ctx, &params->activations);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4619      	mov	r1, r3
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff fd25 	bl	8004ff8 <house_price_model_configure_activations>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	7afb      	ldrb	r3, [r7, #11]
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf14      	ite	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	2300      	moveq	r3, #0
 80055be:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f91f 	bl	8005804 <ai_platform_network_post_init>
 80055c6:	4603      	mov	r3, r0
 80055c8:	461a      	mov	r2, r3
 80055ca:	7afb      	ldrb	r3, [r7, #11]
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf14      	ite	ne
 80055d2:	2301      	movne	r3, #1
 80055d4:	2300      	moveq	r3, #0
 80055d6:	72fb      	strb	r3, [r7, #11]

  return ok;
 80055d8:	7afb      	ldrb	r3, [r7, #11]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <ai_house_price_model_run>:


AI_API_ENTRY
ai_i32 ai_house_price_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f94e 	bl	8005894 <ai_platform_network_process>
 80055f8:	4603      	mov	r3, r0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <ai_house_price_model_data_weights_get>:
#include "house_price_model_data.h"

ai_handle ai_house_price_model_data_weights_get(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
    0x9b, 0xcd, 0xbd, 0x1b, 0x91, 0x4a, 0x3f, 0x56, 0x80,
    0x33, 0x3f, 0xaf, 0x81, 0x81, 0x3f, 0xd7, 0xbb, 0x34,
    0x3f, 0x6e, 0x3b, 0xd2, 0x39, 0xda, 0xe7, 0xdd, 0x3e
  };

  return AI_HANDLE_PTR(s_house_price_model_weights);
 8005608:	4b02      	ldr	r3, [pc, #8]	; (8005614 <ai_house_price_model_data_weights_get+0x10>)

}
 800560a:	4618      	mov	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	08008b6c 	.word	0x08008b6c

08005618 <_platform_network_state_setup.isra.1>:
 8005618:	b430      	push	{r4, r5}
 800561a:	68dd      	ldr	r5, [r3, #12]
 800561c:	695c      	ldr	r4, [r3, #20]
 800561e:	68ed      	ldr	r5, [r5, #12]
 8005620:	68e4      	ldr	r4, [r4, #12]
 8005622:	fb04 f405 	mul.w	r4, r4, r5
 8005626:	6084      	str	r4, [r0, #8]
 8005628:	8809      	ldrh	r1, [r1, #0]
 800562a:	fb04 f401 	mul.w	r4, r4, r1
 800562e:	60c4      	str	r4, [r0, #12]
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	6041      	str	r1, [r0, #4]
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	4414      	add	r4, r2
 8005638:	6004      	str	r4, [r0, #0]
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	6814      	ldr	r4, [r2, #0]
 800563e:	00a4      	lsls	r4, r4, #2
 8005640:	d407      	bmi.n	8005652 <_platform_network_state_setup.isra.1+0x3a>
 8005642:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	4421      	add	r1, r4
 800564a:	6091      	str	r1, [r2, #8]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	6842      	ldr	r2, [r0, #4]
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	bc30      	pop	{r4, r5}
 8005654:	4770      	bx	lr
	...

08005658 <ai_platform_network_create>:
 8005658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565c:	4e23      	ldr	r6, [pc, #140]	; (80056ec <ai_platform_network_create+0x94>)
 800565e:	4924      	ldr	r1, [pc, #144]	; (80056f0 <ai_platform_network_create+0x98>)
 8005660:	6835      	ldr	r5, [r6, #0]
 8005662:	b082      	sub	sp, #8
 8005664:	f025 0501 	bic.w	r5, r5, #1
 8005668:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800566c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8005670:	6035      	str	r5, [r6, #0]
 8005672:	2501      	movs	r5, #1
 8005674:	600d      	str	r5, [r1, #0]
 8005676:	680d      	ldr	r5, [r1, #0]
 8005678:	2d00      	cmp	r5, #0
 800567a:	d1fc      	bne.n	8005676 <ai_platform_network_create+0x1e>
 800567c:	491d      	ldr	r1, [pc, #116]	; (80056f4 <ai_platform_network_create+0x9c>)
 800567e:	4e1e      	ldr	r6, [pc, #120]	; (80056f8 <ai_platform_network_create+0xa0>)
 8005680:	600e      	str	r6, [r1, #0]
 8005682:	680e      	ldr	r6, [r1, #0]
 8005684:	491d      	ldr	r1, [pc, #116]	; (80056fc <ai_platform_network_create+0xa4>)
 8005686:	428e      	cmp	r6, r1
 8005688:	d000      	beq.n	800568c <ai_platform_network_create+0x34>
 800568a:	e7fe      	b.n	800568a <ai_platform_network_create+0x32>
 800568c:	b1d0      	cbz	r0, 80056c4 <ai_platform_network_create+0x6c>
 800568e:	4698      	mov	r8, r3
 8005690:	4613      	mov	r3, r2
 8005692:	4a1b      	ldr	r2, [pc, #108]	; (8005700 <ai_platform_network_create+0xa8>)
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	6003      	str	r3, [r0, #0]
 8005698:	4606      	mov	r6, r0
 800569a:	f000 fb05 	bl	8005ca8 <core_init>
 800569e:	b1b0      	cbz	r0, 80056ce <ai_platform_network_create+0x76>
 80056a0:	0223      	lsls	r3, r4, #8
 80056a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056a6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80056aa:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80056ae:	d910      	bls.n	80056d2 <ai_platform_network_create+0x7a>
 80056b0:	2201      	movs	r2, #1
 80056b2:	2300      	movs	r3, #0
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	2310      	movs	r3, #16
 80056b8:	2000      	movs	r0, #0
 80056ba:	f362 0007 	bfi	r0, r2, #0, #8
 80056be:	f363 201f 	bfi	r0, r3, #8, #24
 80056c2:	e001      	b.n	80056c8 <ai_platform_network_create+0x70>
 80056c4:	f241 0010 	movw	r0, #4112	; 0x1010
 80056c8:	b002      	add	sp, #8
 80056ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ce:	2230      	movs	r2, #48	; 0x30
 80056d0:	e7ef      	b.n	80056b2 <ai_platform_network_create+0x5a>
 80056d2:	a802      	add	r0, sp, #8
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <ai_platform_network_create+0xac>)
 80056d6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80056da:	f000 ffb3 	bl	8006644 <ai_check_custom_types>
 80056de:	b110      	cbz	r0, 80056e6 <ai_platform_network_create+0x8e>
 80056e0:	462b      	mov	r3, r5
 80056e2:	462a      	mov	r2, r5
 80056e4:	e7e8      	b.n	80056b8 <ai_platform_network_create+0x60>
 80056e6:	2202      	movs	r2, #2
 80056e8:	e7e3      	b.n	80056b2 <ai_platform_network_create+0x5a>
 80056ea:	bf00      	nop
 80056ec:	e0002000 	.word	0xe0002000
 80056f0:	40023008 	.word	0x40023008
 80056f4:	40023000 	.word	0x40023000
 80056f8:	f407a5c2 	.word	0xf407a5c2
 80056fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005700:	a1c00100 	.word	0xa1c00100
 8005704:	84048403 	.word	0x84048403

08005708 <ai_platform_network_init>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	460c      	mov	r4, r1
 800570c:	4605      	mov	r5, r0
 800570e:	b120      	cbz	r0, 800571a <ai_platform_network_init+0x12>
 8005710:	4b36      	ldr	r3, [pc, #216]	; (80057ec <ai_platform_network_init+0xe4>)
 8005712:	6802      	ldr	r2, [r0, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	bf18      	it	ne
 8005718:	2500      	movne	r5, #0
 800571a:	4935      	ldr	r1, [pc, #212]	; (80057f0 <ai_platform_network_init+0xe8>)
 800571c:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <ai_platform_network_init+0xec>)
 800571e:	680b      	ldr	r3, [r1, #0]
 8005720:	2001      	movs	r0, #1
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	600b      	str	r3, [r1, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	6010      	str	r0, [r2, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	2a00      	cmp	r2, #0
 8005730:	d1fc      	bne.n	800572c <ai_platform_network_init+0x24>
 8005732:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <ai_platform_network_init+0xf0>)
 8005734:	4a31      	ldr	r2, [pc, #196]	; (80057fc <ai_platform_network_init+0xf4>)
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4b31      	ldr	r3, [pc, #196]	; (8005800 <ai_platform_network_init+0xf8>)
 800573c:	429a      	cmp	r2, r3
 800573e:	d000      	beq.n	8005742 <ai_platform_network_init+0x3a>
 8005740:	e7fe      	b.n	8005740 <ai_platform_network_init+0x38>
 8005742:	b33d      	cbz	r5, 8005794 <ai_platform_network_init+0x8c>
 8005744:	b344      	cbz	r4, 8005798 <ai_platform_network_init+0x90>
 8005746:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005748:	6926      	ldr	r6, [r4, #16]
 800574a:	2f00      	cmp	r7, #0
 800574c:	d03d      	beq.n	80057ca <ai_platform_network_init+0xc2>
 800574e:	b35e      	cbz	r6, 80057a8 <ai_platform_network_init+0xa0>
 8005750:	4627      	mov	r7, r4
 8005752:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005754:	f105 0618 	add.w	r6, r5, #24
 8005758:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800575a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800575e:	e886 0003 	stmia.w	r6, {r0, r1}
 8005762:	3418      	adds	r4, #24
 8005764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005766:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800576a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800576c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005770:	e886 0003 	stmia.w	r6, {r0, r1}
 8005774:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005776:	2303      	movs	r3, #3
 8005778:	60eb      	str	r3, [r5, #12]
 800577a:	b15a      	cbz	r2, 8005794 <ai_platform_network_init+0x8c>
 800577c:	68d3      	ldr	r3, [r2, #12]
 800577e:	6095      	str	r5, [r2, #8]
 8005780:	429a      	cmp	r2, r3
 8005782:	d007      	beq.n	8005794 <ai_platform_network_init+0x8c>
 8005784:	b133      	cbz	r3, 8005794 <ai_platform_network_init+0x8c>
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	609d      	str	r5, [r3, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	d002      	beq.n	8005794 <ai_platform_network_init+0x8c>
 800578e:	4613      	mov	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f8      	bne.n	8005786 <ai_platform_network_init+0x7e>
 8005794:	4628      	mov	r0, r5
 8005796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005798:	f105 0010 	add.w	r0, r5, #16
 800579c:	2211      	movs	r2, #17
 800579e:	2110      	movs	r1, #16
 80057a0:	f000 fa84 	bl	8005cac <core_set_error>
 80057a4:	4625      	mov	r5, r4
 80057a6:	e7f5      	b.n	8005794 <ai_platform_network_init+0x8c>
 80057a8:	8921      	ldrh	r1, [r4, #8]
 80057aa:	88e2      	ldrh	r2, [r4, #6]
 80057ac:	68e3      	ldr	r3, [r4, #12]
 80057ae:	fb02 f201 	mul.w	r2, r2, r1
 80057b2:	fb03 f302 	mul.w	r3, r3, r2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0ca      	beq.n	8005750 <ai_platform_network_init+0x48>
 80057ba:	f105 0010 	add.w	r0, r5, #16
 80057be:	2212      	movs	r2, #18
 80057c0:	2110      	movs	r1, #16
 80057c2:	f000 fa73 	bl	8005cac <core_set_error>
 80057c6:	4635      	mov	r5, r6
 80057c8:	e7e4      	b.n	8005794 <ai_platform_network_init+0x8c>
 80057ca:	8c21      	ldrh	r1, [r4, #32]
 80057cc:	8be2      	ldrh	r2, [r4, #30]
 80057ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d0:	fb02 f201 	mul.w	r2, r2, r1
 80057d4:	fb03 f302 	mul.w	r3, r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0b8      	beq.n	800574e <ai_platform_network_init+0x46>
 80057dc:	f105 0010 	add.w	r0, r5, #16
 80057e0:	2213      	movs	r2, #19
 80057e2:	2110      	movs	r1, #16
 80057e4:	f000 fa62 	bl	8005cac <core_set_error>
 80057e8:	463d      	mov	r5, r7
 80057ea:	e7d3      	b.n	8005794 <ai_platform_network_init+0x8c>
 80057ec:	a1c00100 	.word	0xa1c00100
 80057f0:	e0002000 	.word	0xe0002000
 80057f4:	40023008 	.word	0x40023008
 80057f8:	40023000 	.word	0x40023000
 80057fc:	f407a5c2 	.word	0xf407a5c2
 8005800:	b5e8b5cd 	.word	0xb5e8b5cd

08005804 <ai_platform_network_post_init>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4604      	mov	r4, r0
 8005808:	b120      	cbz	r0, 8005814 <ai_platform_network_post_init+0x10>
 800580a:	4b1c      	ldr	r3, [pc, #112]	; (800587c <ai_platform_network_post_init+0x78>)
 800580c:	6802      	ldr	r2, [r0, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	bf18      	it	ne
 8005812:	2400      	movne	r4, #0
 8005814:	491a      	ldr	r1, [pc, #104]	; (8005880 <ai_platform_network_post_init+0x7c>)
 8005816:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <ai_platform_network_post_init+0x80>)
 8005818:	680b      	ldr	r3, [r1, #0]
 800581a:	2001      	movs	r0, #1
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	600b      	str	r3, [r1, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	6010      	str	r0, [r2, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	2a00      	cmp	r2, #0
 800582a:	d1fc      	bne.n	8005826 <ai_platform_network_post_init+0x22>
 800582c:	4b16      	ldr	r3, [pc, #88]	; (8005888 <ai_platform_network_post_init+0x84>)
 800582e:	4a17      	ldr	r2, [pc, #92]	; (800588c <ai_platform_network_post_init+0x88>)
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b16      	ldr	r3, [pc, #88]	; (8005890 <ai_platform_network_post_init+0x8c>)
 8005836:	429a      	cmp	r2, r3
 8005838:	d000      	beq.n	800583c <ai_platform_network_post_init+0x38>
 800583a:	e7fe      	b.n	800583a <ai_platform_network_post_init+0x36>
 800583c:	b1a4      	cbz	r4, 8005868 <ai_platform_network_post_init+0x64>
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	f013 0502 	ands.w	r5, r3, #2
 8005844:	d012      	beq.n	800586c <ai_platform_network_post_init+0x68>
 8005846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005848:	b163      	cbz	r3, 8005864 <ai_platform_network_post_init+0x60>
 800584a:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800584c:	b91d      	cbnz	r5, 8005856 <ai_platform_network_post_init+0x52>
 800584e:	e009      	b.n	8005864 <ai_platform_network_post_init+0x60>
 8005850:	461d      	mov	r5, r3
 8005852:	b13b      	cbz	r3, 8005864 <ai_platform_network_post_init+0x60>
 8005854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005856:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005858:	4629      	mov	r1, r5
 800585a:	2000      	movs	r0, #0
 800585c:	4798      	blx	r3
 800585e:	68eb      	ldr	r3, [r5, #12]
 8005860:	42ab      	cmp	r3, r5
 8005862:	d1f5      	bne.n	8005850 <ai_platform_network_post_init+0x4c>
 8005864:	2001      	movs	r0, #1
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	4620      	mov	r0, r4
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	f104 0010 	add.w	r0, r4, #16
 8005870:	2210      	movs	r2, #16
 8005872:	2111      	movs	r1, #17
 8005874:	f000 fa1a 	bl	8005cac <core_set_error>
 8005878:	4628      	mov	r0, r5
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	a1c00100 	.word	0xa1c00100
 8005880:	e0002000 	.word	0xe0002000
 8005884:	40023008 	.word	0x40023008
 8005888:	40023000 	.word	0x40023000
 800588c:	f407a5c2 	.word	0xf407a5c2
 8005890:	b5e8b5cd 	.word	0xb5e8b5cd

08005894 <ai_platform_network_process>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	b083      	sub	sp, #12
 800589a:	4604      	mov	r4, r0
 800589c:	9201      	str	r2, [sp, #4]
 800589e:	b120      	cbz	r0, 80058aa <ai_platform_network_process+0x16>
 80058a0:	4ba5      	ldr	r3, [pc, #660]	; (8005b38 <ai_platform_network_process+0x2a4>)
 80058a2:	6802      	ldr	r2, [r0, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	bf18      	it	ne
 80058a8:	2400      	movne	r4, #0
 80058aa:	48a4      	ldr	r0, [pc, #656]	; (8005b3c <ai_platform_network_process+0x2a8>)
 80058ac:	4ba4      	ldr	r3, [pc, #656]	; (8005b40 <ai_platform_network_process+0x2ac>)
 80058ae:	6802      	ldr	r2, [r0, #0]
 80058b0:	f022 0201 	bic.w	r2, r2, #1
 80058b4:	6002      	str	r2, [r0, #0]
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	2a00      	cmp	r2, #0
 80058be:	d1fc      	bne.n	80058ba <ai_platform_network_process+0x26>
 80058c0:	4ba0      	ldr	r3, [pc, #640]	; (8005b44 <ai_platform_network_process+0x2b0>)
 80058c2:	4aa1      	ldr	r2, [pc, #644]	; (8005b48 <ai_platform_network_process+0x2b4>)
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4ba0      	ldr	r3, [pc, #640]	; (8005b4c <ai_platform_network_process+0x2b8>)
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d000      	beq.n	80058d0 <ai_platform_network_process+0x3c>
 80058ce:	e7fe      	b.n	80058ce <ai_platform_network_process+0x3a>
 80058d0:	2c00      	cmp	r4, #0
 80058d2:	d066      	beq.n	80059a2 <ai_platform_network_process+0x10e>
 80058d4:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80058d8:	b107      	cbz	r7, 80058dc <ai_platform_network_process+0x48>
 80058da:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80058dc:	68e3      	ldr	r3, [r4, #12]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2600      	movs	r6, #0
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	6166      	str	r6, [r4, #20]
 80058e8:	f040 80fe 	bne.w	8005ae8 <ai_platform_network_process+0x254>
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d07f      	beq.n	80059f0 <ai_platform_network_process+0x15c>
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	d07d      	beq.n	80059f0 <ai_platform_network_process+0x15c>
 80058f4:	883b      	ldrh	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d07a      	beq.n	80059f0 <ai_platform_network_process+0x15c>
 80058fa:	460d      	mov	r5, r1
 80058fc:	46a0      	mov	r8, r4
 80058fe:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8005902:	429e      	cmp	r6, r3
 8005904:	d27d      	bcs.n	8005a02 <ai_platform_network_process+0x16e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d07a      	beq.n	8005a02 <ai_platform_network_process+0x16e>
 800590c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8005910:	2c00      	cmp	r4, #0
 8005912:	d076      	beq.n	8005a02 <ai_platform_network_process+0x16e>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800591c:	d067      	beq.n	80059ee <ai_platform_network_process+0x15a>
 800591e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005922:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005926:	69a0      	ldr	r0, [r4, #24]
 8005928:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800592c:	6841      	ldr	r1, [r0, #4]
 800592e:	fb0b f30e 	mul.w	r3, fp, lr
 8005932:	fb0c f303 	mul.w	r3, ip, r3
 8005936:	4299      	cmp	r1, r3
 8005938:	d350      	bcc.n	80059dc <ai_platform_network_process+0x148>
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	455a      	cmp	r2, fp
 8005940:	d14c      	bne.n	80059dc <ai_platform_network_process+0x148>
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	4572      	cmp	r2, lr
 8005946:	d149      	bne.n	80059dc <ai_platform_network_process+0x148>
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	459c      	cmp	ip, r3
 800594c:	d146      	bne.n	80059dc <ai_platform_network_process+0x148>
 800594e:	6800      	ldr	r0, [r0, #0]
 8005950:	f000 ff28 	bl	80067a4 <ai_array_get_byte_size>
 8005954:	68e2      	ldr	r2, [r4, #12]
 8005956:	6963      	ldr	r3, [r4, #20]
 8005958:	68d2      	ldr	r2, [r2, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	fb03 f302 	mul.w	r3, r3, r2
 8005960:	4298      	cmp	r0, r3
 8005962:	d33b      	bcc.n	80059dc <ai_platform_network_process+0x148>
 8005964:	69a3      	ldr	r3, [r4, #24]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	f000 fed0 	bl	800670c <ai_array_to_buffer_fmt>
 800596c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005970:	4043      	eors	r3, r0
 8005972:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005976:	d128      	bne.n	80059ca <ai_platform_network_process+0x136>
 8005978:	68eb      	ldr	r3, [r5, #12]
 800597a:	b1f3      	cbz	r3, 80059ba <ai_platform_network_process+0x126>
 800597c:	f8b5 b000 	ldrh.w	fp, [r5]
 8005980:	f1bb 0f00 	cmp.w	fp, #0
 8005984:	d012      	beq.n	80059ac <ai_platform_network_process+0x118>
 8005986:	4623      	mov	r3, r4
 8005988:	f105 020c 	add.w	r2, r5, #12
 800598c:	4629      	mov	r1, r5
 800598e:	4650      	mov	r0, sl
 8005990:	f7ff fe42 	bl	8005618 <_platform_network_state_setup.isra.1>
 8005994:	45d9      	cmp	r9, fp
 8005996:	883b      	ldrh	r3, [r7, #0]
 8005998:	bf38      	it	cc
 800599a:	46d9      	movcc	r9, fp
 800599c:	3601      	adds	r6, #1
 800599e:	3518      	adds	r5, #24
 80059a0:	e7af      	b.n	8005902 <ai_platform_network_process+0x6e>
 80059a2:	46a3      	mov	fp, r4
 80059a4:	4658      	mov	r0, fp
 80059a6:	b003      	add	sp, #12
 80059a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ac:	f108 0010 	add.w	r0, r8, #16
 80059b0:	2221      	movs	r2, #33	; 0x21
 80059b2:	2112      	movs	r1, #18
 80059b4:	f000 f97a 	bl	8005cac <core_set_error>
 80059b8:	e7f4      	b.n	80059a4 <ai_platform_network_process+0x110>
 80059ba:	f108 0010 	add.w	r0, r8, #16
 80059be:	2217      	movs	r2, #23
 80059c0:	2112      	movs	r1, #18
 80059c2:	469b      	mov	fp, r3
 80059c4:	f000 f972 	bl	8005cac <core_set_error>
 80059c8:	e7ec      	b.n	80059a4 <ai_platform_network_process+0x110>
 80059ca:	f108 0010 	add.w	r0, r8, #16
 80059ce:	2219      	movs	r2, #25
 80059d0:	2112      	movs	r1, #18
 80059d2:	f000 f96b 	bl	8005cac <core_set_error>
 80059d6:	f04f 0b00 	mov.w	fp, #0
 80059da:	e7e3      	b.n	80059a4 <ai_platform_network_process+0x110>
 80059dc:	f108 0010 	add.w	r0, r8, #16
 80059e0:	2218      	movs	r2, #24
 80059e2:	2112      	movs	r1, #18
 80059e4:	f000 f962 	bl	8005cac <core_set_error>
 80059e8:	f04f 0b00 	mov.w	fp, #0
 80059ec:	e7da      	b.n	80059a4 <ai_platform_network_process+0x110>
 80059ee:	4644      	mov	r4, r8
 80059f0:	f104 0010 	add.w	r0, r4, #16
 80059f4:	2217      	movs	r2, #23
 80059f6:	2112      	movs	r1, #18
 80059f8:	f000 f958 	bl	8005cac <core_set_error>
 80059fc:	f04f 0b00 	mov.w	fp, #0
 8005a00:	e7d0      	b.n	80059a4 <ai_platform_network_process+0x110>
 8005a02:	9a01      	ldr	r2, [sp, #4]
 8005a04:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8005a08:	4644      	mov	r4, r8
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	f000 80a4 	beq.w	8005b58 <ai_platform_network_process+0x2c4>
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	f240 8140 	bls.w	8005c96 <ai_platform_network_process+0x402>
 8005a16:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8005a1a:	f118 0f0c 	cmn.w	r8, #12
 8005a1e:	f000 813a 	beq.w	8005c96 <ai_platform_network_process+0x402>
 8005a22:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8135 	beq.w	8005c96 <ai_platform_network_process+0x402>
 8005a2c:	3204      	adds	r2, #4
 8005a2e:	4615      	mov	r5, r2
 8005a30:	2700      	movs	r7, #0
 8005a32:	429f      	cmp	r7, r3
 8005a34:	f080 808c 	bcs.w	8005b50 <ai_platform_network_process+0x2bc>
 8005a38:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8087 	beq.w	8005b50 <ai_platform_network_process+0x2bc>
 8005a42:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	f000 8082 	beq.w	8005b50 <ai_platform_network_process+0x2bc>
 8005a4c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8005a56:	d067      	beq.n	8005b28 <ai_platform_network_process+0x294>
 8005a58:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005a5c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005a60:	69b0      	ldr	r0, [r6, #24]
 8005a62:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005a66:	6841      	ldr	r1, [r0, #4]
 8005a68:	fb0b f30e 	mul.w	r3, fp, lr
 8005a6c:	fb0c f303 	mul.w	r3, ip, r3
 8005a70:	4299      	cmp	r1, r3
 8005a72:	f0c0 8110 	bcc.w	8005c96 <ai_platform_network_process+0x402>
 8005a76:	68f3      	ldr	r3, [r6, #12]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	455a      	cmp	r2, fp
 8005a7c:	f040 810b 	bne.w	8005c96 <ai_platform_network_process+0x402>
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	4572      	cmp	r2, lr
 8005a84:	f040 8107 	bne.w	8005c96 <ai_platform_network_process+0x402>
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	459c      	cmp	ip, r3
 8005a8c:	f040 8103 	bne.w	8005c96 <ai_platform_network_process+0x402>
 8005a90:	6800      	ldr	r0, [r0, #0]
 8005a92:	f000 fe87 	bl	80067a4 <ai_array_get_byte_size>
 8005a96:	68f2      	ldr	r2, [r6, #12]
 8005a98:	6973      	ldr	r3, [r6, #20]
 8005a9a:	68d2      	ldr	r2, [r2, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	fb03 f302 	mul.w	r3, r3, r2
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	f0c0 80f7 	bcc.w	8005c96 <ai_platform_network_process+0x402>
 8005aa8:	69b3      	ldr	r3, [r6, #24]
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	f000 fe2e 	bl	800670c <ai_array_to_buffer_fmt>
 8005ab0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005ab4:	4043      	eors	r3, r0
 8005ab6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005aba:	d12c      	bne.n	8005b16 <ai_platform_network_process+0x282>
 8005abc:	68eb      	ldr	r3, [r5, #12]
 8005abe:	b313      	cbz	r3, 8005b06 <ai_platform_network_process+0x272>
 8005ac0:	f8b5 b000 	ldrh.w	fp, [r5]
 8005ac4:	f1bb 0f00 	cmp.w	fp, #0
 8005ac8:	d016      	beq.n	8005af8 <ai_platform_network_process+0x264>
 8005aca:	4633      	mov	r3, r6
 8005acc:	f105 020c 	add.w	r2, r5, #12
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4650      	mov	r0, sl
 8005ad4:	f7ff fda0 	bl	8005618 <_platform_network_state_setup.isra.1>
 8005ad8:	45d9      	cmp	r9, fp
 8005ada:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005ade:	bf38      	it	cc
 8005ae0:	46d9      	movcc	r9, fp
 8005ae2:	3701      	adds	r7, #1
 8005ae4:	3518      	adds	r5, #24
 8005ae6:	e7a4      	b.n	8005a32 <ai_platform_network_process+0x19e>
 8005ae8:	f104 0010 	add.w	r0, r4, #16
 8005aec:	2230      	movs	r2, #48	; 0x30
 8005aee:	2111      	movs	r1, #17
 8005af0:	f000 f8dc 	bl	8005cac <core_set_error>
 8005af4:	46b3      	mov	fp, r6
 8005af6:	e755      	b.n	80059a4 <ai_platform_network_process+0x110>
 8005af8:	f104 0010 	add.w	r0, r4, #16
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	2113      	movs	r1, #19
 8005b00:	f000 f8d4 	bl	8005cac <core_set_error>
 8005b04:	e74e      	b.n	80059a4 <ai_platform_network_process+0x110>
 8005b06:	f104 0010 	add.w	r0, r4, #16
 8005b0a:	2217      	movs	r2, #23
 8005b0c:	2113      	movs	r1, #19
 8005b0e:	469b      	mov	fp, r3
 8005b10:	f000 f8cc 	bl	8005cac <core_set_error>
 8005b14:	e746      	b.n	80059a4 <ai_platform_network_process+0x110>
 8005b16:	f104 0010 	add.w	r0, r4, #16
 8005b1a:	2219      	movs	r2, #25
 8005b1c:	2113      	movs	r1, #19
 8005b1e:	f000 f8c5 	bl	8005cac <core_set_error>
 8005b22:	f04f 0b00 	mov.w	fp, #0
 8005b26:	e73d      	b.n	80059a4 <ai_platform_network_process+0x110>
 8005b28:	f104 0010 	add.w	r0, r4, #16
 8005b2c:	2217      	movs	r2, #23
 8005b2e:	2113      	movs	r1, #19
 8005b30:	f000 f8bc 	bl	8005cac <core_set_error>
 8005b34:	46d3      	mov	fp, sl
 8005b36:	e735      	b.n	80059a4 <ai_platform_network_process+0x110>
 8005b38:	a1c00100 	.word	0xa1c00100
 8005b3c:	e0002000 	.word	0xe0002000
 8005b40:	40023008 	.word	0x40023008
 8005b44:	40023000 	.word	0x40023000
 8005b48:	f407a5c2 	.word	0xf407a5c2
 8005b4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b50:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8005b54:	f8a4 9014 	strh.w	r9, [r4, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8099 	beq.w	8005c90 <ai_platform_network_process+0x3fc>
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005b62:	f240 8093 	bls.w	8005c8c <ai_platform_network_process+0x3f8>
 8005b66:	f105 070c 	add.w	r7, r5, #12
 8005b6a:	8ae0      	ldrh	r0, [r4, #22]
 8005b6c:	8aa3      	ldrh	r3, [r4, #20]
 8005b6e:	4283      	cmp	r3, r0
 8005b70:	d977      	bls.n	8005c62 <ai_platform_network_process+0x3ce>
 8005b72:	46a3      	mov	fp, r4
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	d032      	beq.n	8005bde <ai_platform_network_process+0x34a>
 8005b78:	882b      	ldrh	r3, [r5, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d02f      	beq.n	8005bde <ai_platform_network_process+0x34a>
 8005b7e:	686b      	ldr	r3, [r5, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d02c      	beq.n	8005bde <ai_platform_network_process+0x34a>
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f04f 0800 	mov.w	r8, #0
 8005b8a:	b343      	cbz	r3, 8005bde <ai_platform_network_process+0x34a>
 8005b8c:	68a9      	ldr	r1, [r5, #8]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	f8d1 a000 	ldr.w	sl, [r1]
 8005b94:	6814      	ldr	r4, [r2, #0]
 8005b96:	6890      	ldr	r0, [r2, #8]
 8005b98:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005b9c:	eb0a 0609 	add.w	r6, sl, r9
 8005ba0:	00a4      	lsls	r4, r4, #2
 8005ba2:	6871      	ldr	r1, [r6, #4]
 8005ba4:	d45f      	bmi.n	8005c66 <ai_platform_network_process+0x3d2>
 8005ba6:	68d4      	ldr	r4, [r2, #12]
 8005ba8:	1b00      	subs	r0, r0, r4
 8005baa:	4401      	add	r1, r0
 8005bac:	6091      	str	r1, [r2, #8]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	6872      	ldr	r2, [r6, #4]
 8005bb2:	60da      	str	r2, [r3, #12]
 8005bb4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005bb8:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005bbc:	440b      	add	r3, r1
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	bf24      	itt	cs
 8005bc2:	68f3      	ldrcs	r3, [r6, #12]
 8005bc4:	1ad3      	subcs	r3, r2, r3
 8005bc6:	6073      	str	r3, [r6, #4]
 8005bc8:	882b      	ldrh	r3, [r5, #0]
 8005bca:	f108 0801 	add.w	r8, r8, #1
 8005bce:	4598      	cmp	r8, r3
 8005bd0:	d205      	bcs.n	8005bde <ai_platform_network_process+0x34a>
 8005bd2:	686b      	ldr	r3, [r5, #4]
 8005bd4:	b11b      	cbz	r3, 8005bde <ai_platform_network_process+0x34a>
 8005bd6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1d6      	bne.n	8005b8c <ai_platform_network_process+0x2f8>
 8005bde:	4658      	mov	r0, fp
 8005be0:	f000 fd5a 	bl	8006698 <ai_layers_forward_all>
 8005be4:	2f00      	cmp	r7, #0
 8005be6:	d032      	beq.n	8005c4e <ai_platform_network_process+0x3ba>
 8005be8:	883b      	ldrh	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d02f      	beq.n	8005c4e <ai_platform_network_process+0x3ba>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	b36b      	cbz	r3, 8005c4e <ai_platform_network_process+0x3ba>
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	b358      	cbz	r0, 8005c4e <ai_platform_network_process+0x3ba>
 8005bf6:	f04f 0800 	mov.w	r8, #0
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6981      	ldr	r1, [r0, #24]
 8005bfe:	f8d3 a000 	ldr.w	sl, [r3]
 8005c02:	680c      	ldr	r4, [r1, #0]
 8005c04:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005c08:	eb0a 0609 	add.w	r6, sl, r9
 8005c0c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8005c10:	00a4      	lsls	r4, r4, #2
 8005c12:	eb0c 0302 	add.w	r3, ip, r2
 8005c16:	d42a      	bmi.n	8005c6e <ai_platform_network_process+0x3da>
 8005c18:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	bf24      	itt	cs
 8005c20:	68f3      	ldrcs	r3, [r6, #12]
 8005c22:	1ad3      	subcs	r3, r2, r3
 8005c24:	6073      	str	r3, [r6, #4]
 8005c26:	6981      	ldr	r1, [r0, #24]
 8005c28:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005c2c:	1b12      	subs	r2, r2, r4
 8005c2e:	4413      	add	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]
 8005c32:	6983      	ldr	r3, [r0, #24]
 8005c34:	6872      	ldr	r2, [r6, #4]
 8005c36:	60da      	str	r2, [r3, #12]
 8005c38:	883b      	ldrh	r3, [r7, #0]
 8005c3a:	f108 0801 	add.w	r8, r8, #1
 8005c3e:	4598      	cmp	r8, r3
 8005c40:	d205      	bcs.n	8005c4e <ai_platform_network_process+0x3ba>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	b11b      	cbz	r3, 8005c4e <ai_platform_network_process+0x3ba>
 8005c46:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d1d5      	bne.n	8005bfa <ai_platform_network_process+0x366>
 8005c4e:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8005c52:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005c56:	3001      	adds	r0, #1
 8005c58:	b280      	uxth	r0, r0
 8005c5a:	4283      	cmp	r3, r0
 8005c5c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8005c60:	d888      	bhi.n	8005b74 <ai_platform_network_process+0x2e0>
 8005c62:	4683      	mov	fp, r0
 8005c64:	e69e      	b.n	80059a4 <ai_platform_network_process+0x110>
 8005c66:	68b2      	ldr	r2, [r6, #8]
 8005c68:	f000 fdf0 	bl	800684c <memcpy>
 8005c6c:	e7a2      	b.n	8005bb4 <ai_platform_network_process+0x320>
 8005c6e:	6889      	ldr	r1, [r1, #8]
 8005c70:	4660      	mov	r0, ip
 8005c72:	f000 fdeb 	bl	800684c <memcpy>
 8005c76:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005c7a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005c7e:	440b      	add	r3, r1
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bf24      	itt	cs
 8005c84:	68f3      	ldrcs	r3, [r6, #12]
 8005c86:	1ad3      	subcs	r3, r2, r3
 8005c88:	6073      	str	r3, [r6, #4]
 8005c8a:	e7d5      	b.n	8005c38 <ai_platform_network_process+0x3a4>
 8005c8c:	2700      	movs	r7, #0
 8005c8e:	e76c      	b.n	8005b6a <ai_platform_network_process+0x2d6>
 8005c90:	461d      	mov	r5, r3
 8005c92:	461f      	mov	r7, r3
 8005c94:	e769      	b.n	8005b6a <ai_platform_network_process+0x2d6>
 8005c96:	f104 0010 	add.w	r0, r4, #16
 8005c9a:	2218      	movs	r2, #24
 8005c9c:	2113      	movs	r1, #19
 8005c9e:	f000 f805 	bl	8005cac <core_set_error>
 8005ca2:	f04f 0b00 	mov.w	fp, #0
 8005ca6:	e67d      	b.n	80059a4 <ai_platform_network_process+0x110>

08005ca8 <core_init>:
 8005ca8:	2001      	movs	r0, #1
 8005caa:	4770      	bx	lr

08005cac <core_set_error>:
 8005cac:	7803      	ldrb	r3, [r0, #0]
 8005cae:	b933      	cbnz	r3, 8005cbe <core_set_error+0x12>
 8005cb0:	7001      	strb	r1, [r0, #0]
 8005cb2:	6803      	ldr	r3, [r0, #0]
 8005cb4:	f362 231f 	bfi	r3, r2, #8, #24
 8005cb8:	6003      	str	r3, [r0, #0]
 8005cba:	2001      	movs	r0, #1
 8005cbc:	4770      	bx	lr
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop

08005cc4 <ai_dict8_dot_array_f32>:
 8005cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ccc:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8005cd0:	f000 80c0 	beq.w	8005e54 <ai_dict8_dot_array_f32+0x190>
 8005cd4:	f101 0408 	add.w	r4, r1, #8
 8005cd8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005cdc:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005e5c <ai_dict8_dot_array_f32+0x198>
 8005ce0:	eb04 0e09 	add.w	lr, r4, r9
 8005ce4:	f103 0520 	add.w	r5, r3, #32
 8005ce8:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8005cec:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8005cf0:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8005cf4:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005cf8:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005cfc:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8005d00:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8005d04:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005d08:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005d0c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005d10:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005d14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d18:	edd6 7a00 	vldr	s15, [r6]
 8005d1c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8005d20:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005d24:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005d28:	ed9a 3a00 	vldr	s6, [sl]
 8005d2c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8005d30:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005d34:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005d38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d3c:	ed97 3a00 	vldr	s6, [r7]
 8005d40:	ed96 5a00 	vldr	s10, [r6]
 8005d44:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8005d48:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005d4c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005d50:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005d54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d58:	ed9a 3a00 	vldr	s6, [sl]
 8005d5c:	ed96 4a00 	vldr	s8, [r6]
 8005d60:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8005d64:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005d68:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005d6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d70:	ed97 5a00 	vldr	s10, [r7]
 8005d74:	ed96 6a00 	vldr	s12, [r6]
 8005d78:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005d7c:	3408      	adds	r4, #8
 8005d7e:	45a6      	cmp	lr, r4
 8005d80:	f105 0520 	add.w	r5, r5, #32
 8005d84:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d88:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d94:	d1a8      	bne.n	8005ce8 <ai_dict8_dot_array_f32+0x24>
 8005d96:	4449      	add	r1, r9
 8005d98:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005d9c:	f01c 0c07 	ands.w	ip, ip, #7
 8005da0:	d050      	beq.n	8005e44 <ai_dict8_dot_array_f32+0x180>
 8005da2:	780c      	ldrb	r4, [r1, #0]
 8005da4:	edd3 6a00 	vldr	s13, [r3]
 8005da8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005dac:	edd4 7a00 	vldr	s15, [r4]
 8005db0:	f1bc 0f01 	cmp.w	ip, #1
 8005db4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005db8:	d044      	beq.n	8005e44 <ai_dict8_dot_array_f32+0x180>
 8005dba:	784c      	ldrb	r4, [r1, #1]
 8005dbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005dc0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005dc4:	edd4 7a00 	vldr	s15, [r4]
 8005dc8:	f1bc 0f02 	cmp.w	ip, #2
 8005dcc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005dd0:	d038      	beq.n	8005e44 <ai_dict8_dot_array_f32+0x180>
 8005dd2:	788c      	ldrb	r4, [r1, #2]
 8005dd4:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dd8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005ddc:	edd4 7a00 	vldr	s15, [r4]
 8005de0:	f1bc 0f03 	cmp.w	ip, #3
 8005de4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005de8:	d02c      	beq.n	8005e44 <ai_dict8_dot_array_f32+0x180>
 8005dea:	78cc      	ldrb	r4, [r1, #3]
 8005dec:	edd3 6a03 	vldr	s13, [r3, #12]
 8005df0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005df4:	edd4 7a00 	vldr	s15, [r4]
 8005df8:	f1bc 0f04 	cmp.w	ip, #4
 8005dfc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e00:	d020      	beq.n	8005e44 <ai_dict8_dot_array_f32+0x180>
 8005e02:	790c      	ldrb	r4, [r1, #4]
 8005e04:	edd3 6a04 	vldr	s13, [r3, #16]
 8005e08:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005e0c:	edd4 7a00 	vldr	s15, [r4]
 8005e10:	f1bc 0f05 	cmp.w	ip, #5
 8005e14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e18:	d014      	beq.n	8005e44 <ai_dict8_dot_array_f32+0x180>
 8005e1a:	794c      	ldrb	r4, [r1, #5]
 8005e1c:	edd3 6a05 	vldr	s13, [r3, #20]
 8005e20:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005e24:	edd4 7a00 	vldr	s15, [r4]
 8005e28:	f1bc 0f06 	cmp.w	ip, #6
 8005e2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e30:	d008      	beq.n	8005e44 <ai_dict8_dot_array_f32+0x180>
 8005e32:	7989      	ldrb	r1, [r1, #6]
 8005e34:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005e3c:	edd2 6a00 	vldr	s13, [r2]
 8005e40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e44:	edd0 7a00 	vldr	s15, [r0]
 8005e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e4c:	ed80 7a00 	vstr	s14, [r0]
 8005e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e54:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005e5c <ai_dict8_dot_array_f32+0x198>
 8005e58:	e7a0      	b.n	8005d9c <ai_dict8_dot_array_f32+0xd8>
 8005e5a:	bf00      	nop
 8005e5c:	00000000 	.word	0x00000000

08005e60 <ai_dict4_dot_array_f32>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e66:	f027 0c01 	bic.w	ip, r7, #1
 8005e6a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005e6e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005e72:	f000 80ae 	beq.w	8005fd2 <ai_dict4_dot_array_f32+0x172>
 8005e76:	1d0d      	adds	r5, r1, #4
 8005e78:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005e7c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005fd8 <ai_dict4_dot_array_f32+0x178>
 8005e80:	eb05 0e09 	add.w	lr, r5, r9
 8005e84:	f103 0420 	add.w	r4, r3, #32
 8005e88:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005e8c:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005e90:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8005e94:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005e98:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005e9c:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005ea0:	ed14 5a04 	vldr	s10, [r4, #-16]
 8005ea4:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005ea8:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005eac:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005eb0:	f006 0a0f 	and.w	sl, r6, #15
 8005eb4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005eb8:	edda 7a00 	vldr	s15, [sl]
 8005ebc:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005ec0:	0936      	lsrs	r6, r6, #4
 8005ec2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ec6:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005eca:	ed96 3a00 	vldr	s6, [r6]
 8005ece:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8005ed2:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005ed6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005eda:	f00b 0b0f 	and.w	fp, fp, #15
 8005ede:	edd6 3a00 	vldr	s7, [r6]
 8005ee2:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8005ee6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005eea:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005eee:	3504      	adds	r5, #4
 8005ef0:	ed9b 4a00 	vldr	s8, [fp]
 8005ef4:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005ef8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005efc:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005f00:	f00a 0a0f 	and.w	sl, sl, #15
 8005f04:	eddb 4a00 	vldr	s9, [fp]
 8005f08:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005f0c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005f10:	45ae      	cmp	lr, r5
 8005f12:	ed9a 5a00 	vldr	s10, [sl]
 8005f16:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8005f1a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f1e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005f22:	f006 060f 	and.w	r6, r6, #15
 8005f26:	edda 5a00 	vldr	s11, [sl]
 8005f2a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005f2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005f32:	f104 0420 	add.w	r4, r4, #32
 8005f36:	ed96 6a00 	vldr	s12, [r6]
 8005f3a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f42:	d1a1      	bne.n	8005e88 <ai_dict4_dot_array_f32+0x28>
 8005f44:	4449      	add	r1, r9
 8005f46:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005f4a:	459c      	cmp	ip, r3
 8005f4c:	d92d      	bls.n	8005faa <ai_dict4_dot_array_f32+0x14a>
 8005f4e:	f10c 0c07 	add.w	ip, ip, #7
 8005f52:	f103 0508 	add.w	r5, r3, #8
 8005f56:	ebac 0c05 	sub.w	ip, ip, r5
 8005f5a:	f02c 0407 	bic.w	r4, ip, #7
 8005f5e:	f103 0810 	add.w	r8, r3, #16
 8005f62:	44a0      	add	r8, r4
 8005f64:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8005f68:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005f6c:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005f70:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005f74:	f004 060f 	and.w	r6, r4, #15
 8005f78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005f7c:	0924      	lsrs	r4, r4, #4
 8005f7e:	edd6 7a00 	vldr	s15, [r6]
 8005f82:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005f86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005f8a:	ed94 6a00 	vldr	s12, [r4]
 8005f8e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f92:	3508      	adds	r5, #8
 8005f94:	45a8      	cmp	r8, r5
 8005f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f9a:	d1e5      	bne.n	8005f68 <ai_dict4_dot_array_f32+0x108>
 8005f9c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005fa0:	f10c 0c01 	add.w	ip, ip, #1
 8005fa4:	4461      	add	r1, ip
 8005fa6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005faa:	07fc      	lsls	r4, r7, #31
 8005fac:	d509      	bpl.n	8005fc2 <ai_dict4_dot_array_f32+0x162>
 8005fae:	7809      	ldrb	r1, [r1, #0]
 8005fb0:	edd3 7a00 	vldr	s15, [r3]
 8005fb4:	090b      	lsrs	r3, r1, #4
 8005fb6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005fba:	edd2 6a00 	vldr	s13, [r2]
 8005fbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005fc2:	edd0 7a00 	vldr	s15, [r0]
 8005fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fca:	ed80 7a00 	vstr	s14, [r0]
 8005fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd2:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005fd8 <ai_dict4_dot_array_f32+0x178>
 8005fd6:	e7b8      	b.n	8005f4a <ai_dict4_dot_array_f32+0xea>
 8005fd8:	00000000 	.word	0x00000000

08005fdc <forward_dense>:
 8005fdc:	6942      	ldr	r2, [r0, #20]
 8005fde:	8813      	ldrh	r3, [r2, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 81ca 	beq.w	800637a <forward_dense+0x39e>
 8005fe6:	6852      	ldr	r2, [r2, #4]
 8005fe8:	6850      	ldr	r0, [r2, #4]
 8005fea:	b100      	cbz	r0, 8005fee <forward_dense+0x12>
 8005fec:	6800      	ldr	r0, [r0, #0]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f240 81c0 	bls.w	8006374 <forward_dense+0x398>
 8005ff4:	6911      	ldr	r1, [r2, #16]
 8005ff6:	b101      	cbz	r1, 8005ffa <forward_dense+0x1e>
 8005ff8:	6809      	ldr	r1, [r1, #0]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	f000 81bf 	beq.w	800637e <forward_dense+0x3a2>
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	ed2d 8b10 	vpush	{d8-d15}
 8006008:	69d3      	ldr	r3, [r2, #28]
 800600a:	b091      	sub	sp, #68	; 0x44
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 820b 	beq.w	8006428 <forward_dense+0x44c>
 8006012:	681c      	ldr	r4, [r3, #0]
 8006014:	9408      	str	r4, [sp, #32]
 8006016:	f112 0418 	adds.w	r4, r2, #24
 800601a:	f000 81df 	beq.w	80063dc <forward_dense+0x400>
 800601e:	8b12      	ldrh	r2, [r2, #24]
 8006020:	2a01      	cmp	r2, #1
 8006022:	f240 81fe 	bls.w	8006422 <forward_dense+0x446>
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 81da 	beq.w	80063e0 <forward_dense+0x404>
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	9306      	str	r3, [sp, #24]
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	68cc      	ldr	r4, [r1, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	68c5      	ldr	r5, [r0, #12]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800603e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006042:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8006046:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800604a:	fa4c f505 	asr.w	r5, ip, r5
 800604e:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8006052:	950b      	str	r5, [sp, #44]	; 0x2c
 8006054:	2a04      	cmp	r2, #4
 8006056:	fb07 f506 	mul.w	r5, r7, r6
 800605a:	6864      	ldr	r4, [r4, #4]
 800605c:	9507      	str	r5, [sp, #28]
 800605e:	f000 81dd 	beq.w	800641c <forward_dense+0x440>
 8006062:	2a08      	cmp	r2, #8
 8006064:	f000 81da 	beq.w	800641c <forward_dense+0x440>
 8006068:	f04f 0a00 	mov.w	sl, #0
 800606c:	698a      	ldr	r2, [r1, #24]
 800606e:	6981      	ldr	r1, [r0, #24]
 8006070:	6890      	ldr	r0, [r2, #8]
 8006072:	9a08      	ldr	r2, [sp, #32]
 8006074:	9004      	str	r0, [sp, #16]
 8006076:	6952      	ldr	r2, [r2, #20]
 8006078:	688f      	ldr	r7, [r1, #8]
 800607a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800607e:	00a2      	lsls	r2, r4, #2
 8006080:	9209      	str	r2, [sp, #36]	; 0x24
 8006082:	1886      	adds	r6, r0, r2
 8006084:	9a07      	ldr	r2, [sp, #28]
 8006086:	2a00      	cmp	r2, #0
 8006088:	f000 81c3 	beq.w	8006412 <forward_dense+0x436>
 800608c:	f1a8 0210 	sub.w	r2, r8, #16
 8006090:	0912      	lsrs	r2, r2, #4
 8006092:	3201      	adds	r2, #1
 8006094:	0192      	lsls	r2, r2, #6
 8006096:	920c      	str	r2, [sp, #48]	; 0x30
 8006098:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800609c:	920a      	str	r2, [sp, #40]	; 0x28
 800609e:	689d      	ldr	r5, [r3, #8]
 80060a0:	9b06      	ldr	r3, [sp, #24]
 80060a2:	eddf aad0 	vldr	s21, [pc, #832]	; 80063e4 <forward_dense+0x408>
 80060a6:	2200      	movs	r2, #0
 80060a8:	9205      	str	r2, [sp, #20]
 80060aa:	f008 020f 	and.w	r2, r8, #15
 80060ae:	920d      	str	r2, [sp, #52]	; 0x34
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d043      	beq.n	800613c <forward_dense+0x160>
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	689c      	ldr	r4, [r3, #8]
 80060b8:	9b04      	ldr	r3, [sp, #16]
 80060ba:	f1ba 0f00 	cmp.w	sl, #0
 80060be:	d042      	beq.n	8006146 <forward_dense+0x16a>
 80060c0:	42b3      	cmp	r3, r6
 80060c2:	d22a      	bcs.n	800611a <forward_dense+0x13e>
 80060c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060c6:	469b      	mov	fp, r3
 80060c8:	ab0f      	add	r3, sp, #60	; 0x3c
 80060ca:	9303      	str	r3, [sp, #12]
 80060cc:	2a04      	cmp	r2, #4
 80060ce:	4633      	mov	r3, r6
 80060d0:	4646      	mov	r6, r8
 80060d2:	4698      	mov	r8, r3
 80060d4:	f000 8156 	beq.w	8006384 <forward_dense+0x3a8>
 80060d8:	2c00      	cmp	r4, #0
 80060da:	f000 8185 	beq.w	80063e8 <forward_dense+0x40c>
 80060de:	f8d4 c000 	ldr.w	ip, [r4]
 80060e2:	9803      	ldr	r0, [sp, #12]
 80060e4:	9600      	str	r6, [sp, #0]
 80060e6:	463b      	mov	r3, r7
 80060e8:	4629      	mov	r1, r5
 80060ea:	4652      	mov	r2, sl
 80060ec:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80060f0:	f7ff fde8 	bl	8005cc4 <ai_dict8_dot_array_f32>
 80060f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060f6:	f84b 3b04 	str.w	r3, [fp], #4
 80060fa:	45c3      	cmp	fp, r8
 80060fc:	f104 0404 	add.w	r4, r4, #4
 8006100:	444d      	add	r5, r9
 8006102:	d3e9      	bcc.n	80060d8 <forward_dense+0xfc>
 8006104:	4643      	mov	r3, r8
 8006106:	46b0      	mov	r8, r6
 8006108:	461e      	mov	r6, r3
 800610a:	9a04      	ldr	r2, [sp, #16]
 800610c:	43d3      	mvns	r3, r2
 800610e:	4433      	add	r3, r6
 8006110:	f023 0303 	bic.w	r3, r3, #3
 8006114:	3304      	adds	r3, #4
 8006116:	18d3      	adds	r3, r2, r3
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800611c:	9b05      	ldr	r3, [sp, #20]
 800611e:	4417      	add	r7, r2
 8006120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006122:	4416      	add	r6, r2
 8006124:	9a07      	ldr	r2, [sp, #28]
 8006126:	3301      	adds	r3, #1
 8006128:	4293      	cmp	r3, r2
 800612a:	9305      	str	r3, [sp, #20]
 800612c:	f000 8171 	beq.w	8006412 <forward_dense+0x436>
 8006130:	9b08      	ldr	r3, [sp, #32]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	689d      	ldr	r5, [r3, #8]
 8006136:	9b06      	ldr	r3, [sp, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1bb      	bne.n	80060b4 <forward_dense+0xd8>
 800613c:	461c      	mov	r4, r3
 800613e:	9b04      	ldr	r3, [sp, #16]
 8006140:	f1ba 0f00 	cmp.w	sl, #0
 8006144:	d1bc      	bne.n	80060c0 <forward_dense+0xe4>
 8006146:	42b3      	cmp	r3, r6
 8006148:	d2e7      	bcs.n	800611a <forward_dense+0x13e>
 800614a:	4618      	mov	r0, r3
 800614c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800614e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8006152:	eb07 0c03 	add.w	ip, r7, r3
 8006156:	469e      	mov	lr, r3
 8006158:	2c00      	cmp	r4, #0
 800615a:	f000 80ff 	beq.w	800635c <forward_dense+0x380>
 800615e:	f1b8 0f0f 	cmp.w	r8, #15
 8006162:	edd4 fa00 	vldr	s31, [r4]
 8006166:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80063e4 <forward_dense+0x408>
 800616a:	f104 0404 	add.w	r4, r4, #4
 800616e:	f240 80fd 	bls.w	800636c <forward_dense+0x390>
 8006172:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006176:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800617a:	4641      	mov	r1, r8
 800617c:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8006180:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006184:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8006188:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800618c:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8006190:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8006194:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8006198:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800619c:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 80061a0:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 80061a4:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 80061a8:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 80061ac:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 80061b0:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 80061b4:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 80061b8:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 80061bc:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80061c0:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 80061c4:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80061c8:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80061cc:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80061d0:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80061d4:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80061d8:	ed13 4a04 	vldr	s8, [r3, #-16]
 80061dc:	ed52 4a04 	vldr	s9, [r2, #-16]
 80061e0:	ed12 5a03 	vldr	s10, [r2, #-12]
 80061e4:	ed53 5a03 	vldr	s11, [r3, #-12]
 80061e8:	ed12 6a02 	vldr	s12, [r2, #-8]
 80061ec:	ed13 7a02 	vldr	s14, [r3, #-8]
 80061f0:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80061f4:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80061f8:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80061fc:	3910      	subs	r1, #16
 80061fe:	290f      	cmp	r1, #15
 8006200:	ed53 ea01 	vldr	s29, [r3, #-4]
 8006204:	ed12 ea01 	vldr	s28, [r2, #-4]
 8006208:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800620c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006210:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006214:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8006218:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800621c:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8006220:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006224:	eee8 7a88 	vfma.f32	s15, s17, s16
 8006228:	eee0 7a20 	vfma.f32	s15, s0, s1
 800622c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006230:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006234:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006238:	eee4 7a24 	vfma.f32	s15, s8, s9
 800623c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006240:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006244:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8006248:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800624c:	d896      	bhi.n	800617c <forward_dense+0x1a0>
 800624e:	eb05 010e 	add.w	r1, r5, lr
 8006252:	465b      	mov	r3, fp
 8006254:	4662      	mov	r2, ip
 8006256:	2b00      	cmp	r3, #0
 8006258:	d075      	beq.n	8006346 <forward_dense+0x36a>
 800625a:	ed91 7a00 	vldr	s14, [r1]
 800625e:	edd2 7a00 	vldr	s15, [r2]
 8006262:	2b01      	cmp	r3, #1
 8006264:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006268:	d06d      	beq.n	8006346 <forward_dense+0x36a>
 800626a:	ed91 7a01 	vldr	s14, [r1, #4]
 800626e:	edd2 7a01 	vldr	s15, [r2, #4]
 8006272:	2b02      	cmp	r3, #2
 8006274:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006278:	d065      	beq.n	8006346 <forward_dense+0x36a>
 800627a:	ed91 7a02 	vldr	s14, [r1, #8]
 800627e:	edd2 7a02 	vldr	s15, [r2, #8]
 8006282:	2b03      	cmp	r3, #3
 8006284:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006288:	d05d      	beq.n	8006346 <forward_dense+0x36a>
 800628a:	ed91 7a03 	vldr	s14, [r1, #12]
 800628e:	edd2 7a03 	vldr	s15, [r2, #12]
 8006292:	2b04      	cmp	r3, #4
 8006294:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006298:	d055      	beq.n	8006346 <forward_dense+0x36a>
 800629a:	ed91 7a04 	vldr	s14, [r1, #16]
 800629e:	edd2 7a04 	vldr	s15, [r2, #16]
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062a8:	d04d      	beq.n	8006346 <forward_dense+0x36a>
 80062aa:	ed91 7a05 	vldr	s14, [r1, #20]
 80062ae:	edd2 7a05 	vldr	s15, [r2, #20]
 80062b2:	2b06      	cmp	r3, #6
 80062b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062b8:	d045      	beq.n	8006346 <forward_dense+0x36a>
 80062ba:	ed91 7a06 	vldr	s14, [r1, #24]
 80062be:	edd2 7a06 	vldr	s15, [r2, #24]
 80062c2:	2b07      	cmp	r3, #7
 80062c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062c8:	d03d      	beq.n	8006346 <forward_dense+0x36a>
 80062ca:	ed91 7a07 	vldr	s14, [r1, #28]
 80062ce:	edd2 7a07 	vldr	s15, [r2, #28]
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062d8:	d035      	beq.n	8006346 <forward_dense+0x36a>
 80062da:	ed91 7a08 	vldr	s14, [r1, #32]
 80062de:	edd2 7a08 	vldr	s15, [r2, #32]
 80062e2:	2b09      	cmp	r3, #9
 80062e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062e8:	d02d      	beq.n	8006346 <forward_dense+0x36a>
 80062ea:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80062ee:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80062f2:	2b0a      	cmp	r3, #10
 80062f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062f8:	d025      	beq.n	8006346 <forward_dense+0x36a>
 80062fa:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80062fe:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006302:	2b0b      	cmp	r3, #11
 8006304:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006308:	d01d      	beq.n	8006346 <forward_dense+0x36a>
 800630a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800630e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8006312:	2b0c      	cmp	r3, #12
 8006314:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006318:	d015      	beq.n	8006346 <forward_dense+0x36a>
 800631a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800631e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006322:	2b0d      	cmp	r3, #13
 8006324:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006328:	d00d      	beq.n	8006346 <forward_dense+0x36a>
 800632a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800632e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006332:	2b0e      	cmp	r3, #14
 8006334:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006338:	d005      	beq.n	8006346 <forward_dense+0x36a>
 800633a:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800633e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006342:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006346:	444d      	add	r5, r9
 8006348:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800634c:	ece0 6a01 	vstmia	r0!, {s13}
 8006350:	42b0      	cmp	r0, r6
 8006352:	f4bf aeda 	bcs.w	800610a <forward_dense+0x12e>
 8006356:	2c00      	cmp	r4, #0
 8006358:	f47f af01 	bne.w	800615e <forward_dense+0x182>
 800635c:	f1b8 0f0f 	cmp.w	r8, #15
 8006360:	eef0 fa6a 	vmov.f32	s31, s21
 8006364:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80063e4 <forward_dense+0x408>
 8006368:	f63f af03 	bhi.w	8006172 <forward_dense+0x196>
 800636c:	4643      	mov	r3, r8
 800636e:	4629      	mov	r1, r5
 8006370:	463a      	mov	r2, r7
 8006372:	e770      	b.n	8006256 <forward_dense+0x27a>
 8006374:	2300      	movs	r3, #0
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	deff      	udf	#255	; 0xff
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	deff      	udf	#255	; 0xff
 800637e:	2300      	movs	r3, #0
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	deff      	udf	#255	; 0xff
 8006384:	b1ac      	cbz	r4, 80063b2 <forward_dense+0x3d6>
 8006386:	f8d4 c000 	ldr.w	ip, [r4]
 800638a:	9803      	ldr	r0, [sp, #12]
 800638c:	9600      	str	r6, [sp, #0]
 800638e:	463b      	mov	r3, r7
 8006390:	4629      	mov	r1, r5
 8006392:	4652      	mov	r2, sl
 8006394:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006398:	f7ff fd62 	bl	8005e60 <ai_dict4_dot_array_f32>
 800639c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800639e:	f84b 3b04 	str.w	r3, [fp], #4
 80063a2:	45c3      	cmp	fp, r8
 80063a4:	f104 0404 	add.w	r4, r4, #4
 80063a8:	444d      	add	r5, r9
 80063aa:	f4bf aeab 	bcs.w	8006104 <forward_dense+0x128>
 80063ae:	2c00      	cmp	r4, #0
 80063b0:	d1e9      	bne.n	8006386 <forward_dense+0x3aa>
 80063b2:	4634      	mov	r4, r6
 80063b4:	4646      	mov	r6, r8
 80063b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063ba:	9400      	str	r4, [sp, #0]
 80063bc:	463b      	mov	r3, r7
 80063be:	4629      	mov	r1, r5
 80063c0:	4652      	mov	r2, sl
 80063c2:	4640      	mov	r0, r8
 80063c4:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80063c8:	f7ff fd4a 	bl	8005e60 <ai_dict4_dot_array_f32>
 80063cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ce:	f84b 3b04 	str.w	r3, [fp], #4
 80063d2:	45b3      	cmp	fp, r6
 80063d4:	444d      	add	r5, r9
 80063d6:	d3f0      	bcc.n	80063ba <forward_dense+0x3de>
 80063d8:	46a0      	mov	r8, r4
 80063da:	e696      	b.n	800610a <forward_dense+0x12e>
 80063dc:	9406      	str	r4, [sp, #24]
 80063de:	e627      	b.n	8006030 <forward_dense+0x54>
 80063e0:	9306      	str	r3, [sp, #24]
 80063e2:	e625      	b.n	8006030 <forward_dense+0x54>
 80063e4:	00000000 	.word	0x00000000
 80063e8:	4634      	mov	r4, r6
 80063ea:	4646      	mov	r6, r8
 80063ec:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063f0:	9400      	str	r4, [sp, #0]
 80063f2:	463b      	mov	r3, r7
 80063f4:	4629      	mov	r1, r5
 80063f6:	4652      	mov	r2, sl
 80063f8:	4640      	mov	r0, r8
 80063fa:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80063fe:	f7ff fc61 	bl	8005cc4 <ai_dict8_dot_array_f32>
 8006402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006404:	f84b 3b04 	str.w	r3, [fp], #4
 8006408:	45b3      	cmp	fp, r6
 800640a:	444d      	add	r5, r9
 800640c:	d3f0      	bcc.n	80063f0 <forward_dense+0x414>
 800640e:	46a0      	mov	r8, r4
 8006410:	e67b      	b.n	800610a <forward_dense+0x12e>
 8006412:	b011      	add	sp, #68	; 0x44
 8006414:	ecbd 8b10 	vpop	{d8-d15}
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8006420:	e624      	b.n	800606c <forward_dense+0x90>
 8006422:	2300      	movs	r3, #0
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	e603      	b.n	8006030 <forward_dense+0x54>
 8006428:	9308      	str	r3, [sp, #32]
 800642a:	e5f4      	b.n	8006016 <forward_dense+0x3a>

0800642c <nl_func_relu_generic_array_f32>:
 800642c:	b430      	push	{r4, r5}
 800642e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006432:	6880      	ldr	r0, [r0, #8]
 8006434:	688c      	ldr	r4, [r1, #8]
 8006436:	ed93 7a00 	vldr	s14, [r3]
 800643a:	ed93 6a01 	vldr	s12, [r3, #4]
 800643e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006442:	3a01      	subs	r2, #1
 8006444:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006448:	0092      	lsls	r2, r2, #2
 800644a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644e:	4410      	add	r0, r2
 8006450:	4422      	add	r2, r4
 8006452:	d421      	bmi.n	8006498 <nl_func_relu_generic_array_f32+0x6c>
 8006454:	42a2      	cmp	r2, r4
 8006456:	d33d      	bcc.n	80064d4 <nl_func_relu_generic_array_f32+0xa8>
 8006458:	1d13      	adds	r3, r2, #4
 800645a:	1d02      	adds	r2, r0, #4
 800645c:	e010      	b.n	8006480 <nl_func_relu_generic_array_f32+0x54>
 800645e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006466:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800646a:	dd01      	ble.n	8006470 <nl_func_relu_generic_array_f32+0x44>
 800646c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006470:	ed62 7a01 	vstmdb	r2!, {s15}
 8006474:	6888      	ldr	r0, [r1, #8]
 8006476:	f1a3 0408 	sub.w	r4, r3, #8
 800647a:	4284      	cmp	r4, r0
 800647c:	462b      	mov	r3, r5
 800647e:	d329      	bcc.n	80064d4 <nl_func_relu_generic_array_f32+0xa8>
 8006480:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006484:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648c:	f1a3 0504 	sub.w	r5, r3, #4
 8006490:	dce5      	bgt.n	800645e <nl_func_relu_generic_array_f32+0x32>
 8006492:	eef0 7a66 	vmov.f32	s15, s13
 8006496:	e7eb      	b.n	8006470 <nl_func_relu_generic_array_f32+0x44>
 8006498:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800649c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a0:	d01a      	beq.n	80064d8 <nl_func_relu_generic_array_f32+0xac>
 80064a2:	42a2      	cmp	r2, r4
 80064a4:	d316      	bcc.n	80064d4 <nl_func_relu_generic_array_f32+0xa8>
 80064a6:	1d13      	adds	r3, r2, #4
 80064a8:	1d02      	adds	r2, r0, #4
 80064aa:	ed53 7a01 	vldr	s15, [r3, #-4]
 80064ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80064b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b6:	f1a3 0408 	sub.w	r4, r3, #8
 80064ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064be:	f1a3 0004 	sub.w	r0, r3, #4
 80064c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80064c6:	4623      	mov	r3, r4
 80064c8:	d51e      	bpl.n	8006508 <nl_func_relu_generic_array_f32+0xdc>
 80064ca:	ed62 6a01 	vstmdb	r2!, {s13}
 80064ce:	688b      	ldr	r3, [r1, #8]
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d91e      	bls.n	8006512 <nl_func_relu_generic_array_f32+0xe6>
 80064d4:	bc30      	pop	{r4, r5}
 80064d6:	4770      	bx	lr
 80064d8:	42a2      	cmp	r2, r4
 80064da:	d3fb      	bcc.n	80064d4 <nl_func_relu_generic_array_f32+0xa8>
 80064dc:	1d13      	adds	r3, r2, #4
 80064de:	2500      	movs	r5, #0
 80064e0:	1d02      	adds	r2, r0, #4
 80064e2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80064e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064ea:	f1a3 0408 	sub.w	r4, r3, #8
 80064ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f2:	f1a3 0004 	sub.w	r0, r3, #4
 80064f6:	4623      	mov	r3, r4
 80064f8:	d80d      	bhi.n	8006516 <nl_func_relu_generic_array_f32+0xea>
 80064fa:	ed62 7a01 	vstmdb	r2!, {s15}
 80064fe:	688b      	ldr	r3, [r1, #8]
 8006500:	42a3      	cmp	r3, r4
 8006502:	d8e7      	bhi.n	80064d4 <nl_func_relu_generic_array_f32+0xa8>
 8006504:	4603      	mov	r3, r0
 8006506:	e7ec      	b.n	80064e2 <nl_func_relu_generic_array_f32+0xb6>
 8006508:	ed62 7a01 	vstmdb	r2!, {s15}
 800650c:	688c      	ldr	r4, [r1, #8]
 800650e:	429c      	cmp	r4, r3
 8006510:	d8e0      	bhi.n	80064d4 <nl_func_relu_generic_array_f32+0xa8>
 8006512:	4603      	mov	r3, r0
 8006514:	e7c9      	b.n	80064aa <nl_func_relu_generic_array_f32+0x7e>
 8006516:	f842 5d04 	str.w	r5, [r2, #-4]!
 800651a:	688c      	ldr	r4, [r1, #8]
 800651c:	429c      	cmp	r4, r3
 800651e:	d8d9      	bhi.n	80064d4 <nl_func_relu_generic_array_f32+0xa8>
 8006520:	4603      	mov	r3, r0
 8006522:	e7de      	b.n	80064e2 <nl_func_relu_generic_array_f32+0xb6>

08006524 <forward_relu>:
 8006524:	6942      	ldr	r2, [r0, #20]
 8006526:	8813      	ldrh	r3, [r2, #0]
 8006528:	b33b      	cbz	r3, 800657a <forward_relu+0x56>
 800652a:	b470      	push	{r4, r5, r6}
 800652c:	6852      	ldr	r2, [r2, #4]
 800652e:	6856      	ldr	r6, [r2, #4]
 8006530:	b106      	cbz	r6, 8006534 <forward_relu+0x10>
 8006532:	6836      	ldr	r6, [r6, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d91d      	bls.n	8006574 <forward_relu+0x50>
 8006538:	6913      	ldr	r3, [r2, #16]
 800653a:	b103      	cbz	r3, 800653e <forward_relu+0x1a>
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6982      	ldr	r2, [r0, #24]
 8006540:	68b4      	ldr	r4, [r6, #8]
 8006542:	6998      	ldr	r0, [r3, #24]
 8006544:	69b1      	ldr	r1, [r6, #24]
 8006546:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800654a:	2a00      	cmp	r2, #0
 800654c:	d041      	beq.n	80065d2 <forward_relu+0xae>
 800654e:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8006552:	2d01      	cmp	r5, #1
 8006554:	d013      	beq.n	800657e <forward_relu+0x5a>
 8006556:	2c00      	cmp	r4, #0
 8006558:	d06f      	beq.n	800663a <forward_relu+0x116>
 800655a:	68f6      	ldr	r6, [r6, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006562:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006566:	42a6      	cmp	r6, r4
 8006568:	fb05 f202 	mul.w	r2, r5, r2
 800656c:	d1f9      	bne.n	8006562 <forward_relu+0x3e>
 800656e:	bc70      	pop	{r4, r5, r6}
 8006570:	f7ff bf5c 	b.w	800642c <nl_func_relu_generic_array_f32>
 8006574:	2300      	movs	r3, #0
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	deff      	udf	#255	; 0xff
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	deff      	udf	#255	; 0xff
 800657e:	6880      	ldr	r0, [r0, #8]
 8006580:	688a      	ldr	r2, [r1, #8]
 8006582:	ed93 7a00 	vldr	s14, [r3]
 8006586:	b184      	cbz	r4, 80065aa <forward_relu+0x86>
 8006588:	68f6      	ldr	r6, [r6, #12]
 800658a:	462b      	mov	r3, r5
 800658c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006590:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006594:	42a6      	cmp	r6, r4
 8006596:	fb05 f303 	mul.w	r3, r5, r3
 800659a:	d1f9      	bne.n	8006590 <forward_relu+0x6c>
 800659c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065a0:	3b01      	subs	r3, #1
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	18d2      	adds	r2, r2, r3
 80065a6:	4418      	add	r0, r3
 80065a8:	d23d      	bcs.n	8006626 <forward_relu+0x102>
 80065aa:	1d13      	adds	r3, r2, #4
 80065ac:	2500      	movs	r5, #0
 80065ae:	1d02      	adds	r2, r0, #4
 80065b0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80065b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065bc:	f1a3 0004 	sub.w	r0, r3, #4
 80065c0:	d833      	bhi.n	800662a <forward_relu+0x106>
 80065c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80065c6:	688c      	ldr	r4, [r1, #8]
 80065c8:	3b08      	subs	r3, #8
 80065ca:	429c      	cmp	r4, r3
 80065cc:	d82b      	bhi.n	8006626 <forward_relu+0x102>
 80065ce:	4603      	mov	r3, r0
 80065d0:	e7ee      	b.n	80065b0 <forward_relu+0x8c>
 80065d2:	6880      	ldr	r0, [r0, #8]
 80065d4:	688b      	ldr	r3, [r1, #8]
 80065d6:	b184      	cbz	r4, 80065fa <forward_relu+0xd6>
 80065d8:	68f6      	ldr	r6, [r6, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80065e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065e4:	42a6      	cmp	r6, r4
 80065e6:	fb05 f202 	mul.w	r2, r5, r2
 80065ea:	d1f9      	bne.n	80065e0 <forward_relu+0xbc>
 80065ec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80065f0:	3a01      	subs	r2, #1
 80065f2:	0092      	lsls	r2, r2, #2
 80065f4:	189b      	adds	r3, r3, r2
 80065f6:	4410      	add	r0, r2
 80065f8:	d215      	bcs.n	8006626 <forward_relu+0x102>
 80065fa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006640 <forward_relu+0x11c>
 80065fe:	3304      	adds	r3, #4
 8006600:	3004      	adds	r0, #4
 8006602:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800660a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660e:	bfb8      	it	lt
 8006610:	eef0 7a47 	vmovlt.f32	s15, s14
 8006614:	ed60 7a01 	vstmdb	r0!, {s15}
 8006618:	688c      	ldr	r4, [r1, #8]
 800661a:	f1a3 0208 	sub.w	r2, r3, #8
 800661e:	4294      	cmp	r4, r2
 8006620:	f1a3 0304 	sub.w	r3, r3, #4
 8006624:	d9ed      	bls.n	8006602 <forward_relu+0xde>
 8006626:	bc70      	pop	{r4, r5, r6}
 8006628:	4770      	bx	lr
 800662a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800662e:	688c      	ldr	r4, [r1, #8]
 8006630:	3b08      	subs	r3, #8
 8006632:	429c      	cmp	r4, r3
 8006634:	d8f7      	bhi.n	8006626 <forward_relu+0x102>
 8006636:	4603      	mov	r3, r0
 8006638:	e7ba      	b.n	80065b0 <forward_relu+0x8c>
 800663a:	2201      	movs	r2, #1
 800663c:	e797      	b.n	800656e <forward_relu+0x4a>
 800663e:	bf00      	nop
 8006640:	00000000 	.word	0x00000000

08006644 <ai_check_custom_types>:
 8006644:	4b13      	ldr	r3, [pc, #76]	; (8006694 <ai_check_custom_types+0x50>)
 8006646:	b082      	sub	sp, #8
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	b118      	cbz	r0, 8006656 <ai_check_custom_types+0x12>
 800664e:	7803      	ldrb	r3, [r0, #0]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d002      	beq.n	800665a <ai_check_custom_types+0x16>
 8006654:	2000      	movs	r0, #0
 8006656:	b002      	add	sp, #8
 8006658:	4770      	bx	lr
 800665a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <ai_check_custom_types+0x28>
 8006662:	2001      	movs	r0, #1
 8006664:	f080 0001 	eor.w	r0, r0, #1
 8006668:	b002      	add	sp, #8
 800666a:	4770      	bx	lr
 800666c:	7842      	ldrb	r2, [r0, #1]
 800666e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006672:	429a      	cmp	r2, r3
 8006674:	f100 0001 	add.w	r0, r0, #1
 8006678:	d1f3      	bne.n	8006662 <ai_check_custom_types+0x1e>
 800667a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800667e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006682:	429a      	cmp	r2, r3
 8006684:	d1ed      	bne.n	8006662 <ai_check_custom_types+0x1e>
 8006686:	7842      	ldrb	r2, [r0, #1]
 8006688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800668c:	429a      	cmp	r2, r3
 800668e:	d1e8      	bne.n	8006662 <ai_check_custom_types+0x1e>
 8006690:	2000      	movs	r0, #0
 8006692:	e7e7      	b.n	8006664 <ai_check_custom_types+0x20>
 8006694:	08008a00 	.word	0x08008a00

08006698 <ai_layers_forward_all>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800669c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800669e:	4604      	mov	r4, r0
 80066a0:	b31e      	cbz	r6, 80066ea <ai_layers_forward_all+0x52>
 80066a2:	b1cd      	cbz	r5, 80066d8 <ai_layers_forward_all+0x40>
 80066a4:	6545      	str	r5, [r0, #84]	; 0x54
 80066a6:	4629      	mov	r1, r5
 80066a8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80066aa:	2001      	movs	r0, #1
 80066ac:	47b0      	blx	r6
 80066ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80066b0:	2700      	movs	r7, #0
 80066b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80066b4:	2002      	movs	r0, #2
 80066b6:	47b0      	blx	r6
 80066b8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80066ba:	692b      	ldr	r3, [r5, #16]
 80066bc:	4628      	mov	r0, r5
 80066be:	4798      	blx	r3
 80066c0:	68eb      	ldr	r3, [r5, #12]
 80066c2:	429d      	cmp	r5, r3
 80066c4:	f04f 0003 	mov.w	r0, #3
 80066c8:	4619      	mov	r1, r3
 80066ca:	d006      	beq.n	80066da <ai_layers_forward_all+0x42>
 80066cc:	6563      	str	r3, [r4, #84]	; 0x54
 80066ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80066d0:	47b0      	blx	r6
 80066d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80066d4:	2900      	cmp	r1, #0
 80066d6:	d1ec      	bne.n	80066b2 <ai_layers_forward_all+0x1a>
 80066d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066da:	2100      	movs	r1, #0
 80066dc:	6567      	str	r7, [r4, #84]	; 0x54
 80066de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80066e0:	47b0      	blx	r6
 80066e2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80066e4:	2900      	cmp	r1, #0
 80066e6:	d1e4      	bne.n	80066b2 <ai_layers_forward_all+0x1a>
 80066e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	d0f4      	beq.n	80066d8 <ai_layers_forward_all+0x40>
 80066ee:	6545      	str	r5, [r0, #84]	; 0x54
 80066f0:	692b      	ldr	r3, [r5, #16]
 80066f2:	4628      	mov	r0, r5
 80066f4:	4798      	blx	r3
 80066f6:	68eb      	ldr	r3, [r5, #12]
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	d004      	beq.n	8006706 <ai_layers_forward_all+0x6e>
 80066fc:	6563      	str	r3, [r4, #84]	; 0x54
 80066fe:	461d      	mov	r5, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f5      	bne.n	80066f0 <ai_layers_forward_all+0x58>
 8006704:	e7e8      	b.n	80066d8 <ai_layers_forward_all+0x40>
 8006706:	2300      	movs	r3, #0
 8006708:	6563      	str	r3, [r4, #84]	; 0x54
 800670a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800670c <ai_array_to_buffer_fmt>:
 800670c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006710:	2b02      	cmp	r3, #2
 8006712:	d01f      	beq.n	8006754 <ai_array_to_buffer_fmt+0x48>
 8006714:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <ai_array_to_buffer_fmt+0x7c>)
 8006716:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800671a:	4293      	cmp	r3, r2
 800671c:	d00a      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 800671e:	dc0d      	bgt.n	800673c <ai_array_to_buffer_fmt+0x30>
 8006720:	4a1a      	ldr	r2, [pc, #104]	; (800678c <ai_array_to_buffer_fmt+0x80>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d006      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 8006726:	dd1d      	ble.n	8006764 <ai_array_to_buffer_fmt+0x58>
 8006728:	4a19      	ldr	r2, [pc, #100]	; (8006790 <ai_array_to_buffer_fmt+0x84>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d002      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 800672e:	320f      	adds	r2, #15
 8006730:	4293      	cmp	r3, r2
 8006732:	d10d      	bne.n	8006750 <ai_array_to_buffer_fmt+0x44>
 8006734:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006738:	4318      	orrs	r0, r3
 800673a:	4770      	bx	lr
 800673c:	4a15      	ldr	r2, [pc, #84]	; (8006794 <ai_array_to_buffer_fmt+0x88>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d0f8      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 8006742:	dd18      	ble.n	8006776 <ai_array_to_buffer_fmt+0x6a>
 8006744:	4a14      	ldr	r2, [pc, #80]	; (8006798 <ai_array_to_buffer_fmt+0x8c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d0f4      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 800674a:	4a14      	ldr	r2, [pc, #80]	; (800679c <ai_array_to_buffer_fmt+0x90>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d0f1      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	e7ef      	b.n	8006734 <ai_array_to_buffer_fmt+0x28>
 8006754:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <ai_array_to_buffer_fmt+0x94>)
 8006756:	4003      	ands	r3, r0
 8006758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800675c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006760:	4318      	orrs	r0, r3
 8006762:	4770      	bx	lr
 8006764:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8006768:	4293      	cmp	r3, r2
 800676a:	d0e3      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 800676c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006770:	4293      	cmp	r3, r2
 8006772:	d0df      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 8006774:	e7ec      	b.n	8006750 <ai_array_to_buffer_fmt+0x44>
 8006776:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800677a:	4293      	cmp	r3, r2
 800677c:	d0da      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 800677e:	3207      	adds	r2, #7
 8006780:	4293      	cmp	r3, r2
 8006782:	d0d7      	beq.n	8006734 <ai_array_to_buffer_fmt+0x28>
 8006784:	e7e4      	b.n	8006750 <ai_array_to_buffer_fmt+0x44>
 8006786:	bf00      	nop
 8006788:	00840040 	.word	0x00840040
 800678c:	00040447 	.word	0x00040447
 8006790:	00040840 	.word	0x00040840
 8006794:	00840840 	.word	0x00840840
 8006798:	0084084f 	.word	0x0084084f
 800679c:	01821040 	.word	0x01821040
 80067a0:	00803fff 	.word	0x00803fff

080067a4 <ai_array_get_byte_size>:
 80067a4:	b1c1      	cbz	r1, 80067d8 <ai_array_get_byte_size+0x34>
 80067a6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80067aa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80067ae:	4413      	add	r3, r2
 80067b0:	fb01 f103 	mul.w	r1, r1, r3
 80067b4:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80067b8:	3107      	adds	r1, #7
 80067ba:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80067be:	f021 0107 	bic.w	r1, r1, #7
 80067c2:	2804      	cmp	r0, #4
 80067c4:	fa21 f102 	lsr.w	r1, r1, r2
 80067c8:	d008      	beq.n	80067dc <ai_array_get_byte_size+0x38>
 80067ca:	2808      	cmp	r0, #8
 80067cc:	d101      	bne.n	80067d2 <ai_array_get_byte_size+0x2e>
 80067ce:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80067d2:	3107      	adds	r1, #7
 80067d4:	08c8      	lsrs	r0, r1, #3
 80067d6:	4770      	bx	lr
 80067d8:	4608      	mov	r0, r1
 80067da:	4770      	bx	lr
 80067dc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80067e0:	3107      	adds	r1, #7
 80067e2:	08c8      	lsrs	r0, r1, #3
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop

080067e8 <__errno>:
 80067e8:	4b01      	ldr	r3, [pc, #4]	; (80067f0 <__errno+0x8>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20001568 	.word	0x20001568

080067f4 <__libc_init_array>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	4e0d      	ldr	r6, [pc, #52]	; (800682c <__libc_init_array+0x38>)
 80067f8:	4c0d      	ldr	r4, [pc, #52]	; (8006830 <__libc_init_array+0x3c>)
 80067fa:	1ba4      	subs	r4, r4, r6
 80067fc:	10a4      	asrs	r4, r4, #2
 80067fe:	2500      	movs	r5, #0
 8006800:	42a5      	cmp	r5, r4
 8006802:	d109      	bne.n	8006818 <__libc_init_array+0x24>
 8006804:	4e0b      	ldr	r6, [pc, #44]	; (8006834 <__libc_init_array+0x40>)
 8006806:	4c0c      	ldr	r4, [pc, #48]	; (8006838 <__libc_init_array+0x44>)
 8006808:	f002 f860 	bl	80088cc <_init>
 800680c:	1ba4      	subs	r4, r4, r6
 800680e:	10a4      	asrs	r4, r4, #2
 8006810:	2500      	movs	r5, #0
 8006812:	42a5      	cmp	r5, r4
 8006814:	d105      	bne.n	8006822 <__libc_init_array+0x2e>
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800681c:	4798      	blx	r3
 800681e:	3501      	adds	r5, #1
 8006820:	e7ee      	b.n	8006800 <__libc_init_array+0xc>
 8006822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006826:	4798      	blx	r3
 8006828:	3501      	adds	r5, #1
 800682a:	e7f2      	b.n	8006812 <__libc_init_array+0x1e>
 800682c:	0800f3e8 	.word	0x0800f3e8
 8006830:	0800f3e8 	.word	0x0800f3e8
 8006834:	0800f3e8 	.word	0x0800f3e8
 8006838:	0800f3ec 	.word	0x0800f3ec

0800683c <malloc>:
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <malloc+0xc>)
 800683e:	4601      	mov	r1, r0
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	f000 b865 	b.w	8006910 <_malloc_r>
 8006846:	bf00      	nop
 8006848:	20001568 	.word	0x20001568

0800684c <memcpy>:
 800684c:	b510      	push	{r4, lr}
 800684e:	1e43      	subs	r3, r0, #1
 8006850:	440a      	add	r2, r1
 8006852:	4291      	cmp	r1, r2
 8006854:	d100      	bne.n	8006858 <memcpy+0xc>
 8006856:	bd10      	pop	{r4, pc}
 8006858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006860:	e7f7      	b.n	8006852 <memcpy+0x6>

08006862 <memset>:
 8006862:	4402      	add	r2, r0
 8006864:	4603      	mov	r3, r0
 8006866:	4293      	cmp	r3, r2
 8006868:	d100      	bne.n	800686c <memset+0xa>
 800686a:	4770      	bx	lr
 800686c:	f803 1b01 	strb.w	r1, [r3], #1
 8006870:	e7f9      	b.n	8006866 <memset+0x4>
	...

08006874 <_free_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4605      	mov	r5, r0
 8006878:	2900      	cmp	r1, #0
 800687a:	d045      	beq.n	8006908 <_free_r+0x94>
 800687c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006880:	1f0c      	subs	r4, r1, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfb8      	it	lt
 8006886:	18e4      	addlt	r4, r4, r3
 8006888:	f001 fb7c 	bl	8007f84 <__malloc_lock>
 800688c:	4a1f      	ldr	r2, [pc, #124]	; (800690c <_free_r+0x98>)
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	4610      	mov	r0, r2
 8006892:	b933      	cbnz	r3, 80068a2 <_free_r+0x2e>
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	6014      	str	r4, [r2, #0]
 8006898:	4628      	mov	r0, r5
 800689a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800689e:	f001 bb72 	b.w	8007f86 <__malloc_unlock>
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	d90c      	bls.n	80068c0 <_free_r+0x4c>
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	1862      	adds	r2, r4, r1
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bf04      	itt	eq
 80068ae:	681a      	ldreq	r2, [r3, #0]
 80068b0:	685b      	ldreq	r3, [r3, #4]
 80068b2:	6063      	str	r3, [r4, #4]
 80068b4:	bf04      	itt	eq
 80068b6:	1852      	addeq	r2, r2, r1
 80068b8:	6022      	streq	r2, [r4, #0]
 80068ba:	6004      	str	r4, [r0, #0]
 80068bc:	e7ec      	b.n	8006898 <_free_r+0x24>
 80068be:	4613      	mov	r3, r2
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	b10a      	cbz	r2, 80068c8 <_free_r+0x54>
 80068c4:	42a2      	cmp	r2, r4
 80068c6:	d9fa      	bls.n	80068be <_free_r+0x4a>
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	1858      	adds	r0, r3, r1
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	d10b      	bne.n	80068e8 <_free_r+0x74>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	4401      	add	r1, r0
 80068d4:	1858      	adds	r0, r3, r1
 80068d6:	4282      	cmp	r2, r0
 80068d8:	6019      	str	r1, [r3, #0]
 80068da:	d1dd      	bne.n	8006898 <_free_r+0x24>
 80068dc:	6810      	ldr	r0, [r2, #0]
 80068de:	6852      	ldr	r2, [r2, #4]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	4401      	add	r1, r0
 80068e4:	6019      	str	r1, [r3, #0]
 80068e6:	e7d7      	b.n	8006898 <_free_r+0x24>
 80068e8:	d902      	bls.n	80068f0 <_free_r+0x7c>
 80068ea:	230c      	movs	r3, #12
 80068ec:	602b      	str	r3, [r5, #0]
 80068ee:	e7d3      	b.n	8006898 <_free_r+0x24>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	1821      	adds	r1, r4, r0
 80068f4:	428a      	cmp	r2, r1
 80068f6:	bf04      	itt	eq
 80068f8:	6811      	ldreq	r1, [r2, #0]
 80068fa:	6852      	ldreq	r2, [r2, #4]
 80068fc:	6062      	str	r2, [r4, #4]
 80068fe:	bf04      	itt	eq
 8006900:	1809      	addeq	r1, r1, r0
 8006902:	6021      	streq	r1, [r4, #0]
 8006904:	605c      	str	r4, [r3, #4]
 8006906:	e7c7      	b.n	8006898 <_free_r+0x24>
 8006908:	bd38      	pop	{r3, r4, r5, pc}
 800690a:	bf00      	nop
 800690c:	2000183c 	.word	0x2000183c

08006910 <_malloc_r>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	1ccd      	adds	r5, r1, #3
 8006914:	f025 0503 	bic.w	r5, r5, #3
 8006918:	3508      	adds	r5, #8
 800691a:	2d0c      	cmp	r5, #12
 800691c:	bf38      	it	cc
 800691e:	250c      	movcc	r5, #12
 8006920:	2d00      	cmp	r5, #0
 8006922:	4606      	mov	r6, r0
 8006924:	db01      	blt.n	800692a <_malloc_r+0x1a>
 8006926:	42a9      	cmp	r1, r5
 8006928:	d903      	bls.n	8006932 <_malloc_r+0x22>
 800692a:	230c      	movs	r3, #12
 800692c:	6033      	str	r3, [r6, #0]
 800692e:	2000      	movs	r0, #0
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	f001 fb27 	bl	8007f84 <__malloc_lock>
 8006936:	4a21      	ldr	r2, [pc, #132]	; (80069bc <_malloc_r+0xac>)
 8006938:	6814      	ldr	r4, [r2, #0]
 800693a:	4621      	mov	r1, r4
 800693c:	b991      	cbnz	r1, 8006964 <_malloc_r+0x54>
 800693e:	4c20      	ldr	r4, [pc, #128]	; (80069c0 <_malloc_r+0xb0>)
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	b91b      	cbnz	r3, 800694c <_malloc_r+0x3c>
 8006944:	4630      	mov	r0, r6
 8006946:	f000 fc99 	bl	800727c <_sbrk_r>
 800694a:	6020      	str	r0, [r4, #0]
 800694c:	4629      	mov	r1, r5
 800694e:	4630      	mov	r0, r6
 8006950:	f000 fc94 	bl	800727c <_sbrk_r>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d124      	bne.n	80069a2 <_malloc_r+0x92>
 8006958:	230c      	movs	r3, #12
 800695a:	6033      	str	r3, [r6, #0]
 800695c:	4630      	mov	r0, r6
 800695e:	f001 fb12 	bl	8007f86 <__malloc_unlock>
 8006962:	e7e4      	b.n	800692e <_malloc_r+0x1e>
 8006964:	680b      	ldr	r3, [r1, #0]
 8006966:	1b5b      	subs	r3, r3, r5
 8006968:	d418      	bmi.n	800699c <_malloc_r+0x8c>
 800696a:	2b0b      	cmp	r3, #11
 800696c:	d90f      	bls.n	800698e <_malloc_r+0x7e>
 800696e:	600b      	str	r3, [r1, #0]
 8006970:	50cd      	str	r5, [r1, r3]
 8006972:	18cc      	adds	r4, r1, r3
 8006974:	4630      	mov	r0, r6
 8006976:	f001 fb06 	bl	8007f86 <__malloc_unlock>
 800697a:	f104 000b 	add.w	r0, r4, #11
 800697e:	1d23      	adds	r3, r4, #4
 8006980:	f020 0007 	bic.w	r0, r0, #7
 8006984:	1ac3      	subs	r3, r0, r3
 8006986:	d0d3      	beq.n	8006930 <_malloc_r+0x20>
 8006988:	425a      	negs	r2, r3
 800698a:	50e2      	str	r2, [r4, r3]
 800698c:	e7d0      	b.n	8006930 <_malloc_r+0x20>
 800698e:	428c      	cmp	r4, r1
 8006990:	684b      	ldr	r3, [r1, #4]
 8006992:	bf16      	itet	ne
 8006994:	6063      	strne	r3, [r4, #4]
 8006996:	6013      	streq	r3, [r2, #0]
 8006998:	460c      	movne	r4, r1
 800699a:	e7eb      	b.n	8006974 <_malloc_r+0x64>
 800699c:	460c      	mov	r4, r1
 800699e:	6849      	ldr	r1, [r1, #4]
 80069a0:	e7cc      	b.n	800693c <_malloc_r+0x2c>
 80069a2:	1cc4      	adds	r4, r0, #3
 80069a4:	f024 0403 	bic.w	r4, r4, #3
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d005      	beq.n	80069b8 <_malloc_r+0xa8>
 80069ac:	1a21      	subs	r1, r4, r0
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 fc64 	bl	800727c <_sbrk_r>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d0cf      	beq.n	8006958 <_malloc_r+0x48>
 80069b8:	6025      	str	r5, [r4, #0]
 80069ba:	e7db      	b.n	8006974 <_malloc_r+0x64>
 80069bc:	2000183c 	.word	0x2000183c
 80069c0:	20001840 	.word	0x20001840

080069c4 <__cvt>:
 80069c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	ec55 4b10 	vmov	r4, r5, d0
 80069cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80069ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	460e      	mov	r6, r1
 80069d6:	4691      	mov	r9, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	bfb8      	it	lt
 80069dc:	4622      	movlt	r2, r4
 80069de:	462b      	mov	r3, r5
 80069e0:	f027 0720 	bic.w	r7, r7, #32
 80069e4:	bfbb      	ittet	lt
 80069e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069ea:	461d      	movlt	r5, r3
 80069ec:	2300      	movge	r3, #0
 80069ee:	232d      	movlt	r3, #45	; 0x2d
 80069f0:	bfb8      	it	lt
 80069f2:	4614      	movlt	r4, r2
 80069f4:	2f46      	cmp	r7, #70	; 0x46
 80069f6:	700b      	strb	r3, [r1, #0]
 80069f8:	d004      	beq.n	8006a04 <__cvt+0x40>
 80069fa:	2f45      	cmp	r7, #69	; 0x45
 80069fc:	d100      	bne.n	8006a00 <__cvt+0x3c>
 80069fe:	3601      	adds	r6, #1
 8006a00:	2102      	movs	r1, #2
 8006a02:	e000      	b.n	8006a06 <__cvt+0x42>
 8006a04:	2103      	movs	r1, #3
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	ab02      	add	r3, sp, #8
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4632      	mov	r2, r6
 8006a10:	4653      	mov	r3, sl
 8006a12:	ec45 4b10 	vmov	d0, r4, r5
 8006a16:	f000 fcef 	bl	80073f8 <_dtoa_r>
 8006a1a:	2f47      	cmp	r7, #71	; 0x47
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	d102      	bne.n	8006a26 <__cvt+0x62>
 8006a20:	f019 0f01 	tst.w	r9, #1
 8006a24:	d026      	beq.n	8006a74 <__cvt+0xb0>
 8006a26:	2f46      	cmp	r7, #70	; 0x46
 8006a28:	eb08 0906 	add.w	r9, r8, r6
 8006a2c:	d111      	bne.n	8006a52 <__cvt+0x8e>
 8006a2e:	f898 3000 	ldrb.w	r3, [r8]
 8006a32:	2b30      	cmp	r3, #48	; 0x30
 8006a34:	d10a      	bne.n	8006a4c <__cvt+0x88>
 8006a36:	2200      	movs	r2, #0
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	f7fa f81b 	bl	8000a78 <__aeabi_dcmpeq>
 8006a42:	b918      	cbnz	r0, 8006a4c <__cvt+0x88>
 8006a44:	f1c6 0601 	rsb	r6, r6, #1
 8006a48:	f8ca 6000 	str.w	r6, [sl]
 8006a4c:	f8da 3000 	ldr.w	r3, [sl]
 8006a50:	4499      	add	r9, r3
 8006a52:	2200      	movs	r2, #0
 8006a54:	2300      	movs	r3, #0
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7fa f80d 	bl	8000a78 <__aeabi_dcmpeq>
 8006a5e:	b938      	cbnz	r0, 8006a70 <__cvt+0xac>
 8006a60:	2230      	movs	r2, #48	; 0x30
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	454b      	cmp	r3, r9
 8006a66:	d205      	bcs.n	8006a74 <__cvt+0xb0>
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	9103      	str	r1, [sp, #12]
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e7f8      	b.n	8006a62 <__cvt+0x9e>
 8006a70:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a78:	eba3 0308 	sub.w	r3, r3, r8
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	b004      	add	sp, #16
 8006a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a86 <__exponent>:
 8006a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	bfba      	itte	lt
 8006a8e:	4249      	neglt	r1, r1
 8006a90:	232d      	movlt	r3, #45	; 0x2d
 8006a92:	232b      	movge	r3, #43	; 0x2b
 8006a94:	2909      	cmp	r1, #9
 8006a96:	f804 2b02 	strb.w	r2, [r4], #2
 8006a9a:	7043      	strb	r3, [r0, #1]
 8006a9c:	dd20      	ble.n	8006ae0 <__exponent+0x5a>
 8006a9e:	f10d 0307 	add.w	r3, sp, #7
 8006aa2:	461f      	mov	r7, r3
 8006aa4:	260a      	movs	r6, #10
 8006aa6:	fb91 f5f6 	sdiv	r5, r1, r6
 8006aaa:	fb06 1115 	mls	r1, r6, r5, r1
 8006aae:	3130      	adds	r1, #48	; 0x30
 8006ab0:	2d09      	cmp	r5, #9
 8006ab2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ab6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006aba:	4629      	mov	r1, r5
 8006abc:	dc09      	bgt.n	8006ad2 <__exponent+0x4c>
 8006abe:	3130      	adds	r1, #48	; 0x30
 8006ac0:	3b02      	subs	r3, #2
 8006ac2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ac6:	42bb      	cmp	r3, r7
 8006ac8:	4622      	mov	r2, r4
 8006aca:	d304      	bcc.n	8006ad6 <__exponent+0x50>
 8006acc:	1a10      	subs	r0, r2, r0
 8006ace:	b003      	add	sp, #12
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	e7e7      	b.n	8006aa6 <__exponent+0x20>
 8006ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ada:	f804 2b01 	strb.w	r2, [r4], #1
 8006ade:	e7f2      	b.n	8006ac6 <__exponent+0x40>
 8006ae0:	2330      	movs	r3, #48	; 0x30
 8006ae2:	4419      	add	r1, r3
 8006ae4:	7083      	strb	r3, [r0, #2]
 8006ae6:	1d02      	adds	r2, r0, #4
 8006ae8:	70c1      	strb	r1, [r0, #3]
 8006aea:	e7ef      	b.n	8006acc <__exponent+0x46>

08006aec <_printf_float>:
 8006aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	b08d      	sub	sp, #52	; 0x34
 8006af2:	460c      	mov	r4, r1
 8006af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006af8:	4616      	mov	r6, r2
 8006afa:	461f      	mov	r7, r3
 8006afc:	4605      	mov	r5, r0
 8006afe:	f001 fa33 	bl	8007f68 <_localeconv_r>
 8006b02:	6803      	ldr	r3, [r0, #0]
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7f9 fb3a 	bl	8000180 <strlen>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b10:	f8d8 3000 	ldr.w	r3, [r8]
 8006b14:	9005      	str	r0, [sp, #20]
 8006b16:	3307      	adds	r3, #7
 8006b18:	f023 0307 	bic.w	r3, r3, #7
 8006b1c:	f103 0208 	add.w	r2, r3, #8
 8006b20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b24:	f8d4 b000 	ldr.w	fp, [r4]
 8006b28:	f8c8 2000 	str.w	r2, [r8]
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b34:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b3c:	9307      	str	r3, [sp, #28]
 8006b3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b46:	4ba7      	ldr	r3, [pc, #668]	; (8006de4 <_printf_float+0x2f8>)
 8006b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4c:	f7f9 ffc6 	bl	8000adc <__aeabi_dcmpun>
 8006b50:	bb70      	cbnz	r0, 8006bb0 <_printf_float+0xc4>
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b56:	4ba3      	ldr	r3, [pc, #652]	; (8006de4 <_printf_float+0x2f8>)
 8006b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b5c:	f7f9 ffa0 	bl	8000aa0 <__aeabi_dcmple>
 8006b60:	bb30      	cbnz	r0, 8006bb0 <_printf_float+0xc4>
 8006b62:	2200      	movs	r2, #0
 8006b64:	2300      	movs	r3, #0
 8006b66:	4640      	mov	r0, r8
 8006b68:	4649      	mov	r1, r9
 8006b6a:	f7f9 ff8f 	bl	8000a8c <__aeabi_dcmplt>
 8006b6e:	b110      	cbz	r0, 8006b76 <_printf_float+0x8a>
 8006b70:	232d      	movs	r3, #45	; 0x2d
 8006b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b76:	4a9c      	ldr	r2, [pc, #624]	; (8006de8 <_printf_float+0x2fc>)
 8006b78:	4b9c      	ldr	r3, [pc, #624]	; (8006dec <_printf_float+0x300>)
 8006b7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006b7e:	bf8c      	ite	hi
 8006b80:	4690      	movhi	r8, r2
 8006b82:	4698      	movls	r8, r3
 8006b84:	2303      	movs	r3, #3
 8006b86:	f02b 0204 	bic.w	r2, fp, #4
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	f04f 0900 	mov.w	r9, #0
 8006b92:	9700      	str	r7, [sp, #0]
 8006b94:	4633      	mov	r3, r6
 8006b96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 f9e6 	bl	8006f6c <_printf_common>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f040 808d 	bne.w	8006cc0 <_printf_float+0x1d4>
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006baa:	b00d      	add	sp, #52	; 0x34
 8006bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	f7f9 ff90 	bl	8000adc <__aeabi_dcmpun>
 8006bbc:	b110      	cbz	r0, 8006bc4 <_printf_float+0xd8>
 8006bbe:	4a8c      	ldr	r2, [pc, #560]	; (8006df0 <_printf_float+0x304>)
 8006bc0:	4b8c      	ldr	r3, [pc, #560]	; (8006df4 <_printf_float+0x308>)
 8006bc2:	e7da      	b.n	8006b7a <_printf_float+0x8e>
 8006bc4:	6861      	ldr	r1, [r4, #4]
 8006bc6:	1c4b      	adds	r3, r1, #1
 8006bc8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006bcc:	a80a      	add	r0, sp, #40	; 0x28
 8006bce:	d13e      	bne.n	8006c4e <_printf_float+0x162>
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	6063      	str	r3, [r4, #4]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006bda:	ab09      	add	r3, sp, #36	; 0x24
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	ec49 8b10 	vmov	d0, r8, r9
 8006be2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006be6:	6022      	str	r2, [r4, #0]
 8006be8:	f8cd a004 	str.w	sl, [sp, #4]
 8006bec:	6861      	ldr	r1, [r4, #4]
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f7ff fee8 	bl	80069c4 <__cvt>
 8006bf4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006bf8:	2b47      	cmp	r3, #71	; 0x47
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	d109      	bne.n	8006c12 <_printf_float+0x126>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c00:	1cd8      	adds	r0, r3, #3
 8006c02:	db02      	blt.n	8006c0a <_printf_float+0x11e>
 8006c04:	6862      	ldr	r2, [r4, #4]
 8006c06:	4293      	cmp	r3, r2
 8006c08:	dd47      	ble.n	8006c9a <_printf_float+0x1ae>
 8006c0a:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c0e:	fa5f fa8a 	uxtb.w	sl, sl
 8006c12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c18:	d824      	bhi.n	8006c64 <_printf_float+0x178>
 8006c1a:	3901      	subs	r1, #1
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c22:	9109      	str	r1, [sp, #36]	; 0x24
 8006c24:	f7ff ff2f 	bl	8006a86 <__exponent>
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	1813      	adds	r3, r2, r0
 8006c2c:	2a01      	cmp	r2, #1
 8006c2e:	4681      	mov	r9, r0
 8006c30:	6123      	str	r3, [r4, #16]
 8006c32:	dc02      	bgt.n	8006c3a <_printf_float+0x14e>
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	07d1      	lsls	r1, r2, #31
 8006c38:	d501      	bpl.n	8006c3e <_printf_float+0x152>
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0a5      	beq.n	8006b92 <_printf_float+0xa6>
 8006c46:	232d      	movs	r3, #45	; 0x2d
 8006c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4c:	e7a1      	b.n	8006b92 <_printf_float+0xa6>
 8006c4e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006c52:	f000 8177 	beq.w	8006f44 <_printf_float+0x458>
 8006c56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c5a:	d1bb      	bne.n	8006bd4 <_printf_float+0xe8>
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d1b9      	bne.n	8006bd4 <_printf_float+0xe8>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e7b6      	b.n	8006bd2 <_printf_float+0xe6>
 8006c64:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006c68:	d119      	bne.n	8006c9e <_printf_float+0x1b2>
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	dd0c      	ble.n	8006c8a <_printf_float+0x19e>
 8006c70:	6121      	str	r1, [r4, #16]
 8006c72:	b913      	cbnz	r3, 8006c7a <_printf_float+0x18e>
 8006c74:	6822      	ldr	r2, [r4, #0]
 8006c76:	07d2      	lsls	r2, r2, #31
 8006c78:	d502      	bpl.n	8006c80 <_printf_float+0x194>
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	440b      	add	r3, r1
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c84:	f04f 0900 	mov.w	r9, #0
 8006c88:	e7d9      	b.n	8006c3e <_printf_float+0x152>
 8006c8a:	b913      	cbnz	r3, 8006c92 <_printf_float+0x1a6>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	07d0      	lsls	r0, r2, #31
 8006c90:	d501      	bpl.n	8006c96 <_printf_float+0x1aa>
 8006c92:	3302      	adds	r3, #2
 8006c94:	e7f3      	b.n	8006c7e <_printf_float+0x192>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e7f1      	b.n	8006c7e <_printf_float+0x192>
 8006c9a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006c9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	db05      	blt.n	8006cb2 <_printf_float+0x1c6>
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	07d1      	lsls	r1, r2, #31
 8006cac:	d5e8      	bpl.n	8006c80 <_printf_float+0x194>
 8006cae:	3301      	adds	r3, #1
 8006cb0:	e7e5      	b.n	8006c7e <_printf_float+0x192>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfd4      	ite	le
 8006cb6:	f1c3 0302 	rsble	r3, r3, #2
 8006cba:	2301      	movgt	r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	e7de      	b.n	8006c7e <_printf_float+0x192>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	055a      	lsls	r2, r3, #21
 8006cc4:	d407      	bmi.n	8006cd6 <_printf_float+0x1ea>
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	4642      	mov	r2, r8
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4628      	mov	r0, r5
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d12b      	bne.n	8006d2c <_printf_float+0x240>
 8006cd4:	e767      	b.n	8006ba6 <_printf_float+0xba>
 8006cd6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006cda:	f240 80dc 	bls.w	8006e96 <_printf_float+0x3aa>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce6:	f7f9 fec7 	bl	8000a78 <__aeabi_dcmpeq>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d033      	beq.n	8006d56 <_printf_float+0x26a>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4a41      	ldr	r2, [pc, #260]	; (8006df8 <_printf_float+0x30c>)
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f af54 	beq.w	8006ba6 <_printf_float+0xba>
 8006cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d02:	429a      	cmp	r2, r3
 8006d04:	db02      	blt.n	8006d0c <_printf_float+0x220>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	07d8      	lsls	r0, r3, #31
 8006d0a:	d50f      	bpl.n	8006d2c <_printf_float+0x240>
 8006d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af45 	beq.w	8006ba6 <_printf_float+0xba>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	f104 091a 	add.w	r9, r4, #26
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4543      	cmp	r3, r8
 8006d2a:	dc09      	bgt.n	8006d40 <_printf_float+0x254>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
 8006d30:	f100 8103 	bmi.w	8006f3a <_printf_float+0x44e>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e734      	b.n	8006baa <_printf_float+0xbe>
 8006d40:	2301      	movs	r3, #1
 8006d42:	464a      	mov	r2, r9
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af2b 	beq.w	8006ba6 <_printf_float+0xba>
 8006d50:	f108 0801 	add.w	r8, r8, #1
 8006d54:	e7e6      	b.n	8006d24 <_printf_float+0x238>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc2b      	bgt.n	8006db4 <_printf_float+0x2c8>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <_printf_float+0x30c>)
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af1d 	beq.w	8006ba6 <_printf_float+0xba>
 8006d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6e:	b923      	cbnz	r3, 8006d7a <_printf_float+0x28e>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	b913      	cbnz	r3, 8006d7a <_printf_float+0x28e>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	d5d8      	bpl.n	8006d2c <_printf_float+0x240>
 8006d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f af0e 	beq.w	8006ba6 <_printf_float+0xba>
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	f104 0a1a 	add.w	sl, r4, #26
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	425b      	negs	r3, r3
 8006d96:	454b      	cmp	r3, r9
 8006d98:	dc01      	bgt.n	8006d9e <_printf_float+0x2b2>
 8006d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9c:	e794      	b.n	8006cc8 <_printf_float+0x1dc>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4652      	mov	r2, sl
 8006da2:	4631      	mov	r1, r6
 8006da4:	4628      	mov	r0, r5
 8006da6:	47b8      	blx	r7
 8006da8:	3001      	adds	r0, #1
 8006daa:	f43f aefc 	beq.w	8006ba6 <_printf_float+0xba>
 8006dae:	f109 0901 	add.w	r9, r9, #1
 8006db2:	e7ee      	b.n	8006d92 <_printf_float+0x2a6>
 8006db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006db8:	429a      	cmp	r2, r3
 8006dba:	bfa8      	it	ge
 8006dbc:	461a      	movge	r2, r3
 8006dbe:	2a00      	cmp	r2, #0
 8006dc0:	4691      	mov	r9, r2
 8006dc2:	dd07      	ble.n	8006dd4 <_printf_float+0x2e8>
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4642      	mov	r2, r8
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f aee9 	beq.w	8006ba6 <_printf_float+0xba>
 8006dd4:	f104 031a 	add.w	r3, r4, #26
 8006dd8:	f04f 0b00 	mov.w	fp, #0
 8006ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de0:	9306      	str	r3, [sp, #24]
 8006de2:	e015      	b.n	8006e10 <_printf_float+0x324>
 8006de4:	7fefffff 	.word	0x7fefffff
 8006de8:	0800f188 	.word	0x0800f188
 8006dec:	0800f184 	.word	0x0800f184
 8006df0:	0800f190 	.word	0x0800f190
 8006df4:	0800f18c 	.word	0x0800f18c
 8006df8:	0800f194 	.word	0x0800f194
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	9a06      	ldr	r2, [sp, #24]
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	f43f aecd 	beq.w	8006ba6 <_printf_float+0xba>
 8006e0c:	f10b 0b01 	add.w	fp, fp, #1
 8006e10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e14:	ebaa 0309 	sub.w	r3, sl, r9
 8006e18:	455b      	cmp	r3, fp
 8006e1a:	dcef      	bgt.n	8006dfc <_printf_float+0x310>
 8006e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e20:	429a      	cmp	r2, r3
 8006e22:	44d0      	add	r8, sl
 8006e24:	db15      	blt.n	8006e52 <_printf_float+0x366>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	07da      	lsls	r2, r3, #31
 8006e2a:	d412      	bmi.n	8006e52 <_printf_float+0x366>
 8006e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e30:	eba3 020a 	sub.w	r2, r3, sl
 8006e34:	eba3 0a01 	sub.w	sl, r3, r1
 8006e38:	4592      	cmp	sl, r2
 8006e3a:	bfa8      	it	ge
 8006e3c:	4692      	movge	sl, r2
 8006e3e:	f1ba 0f00 	cmp.w	sl, #0
 8006e42:	dc0e      	bgt.n	8006e62 <_printf_float+0x376>
 8006e44:	f04f 0800 	mov.w	r8, #0
 8006e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e4c:	f104 091a 	add.w	r9, r4, #26
 8006e50:	e019      	b.n	8006e86 <_printf_float+0x39a>
 8006e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e56:	4631      	mov	r1, r6
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b8      	blx	r7
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d1e5      	bne.n	8006e2c <_printf_float+0x340>
 8006e60:	e6a1      	b.n	8006ba6 <_printf_float+0xba>
 8006e62:	4653      	mov	r3, sl
 8006e64:	4642      	mov	r2, r8
 8006e66:	4631      	mov	r1, r6
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b8      	blx	r7
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	d1e9      	bne.n	8006e44 <_printf_float+0x358>
 8006e70:	e699      	b.n	8006ba6 <_printf_float+0xba>
 8006e72:	2301      	movs	r3, #1
 8006e74:	464a      	mov	r2, r9
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f ae92 	beq.w	8006ba6 <_printf_float+0xba>
 8006e82:	f108 0801 	add.w	r8, r8, #1
 8006e86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	eba3 030a 	sub.w	r3, r3, sl
 8006e90:	4543      	cmp	r3, r8
 8006e92:	dcee      	bgt.n	8006e72 <_printf_float+0x386>
 8006e94:	e74a      	b.n	8006d2c <_printf_float+0x240>
 8006e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e98:	2a01      	cmp	r2, #1
 8006e9a:	dc01      	bgt.n	8006ea0 <_printf_float+0x3b4>
 8006e9c:	07db      	lsls	r3, r3, #31
 8006e9e:	d53a      	bpl.n	8006f16 <_printf_float+0x42a>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4642      	mov	r2, r8
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	f43f ae7b 	beq.w	8006ba6 <_printf_float+0xba>
 8006eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f108 0801 	add.w	r8, r8, #1
 8006ec0:	f43f ae71 	beq.w	8006ba6 <_printf_float+0xba>
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f7f9 fdd1 	bl	8000a78 <__aeabi_dcmpeq>
 8006ed6:	b9c8      	cbnz	r0, 8006f0c <_printf_float+0x420>
 8006ed8:	4653      	mov	r3, sl
 8006eda:	4642      	mov	r2, r8
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d10e      	bne.n	8006f04 <_printf_float+0x418>
 8006ee6:	e65e      	b.n	8006ba6 <_printf_float+0xba>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4652      	mov	r2, sl
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f43f ae57 	beq.w	8006ba6 <_printf_float+0xba>
 8006ef8:	f108 0801 	add.w	r8, r8, #1
 8006efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efe:	3b01      	subs	r3, #1
 8006f00:	4543      	cmp	r3, r8
 8006f02:	dcf1      	bgt.n	8006ee8 <_printf_float+0x3fc>
 8006f04:	464b      	mov	r3, r9
 8006f06:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f0a:	e6de      	b.n	8006cca <_printf_float+0x1de>
 8006f0c:	f04f 0800 	mov.w	r8, #0
 8006f10:	f104 0a1a 	add.w	sl, r4, #26
 8006f14:	e7f2      	b.n	8006efc <_printf_float+0x410>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e7df      	b.n	8006eda <_printf_float+0x3ee>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	464a      	mov	r2, r9
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f ae3e 	beq.w	8006ba6 <_printf_float+0xba>
 8006f2a:	f108 0801 	add.w	r8, r8, #1
 8006f2e:	68e3      	ldr	r3, [r4, #12]
 8006f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	4543      	cmp	r3, r8
 8006f36:	dcf0      	bgt.n	8006f1a <_printf_float+0x42e>
 8006f38:	e6fc      	b.n	8006d34 <_printf_float+0x248>
 8006f3a:	f04f 0800 	mov.w	r8, #0
 8006f3e:	f104 0919 	add.w	r9, r4, #25
 8006f42:	e7f4      	b.n	8006f2e <_printf_float+0x442>
 8006f44:	2900      	cmp	r1, #0
 8006f46:	f43f ae8b 	beq.w	8006c60 <_printf_float+0x174>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f50:	ab09      	add	r3, sp, #36	; 0x24
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	ec49 8b10 	vmov	d0, r8, r9
 8006f58:	6022      	str	r2, [r4, #0]
 8006f5a:	f8cd a004 	str.w	sl, [sp, #4]
 8006f5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f62:	4628      	mov	r0, r5
 8006f64:	f7ff fd2e 	bl	80069c4 <__cvt>
 8006f68:	4680      	mov	r8, r0
 8006f6a:	e648      	b.n	8006bfe <_printf_float+0x112>

08006f6c <_printf_common>:
 8006f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f70:	4691      	mov	r9, r2
 8006f72:	461f      	mov	r7, r3
 8006f74:	688a      	ldr	r2, [r1, #8]
 8006f76:	690b      	ldr	r3, [r1, #16]
 8006f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	bfb8      	it	lt
 8006f80:	4613      	movlt	r3, r2
 8006f82:	f8c9 3000 	str.w	r3, [r9]
 8006f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	b112      	cbz	r2, 8006f96 <_printf_common+0x2a>
 8006f90:	3301      	adds	r3, #1
 8006f92:	f8c9 3000 	str.w	r3, [r9]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	0699      	lsls	r1, r3, #26
 8006f9a:	bf42      	ittt	mi
 8006f9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006fa0:	3302      	addmi	r3, #2
 8006fa2:	f8c9 3000 	strmi.w	r3, [r9]
 8006fa6:	6825      	ldr	r5, [r4, #0]
 8006fa8:	f015 0506 	ands.w	r5, r5, #6
 8006fac:	d107      	bne.n	8006fbe <_printf_common+0x52>
 8006fae:	f104 0a19 	add.w	sl, r4, #25
 8006fb2:	68e3      	ldr	r3, [r4, #12]
 8006fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	42ab      	cmp	r3, r5
 8006fbc:	dc28      	bgt.n	8007010 <_printf_common+0xa4>
 8006fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	3300      	adds	r3, #0
 8006fc6:	bf18      	it	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	0692      	lsls	r2, r2, #26
 8006fcc:	d42d      	bmi.n	800702a <_printf_common+0xbe>
 8006fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	47c0      	blx	r8
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d020      	beq.n	800701e <_printf_common+0xb2>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	68e5      	ldr	r5, [r4, #12]
 8006fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8006fe4:	f003 0306 	and.w	r3, r3, #6
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	bf08      	it	eq
 8006fec:	1aad      	subeq	r5, r5, r2
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	6922      	ldr	r2, [r4, #16]
 8006ff2:	bf0c      	ite	eq
 8006ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff8:	2500      	movne	r5, #0
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	bfc4      	itt	gt
 8006ffe:	1a9b      	subgt	r3, r3, r2
 8007000:	18ed      	addgt	r5, r5, r3
 8007002:	f04f 0900 	mov.w	r9, #0
 8007006:	341a      	adds	r4, #26
 8007008:	454d      	cmp	r5, r9
 800700a:	d11a      	bne.n	8007042 <_printf_common+0xd6>
 800700c:	2000      	movs	r0, #0
 800700e:	e008      	b.n	8007022 <_printf_common+0xb6>
 8007010:	2301      	movs	r3, #1
 8007012:	4652      	mov	r2, sl
 8007014:	4639      	mov	r1, r7
 8007016:	4630      	mov	r0, r6
 8007018:	47c0      	blx	r8
 800701a:	3001      	adds	r0, #1
 800701c:	d103      	bne.n	8007026 <_printf_common+0xba>
 800701e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007026:	3501      	adds	r5, #1
 8007028:	e7c3      	b.n	8006fb2 <_printf_common+0x46>
 800702a:	18e1      	adds	r1, r4, r3
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	2030      	movs	r0, #48	; 0x30
 8007030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007034:	4422      	add	r2, r4
 8007036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800703a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800703e:	3302      	adds	r3, #2
 8007040:	e7c5      	b.n	8006fce <_printf_common+0x62>
 8007042:	2301      	movs	r3, #1
 8007044:	4622      	mov	r2, r4
 8007046:	4639      	mov	r1, r7
 8007048:	4630      	mov	r0, r6
 800704a:	47c0      	blx	r8
 800704c:	3001      	adds	r0, #1
 800704e:	d0e6      	beq.n	800701e <_printf_common+0xb2>
 8007050:	f109 0901 	add.w	r9, r9, #1
 8007054:	e7d8      	b.n	8007008 <_printf_common+0x9c>
	...

08007058 <_printf_i>:
 8007058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800705c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007060:	460c      	mov	r4, r1
 8007062:	7e09      	ldrb	r1, [r1, #24]
 8007064:	b085      	sub	sp, #20
 8007066:	296e      	cmp	r1, #110	; 0x6e
 8007068:	4617      	mov	r7, r2
 800706a:	4606      	mov	r6, r0
 800706c:	4698      	mov	r8, r3
 800706e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007070:	f000 80b3 	beq.w	80071da <_printf_i+0x182>
 8007074:	d822      	bhi.n	80070bc <_printf_i+0x64>
 8007076:	2963      	cmp	r1, #99	; 0x63
 8007078:	d036      	beq.n	80070e8 <_printf_i+0x90>
 800707a:	d80a      	bhi.n	8007092 <_printf_i+0x3a>
 800707c:	2900      	cmp	r1, #0
 800707e:	f000 80b9 	beq.w	80071f4 <_printf_i+0x19c>
 8007082:	2958      	cmp	r1, #88	; 0x58
 8007084:	f000 8083 	beq.w	800718e <_printf_i+0x136>
 8007088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800708c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007090:	e032      	b.n	80070f8 <_printf_i+0xa0>
 8007092:	2964      	cmp	r1, #100	; 0x64
 8007094:	d001      	beq.n	800709a <_printf_i+0x42>
 8007096:	2969      	cmp	r1, #105	; 0x69
 8007098:	d1f6      	bne.n	8007088 <_printf_i+0x30>
 800709a:	6820      	ldr	r0, [r4, #0]
 800709c:	6813      	ldr	r3, [r2, #0]
 800709e:	0605      	lsls	r5, r0, #24
 80070a0:	f103 0104 	add.w	r1, r3, #4
 80070a4:	d52a      	bpl.n	80070fc <_printf_i+0xa4>
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6011      	str	r1, [r2, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da03      	bge.n	80070b6 <_printf_i+0x5e>
 80070ae:	222d      	movs	r2, #45	; 0x2d
 80070b0:	425b      	negs	r3, r3
 80070b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070b6:	486f      	ldr	r0, [pc, #444]	; (8007274 <_printf_i+0x21c>)
 80070b8:	220a      	movs	r2, #10
 80070ba:	e039      	b.n	8007130 <_printf_i+0xd8>
 80070bc:	2973      	cmp	r1, #115	; 0x73
 80070be:	f000 809d 	beq.w	80071fc <_printf_i+0x1a4>
 80070c2:	d808      	bhi.n	80070d6 <_printf_i+0x7e>
 80070c4:	296f      	cmp	r1, #111	; 0x6f
 80070c6:	d020      	beq.n	800710a <_printf_i+0xb2>
 80070c8:	2970      	cmp	r1, #112	; 0x70
 80070ca:	d1dd      	bne.n	8007088 <_printf_i+0x30>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	f043 0320 	orr.w	r3, r3, #32
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	e003      	b.n	80070de <_printf_i+0x86>
 80070d6:	2975      	cmp	r1, #117	; 0x75
 80070d8:	d017      	beq.n	800710a <_printf_i+0xb2>
 80070da:	2978      	cmp	r1, #120	; 0x78
 80070dc:	d1d4      	bne.n	8007088 <_printf_i+0x30>
 80070de:	2378      	movs	r3, #120	; 0x78
 80070e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070e4:	4864      	ldr	r0, [pc, #400]	; (8007278 <_printf_i+0x220>)
 80070e6:	e055      	b.n	8007194 <_printf_i+0x13c>
 80070e8:	6813      	ldr	r3, [r2, #0]
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6011      	str	r1, [r2, #0]
 80070f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070f8:	2301      	movs	r3, #1
 80070fa:	e08c      	b.n	8007216 <_printf_i+0x1be>
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6011      	str	r1, [r2, #0]
 8007100:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007104:	bf18      	it	ne
 8007106:	b21b      	sxthne	r3, r3
 8007108:	e7cf      	b.n	80070aa <_printf_i+0x52>
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	6825      	ldr	r5, [r4, #0]
 800710e:	1d18      	adds	r0, r3, #4
 8007110:	6010      	str	r0, [r2, #0]
 8007112:	0628      	lsls	r0, r5, #24
 8007114:	d501      	bpl.n	800711a <_printf_i+0xc2>
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	e002      	b.n	8007120 <_printf_i+0xc8>
 800711a:	0668      	lsls	r0, r5, #25
 800711c:	d5fb      	bpl.n	8007116 <_printf_i+0xbe>
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	4854      	ldr	r0, [pc, #336]	; (8007274 <_printf_i+0x21c>)
 8007122:	296f      	cmp	r1, #111	; 0x6f
 8007124:	bf14      	ite	ne
 8007126:	220a      	movne	r2, #10
 8007128:	2208      	moveq	r2, #8
 800712a:	2100      	movs	r1, #0
 800712c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007130:	6865      	ldr	r5, [r4, #4]
 8007132:	60a5      	str	r5, [r4, #8]
 8007134:	2d00      	cmp	r5, #0
 8007136:	f2c0 8095 	blt.w	8007264 <_printf_i+0x20c>
 800713a:	6821      	ldr	r1, [r4, #0]
 800713c:	f021 0104 	bic.w	r1, r1, #4
 8007140:	6021      	str	r1, [r4, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d13d      	bne.n	80071c2 <_printf_i+0x16a>
 8007146:	2d00      	cmp	r5, #0
 8007148:	f040 808e 	bne.w	8007268 <_printf_i+0x210>
 800714c:	4665      	mov	r5, ip
 800714e:	2a08      	cmp	r2, #8
 8007150:	d10b      	bne.n	800716a <_printf_i+0x112>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	07db      	lsls	r3, r3, #31
 8007156:	d508      	bpl.n	800716a <_printf_i+0x112>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	6862      	ldr	r2, [r4, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	bfde      	ittt	le
 8007160:	2330      	movle	r3, #48	; 0x30
 8007162:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007166:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800716a:	ebac 0305 	sub.w	r3, ip, r5
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	f8cd 8000 	str.w	r8, [sp]
 8007174:	463b      	mov	r3, r7
 8007176:	aa03      	add	r2, sp, #12
 8007178:	4621      	mov	r1, r4
 800717a:	4630      	mov	r0, r6
 800717c:	f7ff fef6 	bl	8006f6c <_printf_common>
 8007180:	3001      	adds	r0, #1
 8007182:	d14d      	bne.n	8007220 <_printf_i+0x1c8>
 8007184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007188:	b005      	add	sp, #20
 800718a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800718e:	4839      	ldr	r0, [pc, #228]	; (8007274 <_printf_i+0x21c>)
 8007190:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007194:	6813      	ldr	r3, [r2, #0]
 8007196:	6821      	ldr	r1, [r4, #0]
 8007198:	1d1d      	adds	r5, r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6015      	str	r5, [r2, #0]
 800719e:	060a      	lsls	r2, r1, #24
 80071a0:	d50b      	bpl.n	80071ba <_printf_i+0x162>
 80071a2:	07ca      	lsls	r2, r1, #31
 80071a4:	bf44      	itt	mi
 80071a6:	f041 0120 	orrmi.w	r1, r1, #32
 80071aa:	6021      	strmi	r1, [r4, #0]
 80071ac:	b91b      	cbnz	r3, 80071b6 <_printf_i+0x15e>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	f022 0220 	bic.w	r2, r2, #32
 80071b4:	6022      	str	r2, [r4, #0]
 80071b6:	2210      	movs	r2, #16
 80071b8:	e7b7      	b.n	800712a <_printf_i+0xd2>
 80071ba:	064d      	lsls	r5, r1, #25
 80071bc:	bf48      	it	mi
 80071be:	b29b      	uxthmi	r3, r3
 80071c0:	e7ef      	b.n	80071a2 <_printf_i+0x14a>
 80071c2:	4665      	mov	r5, ip
 80071c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80071c8:	fb02 3311 	mls	r3, r2, r1, r3
 80071cc:	5cc3      	ldrb	r3, [r0, r3]
 80071ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071d2:	460b      	mov	r3, r1
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d1f5      	bne.n	80071c4 <_printf_i+0x16c>
 80071d8:	e7b9      	b.n	800714e <_printf_i+0xf6>
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	6961      	ldr	r1, [r4, #20]
 80071e0:	1d18      	adds	r0, r3, #4
 80071e2:	6010      	str	r0, [r2, #0]
 80071e4:	0628      	lsls	r0, r5, #24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	d501      	bpl.n	80071ee <_printf_i+0x196>
 80071ea:	6019      	str	r1, [r3, #0]
 80071ec:	e002      	b.n	80071f4 <_printf_i+0x19c>
 80071ee:	066a      	lsls	r2, r5, #25
 80071f0:	d5fb      	bpl.n	80071ea <_printf_i+0x192>
 80071f2:	8019      	strh	r1, [r3, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	4665      	mov	r5, ip
 80071fa:	e7b9      	b.n	8007170 <_printf_i+0x118>
 80071fc:	6813      	ldr	r3, [r2, #0]
 80071fe:	1d19      	adds	r1, r3, #4
 8007200:	6011      	str	r1, [r2, #0]
 8007202:	681d      	ldr	r5, [r3, #0]
 8007204:	6862      	ldr	r2, [r4, #4]
 8007206:	2100      	movs	r1, #0
 8007208:	4628      	mov	r0, r5
 800720a:	f7f8 ffc1 	bl	8000190 <memchr>
 800720e:	b108      	cbz	r0, 8007214 <_printf_i+0x1bc>
 8007210:	1b40      	subs	r0, r0, r5
 8007212:	6060      	str	r0, [r4, #4]
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	6123      	str	r3, [r4, #16]
 8007218:	2300      	movs	r3, #0
 800721a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800721e:	e7a7      	b.n	8007170 <_printf_i+0x118>
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	462a      	mov	r2, r5
 8007224:	4639      	mov	r1, r7
 8007226:	4630      	mov	r0, r6
 8007228:	47c0      	blx	r8
 800722a:	3001      	adds	r0, #1
 800722c:	d0aa      	beq.n	8007184 <_printf_i+0x12c>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	079b      	lsls	r3, r3, #30
 8007232:	d413      	bmi.n	800725c <_printf_i+0x204>
 8007234:	68e0      	ldr	r0, [r4, #12]
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	4298      	cmp	r0, r3
 800723a:	bfb8      	it	lt
 800723c:	4618      	movlt	r0, r3
 800723e:	e7a3      	b.n	8007188 <_printf_i+0x130>
 8007240:	2301      	movs	r3, #1
 8007242:	464a      	mov	r2, r9
 8007244:	4639      	mov	r1, r7
 8007246:	4630      	mov	r0, r6
 8007248:	47c0      	blx	r8
 800724a:	3001      	adds	r0, #1
 800724c:	d09a      	beq.n	8007184 <_printf_i+0x12c>
 800724e:	3501      	adds	r5, #1
 8007250:	68e3      	ldr	r3, [r4, #12]
 8007252:	9a03      	ldr	r2, [sp, #12]
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	42ab      	cmp	r3, r5
 8007258:	dcf2      	bgt.n	8007240 <_printf_i+0x1e8>
 800725a:	e7eb      	b.n	8007234 <_printf_i+0x1dc>
 800725c:	2500      	movs	r5, #0
 800725e:	f104 0919 	add.w	r9, r4, #25
 8007262:	e7f5      	b.n	8007250 <_printf_i+0x1f8>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1ac      	bne.n	80071c2 <_printf_i+0x16a>
 8007268:	7803      	ldrb	r3, [r0, #0]
 800726a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800726e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007272:	e76c      	b.n	800714e <_printf_i+0xf6>
 8007274:	0800f196 	.word	0x0800f196
 8007278:	0800f1a7 	.word	0x0800f1a7

0800727c <_sbrk_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4c06      	ldr	r4, [pc, #24]	; (8007298 <_sbrk_r+0x1c>)
 8007280:	2300      	movs	r3, #0
 8007282:	4605      	mov	r5, r0
 8007284:	4608      	mov	r0, r1
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	f7fa f876 	bl	8001378 <_sbrk>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d102      	bne.n	8007296 <_sbrk_r+0x1a>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	b103      	cbz	r3, 8007296 <_sbrk_r+0x1a>
 8007294:	602b      	str	r3, [r5, #0]
 8007296:	bd38      	pop	{r3, r4, r5, pc}
 8007298:	20001944 	.word	0x20001944

0800729c <siprintf>:
 800729c:	b40e      	push	{r1, r2, r3}
 800729e:	b500      	push	{lr}
 80072a0:	b09c      	sub	sp, #112	; 0x70
 80072a2:	ab1d      	add	r3, sp, #116	; 0x74
 80072a4:	9002      	str	r0, [sp, #8]
 80072a6:	9006      	str	r0, [sp, #24]
 80072a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072ac:	4809      	ldr	r0, [pc, #36]	; (80072d4 <siprintf+0x38>)
 80072ae:	9107      	str	r1, [sp, #28]
 80072b0:	9104      	str	r1, [sp, #16]
 80072b2:	4909      	ldr	r1, [pc, #36]	; (80072d8 <siprintf+0x3c>)
 80072b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b8:	9105      	str	r1, [sp, #20]
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	a902      	add	r1, sp, #8
 80072c0:	f001 f9cc 	bl	800865c <_svfiprintf_r>
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	b01c      	add	sp, #112	; 0x70
 80072cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d0:	b003      	add	sp, #12
 80072d2:	4770      	bx	lr
 80072d4:	20001568 	.word	0x20001568
 80072d8:	ffff0208 	.word	0xffff0208

080072dc <quorem>:
 80072dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	6903      	ldr	r3, [r0, #16]
 80072e2:	690c      	ldr	r4, [r1, #16]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	4680      	mov	r8, r0
 80072e8:	f2c0 8082 	blt.w	80073f0 <quorem+0x114>
 80072ec:	3c01      	subs	r4, #1
 80072ee:	f101 0714 	add.w	r7, r1, #20
 80072f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80072f6:	f100 0614 	add.w	r6, r0, #20
 80072fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80072fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007302:	eb06 030c 	add.w	r3, r6, ip
 8007306:	3501      	adds	r5, #1
 8007308:	eb07 090c 	add.w	r9, r7, ip
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007312:	b395      	cbz	r5, 800737a <quorem+0x9e>
 8007314:	f04f 0a00 	mov.w	sl, #0
 8007318:	4638      	mov	r0, r7
 800731a:	46b6      	mov	lr, r6
 800731c:	46d3      	mov	fp, sl
 800731e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007322:	b293      	uxth	r3, r2
 8007324:	fb05 a303 	mla	r3, r5, r3, sl
 8007328:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800732c:	b29b      	uxth	r3, r3
 800732e:	ebab 0303 	sub.w	r3, fp, r3
 8007332:	0c12      	lsrs	r2, r2, #16
 8007334:	f8de b000 	ldr.w	fp, [lr]
 8007338:	fb05 a202 	mla	r2, r5, r2, sl
 800733c:	fa13 f38b 	uxtah	r3, r3, fp
 8007340:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007344:	fa1f fb82 	uxth.w	fp, r2
 8007348:	f8de 2000 	ldr.w	r2, [lr]
 800734c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007354:	b29b      	uxth	r3, r3
 8007356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800735a:	4581      	cmp	r9, r0
 800735c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007360:	f84e 3b04 	str.w	r3, [lr], #4
 8007364:	d2db      	bcs.n	800731e <quorem+0x42>
 8007366:	f856 300c 	ldr.w	r3, [r6, ip]
 800736a:	b933      	cbnz	r3, 800737a <quorem+0x9e>
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	3b04      	subs	r3, #4
 8007370:	429e      	cmp	r6, r3
 8007372:	461a      	mov	r2, r3
 8007374:	d330      	bcc.n	80073d8 <quorem+0xfc>
 8007376:	f8c8 4010 	str.w	r4, [r8, #16]
 800737a:	4640      	mov	r0, r8
 800737c:	f001 f81a 	bl	80083b4 <__mcmp>
 8007380:	2800      	cmp	r0, #0
 8007382:	db25      	blt.n	80073d0 <quorem+0xf4>
 8007384:	3501      	adds	r5, #1
 8007386:	4630      	mov	r0, r6
 8007388:	f04f 0c00 	mov.w	ip, #0
 800738c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007390:	f8d0 e000 	ldr.w	lr, [r0]
 8007394:	b293      	uxth	r3, r2
 8007396:	ebac 0303 	sub.w	r3, ip, r3
 800739a:	0c12      	lsrs	r2, r2, #16
 800739c:	fa13 f38e 	uxtah	r3, r3, lr
 80073a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ae:	45b9      	cmp	r9, r7
 80073b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073b4:	f840 3b04 	str.w	r3, [r0], #4
 80073b8:	d2e8      	bcs.n	800738c <quorem+0xb0>
 80073ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80073be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80073c2:	b92a      	cbnz	r2, 80073d0 <quorem+0xf4>
 80073c4:	3b04      	subs	r3, #4
 80073c6:	429e      	cmp	r6, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	d30b      	bcc.n	80073e4 <quorem+0x108>
 80073cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80073d0:	4628      	mov	r0, r5
 80073d2:	b003      	add	sp, #12
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	3b04      	subs	r3, #4
 80073dc:	2a00      	cmp	r2, #0
 80073de:	d1ca      	bne.n	8007376 <quorem+0x9a>
 80073e0:	3c01      	subs	r4, #1
 80073e2:	e7c5      	b.n	8007370 <quorem+0x94>
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	3b04      	subs	r3, #4
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	d1ef      	bne.n	80073cc <quorem+0xf0>
 80073ec:	3c01      	subs	r4, #1
 80073ee:	e7ea      	b.n	80073c6 <quorem+0xea>
 80073f0:	2000      	movs	r0, #0
 80073f2:	e7ee      	b.n	80073d2 <quorem+0xf6>
 80073f4:	0000      	movs	r0, r0
	...

080073f8 <_dtoa_r>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	ec57 6b10 	vmov	r6, r7, d0
 8007400:	b097      	sub	sp, #92	; 0x5c
 8007402:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007404:	9106      	str	r1, [sp, #24]
 8007406:	4604      	mov	r4, r0
 8007408:	920b      	str	r2, [sp, #44]	; 0x2c
 800740a:	9312      	str	r3, [sp, #72]	; 0x48
 800740c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007410:	e9cd 6700 	strd	r6, r7, [sp]
 8007414:	b93d      	cbnz	r5, 8007426 <_dtoa_r+0x2e>
 8007416:	2010      	movs	r0, #16
 8007418:	f7ff fa10 	bl	800683c <malloc>
 800741c:	6260      	str	r0, [r4, #36]	; 0x24
 800741e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007422:	6005      	str	r5, [r0, #0]
 8007424:	60c5      	str	r5, [r0, #12]
 8007426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007428:	6819      	ldr	r1, [r3, #0]
 800742a:	b151      	cbz	r1, 8007442 <_dtoa_r+0x4a>
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	604a      	str	r2, [r1, #4]
 8007430:	2301      	movs	r3, #1
 8007432:	4093      	lsls	r3, r2
 8007434:	608b      	str	r3, [r1, #8]
 8007436:	4620      	mov	r0, r4
 8007438:	f000 fdda 	bl	8007ff0 <_Bfree>
 800743c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	1e3b      	subs	r3, r7, #0
 8007444:	bfbb      	ittet	lt
 8007446:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800744a:	9301      	strlt	r3, [sp, #4]
 800744c:	2300      	movge	r3, #0
 800744e:	2201      	movlt	r2, #1
 8007450:	bfac      	ite	ge
 8007452:	f8c8 3000 	strge.w	r3, [r8]
 8007456:	f8c8 2000 	strlt.w	r2, [r8]
 800745a:	4baf      	ldr	r3, [pc, #700]	; (8007718 <_dtoa_r+0x320>)
 800745c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007460:	ea33 0308 	bics.w	r3, r3, r8
 8007464:	d114      	bne.n	8007490 <_dtoa_r+0x98>
 8007466:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007468:	f242 730f 	movw	r3, #9999	; 0x270f
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	9b00      	ldr	r3, [sp, #0]
 8007470:	b923      	cbnz	r3, 800747c <_dtoa_r+0x84>
 8007472:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007476:	2800      	cmp	r0, #0
 8007478:	f000 8542 	beq.w	8007f00 <_dtoa_r+0xb08>
 800747c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800747e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800772c <_dtoa_r+0x334>
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8544 	beq.w	8007f10 <_dtoa_r+0xb18>
 8007488:	f10b 0303 	add.w	r3, fp, #3
 800748c:	f000 bd3e 	b.w	8007f0c <_dtoa_r+0xb14>
 8007490:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007494:	2200      	movs	r2, #0
 8007496:	2300      	movs	r3, #0
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f9 faec 	bl	8000a78 <__aeabi_dcmpeq>
 80074a0:	4681      	mov	r9, r0
 80074a2:	b168      	cbz	r0, 80074c0 <_dtoa_r+0xc8>
 80074a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074a6:	2301      	movs	r3, #1
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8524 	beq.w	8007efa <_dtoa_r+0xb02>
 80074b2:	4b9a      	ldr	r3, [pc, #616]	; (800771c <_dtoa_r+0x324>)
 80074b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074b6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	f000 bd28 	b.w	8007f10 <_dtoa_r+0xb18>
 80074c0:	aa14      	add	r2, sp, #80	; 0x50
 80074c2:	a915      	add	r1, sp, #84	; 0x54
 80074c4:	ec47 6b10 	vmov	d0, r6, r7
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 ffea 	bl	80084a2 <__d2b>
 80074ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80074d2:	9004      	str	r0, [sp, #16]
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	d07c      	beq.n	80075d2 <_dtoa_r+0x1da>
 80074d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80074e0:	46b2      	mov	sl, r6
 80074e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80074e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b8b      	ldr	r3, [pc, #556]	; (8007720 <_dtoa_r+0x328>)
 80074f2:	4650      	mov	r0, sl
 80074f4:	4659      	mov	r1, fp
 80074f6:	f7f8 fe9f 	bl	8000238 <__aeabi_dsub>
 80074fa:	a381      	add	r3, pc, #516	; (adr r3, 8007700 <_dtoa_r+0x308>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f9 f852 	bl	80005a8 <__aeabi_dmul>
 8007504:	a380      	add	r3, pc, #512	; (adr r3, 8007708 <_dtoa_r+0x310>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f8 fe97 	bl	800023c <__adddf3>
 800750e:	4606      	mov	r6, r0
 8007510:	4628      	mov	r0, r5
 8007512:	460f      	mov	r7, r1
 8007514:	f7f8 ffde 	bl	80004d4 <__aeabi_i2d>
 8007518:	a37d      	add	r3, pc, #500	; (adr r3, 8007710 <_dtoa_r+0x318>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f7f9 f843 	bl	80005a8 <__aeabi_dmul>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4630      	mov	r0, r6
 8007528:	4639      	mov	r1, r7
 800752a:	f7f8 fe87 	bl	800023c <__adddf3>
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	f7f9 fae9 	bl	8000b08 <__aeabi_d2iz>
 8007536:	2200      	movs	r2, #0
 8007538:	4682      	mov	sl, r0
 800753a:	2300      	movs	r3, #0
 800753c:	4630      	mov	r0, r6
 800753e:	4639      	mov	r1, r7
 8007540:	f7f9 faa4 	bl	8000a8c <__aeabi_dcmplt>
 8007544:	b148      	cbz	r0, 800755a <_dtoa_r+0x162>
 8007546:	4650      	mov	r0, sl
 8007548:	f7f8 ffc4 	bl	80004d4 <__aeabi_i2d>
 800754c:	4632      	mov	r2, r6
 800754e:	463b      	mov	r3, r7
 8007550:	f7f9 fa92 	bl	8000a78 <__aeabi_dcmpeq>
 8007554:	b908      	cbnz	r0, 800755a <_dtoa_r+0x162>
 8007556:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800755a:	f1ba 0f16 	cmp.w	sl, #22
 800755e:	d859      	bhi.n	8007614 <_dtoa_r+0x21c>
 8007560:	4970      	ldr	r1, [pc, #448]	; (8007724 <_dtoa_r+0x32c>)
 8007562:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800756a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756e:	f7f9 faab 	bl	8000ac8 <__aeabi_dcmpgt>
 8007572:	2800      	cmp	r0, #0
 8007574:	d050      	beq.n	8007618 <_dtoa_r+0x220>
 8007576:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800757a:	2300      	movs	r3, #0
 800757c:	930f      	str	r3, [sp, #60]	; 0x3c
 800757e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007580:	1b5d      	subs	r5, r3, r5
 8007582:	f1b5 0801 	subs.w	r8, r5, #1
 8007586:	bf49      	itett	mi
 8007588:	f1c5 0301 	rsbmi	r3, r5, #1
 800758c:	2300      	movpl	r3, #0
 800758e:	9305      	strmi	r3, [sp, #20]
 8007590:	f04f 0800 	movmi.w	r8, #0
 8007594:	bf58      	it	pl
 8007596:	9305      	strpl	r3, [sp, #20]
 8007598:	f1ba 0f00 	cmp.w	sl, #0
 800759c:	db3e      	blt.n	800761c <_dtoa_r+0x224>
 800759e:	2300      	movs	r3, #0
 80075a0:	44d0      	add	r8, sl
 80075a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80075a6:	9307      	str	r3, [sp, #28]
 80075a8:	9b06      	ldr	r3, [sp, #24]
 80075aa:	2b09      	cmp	r3, #9
 80075ac:	f200 8090 	bhi.w	80076d0 <_dtoa_r+0x2d8>
 80075b0:	2b05      	cmp	r3, #5
 80075b2:	bfc4      	itt	gt
 80075b4:	3b04      	subgt	r3, #4
 80075b6:	9306      	strgt	r3, [sp, #24]
 80075b8:	9b06      	ldr	r3, [sp, #24]
 80075ba:	f1a3 0302 	sub.w	r3, r3, #2
 80075be:	bfcc      	ite	gt
 80075c0:	2500      	movgt	r5, #0
 80075c2:	2501      	movle	r5, #1
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	f200 808f 	bhi.w	80076e8 <_dtoa_r+0x2f0>
 80075ca:	e8df f003 	tbb	[pc, r3]
 80075ce:	7f7d      	.short	0x7f7d
 80075d0:	7131      	.short	0x7131
 80075d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80075d6:	441d      	add	r5, r3
 80075d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80075dc:	2820      	cmp	r0, #32
 80075de:	dd13      	ble.n	8007608 <_dtoa_r+0x210>
 80075e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	fa08 f800 	lsl.w	r8, r8, r0
 80075ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80075ee:	fa23 f000 	lsr.w	r0, r3, r0
 80075f2:	ea48 0000 	orr.w	r0, r8, r0
 80075f6:	f7f8 ff5d 	bl	80004b4 <__aeabi_ui2d>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4682      	mov	sl, r0
 80075fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007602:	3d01      	subs	r5, #1
 8007604:	9313      	str	r3, [sp, #76]	; 0x4c
 8007606:	e772      	b.n	80074ee <_dtoa_r+0xf6>
 8007608:	9b00      	ldr	r3, [sp, #0]
 800760a:	f1c0 0020 	rsb	r0, r0, #32
 800760e:	fa03 f000 	lsl.w	r0, r3, r0
 8007612:	e7f0      	b.n	80075f6 <_dtoa_r+0x1fe>
 8007614:	2301      	movs	r3, #1
 8007616:	e7b1      	b.n	800757c <_dtoa_r+0x184>
 8007618:	900f      	str	r0, [sp, #60]	; 0x3c
 800761a:	e7b0      	b.n	800757e <_dtoa_r+0x186>
 800761c:	9b05      	ldr	r3, [sp, #20]
 800761e:	eba3 030a 	sub.w	r3, r3, sl
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	f1ca 0300 	rsb	r3, sl, #0
 8007628:	9307      	str	r3, [sp, #28]
 800762a:	2300      	movs	r3, #0
 800762c:	930e      	str	r3, [sp, #56]	; 0x38
 800762e:	e7bb      	b.n	80075a8 <_dtoa_r+0x1b0>
 8007630:	2301      	movs	r3, #1
 8007632:	930a      	str	r3, [sp, #40]	; 0x28
 8007634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	dd59      	ble.n	80076ee <_dtoa_r+0x2f6>
 800763a:	9302      	str	r3, [sp, #8]
 800763c:	4699      	mov	r9, r3
 800763e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007640:	2200      	movs	r2, #0
 8007642:	6072      	str	r2, [r6, #4]
 8007644:	2204      	movs	r2, #4
 8007646:	f102 0014 	add.w	r0, r2, #20
 800764a:	4298      	cmp	r0, r3
 800764c:	6871      	ldr	r1, [r6, #4]
 800764e:	d953      	bls.n	80076f8 <_dtoa_r+0x300>
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fc99 	bl	8007f88 <_Balloc>
 8007656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007658:	6030      	str	r0, [r6, #0]
 800765a:	f1b9 0f0e 	cmp.w	r9, #14
 800765e:	f8d3 b000 	ldr.w	fp, [r3]
 8007662:	f200 80e6 	bhi.w	8007832 <_dtoa_r+0x43a>
 8007666:	2d00      	cmp	r5, #0
 8007668:	f000 80e3 	beq.w	8007832 <_dtoa_r+0x43a>
 800766c:	ed9d 7b00 	vldr	d7, [sp]
 8007670:	f1ba 0f00 	cmp.w	sl, #0
 8007674:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007678:	dd74      	ble.n	8007764 <_dtoa_r+0x36c>
 800767a:	4a2a      	ldr	r2, [pc, #168]	; (8007724 <_dtoa_r+0x32c>)
 800767c:	f00a 030f 	and.w	r3, sl, #15
 8007680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007684:	ed93 7b00 	vldr	d7, [r3]
 8007688:	ea4f 162a 	mov.w	r6, sl, asr #4
 800768c:	06f0      	lsls	r0, r6, #27
 800768e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007692:	d565      	bpl.n	8007760 <_dtoa_r+0x368>
 8007694:	4b24      	ldr	r3, [pc, #144]	; (8007728 <_dtoa_r+0x330>)
 8007696:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800769a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800769e:	f7f9 f8ad 	bl	80007fc <__aeabi_ddiv>
 80076a2:	e9cd 0100 	strd	r0, r1, [sp]
 80076a6:	f006 060f 	and.w	r6, r6, #15
 80076aa:	2503      	movs	r5, #3
 80076ac:	4f1e      	ldr	r7, [pc, #120]	; (8007728 <_dtoa_r+0x330>)
 80076ae:	e04c      	b.n	800774a <_dtoa_r+0x352>
 80076b0:	2301      	movs	r3, #1
 80076b2:	930a      	str	r3, [sp, #40]	; 0x28
 80076b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b6:	4453      	add	r3, sl
 80076b8:	f103 0901 	add.w	r9, r3, #1
 80076bc:	9302      	str	r3, [sp, #8]
 80076be:	464b      	mov	r3, r9
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	bfb8      	it	lt
 80076c4:	2301      	movlt	r3, #1
 80076c6:	e7ba      	b.n	800763e <_dtoa_r+0x246>
 80076c8:	2300      	movs	r3, #0
 80076ca:	e7b2      	b.n	8007632 <_dtoa_r+0x23a>
 80076cc:	2300      	movs	r3, #0
 80076ce:	e7f0      	b.n	80076b2 <_dtoa_r+0x2ba>
 80076d0:	2501      	movs	r5, #1
 80076d2:	2300      	movs	r3, #0
 80076d4:	9306      	str	r3, [sp, #24]
 80076d6:	950a      	str	r5, [sp, #40]	; 0x28
 80076d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076dc:	9302      	str	r3, [sp, #8]
 80076de:	4699      	mov	r9, r3
 80076e0:	2200      	movs	r2, #0
 80076e2:	2312      	movs	r3, #18
 80076e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80076e6:	e7aa      	b.n	800763e <_dtoa_r+0x246>
 80076e8:	2301      	movs	r3, #1
 80076ea:	930a      	str	r3, [sp, #40]	; 0x28
 80076ec:	e7f4      	b.n	80076d8 <_dtoa_r+0x2e0>
 80076ee:	2301      	movs	r3, #1
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	4699      	mov	r9, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	e7f5      	b.n	80076e4 <_dtoa_r+0x2ec>
 80076f8:	3101      	adds	r1, #1
 80076fa:	6071      	str	r1, [r6, #4]
 80076fc:	0052      	lsls	r2, r2, #1
 80076fe:	e7a2      	b.n	8007646 <_dtoa_r+0x24e>
 8007700:	636f4361 	.word	0x636f4361
 8007704:	3fd287a7 	.word	0x3fd287a7
 8007708:	8b60c8b3 	.word	0x8b60c8b3
 800770c:	3fc68a28 	.word	0x3fc68a28
 8007710:	509f79fb 	.word	0x509f79fb
 8007714:	3fd34413 	.word	0x3fd34413
 8007718:	7ff00000 	.word	0x7ff00000
 800771c:	0800f195 	.word	0x0800f195
 8007720:	3ff80000 	.word	0x3ff80000
 8007724:	0800f1f0 	.word	0x0800f1f0
 8007728:	0800f1c8 	.word	0x0800f1c8
 800772c:	0800f1c1 	.word	0x0800f1c1
 8007730:	07f1      	lsls	r1, r6, #31
 8007732:	d508      	bpl.n	8007746 <_dtoa_r+0x34e>
 8007734:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800773c:	f7f8 ff34 	bl	80005a8 <__aeabi_dmul>
 8007740:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007744:	3501      	adds	r5, #1
 8007746:	1076      	asrs	r6, r6, #1
 8007748:	3708      	adds	r7, #8
 800774a:	2e00      	cmp	r6, #0
 800774c:	d1f0      	bne.n	8007730 <_dtoa_r+0x338>
 800774e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007752:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007756:	f7f9 f851 	bl	80007fc <__aeabi_ddiv>
 800775a:	e9cd 0100 	strd	r0, r1, [sp]
 800775e:	e01a      	b.n	8007796 <_dtoa_r+0x39e>
 8007760:	2502      	movs	r5, #2
 8007762:	e7a3      	b.n	80076ac <_dtoa_r+0x2b4>
 8007764:	f000 80a0 	beq.w	80078a8 <_dtoa_r+0x4b0>
 8007768:	f1ca 0600 	rsb	r6, sl, #0
 800776c:	4b9f      	ldr	r3, [pc, #636]	; (80079ec <_dtoa_r+0x5f4>)
 800776e:	4fa0      	ldr	r7, [pc, #640]	; (80079f0 <_dtoa_r+0x5f8>)
 8007770:	f006 020f 	and.w	r2, r6, #15
 8007774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007780:	f7f8 ff12 	bl	80005a8 <__aeabi_dmul>
 8007784:	e9cd 0100 	strd	r0, r1, [sp]
 8007788:	1136      	asrs	r6, r6, #4
 800778a:	2300      	movs	r3, #0
 800778c:	2502      	movs	r5, #2
 800778e:	2e00      	cmp	r6, #0
 8007790:	d17f      	bne.n	8007892 <_dtoa_r+0x49a>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e1      	bne.n	800775a <_dtoa_r+0x362>
 8007796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8087 	beq.w	80078ac <_dtoa_r+0x4b4>
 800779e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80077a2:	2200      	movs	r2, #0
 80077a4:	4b93      	ldr	r3, [pc, #588]	; (80079f4 <_dtoa_r+0x5fc>)
 80077a6:	4630      	mov	r0, r6
 80077a8:	4639      	mov	r1, r7
 80077aa:	f7f9 f96f 	bl	8000a8c <__aeabi_dcmplt>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d07c      	beq.n	80078ac <_dtoa_r+0x4b4>
 80077b2:	f1b9 0f00 	cmp.w	r9, #0
 80077b6:	d079      	beq.n	80078ac <_dtoa_r+0x4b4>
 80077b8:	9b02      	ldr	r3, [sp, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dd35      	ble.n	800782a <_dtoa_r+0x432>
 80077be:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80077c2:	9308      	str	r3, [sp, #32]
 80077c4:	4639      	mov	r1, r7
 80077c6:	2200      	movs	r2, #0
 80077c8:	4b8b      	ldr	r3, [pc, #556]	; (80079f8 <_dtoa_r+0x600>)
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7f8 feec 	bl	80005a8 <__aeabi_dmul>
 80077d0:	e9cd 0100 	strd	r0, r1, [sp]
 80077d4:	9f02      	ldr	r7, [sp, #8]
 80077d6:	3501      	adds	r5, #1
 80077d8:	4628      	mov	r0, r5
 80077da:	f7f8 fe7b 	bl	80004d4 <__aeabi_i2d>
 80077de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e2:	f7f8 fee1 	bl	80005a8 <__aeabi_dmul>
 80077e6:	2200      	movs	r2, #0
 80077e8:	4b84      	ldr	r3, [pc, #528]	; (80079fc <_dtoa_r+0x604>)
 80077ea:	f7f8 fd27 	bl	800023c <__adddf3>
 80077ee:	4605      	mov	r5, r0
 80077f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80077f4:	2f00      	cmp	r7, #0
 80077f6:	d15d      	bne.n	80078b4 <_dtoa_r+0x4bc>
 80077f8:	2200      	movs	r2, #0
 80077fa:	4b81      	ldr	r3, [pc, #516]	; (8007a00 <_dtoa_r+0x608>)
 80077fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007800:	f7f8 fd1a 	bl	8000238 <__aeabi_dsub>
 8007804:	462a      	mov	r2, r5
 8007806:	4633      	mov	r3, r6
 8007808:	e9cd 0100 	strd	r0, r1, [sp]
 800780c:	f7f9 f95c 	bl	8000ac8 <__aeabi_dcmpgt>
 8007810:	2800      	cmp	r0, #0
 8007812:	f040 8288 	bne.w	8007d26 <_dtoa_r+0x92e>
 8007816:	462a      	mov	r2, r5
 8007818:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800781c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007820:	f7f9 f934 	bl	8000a8c <__aeabi_dcmplt>
 8007824:	2800      	cmp	r0, #0
 8007826:	f040 827c 	bne.w	8007d22 <_dtoa_r+0x92a>
 800782a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800782e:	e9cd 2300 	strd	r2, r3, [sp]
 8007832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007834:	2b00      	cmp	r3, #0
 8007836:	f2c0 8150 	blt.w	8007ada <_dtoa_r+0x6e2>
 800783a:	f1ba 0f0e 	cmp.w	sl, #14
 800783e:	f300 814c 	bgt.w	8007ada <_dtoa_r+0x6e2>
 8007842:	4b6a      	ldr	r3, [pc, #424]	; (80079ec <_dtoa_r+0x5f4>)
 8007844:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007848:	ed93 7b00 	vldr	d7, [r3]
 800784c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007854:	f280 80d8 	bge.w	8007a08 <_dtoa_r+0x610>
 8007858:	f1b9 0f00 	cmp.w	r9, #0
 800785c:	f300 80d4 	bgt.w	8007a08 <_dtoa_r+0x610>
 8007860:	f040 825e 	bne.w	8007d20 <_dtoa_r+0x928>
 8007864:	2200      	movs	r2, #0
 8007866:	4b66      	ldr	r3, [pc, #408]	; (8007a00 <_dtoa_r+0x608>)
 8007868:	ec51 0b17 	vmov	r0, r1, d7
 800786c:	f7f8 fe9c 	bl	80005a8 <__aeabi_dmul>
 8007870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007874:	f7f9 f91e 	bl	8000ab4 <__aeabi_dcmpge>
 8007878:	464f      	mov	r7, r9
 800787a:	464e      	mov	r6, r9
 800787c:	2800      	cmp	r0, #0
 800787e:	f040 8234 	bne.w	8007cea <_dtoa_r+0x8f2>
 8007882:	2331      	movs	r3, #49	; 0x31
 8007884:	f10b 0501 	add.w	r5, fp, #1
 8007888:	f88b 3000 	strb.w	r3, [fp]
 800788c:	f10a 0a01 	add.w	sl, sl, #1
 8007890:	e22f      	b.n	8007cf2 <_dtoa_r+0x8fa>
 8007892:	07f2      	lsls	r2, r6, #31
 8007894:	d505      	bpl.n	80078a2 <_dtoa_r+0x4aa>
 8007896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789a:	f7f8 fe85 	bl	80005a8 <__aeabi_dmul>
 800789e:	3501      	adds	r5, #1
 80078a0:	2301      	movs	r3, #1
 80078a2:	1076      	asrs	r6, r6, #1
 80078a4:	3708      	adds	r7, #8
 80078a6:	e772      	b.n	800778e <_dtoa_r+0x396>
 80078a8:	2502      	movs	r5, #2
 80078aa:	e774      	b.n	8007796 <_dtoa_r+0x39e>
 80078ac:	f8cd a020 	str.w	sl, [sp, #32]
 80078b0:	464f      	mov	r7, r9
 80078b2:	e791      	b.n	80077d8 <_dtoa_r+0x3e0>
 80078b4:	4b4d      	ldr	r3, [pc, #308]	; (80079ec <_dtoa_r+0x5f4>)
 80078b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d047      	beq.n	8007954 <_dtoa_r+0x55c>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	2000      	movs	r0, #0
 80078ca:	494e      	ldr	r1, [pc, #312]	; (8007a04 <_dtoa_r+0x60c>)
 80078cc:	f7f8 ff96 	bl	80007fc <__aeabi_ddiv>
 80078d0:	462a      	mov	r2, r5
 80078d2:	4633      	mov	r3, r6
 80078d4:	f7f8 fcb0 	bl	8000238 <__aeabi_dsub>
 80078d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078dc:	465d      	mov	r5, fp
 80078de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078e2:	f7f9 f911 	bl	8000b08 <__aeabi_d2iz>
 80078e6:	4606      	mov	r6, r0
 80078e8:	f7f8 fdf4 	bl	80004d4 <__aeabi_i2d>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f4:	f7f8 fca0 	bl	8000238 <__aeabi_dsub>
 80078f8:	3630      	adds	r6, #48	; 0x30
 80078fa:	f805 6b01 	strb.w	r6, [r5], #1
 80078fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007902:	e9cd 0100 	strd	r0, r1, [sp]
 8007906:	f7f9 f8c1 	bl	8000a8c <__aeabi_dcmplt>
 800790a:	2800      	cmp	r0, #0
 800790c:	d163      	bne.n	80079d6 <_dtoa_r+0x5de>
 800790e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007912:	2000      	movs	r0, #0
 8007914:	4937      	ldr	r1, [pc, #220]	; (80079f4 <_dtoa_r+0x5fc>)
 8007916:	f7f8 fc8f 	bl	8000238 <__aeabi_dsub>
 800791a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800791e:	f7f9 f8b5 	bl	8000a8c <__aeabi_dcmplt>
 8007922:	2800      	cmp	r0, #0
 8007924:	f040 80b7 	bne.w	8007a96 <_dtoa_r+0x69e>
 8007928:	eba5 030b 	sub.w	r3, r5, fp
 800792c:	429f      	cmp	r7, r3
 800792e:	f77f af7c 	ble.w	800782a <_dtoa_r+0x432>
 8007932:	2200      	movs	r2, #0
 8007934:	4b30      	ldr	r3, [pc, #192]	; (80079f8 <_dtoa_r+0x600>)
 8007936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800793a:	f7f8 fe35 	bl	80005a8 <__aeabi_dmul>
 800793e:	2200      	movs	r2, #0
 8007940:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007944:	4b2c      	ldr	r3, [pc, #176]	; (80079f8 <_dtoa_r+0x600>)
 8007946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800794a:	f7f8 fe2d 	bl	80005a8 <__aeabi_dmul>
 800794e:	e9cd 0100 	strd	r0, r1, [sp]
 8007952:	e7c4      	b.n	80078de <_dtoa_r+0x4e6>
 8007954:	462a      	mov	r2, r5
 8007956:	4633      	mov	r3, r6
 8007958:	f7f8 fe26 	bl	80005a8 <__aeabi_dmul>
 800795c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007960:	eb0b 0507 	add.w	r5, fp, r7
 8007964:	465e      	mov	r6, fp
 8007966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800796a:	f7f9 f8cd 	bl	8000b08 <__aeabi_d2iz>
 800796e:	4607      	mov	r7, r0
 8007970:	f7f8 fdb0 	bl	80004d4 <__aeabi_i2d>
 8007974:	3730      	adds	r7, #48	; 0x30
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800797e:	f7f8 fc5b 	bl	8000238 <__aeabi_dsub>
 8007982:	f806 7b01 	strb.w	r7, [r6], #1
 8007986:	42ae      	cmp	r6, r5
 8007988:	e9cd 0100 	strd	r0, r1, [sp]
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	d126      	bne.n	80079e0 <_dtoa_r+0x5e8>
 8007992:	4b1c      	ldr	r3, [pc, #112]	; (8007a04 <_dtoa_r+0x60c>)
 8007994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007998:	f7f8 fc50 	bl	800023c <__adddf3>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079a4:	f7f9 f890 	bl	8000ac8 <__aeabi_dcmpgt>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d174      	bne.n	8007a96 <_dtoa_r+0x69e>
 80079ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079b0:	2000      	movs	r0, #0
 80079b2:	4914      	ldr	r1, [pc, #80]	; (8007a04 <_dtoa_r+0x60c>)
 80079b4:	f7f8 fc40 	bl	8000238 <__aeabi_dsub>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c0:	f7f9 f864 	bl	8000a8c <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f43f af30 	beq.w	800782a <_dtoa_r+0x432>
 80079ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ce:	2b30      	cmp	r3, #48	; 0x30
 80079d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80079d4:	d002      	beq.n	80079dc <_dtoa_r+0x5e4>
 80079d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079da:	e04a      	b.n	8007a72 <_dtoa_r+0x67a>
 80079dc:	4615      	mov	r5, r2
 80079de:	e7f4      	b.n	80079ca <_dtoa_r+0x5d2>
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <_dtoa_r+0x600>)
 80079e2:	f7f8 fde1 	bl	80005a8 <__aeabi_dmul>
 80079e6:	e9cd 0100 	strd	r0, r1, [sp]
 80079ea:	e7bc      	b.n	8007966 <_dtoa_r+0x56e>
 80079ec:	0800f1f0 	.word	0x0800f1f0
 80079f0:	0800f1c8 	.word	0x0800f1c8
 80079f4:	3ff00000 	.word	0x3ff00000
 80079f8:	40240000 	.word	0x40240000
 80079fc:	401c0000 	.word	0x401c0000
 8007a00:	40140000 	.word	0x40140000
 8007a04:	3fe00000 	.word	0x3fe00000
 8007a08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a0c:	465d      	mov	r5, fp
 8007a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a12:	4630      	mov	r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	f7f8 fef1 	bl	80007fc <__aeabi_ddiv>
 8007a1a:	f7f9 f875 	bl	8000b08 <__aeabi_d2iz>
 8007a1e:	4680      	mov	r8, r0
 8007a20:	f7f8 fd58 	bl	80004d4 <__aeabi_i2d>
 8007a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a28:	f7f8 fdbe 	bl	80005a8 <__aeabi_dmul>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007a38:	f7f8 fbfe 	bl	8000238 <__aeabi_dsub>
 8007a3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a40:	eba5 060b 	sub.w	r6, r5, fp
 8007a44:	45b1      	cmp	r9, r6
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	d139      	bne.n	8007ac0 <_dtoa_r+0x6c8>
 8007a4c:	f7f8 fbf6 	bl	800023c <__adddf3>
 8007a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	f7f9 f836 	bl	8000ac8 <__aeabi_dcmpgt>
 8007a5c:	b9c8      	cbnz	r0, 8007a92 <_dtoa_r+0x69a>
 8007a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a62:	4630      	mov	r0, r6
 8007a64:	4639      	mov	r1, r7
 8007a66:	f7f9 f807 	bl	8000a78 <__aeabi_dcmpeq>
 8007a6a:	b110      	cbz	r0, 8007a72 <_dtoa_r+0x67a>
 8007a6c:	f018 0f01 	tst.w	r8, #1
 8007a70:	d10f      	bne.n	8007a92 <_dtoa_r+0x69a>
 8007a72:	9904      	ldr	r1, [sp, #16]
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fabb 	bl	8007ff0 <_Bfree>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a7e:	702b      	strb	r3, [r5, #0]
 8007a80:	f10a 0301 	add.w	r3, sl, #1
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8241 	beq.w	8007f10 <_dtoa_r+0xb18>
 8007a8e:	601d      	str	r5, [r3, #0]
 8007a90:	e23e      	b.n	8007f10 <_dtoa_r+0xb18>
 8007a92:	f8cd a020 	str.w	sl, [sp, #32]
 8007a96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a9a:	2a39      	cmp	r2, #57	; 0x39
 8007a9c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007aa0:	d108      	bne.n	8007ab4 <_dtoa_r+0x6bc>
 8007aa2:	459b      	cmp	fp, r3
 8007aa4:	d10a      	bne.n	8007abc <_dtoa_r+0x6c4>
 8007aa6:	9b08      	ldr	r3, [sp, #32]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	9308      	str	r3, [sp, #32]
 8007aac:	2330      	movs	r3, #48	; 0x30
 8007aae:	f88b 3000 	strb.w	r3, [fp]
 8007ab2:	465b      	mov	r3, fp
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	3201      	adds	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e78c      	b.n	80079d6 <_dtoa_r+0x5de>
 8007abc:	461d      	mov	r5, r3
 8007abe:	e7ea      	b.n	8007a96 <_dtoa_r+0x69e>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4b9b      	ldr	r3, [pc, #620]	; (8007d30 <_dtoa_r+0x938>)
 8007ac4:	f7f8 fd70 	bl	80005a8 <__aeabi_dmul>
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2300      	movs	r3, #0
 8007acc:	4606      	mov	r6, r0
 8007ace:	460f      	mov	r7, r1
 8007ad0:	f7f8 ffd2 	bl	8000a78 <__aeabi_dcmpeq>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d09a      	beq.n	8007a0e <_dtoa_r+0x616>
 8007ad8:	e7cb      	b.n	8007a72 <_dtoa_r+0x67a>
 8007ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	f000 808b 	beq.w	8007bf8 <_dtoa_r+0x800>
 8007ae2:	9a06      	ldr	r2, [sp, #24]
 8007ae4:	2a01      	cmp	r2, #1
 8007ae6:	dc6e      	bgt.n	8007bc6 <_dtoa_r+0x7ce>
 8007ae8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	d067      	beq.n	8007bbe <_dtoa_r+0x7c6>
 8007aee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007af2:	9f07      	ldr	r7, [sp, #28]
 8007af4:	9d05      	ldr	r5, [sp, #20]
 8007af6:	9a05      	ldr	r2, [sp, #20]
 8007af8:	2101      	movs	r1, #1
 8007afa:	441a      	add	r2, r3
 8007afc:	4620      	mov	r0, r4
 8007afe:	9205      	str	r2, [sp, #20]
 8007b00:	4498      	add	r8, r3
 8007b02:	f000 fb15 	bl	8008130 <__i2b>
 8007b06:	4606      	mov	r6, r0
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	dd0c      	ble.n	8007b26 <_dtoa_r+0x72e>
 8007b0c:	f1b8 0f00 	cmp.w	r8, #0
 8007b10:	dd09      	ble.n	8007b26 <_dtoa_r+0x72e>
 8007b12:	4545      	cmp	r5, r8
 8007b14:	9a05      	ldr	r2, [sp, #20]
 8007b16:	462b      	mov	r3, r5
 8007b18:	bfa8      	it	ge
 8007b1a:	4643      	movge	r3, r8
 8007b1c:	1ad2      	subs	r2, r2, r3
 8007b1e:	9205      	str	r2, [sp, #20]
 8007b20:	1aed      	subs	r5, r5, r3
 8007b22:	eba8 0803 	sub.w	r8, r8, r3
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	b1eb      	cbz	r3, 8007b66 <_dtoa_r+0x76e>
 8007b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d067      	beq.n	8007c00 <_dtoa_r+0x808>
 8007b30:	b18f      	cbz	r7, 8007b56 <_dtoa_r+0x75e>
 8007b32:	4631      	mov	r1, r6
 8007b34:	463a      	mov	r2, r7
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 fb9a 	bl	8008270 <__pow5mult>
 8007b3c:	9a04      	ldr	r2, [sp, #16]
 8007b3e:	4601      	mov	r1, r0
 8007b40:	4606      	mov	r6, r0
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 fafd 	bl	8008142 <__multiply>
 8007b48:	9904      	ldr	r1, [sp, #16]
 8007b4a:	9008      	str	r0, [sp, #32]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fa4f 	bl	8007ff0 <_Bfree>
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	9b07      	ldr	r3, [sp, #28]
 8007b58:	1bda      	subs	r2, r3, r7
 8007b5a:	d004      	beq.n	8007b66 <_dtoa_r+0x76e>
 8007b5c:	9904      	ldr	r1, [sp, #16]
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 fb86 	bl	8008270 <__pow5mult>
 8007b64:	9004      	str	r0, [sp, #16]
 8007b66:	2101      	movs	r1, #1
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fae1 	bl	8008130 <__i2b>
 8007b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b70:	4607      	mov	r7, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 81d0 	beq.w	8007f18 <_dtoa_r+0xb20>
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fb77 	bl	8008270 <__pow5mult>
 8007b82:	9b06      	ldr	r3, [sp, #24]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	4607      	mov	r7, r0
 8007b88:	dc40      	bgt.n	8007c0c <_dtoa_r+0x814>
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d139      	bne.n	8007c04 <_dtoa_r+0x80c>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d136      	bne.n	8007c08 <_dtoa_r+0x810>
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ba0:	0d1b      	lsrs	r3, r3, #20
 8007ba2:	051b      	lsls	r3, r3, #20
 8007ba4:	b12b      	cbz	r3, 8007bb2 <_dtoa_r+0x7ba>
 8007ba6:	9b05      	ldr	r3, [sp, #20]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	9305      	str	r3, [sp, #20]
 8007bac:	f108 0801 	add.w	r8, r8, #1
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	9307      	str	r3, [sp, #28]
 8007bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d12a      	bne.n	8007c10 <_dtoa_r+0x818>
 8007bba:	2001      	movs	r0, #1
 8007bbc:	e030      	b.n	8007c20 <_dtoa_r+0x828>
 8007bbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bc0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bc4:	e795      	b.n	8007af2 <_dtoa_r+0x6fa>
 8007bc6:	9b07      	ldr	r3, [sp, #28]
 8007bc8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007bcc:	42bb      	cmp	r3, r7
 8007bce:	bfbf      	itttt	lt
 8007bd0:	9b07      	ldrlt	r3, [sp, #28]
 8007bd2:	9707      	strlt	r7, [sp, #28]
 8007bd4:	1afa      	sublt	r2, r7, r3
 8007bd6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007bd8:	bfbb      	ittet	lt
 8007bda:	189b      	addlt	r3, r3, r2
 8007bdc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007bde:	1bdf      	subge	r7, r3, r7
 8007be0:	2700      	movlt	r7, #0
 8007be2:	f1b9 0f00 	cmp.w	r9, #0
 8007be6:	bfb5      	itete	lt
 8007be8:	9b05      	ldrlt	r3, [sp, #20]
 8007bea:	9d05      	ldrge	r5, [sp, #20]
 8007bec:	eba3 0509 	sublt.w	r5, r3, r9
 8007bf0:	464b      	movge	r3, r9
 8007bf2:	bfb8      	it	lt
 8007bf4:	2300      	movlt	r3, #0
 8007bf6:	e77e      	b.n	8007af6 <_dtoa_r+0x6fe>
 8007bf8:	9f07      	ldr	r7, [sp, #28]
 8007bfa:	9d05      	ldr	r5, [sp, #20]
 8007bfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007bfe:	e783      	b.n	8007b08 <_dtoa_r+0x710>
 8007c00:	9a07      	ldr	r2, [sp, #28]
 8007c02:	e7ab      	b.n	8007b5c <_dtoa_r+0x764>
 8007c04:	2300      	movs	r3, #0
 8007c06:	e7d4      	b.n	8007bb2 <_dtoa_r+0x7ba>
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	e7d2      	b.n	8007bb2 <_dtoa_r+0x7ba>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9307      	str	r3, [sp, #28]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007c16:	6918      	ldr	r0, [r3, #16]
 8007c18:	f000 fa3c 	bl	8008094 <__hi0bits>
 8007c1c:	f1c0 0020 	rsb	r0, r0, #32
 8007c20:	4440      	add	r0, r8
 8007c22:	f010 001f 	ands.w	r0, r0, #31
 8007c26:	d047      	beq.n	8007cb8 <_dtoa_r+0x8c0>
 8007c28:	f1c0 0320 	rsb	r3, r0, #32
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	dd3b      	ble.n	8007ca8 <_dtoa_r+0x8b0>
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	f1c0 001c 	rsb	r0, r0, #28
 8007c36:	4403      	add	r3, r0
 8007c38:	9305      	str	r3, [sp, #20]
 8007c3a:	4405      	add	r5, r0
 8007c3c:	4480      	add	r8, r0
 8007c3e:	9b05      	ldr	r3, [sp, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dd05      	ble.n	8007c50 <_dtoa_r+0x858>
 8007c44:	461a      	mov	r2, r3
 8007c46:	9904      	ldr	r1, [sp, #16]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fb5f 	bl	800830c <__lshift>
 8007c4e:	9004      	str	r0, [sp, #16]
 8007c50:	f1b8 0f00 	cmp.w	r8, #0
 8007c54:	dd05      	ble.n	8007c62 <_dtoa_r+0x86a>
 8007c56:	4639      	mov	r1, r7
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fb56 	bl	800830c <__lshift>
 8007c60:	4607      	mov	r7, r0
 8007c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c64:	b353      	cbz	r3, 8007cbc <_dtoa_r+0x8c4>
 8007c66:	4639      	mov	r1, r7
 8007c68:	9804      	ldr	r0, [sp, #16]
 8007c6a:	f000 fba3 	bl	80083b4 <__mcmp>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	da24      	bge.n	8007cbc <_dtoa_r+0x8c4>
 8007c72:	2300      	movs	r3, #0
 8007c74:	220a      	movs	r2, #10
 8007c76:	9904      	ldr	r1, [sp, #16]
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 f9d0 	bl	800801e <__multadd>
 8007c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c80:	9004      	str	r0, [sp, #16]
 8007c82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 814d 	beq.w	8007f26 <_dtoa_r+0xb2e>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4631      	mov	r1, r6
 8007c90:	220a      	movs	r2, #10
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 f9c3 	bl	800801e <__multadd>
 8007c98:	9b02      	ldr	r3, [sp, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	dc4f      	bgt.n	8007d40 <_dtoa_r+0x948>
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	dd4c      	ble.n	8007d40 <_dtoa_r+0x948>
 8007ca6:	e011      	b.n	8007ccc <_dtoa_r+0x8d4>
 8007ca8:	d0c9      	beq.n	8007c3e <_dtoa_r+0x846>
 8007caa:	9a05      	ldr	r2, [sp, #20]
 8007cac:	331c      	adds	r3, #28
 8007cae:	441a      	add	r2, r3
 8007cb0:	9205      	str	r2, [sp, #20]
 8007cb2:	441d      	add	r5, r3
 8007cb4:	4498      	add	r8, r3
 8007cb6:	e7c2      	b.n	8007c3e <_dtoa_r+0x846>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	e7f6      	b.n	8007caa <_dtoa_r+0x8b2>
 8007cbc:	f1b9 0f00 	cmp.w	r9, #0
 8007cc0:	dc38      	bgt.n	8007d34 <_dtoa_r+0x93c>
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	dd35      	ble.n	8007d34 <_dtoa_r+0x93c>
 8007cc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ccc:	9b02      	ldr	r3, [sp, #8]
 8007cce:	b963      	cbnz	r3, 8007cea <_dtoa_r+0x8f2>
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	2205      	movs	r2, #5
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 f9a2 	bl	800801e <__multadd>
 8007cda:	4601      	mov	r1, r0
 8007cdc:	4607      	mov	r7, r0
 8007cde:	9804      	ldr	r0, [sp, #16]
 8007ce0:	f000 fb68 	bl	80083b4 <__mcmp>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f73f adcc 	bgt.w	8007882 <_dtoa_r+0x48a>
 8007cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cec:	465d      	mov	r5, fp
 8007cee:	ea6f 0a03 	mvn.w	sl, r3
 8007cf2:	f04f 0900 	mov.w	r9, #0
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 f979 	bl	8007ff0 <_Bfree>
 8007cfe:	2e00      	cmp	r6, #0
 8007d00:	f43f aeb7 	beq.w	8007a72 <_dtoa_r+0x67a>
 8007d04:	f1b9 0f00 	cmp.w	r9, #0
 8007d08:	d005      	beq.n	8007d16 <_dtoa_r+0x91e>
 8007d0a:	45b1      	cmp	r9, r6
 8007d0c:	d003      	beq.n	8007d16 <_dtoa_r+0x91e>
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f96d 	bl	8007ff0 <_Bfree>
 8007d16:	4631      	mov	r1, r6
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 f969 	bl	8007ff0 <_Bfree>
 8007d1e:	e6a8      	b.n	8007a72 <_dtoa_r+0x67a>
 8007d20:	2700      	movs	r7, #0
 8007d22:	463e      	mov	r6, r7
 8007d24:	e7e1      	b.n	8007cea <_dtoa_r+0x8f2>
 8007d26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d2a:	463e      	mov	r6, r7
 8007d2c:	e5a9      	b.n	8007882 <_dtoa_r+0x48a>
 8007d2e:	bf00      	nop
 8007d30:	40240000 	.word	0x40240000
 8007d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d36:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 80fa 	beq.w	8007f34 <_dtoa_r+0xb3c>
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	dd05      	ble.n	8007d50 <_dtoa_r+0x958>
 8007d44:	4631      	mov	r1, r6
 8007d46:	462a      	mov	r2, r5
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 fadf 	bl	800830c <__lshift>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	9b07      	ldr	r3, [sp, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d04c      	beq.n	8007df0 <_dtoa_r+0x9f8>
 8007d56:	6871      	ldr	r1, [r6, #4]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 f915 	bl	8007f88 <_Balloc>
 8007d5e:	6932      	ldr	r2, [r6, #16]
 8007d60:	3202      	adds	r2, #2
 8007d62:	4605      	mov	r5, r0
 8007d64:	0092      	lsls	r2, r2, #2
 8007d66:	f106 010c 	add.w	r1, r6, #12
 8007d6a:	300c      	adds	r0, #12
 8007d6c:	f7fe fd6e 	bl	800684c <memcpy>
 8007d70:	2201      	movs	r2, #1
 8007d72:	4629      	mov	r1, r5
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fac9 	bl	800830c <__lshift>
 8007d7a:	9b00      	ldr	r3, [sp, #0]
 8007d7c:	f8cd b014 	str.w	fp, [sp, #20]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	46b1      	mov	r9, r6
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	4606      	mov	r6, r0
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	9804      	ldr	r0, [sp, #16]
 8007d8e:	f7ff faa5 	bl	80072dc <quorem>
 8007d92:	4649      	mov	r1, r9
 8007d94:	4605      	mov	r5, r0
 8007d96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d9a:	9804      	ldr	r0, [sp, #16]
 8007d9c:	f000 fb0a 	bl	80083b4 <__mcmp>
 8007da0:	4632      	mov	r2, r6
 8007da2:	9000      	str	r0, [sp, #0]
 8007da4:	4639      	mov	r1, r7
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 fb1e 	bl	80083e8 <__mdiff>
 8007dac:	68c3      	ldr	r3, [r0, #12]
 8007dae:	4602      	mov	r2, r0
 8007db0:	bb03      	cbnz	r3, 8007df4 <_dtoa_r+0x9fc>
 8007db2:	4601      	mov	r1, r0
 8007db4:	9008      	str	r0, [sp, #32]
 8007db6:	9804      	ldr	r0, [sp, #16]
 8007db8:	f000 fafc 	bl	80083b4 <__mcmp>
 8007dbc:	9a08      	ldr	r2, [sp, #32]
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	9308      	str	r3, [sp, #32]
 8007dc6:	f000 f913 	bl	8007ff0 <_Bfree>
 8007dca:	9b08      	ldr	r3, [sp, #32]
 8007dcc:	b9a3      	cbnz	r3, 8007df8 <_dtoa_r+0xa00>
 8007dce:	9a06      	ldr	r2, [sp, #24]
 8007dd0:	b992      	cbnz	r2, 8007df8 <_dtoa_r+0xa00>
 8007dd2:	9a07      	ldr	r2, [sp, #28]
 8007dd4:	b982      	cbnz	r2, 8007df8 <_dtoa_r+0xa00>
 8007dd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dda:	d029      	beq.n	8007e30 <_dtoa_r+0xa38>
 8007ddc:	9b00      	ldr	r3, [sp, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dd01      	ble.n	8007de6 <_dtoa_r+0x9ee>
 8007de2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007de6:	9b05      	ldr	r3, [sp, #20]
 8007de8:	1c5d      	adds	r5, r3, #1
 8007dea:	f883 8000 	strb.w	r8, [r3]
 8007dee:	e782      	b.n	8007cf6 <_dtoa_r+0x8fe>
 8007df0:	4630      	mov	r0, r6
 8007df2:	e7c2      	b.n	8007d7a <_dtoa_r+0x982>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7e3      	b.n	8007dc0 <_dtoa_r+0x9c8>
 8007df8:	9a00      	ldr	r2, [sp, #0]
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	db04      	blt.n	8007e08 <_dtoa_r+0xa10>
 8007dfe:	d125      	bne.n	8007e4c <_dtoa_r+0xa54>
 8007e00:	9a06      	ldr	r2, [sp, #24]
 8007e02:	bb1a      	cbnz	r2, 8007e4c <_dtoa_r+0xa54>
 8007e04:	9a07      	ldr	r2, [sp, #28]
 8007e06:	bb0a      	cbnz	r2, 8007e4c <_dtoa_r+0xa54>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	ddec      	ble.n	8007de6 <_dtoa_r+0x9ee>
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	9904      	ldr	r1, [sp, #16]
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fa7b 	bl	800830c <__lshift>
 8007e16:	4639      	mov	r1, r7
 8007e18:	9004      	str	r0, [sp, #16]
 8007e1a:	f000 facb 	bl	80083b4 <__mcmp>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	dc03      	bgt.n	8007e2a <_dtoa_r+0xa32>
 8007e22:	d1e0      	bne.n	8007de6 <_dtoa_r+0x9ee>
 8007e24:	f018 0f01 	tst.w	r8, #1
 8007e28:	d0dd      	beq.n	8007de6 <_dtoa_r+0x9ee>
 8007e2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e2e:	d1d8      	bne.n	8007de2 <_dtoa_r+0x9ea>
 8007e30:	9b05      	ldr	r3, [sp, #20]
 8007e32:	9a05      	ldr	r2, [sp, #20]
 8007e34:	1c5d      	adds	r5, r3, #1
 8007e36:	2339      	movs	r3, #57	; 0x39
 8007e38:	7013      	strb	r3, [r2, #0]
 8007e3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e3e:	2b39      	cmp	r3, #57	; 0x39
 8007e40:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007e44:	d04f      	beq.n	8007ee6 <_dtoa_r+0xaee>
 8007e46:	3301      	adds	r3, #1
 8007e48:	7013      	strb	r3, [r2, #0]
 8007e4a:	e754      	b.n	8007cf6 <_dtoa_r+0x8fe>
 8007e4c:	9a05      	ldr	r2, [sp, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f102 0501 	add.w	r5, r2, #1
 8007e54:	dd06      	ble.n	8007e64 <_dtoa_r+0xa6c>
 8007e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e5a:	d0e9      	beq.n	8007e30 <_dtoa_r+0xa38>
 8007e5c:	f108 0801 	add.w	r8, r8, #1
 8007e60:	9b05      	ldr	r3, [sp, #20]
 8007e62:	e7c2      	b.n	8007dea <_dtoa_r+0x9f2>
 8007e64:	9a02      	ldr	r2, [sp, #8]
 8007e66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007e6a:	eba5 030b 	sub.w	r3, r5, fp
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d021      	beq.n	8007eb6 <_dtoa_r+0xabe>
 8007e72:	2300      	movs	r3, #0
 8007e74:	220a      	movs	r2, #10
 8007e76:	9904      	ldr	r1, [sp, #16]
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f8d0 	bl	800801e <__multadd>
 8007e7e:	45b1      	cmp	r9, r6
 8007e80:	9004      	str	r0, [sp, #16]
 8007e82:	f04f 0300 	mov.w	r3, #0
 8007e86:	f04f 020a 	mov.w	r2, #10
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	d105      	bne.n	8007e9c <_dtoa_r+0xaa4>
 8007e90:	f000 f8c5 	bl	800801e <__multadd>
 8007e94:	4681      	mov	r9, r0
 8007e96:	4606      	mov	r6, r0
 8007e98:	9505      	str	r5, [sp, #20]
 8007e9a:	e776      	b.n	8007d8a <_dtoa_r+0x992>
 8007e9c:	f000 f8bf 	bl	800801e <__multadd>
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4681      	mov	r9, r0
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 f8b8 	bl	800801e <__multadd>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	e7f2      	b.n	8007e98 <_dtoa_r+0xaa0>
 8007eb2:	f04f 0900 	mov.w	r9, #0
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	9904      	ldr	r1, [sp, #16]
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fa26 	bl	800830c <__lshift>
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	9004      	str	r0, [sp, #16]
 8007ec4:	f000 fa76 	bl	80083b4 <__mcmp>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	dcb6      	bgt.n	8007e3a <_dtoa_r+0xa42>
 8007ecc:	d102      	bne.n	8007ed4 <_dtoa_r+0xadc>
 8007ece:	f018 0f01 	tst.w	r8, #1
 8007ed2:	d1b2      	bne.n	8007e3a <_dtoa_r+0xa42>
 8007ed4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ed8:	2b30      	cmp	r3, #48	; 0x30
 8007eda:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007ede:	f47f af0a 	bne.w	8007cf6 <_dtoa_r+0x8fe>
 8007ee2:	4615      	mov	r5, r2
 8007ee4:	e7f6      	b.n	8007ed4 <_dtoa_r+0xadc>
 8007ee6:	4593      	cmp	fp, r2
 8007ee8:	d105      	bne.n	8007ef6 <_dtoa_r+0xafe>
 8007eea:	2331      	movs	r3, #49	; 0x31
 8007eec:	f10a 0a01 	add.w	sl, sl, #1
 8007ef0:	f88b 3000 	strb.w	r3, [fp]
 8007ef4:	e6ff      	b.n	8007cf6 <_dtoa_r+0x8fe>
 8007ef6:	4615      	mov	r5, r2
 8007ef8:	e79f      	b.n	8007e3a <_dtoa_r+0xa42>
 8007efa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007f60 <_dtoa_r+0xb68>
 8007efe:	e007      	b.n	8007f10 <_dtoa_r+0xb18>
 8007f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007f64 <_dtoa_r+0xb6c>
 8007f06:	b11b      	cbz	r3, 8007f10 <_dtoa_r+0xb18>
 8007f08:	f10b 0308 	add.w	r3, fp, #8
 8007f0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	4658      	mov	r0, fp
 8007f12:	b017      	add	sp, #92	; 0x5c
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	9b06      	ldr	r3, [sp, #24]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	f77f ae35 	ble.w	8007b8a <_dtoa_r+0x792>
 8007f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f22:	9307      	str	r3, [sp, #28]
 8007f24:	e649      	b.n	8007bba <_dtoa_r+0x7c2>
 8007f26:	9b02      	ldr	r3, [sp, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dc03      	bgt.n	8007f34 <_dtoa_r+0xb3c>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	f73f aecc 	bgt.w	8007ccc <_dtoa_r+0x8d4>
 8007f34:	465d      	mov	r5, fp
 8007f36:	4639      	mov	r1, r7
 8007f38:	9804      	ldr	r0, [sp, #16]
 8007f3a:	f7ff f9cf 	bl	80072dc <quorem>
 8007f3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f42:	f805 8b01 	strb.w	r8, [r5], #1
 8007f46:	9a02      	ldr	r2, [sp, #8]
 8007f48:	eba5 030b 	sub.w	r3, r5, fp
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	ddb0      	ble.n	8007eb2 <_dtoa_r+0xaba>
 8007f50:	2300      	movs	r3, #0
 8007f52:	220a      	movs	r2, #10
 8007f54:	9904      	ldr	r1, [sp, #16]
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 f861 	bl	800801e <__multadd>
 8007f5c:	9004      	str	r0, [sp, #16]
 8007f5e:	e7ea      	b.n	8007f36 <_dtoa_r+0xb3e>
 8007f60:	0800f194 	.word	0x0800f194
 8007f64:	0800f1b8 	.word	0x0800f1b8

08007f68 <_localeconv_r>:
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <_localeconv_r+0x14>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6a18      	ldr	r0, [r3, #32]
 8007f6e:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <_localeconv_r+0x18>)
 8007f70:	2800      	cmp	r0, #0
 8007f72:	bf08      	it	eq
 8007f74:	4618      	moveq	r0, r3
 8007f76:	30f0      	adds	r0, #240	; 0xf0
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20001568 	.word	0x20001568
 8007f80:	200015cc 	.word	0x200015cc

08007f84 <__malloc_lock>:
 8007f84:	4770      	bx	lr

08007f86 <__malloc_unlock>:
 8007f86:	4770      	bx	lr

08007f88 <_Balloc>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	460e      	mov	r6, r1
 8007f90:	b93d      	cbnz	r5, 8007fa2 <_Balloc+0x1a>
 8007f92:	2010      	movs	r0, #16
 8007f94:	f7fe fc52 	bl	800683c <malloc>
 8007f98:	6260      	str	r0, [r4, #36]	; 0x24
 8007f9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f9e:	6005      	str	r5, [r0, #0]
 8007fa0:	60c5      	str	r5, [r0, #12]
 8007fa2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007fa4:	68eb      	ldr	r3, [r5, #12]
 8007fa6:	b183      	cbz	r3, 8007fca <_Balloc+0x42>
 8007fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007fb0:	b9b8      	cbnz	r0, 8007fe2 <_Balloc+0x5a>
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	fa01 f506 	lsl.w	r5, r1, r6
 8007fb8:	1d6a      	adds	r2, r5, #5
 8007fba:	0092      	lsls	r2, r2, #2
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f000 fabf 	bl	8008540 <_calloc_r>
 8007fc2:	b160      	cbz	r0, 8007fde <_Balloc+0x56>
 8007fc4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007fc8:	e00e      	b.n	8007fe8 <_Balloc+0x60>
 8007fca:	2221      	movs	r2, #33	; 0x21
 8007fcc:	2104      	movs	r1, #4
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 fab6 	bl	8008540 <_calloc_r>
 8007fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd6:	60e8      	str	r0, [r5, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e4      	bne.n	8007fa8 <_Balloc+0x20>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
 8007fe2:	6802      	ldr	r2, [r0, #0]
 8007fe4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fee:	e7f7      	b.n	8007fe0 <_Balloc+0x58>

08007ff0 <_Bfree>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	b93c      	cbnz	r4, 800800a <_Bfree+0x1a>
 8007ffa:	2010      	movs	r0, #16
 8007ffc:	f7fe fc1e 	bl	800683c <malloc>
 8008000:	6270      	str	r0, [r6, #36]	; 0x24
 8008002:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008006:	6004      	str	r4, [r0, #0]
 8008008:	60c4      	str	r4, [r0, #12]
 800800a:	b13d      	cbz	r5, 800801c <_Bfree+0x2c>
 800800c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800800e:	686a      	ldr	r2, [r5, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008016:	6029      	str	r1, [r5, #0]
 8008018:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800801c:	bd70      	pop	{r4, r5, r6, pc}

0800801e <__multadd>:
 800801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008022:	690d      	ldr	r5, [r1, #16]
 8008024:	461f      	mov	r7, r3
 8008026:	4606      	mov	r6, r0
 8008028:	460c      	mov	r4, r1
 800802a:	f101 0c14 	add.w	ip, r1, #20
 800802e:	2300      	movs	r3, #0
 8008030:	f8dc 0000 	ldr.w	r0, [ip]
 8008034:	b281      	uxth	r1, r0
 8008036:	fb02 7101 	mla	r1, r2, r1, r7
 800803a:	0c0f      	lsrs	r7, r1, #16
 800803c:	0c00      	lsrs	r0, r0, #16
 800803e:	fb02 7000 	mla	r0, r2, r0, r7
 8008042:	b289      	uxth	r1, r1
 8008044:	3301      	adds	r3, #1
 8008046:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800804a:	429d      	cmp	r5, r3
 800804c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008050:	f84c 1b04 	str.w	r1, [ip], #4
 8008054:	dcec      	bgt.n	8008030 <__multadd+0x12>
 8008056:	b1d7      	cbz	r7, 800808e <__multadd+0x70>
 8008058:	68a3      	ldr	r3, [r4, #8]
 800805a:	42ab      	cmp	r3, r5
 800805c:	dc12      	bgt.n	8008084 <__multadd+0x66>
 800805e:	6861      	ldr	r1, [r4, #4]
 8008060:	4630      	mov	r0, r6
 8008062:	3101      	adds	r1, #1
 8008064:	f7ff ff90 	bl	8007f88 <_Balloc>
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	3202      	adds	r2, #2
 800806c:	f104 010c 	add.w	r1, r4, #12
 8008070:	4680      	mov	r8, r0
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	300c      	adds	r0, #12
 8008076:	f7fe fbe9 	bl	800684c <memcpy>
 800807a:	4621      	mov	r1, r4
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff ffb7 	bl	8007ff0 <_Bfree>
 8008082:	4644      	mov	r4, r8
 8008084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008088:	3501      	adds	r5, #1
 800808a:	615f      	str	r7, [r3, #20]
 800808c:	6125      	str	r5, [r4, #16]
 800808e:	4620      	mov	r0, r4
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008094 <__hi0bits>:
 8008094:	0c02      	lsrs	r2, r0, #16
 8008096:	0412      	lsls	r2, r2, #16
 8008098:	4603      	mov	r3, r0
 800809a:	b9b2      	cbnz	r2, 80080ca <__hi0bits+0x36>
 800809c:	0403      	lsls	r3, r0, #16
 800809e:	2010      	movs	r0, #16
 80080a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80080a4:	bf04      	itt	eq
 80080a6:	021b      	lsleq	r3, r3, #8
 80080a8:	3008      	addeq	r0, #8
 80080aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80080ae:	bf04      	itt	eq
 80080b0:	011b      	lsleq	r3, r3, #4
 80080b2:	3004      	addeq	r0, #4
 80080b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80080b8:	bf04      	itt	eq
 80080ba:	009b      	lsleq	r3, r3, #2
 80080bc:	3002      	addeq	r0, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	db06      	blt.n	80080d0 <__hi0bits+0x3c>
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	d503      	bpl.n	80080ce <__hi0bits+0x3a>
 80080c6:	3001      	adds	r0, #1
 80080c8:	4770      	bx	lr
 80080ca:	2000      	movs	r0, #0
 80080cc:	e7e8      	b.n	80080a0 <__hi0bits+0xc>
 80080ce:	2020      	movs	r0, #32
 80080d0:	4770      	bx	lr

080080d2 <__lo0bits>:
 80080d2:	6803      	ldr	r3, [r0, #0]
 80080d4:	f013 0207 	ands.w	r2, r3, #7
 80080d8:	4601      	mov	r1, r0
 80080da:	d00b      	beq.n	80080f4 <__lo0bits+0x22>
 80080dc:	07da      	lsls	r2, r3, #31
 80080de:	d423      	bmi.n	8008128 <__lo0bits+0x56>
 80080e0:	0798      	lsls	r0, r3, #30
 80080e2:	bf49      	itett	mi
 80080e4:	085b      	lsrmi	r3, r3, #1
 80080e6:	089b      	lsrpl	r3, r3, #2
 80080e8:	2001      	movmi	r0, #1
 80080ea:	600b      	strmi	r3, [r1, #0]
 80080ec:	bf5c      	itt	pl
 80080ee:	600b      	strpl	r3, [r1, #0]
 80080f0:	2002      	movpl	r0, #2
 80080f2:	4770      	bx	lr
 80080f4:	b298      	uxth	r0, r3
 80080f6:	b9a8      	cbnz	r0, 8008124 <__lo0bits+0x52>
 80080f8:	0c1b      	lsrs	r3, r3, #16
 80080fa:	2010      	movs	r0, #16
 80080fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008100:	bf04      	itt	eq
 8008102:	0a1b      	lsreq	r3, r3, #8
 8008104:	3008      	addeq	r0, #8
 8008106:	071a      	lsls	r2, r3, #28
 8008108:	bf04      	itt	eq
 800810a:	091b      	lsreq	r3, r3, #4
 800810c:	3004      	addeq	r0, #4
 800810e:	079a      	lsls	r2, r3, #30
 8008110:	bf04      	itt	eq
 8008112:	089b      	lsreq	r3, r3, #2
 8008114:	3002      	addeq	r0, #2
 8008116:	07da      	lsls	r2, r3, #31
 8008118:	d402      	bmi.n	8008120 <__lo0bits+0x4e>
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	d006      	beq.n	800812c <__lo0bits+0x5a>
 800811e:	3001      	adds	r0, #1
 8008120:	600b      	str	r3, [r1, #0]
 8008122:	4770      	bx	lr
 8008124:	4610      	mov	r0, r2
 8008126:	e7e9      	b.n	80080fc <__lo0bits+0x2a>
 8008128:	2000      	movs	r0, #0
 800812a:	4770      	bx	lr
 800812c:	2020      	movs	r0, #32
 800812e:	4770      	bx	lr

08008130 <__i2b>:
 8008130:	b510      	push	{r4, lr}
 8008132:	460c      	mov	r4, r1
 8008134:	2101      	movs	r1, #1
 8008136:	f7ff ff27 	bl	8007f88 <_Balloc>
 800813a:	2201      	movs	r2, #1
 800813c:	6144      	str	r4, [r0, #20]
 800813e:	6102      	str	r2, [r0, #16]
 8008140:	bd10      	pop	{r4, pc}

08008142 <__multiply>:
 8008142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008146:	4614      	mov	r4, r2
 8008148:	690a      	ldr	r2, [r1, #16]
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	bfb8      	it	lt
 8008150:	460b      	movlt	r3, r1
 8008152:	4688      	mov	r8, r1
 8008154:	bfbc      	itt	lt
 8008156:	46a0      	movlt	r8, r4
 8008158:	461c      	movlt	r4, r3
 800815a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800815e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008166:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800816a:	eb07 0609 	add.w	r6, r7, r9
 800816e:	42b3      	cmp	r3, r6
 8008170:	bfb8      	it	lt
 8008172:	3101      	addlt	r1, #1
 8008174:	f7ff ff08 	bl	8007f88 <_Balloc>
 8008178:	f100 0514 	add.w	r5, r0, #20
 800817c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008180:	462b      	mov	r3, r5
 8008182:	2200      	movs	r2, #0
 8008184:	4573      	cmp	r3, lr
 8008186:	d316      	bcc.n	80081b6 <__multiply+0x74>
 8008188:	f104 0214 	add.w	r2, r4, #20
 800818c:	f108 0114 	add.w	r1, r8, #20
 8008190:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008194:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	9b00      	ldr	r3, [sp, #0]
 800819c:	9201      	str	r2, [sp, #4]
 800819e:	4293      	cmp	r3, r2
 80081a0:	d80c      	bhi.n	80081bc <__multiply+0x7a>
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	dd03      	ble.n	80081ae <__multiply+0x6c>
 80081a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d05d      	beq.n	800826a <__multiply+0x128>
 80081ae:	6106      	str	r6, [r0, #16]
 80081b0:	b003      	add	sp, #12
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	f843 2b04 	str.w	r2, [r3], #4
 80081ba:	e7e3      	b.n	8008184 <__multiply+0x42>
 80081bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80081c0:	f1bb 0f00 	cmp.w	fp, #0
 80081c4:	d023      	beq.n	800820e <__multiply+0xcc>
 80081c6:	4689      	mov	r9, r1
 80081c8:	46ac      	mov	ip, r5
 80081ca:	f04f 0800 	mov.w	r8, #0
 80081ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80081d2:	f8dc a000 	ldr.w	sl, [ip]
 80081d6:	b2a3      	uxth	r3, r4
 80081d8:	fa1f fa8a 	uxth.w	sl, sl
 80081dc:	fb0b a303 	mla	r3, fp, r3, sl
 80081e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80081e4:	f8dc 4000 	ldr.w	r4, [ip]
 80081e8:	4443      	add	r3, r8
 80081ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80081ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80081f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80081f6:	46e2      	mov	sl, ip
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081fe:	454f      	cmp	r7, r9
 8008200:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008204:	f84a 3b04 	str.w	r3, [sl], #4
 8008208:	d82b      	bhi.n	8008262 <__multiply+0x120>
 800820a:	f8cc 8004 	str.w	r8, [ip, #4]
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008214:	3204      	adds	r2, #4
 8008216:	f1ba 0f00 	cmp.w	sl, #0
 800821a:	d020      	beq.n	800825e <__multiply+0x11c>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	4689      	mov	r9, r1
 8008220:	46a8      	mov	r8, r5
 8008222:	f04f 0b00 	mov.w	fp, #0
 8008226:	f8b9 c000 	ldrh.w	ip, [r9]
 800822a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800822e:	fb0a 440c 	mla	r4, sl, ip, r4
 8008232:	445c      	add	r4, fp
 8008234:	46c4      	mov	ip, r8
 8008236:	b29b      	uxth	r3, r3
 8008238:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800823c:	f84c 3b04 	str.w	r3, [ip], #4
 8008240:	f859 3b04 	ldr.w	r3, [r9], #4
 8008244:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	fb0a b303 	mla	r3, sl, r3, fp
 800824e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008252:	454f      	cmp	r7, r9
 8008254:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008258:	d805      	bhi.n	8008266 <__multiply+0x124>
 800825a:	f8c8 3004 	str.w	r3, [r8, #4]
 800825e:	3504      	adds	r5, #4
 8008260:	e79b      	b.n	800819a <__multiply+0x58>
 8008262:	46d4      	mov	ip, sl
 8008264:	e7b3      	b.n	80081ce <__multiply+0x8c>
 8008266:	46e0      	mov	r8, ip
 8008268:	e7dd      	b.n	8008226 <__multiply+0xe4>
 800826a:	3e01      	subs	r6, #1
 800826c:	e799      	b.n	80081a2 <__multiply+0x60>
	...

08008270 <__pow5mult>:
 8008270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008274:	4615      	mov	r5, r2
 8008276:	f012 0203 	ands.w	r2, r2, #3
 800827a:	4606      	mov	r6, r0
 800827c:	460f      	mov	r7, r1
 800827e:	d007      	beq.n	8008290 <__pow5mult+0x20>
 8008280:	3a01      	subs	r2, #1
 8008282:	4c21      	ldr	r4, [pc, #132]	; (8008308 <__pow5mult+0x98>)
 8008284:	2300      	movs	r3, #0
 8008286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800828a:	f7ff fec8 	bl	800801e <__multadd>
 800828e:	4607      	mov	r7, r0
 8008290:	10ad      	asrs	r5, r5, #2
 8008292:	d035      	beq.n	8008300 <__pow5mult+0x90>
 8008294:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008296:	b93c      	cbnz	r4, 80082a8 <__pow5mult+0x38>
 8008298:	2010      	movs	r0, #16
 800829a:	f7fe facf 	bl	800683c <malloc>
 800829e:	6270      	str	r0, [r6, #36]	; 0x24
 80082a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a4:	6004      	str	r4, [r0, #0]
 80082a6:	60c4      	str	r4, [r0, #12]
 80082a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082b0:	b94c      	cbnz	r4, 80082c6 <__pow5mult+0x56>
 80082b2:	f240 2171 	movw	r1, #625	; 0x271
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff ff3a 	bl	8008130 <__i2b>
 80082bc:	2300      	movs	r3, #0
 80082be:	f8c8 0008 	str.w	r0, [r8, #8]
 80082c2:	4604      	mov	r4, r0
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	07eb      	lsls	r3, r5, #31
 80082cc:	d50a      	bpl.n	80082e4 <__pow5mult+0x74>
 80082ce:	4639      	mov	r1, r7
 80082d0:	4622      	mov	r2, r4
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff ff35 	bl	8008142 <__multiply>
 80082d8:	4639      	mov	r1, r7
 80082da:	4681      	mov	r9, r0
 80082dc:	4630      	mov	r0, r6
 80082de:	f7ff fe87 	bl	8007ff0 <_Bfree>
 80082e2:	464f      	mov	r7, r9
 80082e4:	106d      	asrs	r5, r5, #1
 80082e6:	d00b      	beq.n	8008300 <__pow5mult+0x90>
 80082e8:	6820      	ldr	r0, [r4, #0]
 80082ea:	b938      	cbnz	r0, 80082fc <__pow5mult+0x8c>
 80082ec:	4622      	mov	r2, r4
 80082ee:	4621      	mov	r1, r4
 80082f0:	4630      	mov	r0, r6
 80082f2:	f7ff ff26 	bl	8008142 <__multiply>
 80082f6:	6020      	str	r0, [r4, #0]
 80082f8:	f8c0 8000 	str.w	r8, [r0]
 80082fc:	4604      	mov	r4, r0
 80082fe:	e7e4      	b.n	80082ca <__pow5mult+0x5a>
 8008300:	4638      	mov	r0, r7
 8008302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008306:	bf00      	nop
 8008308:	0800f2b8 	.word	0x0800f2b8

0800830c <__lshift>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	460c      	mov	r4, r1
 8008312:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	6849      	ldr	r1, [r1, #4]
 800831a:	eb0a 0903 	add.w	r9, sl, r3
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	4607      	mov	r7, r0
 8008322:	4616      	mov	r6, r2
 8008324:	f109 0501 	add.w	r5, r9, #1
 8008328:	42ab      	cmp	r3, r5
 800832a:	db32      	blt.n	8008392 <__lshift+0x86>
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff fe2b 	bl	8007f88 <_Balloc>
 8008332:	2300      	movs	r3, #0
 8008334:	4680      	mov	r8, r0
 8008336:	f100 0114 	add.w	r1, r0, #20
 800833a:	461a      	mov	r2, r3
 800833c:	4553      	cmp	r3, sl
 800833e:	db2b      	blt.n	8008398 <__lshift+0x8c>
 8008340:	6920      	ldr	r0, [r4, #16]
 8008342:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008346:	f104 0314 	add.w	r3, r4, #20
 800834a:	f016 021f 	ands.w	r2, r6, #31
 800834e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008352:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008356:	d025      	beq.n	80083a4 <__lshift+0x98>
 8008358:	f1c2 0e20 	rsb	lr, r2, #32
 800835c:	2000      	movs	r0, #0
 800835e:	681e      	ldr	r6, [r3, #0]
 8008360:	468a      	mov	sl, r1
 8008362:	4096      	lsls	r6, r2
 8008364:	4330      	orrs	r0, r6
 8008366:	f84a 0b04 	str.w	r0, [sl], #4
 800836a:	f853 0b04 	ldr.w	r0, [r3], #4
 800836e:	459c      	cmp	ip, r3
 8008370:	fa20 f00e 	lsr.w	r0, r0, lr
 8008374:	d814      	bhi.n	80083a0 <__lshift+0x94>
 8008376:	6048      	str	r0, [r1, #4]
 8008378:	b108      	cbz	r0, 800837e <__lshift+0x72>
 800837a:	f109 0502 	add.w	r5, r9, #2
 800837e:	3d01      	subs	r5, #1
 8008380:	4638      	mov	r0, r7
 8008382:	f8c8 5010 	str.w	r5, [r8, #16]
 8008386:	4621      	mov	r1, r4
 8008388:	f7ff fe32 	bl	8007ff0 <_Bfree>
 800838c:	4640      	mov	r0, r8
 800838e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008392:	3101      	adds	r1, #1
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	e7c7      	b.n	8008328 <__lshift+0x1c>
 8008398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800839c:	3301      	adds	r3, #1
 800839e:	e7cd      	b.n	800833c <__lshift+0x30>
 80083a0:	4651      	mov	r1, sl
 80083a2:	e7dc      	b.n	800835e <__lshift+0x52>
 80083a4:	3904      	subs	r1, #4
 80083a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80083ae:	459c      	cmp	ip, r3
 80083b0:	d8f9      	bhi.n	80083a6 <__lshift+0x9a>
 80083b2:	e7e4      	b.n	800837e <__lshift+0x72>

080083b4 <__mcmp>:
 80083b4:	6903      	ldr	r3, [r0, #16]
 80083b6:	690a      	ldr	r2, [r1, #16]
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	b530      	push	{r4, r5, lr}
 80083bc:	d10c      	bne.n	80083d8 <__mcmp+0x24>
 80083be:	0092      	lsls	r2, r2, #2
 80083c0:	3014      	adds	r0, #20
 80083c2:	3114      	adds	r1, #20
 80083c4:	1884      	adds	r4, r0, r2
 80083c6:	4411      	add	r1, r2
 80083c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083d0:	4295      	cmp	r5, r2
 80083d2:	d003      	beq.n	80083dc <__mcmp+0x28>
 80083d4:	d305      	bcc.n	80083e2 <__mcmp+0x2e>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4618      	mov	r0, r3
 80083da:	bd30      	pop	{r4, r5, pc}
 80083dc:	42a0      	cmp	r0, r4
 80083de:	d3f3      	bcc.n	80083c8 <__mcmp+0x14>
 80083e0:	e7fa      	b.n	80083d8 <__mcmp+0x24>
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e6:	e7f7      	b.n	80083d8 <__mcmp+0x24>

080083e8 <__mdiff>:
 80083e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	460d      	mov	r5, r1
 80083ee:	4607      	mov	r7, r0
 80083f0:	4611      	mov	r1, r2
 80083f2:	4628      	mov	r0, r5
 80083f4:	4614      	mov	r4, r2
 80083f6:	f7ff ffdd 	bl	80083b4 <__mcmp>
 80083fa:	1e06      	subs	r6, r0, #0
 80083fc:	d108      	bne.n	8008410 <__mdiff+0x28>
 80083fe:	4631      	mov	r1, r6
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff fdc1 	bl	8007f88 <_Balloc>
 8008406:	2301      	movs	r3, #1
 8008408:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008410:	bfa4      	itt	ge
 8008412:	4623      	movge	r3, r4
 8008414:	462c      	movge	r4, r5
 8008416:	4638      	mov	r0, r7
 8008418:	6861      	ldr	r1, [r4, #4]
 800841a:	bfa6      	itte	ge
 800841c:	461d      	movge	r5, r3
 800841e:	2600      	movge	r6, #0
 8008420:	2601      	movlt	r6, #1
 8008422:	f7ff fdb1 	bl	8007f88 <_Balloc>
 8008426:	692b      	ldr	r3, [r5, #16]
 8008428:	60c6      	str	r6, [r0, #12]
 800842a:	6926      	ldr	r6, [r4, #16]
 800842c:	f105 0914 	add.w	r9, r5, #20
 8008430:	f104 0214 	add.w	r2, r4, #20
 8008434:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008438:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800843c:	f100 0514 	add.w	r5, r0, #20
 8008440:	f04f 0e00 	mov.w	lr, #0
 8008444:	f852 ab04 	ldr.w	sl, [r2], #4
 8008448:	f859 4b04 	ldr.w	r4, [r9], #4
 800844c:	fa1e f18a 	uxtah	r1, lr, sl
 8008450:	b2a3      	uxth	r3, r4
 8008452:	1ac9      	subs	r1, r1, r3
 8008454:	0c23      	lsrs	r3, r4, #16
 8008456:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800845a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800845e:	b289      	uxth	r1, r1
 8008460:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008464:	45c8      	cmp	r8, r9
 8008466:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800846a:	4694      	mov	ip, r2
 800846c:	f845 3b04 	str.w	r3, [r5], #4
 8008470:	d8e8      	bhi.n	8008444 <__mdiff+0x5c>
 8008472:	45bc      	cmp	ip, r7
 8008474:	d304      	bcc.n	8008480 <__mdiff+0x98>
 8008476:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800847a:	b183      	cbz	r3, 800849e <__mdiff+0xb6>
 800847c:	6106      	str	r6, [r0, #16]
 800847e:	e7c5      	b.n	800840c <__mdiff+0x24>
 8008480:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008484:	fa1e f381 	uxtah	r3, lr, r1
 8008488:	141a      	asrs	r2, r3, #16
 800848a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800848e:	b29b      	uxth	r3, r3
 8008490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008494:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008498:	f845 3b04 	str.w	r3, [r5], #4
 800849c:	e7e9      	b.n	8008472 <__mdiff+0x8a>
 800849e:	3e01      	subs	r6, #1
 80084a0:	e7e9      	b.n	8008476 <__mdiff+0x8e>

080084a2 <__d2b>:
 80084a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084a6:	460e      	mov	r6, r1
 80084a8:	2101      	movs	r1, #1
 80084aa:	ec59 8b10 	vmov	r8, r9, d0
 80084ae:	4615      	mov	r5, r2
 80084b0:	f7ff fd6a 	bl	8007f88 <_Balloc>
 80084b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084b8:	4607      	mov	r7, r0
 80084ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084be:	bb34      	cbnz	r4, 800850e <__d2b+0x6c>
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	f1b8 0300 	subs.w	r3, r8, #0
 80084c6:	d027      	beq.n	8008518 <__d2b+0x76>
 80084c8:	a802      	add	r0, sp, #8
 80084ca:	f840 3d08 	str.w	r3, [r0, #-8]!
 80084ce:	f7ff fe00 	bl	80080d2 <__lo0bits>
 80084d2:	9900      	ldr	r1, [sp, #0]
 80084d4:	b1f0      	cbz	r0, 8008514 <__d2b+0x72>
 80084d6:	9a01      	ldr	r2, [sp, #4]
 80084d8:	f1c0 0320 	rsb	r3, r0, #32
 80084dc:	fa02 f303 	lsl.w	r3, r2, r3
 80084e0:	430b      	orrs	r3, r1
 80084e2:	40c2      	lsrs	r2, r0
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	9201      	str	r2, [sp, #4]
 80084e8:	9b01      	ldr	r3, [sp, #4]
 80084ea:	61bb      	str	r3, [r7, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bf14      	ite	ne
 80084f0:	2102      	movne	r1, #2
 80084f2:	2101      	moveq	r1, #1
 80084f4:	6139      	str	r1, [r7, #16]
 80084f6:	b1c4      	cbz	r4, 800852a <__d2b+0x88>
 80084f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80084fc:	4404      	add	r4, r0
 80084fe:	6034      	str	r4, [r6, #0]
 8008500:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008504:	6028      	str	r0, [r5, #0]
 8008506:	4638      	mov	r0, r7
 8008508:	b003      	add	sp, #12
 800850a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800850e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008512:	e7d5      	b.n	80084c0 <__d2b+0x1e>
 8008514:	6179      	str	r1, [r7, #20]
 8008516:	e7e7      	b.n	80084e8 <__d2b+0x46>
 8008518:	a801      	add	r0, sp, #4
 800851a:	f7ff fdda 	bl	80080d2 <__lo0bits>
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	2101      	movs	r1, #1
 8008524:	6139      	str	r1, [r7, #16]
 8008526:	3020      	adds	r0, #32
 8008528:	e7e5      	b.n	80084f6 <__d2b+0x54>
 800852a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800852e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008532:	6030      	str	r0, [r6, #0]
 8008534:	6918      	ldr	r0, [r3, #16]
 8008536:	f7ff fdad 	bl	8008094 <__hi0bits>
 800853a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800853e:	e7e1      	b.n	8008504 <__d2b+0x62>

08008540 <_calloc_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	fb02 f401 	mul.w	r4, r2, r1
 8008546:	4621      	mov	r1, r4
 8008548:	f7fe f9e2 	bl	8006910 <_malloc_r>
 800854c:	4605      	mov	r5, r0
 800854e:	b118      	cbz	r0, 8008558 <_calloc_r+0x18>
 8008550:	4622      	mov	r2, r4
 8008552:	2100      	movs	r1, #0
 8008554:	f7fe f985 	bl	8006862 <memset>
 8008558:	4628      	mov	r0, r5
 800855a:	bd38      	pop	{r3, r4, r5, pc}

0800855c <_realloc_r>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	4607      	mov	r7, r0
 8008560:	4614      	mov	r4, r2
 8008562:	460e      	mov	r6, r1
 8008564:	b921      	cbnz	r1, 8008570 <_realloc_r+0x14>
 8008566:	4611      	mov	r1, r2
 8008568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800856c:	f7fe b9d0 	b.w	8006910 <_malloc_r>
 8008570:	b922      	cbnz	r2, 800857c <_realloc_r+0x20>
 8008572:	f7fe f97f 	bl	8006874 <_free_r>
 8008576:	4625      	mov	r5, r4
 8008578:	4628      	mov	r0, r5
 800857a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800857c:	f000 f991 	bl	80088a2 <_malloc_usable_size_r>
 8008580:	42a0      	cmp	r0, r4
 8008582:	d20f      	bcs.n	80085a4 <_realloc_r+0x48>
 8008584:	4621      	mov	r1, r4
 8008586:	4638      	mov	r0, r7
 8008588:	f7fe f9c2 	bl	8006910 <_malloc_r>
 800858c:	4605      	mov	r5, r0
 800858e:	2800      	cmp	r0, #0
 8008590:	d0f2      	beq.n	8008578 <_realloc_r+0x1c>
 8008592:	4631      	mov	r1, r6
 8008594:	4622      	mov	r2, r4
 8008596:	f7fe f959 	bl	800684c <memcpy>
 800859a:	4631      	mov	r1, r6
 800859c:	4638      	mov	r0, r7
 800859e:	f7fe f969 	bl	8006874 <_free_r>
 80085a2:	e7e9      	b.n	8008578 <_realloc_r+0x1c>
 80085a4:	4635      	mov	r5, r6
 80085a6:	e7e7      	b.n	8008578 <_realloc_r+0x1c>

080085a8 <__ssputs_r>:
 80085a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	688e      	ldr	r6, [r1, #8]
 80085ae:	429e      	cmp	r6, r3
 80085b0:	4682      	mov	sl, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4690      	mov	r8, r2
 80085b6:	4699      	mov	r9, r3
 80085b8:	d837      	bhi.n	800862a <__ssputs_r+0x82>
 80085ba:	898a      	ldrh	r2, [r1, #12]
 80085bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c0:	d031      	beq.n	8008626 <__ssputs_r+0x7e>
 80085c2:	6825      	ldr	r5, [r4, #0]
 80085c4:	6909      	ldr	r1, [r1, #16]
 80085c6:	1a6f      	subs	r7, r5, r1
 80085c8:	6965      	ldr	r5, [r4, #20]
 80085ca:	2302      	movs	r3, #2
 80085cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80085d4:	f109 0301 	add.w	r3, r9, #1
 80085d8:	443b      	add	r3, r7
 80085da:	429d      	cmp	r5, r3
 80085dc:	bf38      	it	cc
 80085de:	461d      	movcc	r5, r3
 80085e0:	0553      	lsls	r3, r2, #21
 80085e2:	d530      	bpl.n	8008646 <__ssputs_r+0x9e>
 80085e4:	4629      	mov	r1, r5
 80085e6:	f7fe f993 	bl	8006910 <_malloc_r>
 80085ea:	4606      	mov	r6, r0
 80085ec:	b950      	cbnz	r0, 8008604 <__ssputs_r+0x5c>
 80085ee:	230c      	movs	r3, #12
 80085f0:	f8ca 3000 	str.w	r3, [sl]
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008604:	463a      	mov	r2, r7
 8008606:	6921      	ldr	r1, [r4, #16]
 8008608:	f7fe f920 	bl	800684c <memcpy>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	6126      	str	r6, [r4, #16]
 800861a:	6165      	str	r5, [r4, #20]
 800861c:	443e      	add	r6, r7
 800861e:	1bed      	subs	r5, r5, r7
 8008620:	6026      	str	r6, [r4, #0]
 8008622:	60a5      	str	r5, [r4, #8]
 8008624:	464e      	mov	r6, r9
 8008626:	454e      	cmp	r6, r9
 8008628:	d900      	bls.n	800862c <__ssputs_r+0x84>
 800862a:	464e      	mov	r6, r9
 800862c:	4632      	mov	r2, r6
 800862e:	4641      	mov	r1, r8
 8008630:	6820      	ldr	r0, [r4, #0]
 8008632:	f000 f91d 	bl	8008870 <memmove>
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	1b9b      	subs	r3, r3, r6
 800863a:	60a3      	str	r3, [r4, #8]
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	441e      	add	r6, r3
 8008640:	6026      	str	r6, [r4, #0]
 8008642:	2000      	movs	r0, #0
 8008644:	e7dc      	b.n	8008600 <__ssputs_r+0x58>
 8008646:	462a      	mov	r2, r5
 8008648:	f7ff ff88 	bl	800855c <_realloc_r>
 800864c:	4606      	mov	r6, r0
 800864e:	2800      	cmp	r0, #0
 8008650:	d1e2      	bne.n	8008618 <__ssputs_r+0x70>
 8008652:	6921      	ldr	r1, [r4, #16]
 8008654:	4650      	mov	r0, sl
 8008656:	f7fe f90d 	bl	8006874 <_free_r>
 800865a:	e7c8      	b.n	80085ee <__ssputs_r+0x46>

0800865c <_svfiprintf_r>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	461d      	mov	r5, r3
 8008662:	898b      	ldrh	r3, [r1, #12]
 8008664:	061f      	lsls	r7, r3, #24
 8008666:	b09d      	sub	sp, #116	; 0x74
 8008668:	4680      	mov	r8, r0
 800866a:	460c      	mov	r4, r1
 800866c:	4616      	mov	r6, r2
 800866e:	d50f      	bpl.n	8008690 <_svfiprintf_r+0x34>
 8008670:	690b      	ldr	r3, [r1, #16]
 8008672:	b96b      	cbnz	r3, 8008690 <_svfiprintf_r+0x34>
 8008674:	2140      	movs	r1, #64	; 0x40
 8008676:	f7fe f94b 	bl	8006910 <_malloc_r>
 800867a:	6020      	str	r0, [r4, #0]
 800867c:	6120      	str	r0, [r4, #16]
 800867e:	b928      	cbnz	r0, 800868c <_svfiprintf_r+0x30>
 8008680:	230c      	movs	r3, #12
 8008682:	f8c8 3000 	str.w	r3, [r8]
 8008686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800868a:	e0c8      	b.n	800881e <_svfiprintf_r+0x1c2>
 800868c:	2340      	movs	r3, #64	; 0x40
 800868e:	6163      	str	r3, [r4, #20]
 8008690:	2300      	movs	r3, #0
 8008692:	9309      	str	r3, [sp, #36]	; 0x24
 8008694:	2320      	movs	r3, #32
 8008696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800869a:	2330      	movs	r3, #48	; 0x30
 800869c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a0:	9503      	str	r5, [sp, #12]
 80086a2:	f04f 0b01 	mov.w	fp, #1
 80086a6:	4637      	mov	r7, r6
 80086a8:	463d      	mov	r5, r7
 80086aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086ae:	b10b      	cbz	r3, 80086b4 <_svfiprintf_r+0x58>
 80086b0:	2b25      	cmp	r3, #37	; 0x25
 80086b2:	d13e      	bne.n	8008732 <_svfiprintf_r+0xd6>
 80086b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80086b8:	d00b      	beq.n	80086d2 <_svfiprintf_r+0x76>
 80086ba:	4653      	mov	r3, sl
 80086bc:	4632      	mov	r2, r6
 80086be:	4621      	mov	r1, r4
 80086c0:	4640      	mov	r0, r8
 80086c2:	f7ff ff71 	bl	80085a8 <__ssputs_r>
 80086c6:	3001      	adds	r0, #1
 80086c8:	f000 80a4 	beq.w	8008814 <_svfiprintf_r+0x1b8>
 80086cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ce:	4453      	add	r3, sl
 80086d0:	9309      	str	r3, [sp, #36]	; 0x24
 80086d2:	783b      	ldrb	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 809d 	beq.w	8008814 <_svfiprintf_r+0x1b8>
 80086da:	2300      	movs	r3, #0
 80086dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	9307      	str	r3, [sp, #28]
 80086e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ec:	931a      	str	r3, [sp, #104]	; 0x68
 80086ee:	462f      	mov	r7, r5
 80086f0:	2205      	movs	r2, #5
 80086f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80086f6:	4850      	ldr	r0, [pc, #320]	; (8008838 <_svfiprintf_r+0x1dc>)
 80086f8:	f7f7 fd4a 	bl	8000190 <memchr>
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	b9d0      	cbnz	r0, 8008736 <_svfiprintf_r+0xda>
 8008700:	06d9      	lsls	r1, r3, #27
 8008702:	bf44      	itt	mi
 8008704:	2220      	movmi	r2, #32
 8008706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800870a:	071a      	lsls	r2, r3, #28
 800870c:	bf44      	itt	mi
 800870e:	222b      	movmi	r2, #43	; 0x2b
 8008710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008714:	782a      	ldrb	r2, [r5, #0]
 8008716:	2a2a      	cmp	r2, #42	; 0x2a
 8008718:	d015      	beq.n	8008746 <_svfiprintf_r+0xea>
 800871a:	9a07      	ldr	r2, [sp, #28]
 800871c:	462f      	mov	r7, r5
 800871e:	2000      	movs	r0, #0
 8008720:	250a      	movs	r5, #10
 8008722:	4639      	mov	r1, r7
 8008724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008728:	3b30      	subs	r3, #48	; 0x30
 800872a:	2b09      	cmp	r3, #9
 800872c:	d94d      	bls.n	80087ca <_svfiprintf_r+0x16e>
 800872e:	b1b8      	cbz	r0, 8008760 <_svfiprintf_r+0x104>
 8008730:	e00f      	b.n	8008752 <_svfiprintf_r+0xf6>
 8008732:	462f      	mov	r7, r5
 8008734:	e7b8      	b.n	80086a8 <_svfiprintf_r+0x4c>
 8008736:	4a40      	ldr	r2, [pc, #256]	; (8008838 <_svfiprintf_r+0x1dc>)
 8008738:	1a80      	subs	r0, r0, r2
 800873a:	fa0b f000 	lsl.w	r0, fp, r0
 800873e:	4318      	orrs	r0, r3
 8008740:	9004      	str	r0, [sp, #16]
 8008742:	463d      	mov	r5, r7
 8008744:	e7d3      	b.n	80086ee <_svfiprintf_r+0x92>
 8008746:	9a03      	ldr	r2, [sp, #12]
 8008748:	1d11      	adds	r1, r2, #4
 800874a:	6812      	ldr	r2, [r2, #0]
 800874c:	9103      	str	r1, [sp, #12]
 800874e:	2a00      	cmp	r2, #0
 8008750:	db01      	blt.n	8008756 <_svfiprintf_r+0xfa>
 8008752:	9207      	str	r2, [sp, #28]
 8008754:	e004      	b.n	8008760 <_svfiprintf_r+0x104>
 8008756:	4252      	negs	r2, r2
 8008758:	f043 0302 	orr.w	r3, r3, #2
 800875c:	9207      	str	r2, [sp, #28]
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	783b      	ldrb	r3, [r7, #0]
 8008762:	2b2e      	cmp	r3, #46	; 0x2e
 8008764:	d10c      	bne.n	8008780 <_svfiprintf_r+0x124>
 8008766:	787b      	ldrb	r3, [r7, #1]
 8008768:	2b2a      	cmp	r3, #42	; 0x2a
 800876a:	d133      	bne.n	80087d4 <_svfiprintf_r+0x178>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	1d1a      	adds	r2, r3, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	9203      	str	r2, [sp, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	bfb8      	it	lt
 8008778:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800877c:	3702      	adds	r7, #2
 800877e:	9305      	str	r3, [sp, #20]
 8008780:	4d2e      	ldr	r5, [pc, #184]	; (800883c <_svfiprintf_r+0x1e0>)
 8008782:	7839      	ldrb	r1, [r7, #0]
 8008784:	2203      	movs	r2, #3
 8008786:	4628      	mov	r0, r5
 8008788:	f7f7 fd02 	bl	8000190 <memchr>
 800878c:	b138      	cbz	r0, 800879e <_svfiprintf_r+0x142>
 800878e:	2340      	movs	r3, #64	; 0x40
 8008790:	1b40      	subs	r0, r0, r5
 8008792:	fa03 f000 	lsl.w	r0, r3, r0
 8008796:	9b04      	ldr	r3, [sp, #16]
 8008798:	4303      	orrs	r3, r0
 800879a:	3701      	adds	r7, #1
 800879c:	9304      	str	r3, [sp, #16]
 800879e:	7839      	ldrb	r1, [r7, #0]
 80087a0:	4827      	ldr	r0, [pc, #156]	; (8008840 <_svfiprintf_r+0x1e4>)
 80087a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087a6:	2206      	movs	r2, #6
 80087a8:	1c7e      	adds	r6, r7, #1
 80087aa:	f7f7 fcf1 	bl	8000190 <memchr>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d038      	beq.n	8008824 <_svfiprintf_r+0x1c8>
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <_svfiprintf_r+0x1e8>)
 80087b4:	bb13      	cbnz	r3, 80087fc <_svfiprintf_r+0x1a0>
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	3307      	adds	r3, #7
 80087ba:	f023 0307 	bic.w	r3, r3, #7
 80087be:	3308      	adds	r3, #8
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c4:	444b      	add	r3, r9
 80087c6:	9309      	str	r3, [sp, #36]	; 0x24
 80087c8:	e76d      	b.n	80086a6 <_svfiprintf_r+0x4a>
 80087ca:	fb05 3202 	mla	r2, r5, r2, r3
 80087ce:	2001      	movs	r0, #1
 80087d0:	460f      	mov	r7, r1
 80087d2:	e7a6      	b.n	8008722 <_svfiprintf_r+0xc6>
 80087d4:	2300      	movs	r3, #0
 80087d6:	3701      	adds	r7, #1
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	4619      	mov	r1, r3
 80087dc:	250a      	movs	r5, #10
 80087de:	4638      	mov	r0, r7
 80087e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e4:	3a30      	subs	r2, #48	; 0x30
 80087e6:	2a09      	cmp	r2, #9
 80087e8:	d903      	bls.n	80087f2 <_svfiprintf_r+0x196>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0c8      	beq.n	8008780 <_svfiprintf_r+0x124>
 80087ee:	9105      	str	r1, [sp, #20]
 80087f0:	e7c6      	b.n	8008780 <_svfiprintf_r+0x124>
 80087f2:	fb05 2101 	mla	r1, r5, r1, r2
 80087f6:	2301      	movs	r3, #1
 80087f8:	4607      	mov	r7, r0
 80087fa:	e7f0      	b.n	80087de <_svfiprintf_r+0x182>
 80087fc:	ab03      	add	r3, sp, #12
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	4622      	mov	r2, r4
 8008802:	4b11      	ldr	r3, [pc, #68]	; (8008848 <_svfiprintf_r+0x1ec>)
 8008804:	a904      	add	r1, sp, #16
 8008806:	4640      	mov	r0, r8
 8008808:	f7fe f970 	bl	8006aec <_printf_float>
 800880c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008810:	4681      	mov	r9, r0
 8008812:	d1d6      	bne.n	80087c2 <_svfiprintf_r+0x166>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	065b      	lsls	r3, r3, #25
 8008818:	f53f af35 	bmi.w	8008686 <_svfiprintf_r+0x2a>
 800881c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800881e:	b01d      	add	sp, #116	; 0x74
 8008820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008824:	ab03      	add	r3, sp, #12
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4622      	mov	r2, r4
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <_svfiprintf_r+0x1ec>)
 800882c:	a904      	add	r1, sp, #16
 800882e:	4640      	mov	r0, r8
 8008830:	f7fe fc12 	bl	8007058 <_printf_i>
 8008834:	e7ea      	b.n	800880c <_svfiprintf_r+0x1b0>
 8008836:	bf00      	nop
 8008838:	0800f2c4 	.word	0x0800f2c4
 800883c:	0800f2ca 	.word	0x0800f2ca
 8008840:	0800f2ce 	.word	0x0800f2ce
 8008844:	08006aed 	.word	0x08006aed
 8008848:	080085a9 	.word	0x080085a9

0800884c <__ascii_mbtowc>:
 800884c:	b082      	sub	sp, #8
 800884e:	b901      	cbnz	r1, 8008852 <__ascii_mbtowc+0x6>
 8008850:	a901      	add	r1, sp, #4
 8008852:	b142      	cbz	r2, 8008866 <__ascii_mbtowc+0x1a>
 8008854:	b14b      	cbz	r3, 800886a <__ascii_mbtowc+0x1e>
 8008856:	7813      	ldrb	r3, [r2, #0]
 8008858:	600b      	str	r3, [r1, #0]
 800885a:	7812      	ldrb	r2, [r2, #0]
 800885c:	1c10      	adds	r0, r2, #0
 800885e:	bf18      	it	ne
 8008860:	2001      	movne	r0, #1
 8008862:	b002      	add	sp, #8
 8008864:	4770      	bx	lr
 8008866:	4610      	mov	r0, r2
 8008868:	e7fb      	b.n	8008862 <__ascii_mbtowc+0x16>
 800886a:	f06f 0001 	mvn.w	r0, #1
 800886e:	e7f8      	b.n	8008862 <__ascii_mbtowc+0x16>

08008870 <memmove>:
 8008870:	4288      	cmp	r0, r1
 8008872:	b510      	push	{r4, lr}
 8008874:	eb01 0302 	add.w	r3, r1, r2
 8008878:	d807      	bhi.n	800888a <memmove+0x1a>
 800887a:	1e42      	subs	r2, r0, #1
 800887c:	4299      	cmp	r1, r3
 800887e:	d00a      	beq.n	8008896 <memmove+0x26>
 8008880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008884:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008888:	e7f8      	b.n	800887c <memmove+0xc>
 800888a:	4283      	cmp	r3, r0
 800888c:	d9f5      	bls.n	800887a <memmove+0xa>
 800888e:	1881      	adds	r1, r0, r2
 8008890:	1ad2      	subs	r2, r2, r3
 8008892:	42d3      	cmn	r3, r2
 8008894:	d100      	bne.n	8008898 <memmove+0x28>
 8008896:	bd10      	pop	{r4, pc}
 8008898:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800889c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088a0:	e7f7      	b.n	8008892 <memmove+0x22>

080088a2 <_malloc_usable_size_r>:
 80088a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a6:	1f18      	subs	r0, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfbc      	itt	lt
 80088ac:	580b      	ldrlt	r3, [r1, r0]
 80088ae:	18c0      	addlt	r0, r0, r3
 80088b0:	4770      	bx	lr

080088b2 <__ascii_wctomb>:
 80088b2:	b149      	cbz	r1, 80088c8 <__ascii_wctomb+0x16>
 80088b4:	2aff      	cmp	r2, #255	; 0xff
 80088b6:	bf85      	ittet	hi
 80088b8:	238a      	movhi	r3, #138	; 0x8a
 80088ba:	6003      	strhi	r3, [r0, #0]
 80088bc:	700a      	strbls	r2, [r1, #0]
 80088be:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80088c2:	bf98      	it	ls
 80088c4:	2001      	movls	r0, #1
 80088c6:	4770      	bx	lr
 80088c8:	4608      	mov	r0, r1
 80088ca:	4770      	bx	lr

080088cc <_init>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	bf00      	nop
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr

080088d8 <_fini>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	bf00      	nop
 80088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088de:	bc08      	pop	{r3}
 80088e0:	469e      	mov	lr, r3
 80088e2:	4770      	bx	lr
